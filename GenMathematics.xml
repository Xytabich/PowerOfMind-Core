<?xml version="1.0"?>
<doc>
    <assembly>
        <name>GenMathematics</name>
    </assembly>
    <members>
        <member name="T:GenMathematics.AxisAngleMath">
            <summary>
            Provides operations to work with the axis angle representation of rotation
            </summary>
        </member>
        <member name="M:GenMathematics.AxisAngleMath.FromTo(GenMathematics.Vectors.half3,GenMathematics.Vectors.half3)">
            <summary>
            Creates an axis-angle rotation from one direction to another
            </summary>
            <param name="from">Normalized direction vector from which the rotation is performed</param>
            <param name="to">Normalized vector in the direction of which the rotation is performed</param>
            <returns>The 'xyz' components represent the axis and the 'w' component represents the rotation angle in radians</returns>
        </member>
        <member name="M:GenMathematics.AxisAngleMath.FromTo(GenMathematics.Vectors.half3,GenMathematics.Vectors.half3,GenMathematics.Vectors.half3@,System.Half@)">
            <summary>
            Creates an axis-angle rotation from one direction to another
            </summary>
            <param name="from">Normalized direction vector from which the rotation is performed</param>
            <param name="to">Normalized vector in the direction of which the rotation is performed</param>
            <param name="axis">Rotation axis</param>
            <param name="angle">Rotation angle in radians</param>
        </member>
        <member name="M:GenMathematics.AxisAngleMath.SetRotation(GenMathematics.Vectors.half3,System.Half,GenMathematics.Matrices.half3x3@)">
            <summary>
            Inserts a 3x3 rotation matrix
            </summary>
            <param name="axis">Rotation axis</param>
            <param name="angle">Rotation angle in radians</param>
            <param name="matrix">The result of the operation</param>
        </member>
        <member name="M:GenMathematics.AxisAngleMath.SetRotationScale(GenMathematics.Vectors.half3,System.Half,System.Half,GenMathematics.Matrices.half3x3@)">
            <summary>
            Inserts a 3x3 rotation and scale matrix
            </summary>
            <param name="axis">Rotation axis</param>
            <param name="angle">Rotation angle in radians</param>
            <param name="scale">Scale applied to matrix</param>
            <param name="matrix">The result of the operation</param>
        </member>
        <member name="M:GenMathematics.AxisAngleMath.SetRotationScale(GenMathematics.Vectors.half3,System.Half,GenMathematics.Vectors.half3,GenMathematics.Matrices.half3x3@)">
            <summary>
            Inserts a 3x3 rotation and scale matrix
            </summary>
            <param name="axis">Rotation axis</param>
            <param name="angle">Rotation angle in radians</param>
            <param name="scale">Scale applied to matrix</param>
            <param name="matrix">The result of the operation</param>
        </member>
        <member name="M:GenMathematics.AxisAngleMath.SetRotation(GenMathematics.Vectors.half4,GenMathematics.Matrices.half3x3@)">
            <summary>
            Inserts a 3x3 rotation matrix
            </summary>
            <param name="rotation">The 'xyz' components represent the axis and the 'w' component represents the rotation angle in radians</param>
            <param name="matrix">The result of the operation</param>
        </member>
        <member name="M:GenMathematics.AxisAngleMath.SetRotationScale(GenMathematics.Vectors.half4,System.Half,GenMathematics.Matrices.half3x3@)">
            <summary>
            Inserts a 3x3 rotation and scale matrix
            </summary>
            <param name="rotation">The 'xyz' components represent the axis and the 'w' component represents the rotation angle in radians</param>
            <param name="scale">Scale applied to matrix</param>
            <param name="matrix">The result of the operation</param>
        </member>
        <member name="M:GenMathematics.AxisAngleMath.SetRotationScale(GenMathematics.Vectors.half4,GenMathematics.Vectors.half3,GenMathematics.Matrices.half3x3@)">
            <summary>
            Inserts a 3x3 rotation and scale matrix
            </summary>
            <param name="rotation">The 'xyz' components represent the axis and the 'w' component represents the rotation angle in radians</param>
            <param name="scale">Scale applied to matrix</param>
            <param name="matrix">The result of the operation</param>
        </member>
        <member name="M:GenMathematics.AxisAngleMath.SetRotation(GenMathematics.Vectors.half3,System.Half,GenMathematics.Matrices.half3x4@)">
            <summary>
            Inserts a 3x3 rotation matrix without changing other values
            </summary>
            <param name="axis">Rotation axis</param>
            <param name="angle">Rotation angle in radians</param>
            <param name="matrix">The result of the operation</param>
        </member>
        <member name="M:GenMathematics.AxisAngleMath.SetRotationScale(GenMathematics.Vectors.half3,System.Half,System.Half,GenMathematics.Matrices.half3x4@)">
            <summary>
            Inserts a 3x3 rotation and scale matrix without changing other values
            </summary>
            <param name="axis">Rotation axis</param>
            <param name="angle">Rotation angle in radians</param>
            <param name="scale">Scale applied to matrix</param>
            <param name="matrix">The result of the operation</param>
        </member>
        <member name="M:GenMathematics.AxisAngleMath.SetRotationScale(GenMathematics.Vectors.half3,System.Half,GenMathematics.Vectors.half3,GenMathematics.Matrices.half3x4@)">
            <summary>
            Inserts a 3x3 rotation and scale matrix without changing other values
            </summary>
            <param name="axis">Rotation axis</param>
            <param name="angle">Rotation angle in radians</param>
            <param name="scale">Scale applied to matrix</param>
            <param name="matrix">The result of the operation</param>
        </member>
        <member name="M:GenMathematics.AxisAngleMath.SetRotation(GenMathematics.Vectors.half4,GenMathematics.Matrices.half3x4@)">
            <summary>
            Inserts a 3x3 rotation matrix without changing other values
            </summary>
            <param name="rotation">The 'xyz' components represent the axis and the 'w' component represents the rotation angle in radians</param>
            <param name="matrix">The result of the operation</param>
        </member>
        <member name="M:GenMathematics.AxisAngleMath.SetRotationScale(GenMathematics.Vectors.half4,System.Half,GenMathematics.Matrices.half3x4@)">
            <summary>
            Inserts a 3x3 rotation and scale matrix without changing other values
            </summary>
            <param name="rotation">The 'xyz' components represent the axis and the 'w' component represents the rotation angle in radians</param>
            <param name="scale">Scale applied to matrix</param>
            <param name="matrix">The result of the operation</param>
        </member>
        <member name="M:GenMathematics.AxisAngleMath.SetRotationScale(GenMathematics.Vectors.half4,GenMathematics.Vectors.half3,GenMathematics.Matrices.half3x4@)">
            <summary>
            Inserts a 3x3 rotation and scale matrix without changing other values
            </summary>
            <param name="rotation">The 'xyz' components represent the axis and the 'w' component represents the rotation angle in radians</param>
            <param name="scale">Scale applied to matrix</param>
            <param name="matrix">The result of the operation</param>
        </member>
        <member name="M:GenMathematics.AxisAngleMath.SetRotation(GenMathematics.Vectors.half3,System.Half,GenMathematics.Matrices.half4x3@)">
            <summary>
            Inserts a 3x3 rotation matrix
            </summary>
            <param name="axis">Rotation axis</param>
            <param name="angle">Rotation angle in radians</param>
            <param name="matrix">The result of the operation</param>
        </member>
        <member name="M:GenMathematics.AxisAngleMath.SetRotationScale(GenMathematics.Vectors.half3,System.Half,System.Half,GenMathematics.Matrices.half4x3@)">
            <summary>
            Inserts a 3x3 rotation and scale matrix
            </summary>
            <param name="axis">Rotation axis</param>
            <param name="angle">Rotation angle in radians</param>
            <param name="scale">Scale applied to matrix</param>
            <param name="matrix">The result of the operation</param>
        </member>
        <member name="M:GenMathematics.AxisAngleMath.SetRotationScale(GenMathematics.Vectors.half3,System.Half,GenMathematics.Vectors.half3,GenMathematics.Matrices.half4x3@)">
            <summary>
            Inserts a 3x3 rotation and scale matrix
            </summary>
            <param name="axis">Rotation axis</param>
            <param name="angle">Rotation angle in radians</param>
            <param name="scale">Scale applied to matrix</param>
            <param name="matrix">The result of the operation</param>
        </member>
        <member name="M:GenMathematics.AxisAngleMath.SetRotation(GenMathematics.Vectors.half4,GenMathematics.Matrices.half4x3@)">
            <summary>
            Inserts a 3x3 rotation matrix
            </summary>
            <param name="rotation">The 'xyz' components represent the axis and the 'w' component represents the rotation angle in radians</param>
            <param name="matrix">The result of the operation</param>
        </member>
        <member name="M:GenMathematics.AxisAngleMath.SetRotationScale(GenMathematics.Vectors.half4,System.Half,GenMathematics.Matrices.half4x3@)">
            <summary>
            Inserts a 3x3 rotation and scale matrix
            </summary>
            <param name="rotation">The 'xyz' components represent the axis and the 'w' component represents the rotation angle in radians</param>
            <param name="scale">Scale applied to matrix</param>
            <param name="matrix">The result of the operation</param>
        </member>
        <member name="M:GenMathematics.AxisAngleMath.SetRotationScale(GenMathematics.Vectors.half4,GenMathematics.Vectors.half3,GenMathematics.Matrices.half4x3@)">
            <summary>
            Inserts a 3x3 rotation and scale matrix
            </summary>
            <param name="rotation">The 'xyz' components represent the axis and the 'w' component represents the rotation angle in radians</param>
            <param name="scale">Scale applied to matrix</param>
            <param name="matrix">The result of the operation</param>
        </member>
        <member name="M:GenMathematics.AxisAngleMath.SetRotation(GenMathematics.Vectors.half3,System.Half,GenMathematics.Matrices.half4x4@)">
            <summary>
            Inserts a 3x3 rotation matrix without changing other values
            </summary>
            <param name="axis">Rotation axis</param>
            <param name="angle">Rotation angle in radians</param>
            <param name="matrix">The result of the operation</param>
        </member>
        <member name="M:GenMathematics.AxisAngleMath.SetRotationScale(GenMathematics.Vectors.half3,System.Half,System.Half,GenMathematics.Matrices.half4x4@)">
            <summary>
            Inserts a 3x3 rotation and scale matrix without changing other values
            </summary>
            <param name="axis">Rotation axis</param>
            <param name="angle">Rotation angle in radians</param>
            <param name="scale">Scale applied to matrix</param>
            <param name="matrix">The result of the operation</param>
        </member>
        <member name="M:GenMathematics.AxisAngleMath.SetRotationScale(GenMathematics.Vectors.half3,System.Half,GenMathematics.Vectors.half3,GenMathematics.Matrices.half4x4@)">
            <summary>
            Inserts a 3x3 rotation and scale matrix without changing other values
            </summary>
            <param name="axis">Rotation axis</param>
            <param name="angle">Rotation angle in radians</param>
            <param name="scale">Scale applied to matrix</param>
            <param name="matrix">The result of the operation</param>
        </member>
        <member name="M:GenMathematics.AxisAngleMath.SetRotation(GenMathematics.Vectors.half4,GenMathematics.Matrices.half4x4@)">
            <summary>
            Inserts a 3x3 rotation matrix without changing other values
            </summary>
            <param name="rotation">The 'xyz' components represent the axis and the 'w' component represents the rotation angle in radians</param>
            <param name="matrix">The result of the operation</param>
        </member>
        <member name="M:GenMathematics.AxisAngleMath.SetRotationScale(GenMathematics.Vectors.half4,System.Half,GenMathematics.Matrices.half4x4@)">
            <summary>
            Inserts a 3x3 rotation and scale matrix without changing other values
            </summary>
            <param name="rotation">The 'xyz' components represent the axis and the 'w' component represents the rotation angle in radians</param>
            <param name="scale">Scale applied to matrix</param>
            <param name="matrix">The result of the operation</param>
        </member>
        <member name="M:GenMathematics.AxisAngleMath.SetRotationScale(GenMathematics.Vectors.half4,GenMathematics.Vectors.half3,GenMathematics.Matrices.half4x4@)">
            <summary>
            Inserts a 3x3 rotation and scale matrix without changing other values
            </summary>
            <param name="rotation">The 'xyz' components represent the axis and the 'w' component represents the rotation angle in radians</param>
            <param name="scale">Scale applied to matrix</param>
            <param name="matrix">The result of the operation</param>
        </member>
        <member name="M:GenMathematics.AxisAngleMath.FromTo(GenMathematics.Vectors.float3,GenMathematics.Vectors.float3)">
            <summary>
            Creates an axis-angle rotation from one direction to another
            </summary>
            <param name="from">Normalized direction vector from which the rotation is performed</param>
            <param name="to">Normalized vector in the direction of which the rotation is performed</param>
            <returns>The 'xyz' components represent the axis and the 'w' component represents the rotation angle in radians</returns>
        </member>
        <member name="M:GenMathematics.AxisAngleMath.FromTo(GenMathematics.Vectors.float3,GenMathematics.Vectors.float3,GenMathematics.Vectors.float3@,System.Single@)">
            <summary>
            Creates an axis-angle rotation from one direction to another
            </summary>
            <param name="from">Normalized direction vector from which the rotation is performed</param>
            <param name="to">Normalized vector in the direction of which the rotation is performed</param>
            <param name="axis">Rotation axis</param>
            <param name="angle">Rotation angle in radians</param>
        </member>
        <member name="M:GenMathematics.AxisAngleMath.SetRotation(GenMathematics.Vectors.float3@,System.Single,GenMathematics.Matrices.float3x3@)">
            <summary>
            Inserts a 3x3 rotation matrix
            </summary>
            <param name="axis">Rotation axis</param>
            <param name="angle">Rotation angle in radians</param>
            <param name="matrix">The result of the operation</param>
        </member>
        <member name="M:GenMathematics.AxisAngleMath.SetRotationScale(GenMathematics.Vectors.float3@,System.Single,System.Single,GenMathematics.Matrices.float3x3@)">
            <summary>
            Inserts a 3x3 rotation and scale matrix
            </summary>
            <param name="axis">Rotation axis</param>
            <param name="angle">Rotation angle in radians</param>
            <param name="scale">Scale applied to matrix</param>
            <param name="matrix">The result of the operation</param>
        </member>
        <member name="M:GenMathematics.AxisAngleMath.SetRotationScale(GenMathematics.Vectors.float3@,System.Single,GenMathematics.Vectors.float3@,GenMathematics.Matrices.float3x3@)">
            <summary>
            Inserts a 3x3 rotation and scale matrix
            </summary>
            <param name="axis">Rotation axis</param>
            <param name="angle">Rotation angle in radians</param>
            <param name="scale">Scale applied to matrix</param>
            <param name="matrix">The result of the operation</param>
        </member>
        <member name="M:GenMathematics.AxisAngleMath.SetRotation(GenMathematics.Vectors.float4@,GenMathematics.Matrices.float3x3@)">
            <summary>
            Inserts a 3x3 rotation matrix
            </summary>
            <param name="rotation">The 'xyz' components represent the axis and the 'w' component represents the rotation angle in radians</param>
            <param name="matrix">The result of the operation</param>
        </member>
        <member name="M:GenMathematics.AxisAngleMath.SetRotationScale(GenMathematics.Vectors.float4@,System.Single,GenMathematics.Matrices.float3x3@)">
            <summary>
            Inserts a 3x3 rotation and scale matrix
            </summary>
            <param name="rotation">The 'xyz' components represent the axis and the 'w' component represents the rotation angle in radians</param>
            <param name="scale">Scale applied to matrix</param>
            <param name="matrix">The result of the operation</param>
        </member>
        <member name="M:GenMathematics.AxisAngleMath.SetRotationScale(GenMathematics.Vectors.float4@,GenMathematics.Vectors.float3@,GenMathematics.Matrices.float3x3@)">
            <summary>
            Inserts a 3x3 rotation and scale matrix
            </summary>
            <param name="rotation">The 'xyz' components represent the axis and the 'w' component represents the rotation angle in radians</param>
            <param name="scale">Scale applied to matrix</param>
            <param name="matrix">The result of the operation</param>
        </member>
        <member name="M:GenMathematics.AxisAngleMath.SetRotation(GenMathematics.Vectors.float3@,System.Single,GenMathematics.Matrices.float3x4@)">
            <summary>
            Inserts a 3x3 rotation matrix without changing other values
            </summary>
            <param name="axis">Rotation axis</param>
            <param name="angle">Rotation angle in radians</param>
            <param name="matrix">The result of the operation</param>
        </member>
        <member name="M:GenMathematics.AxisAngleMath.SetRotationScale(GenMathematics.Vectors.float3@,System.Single,System.Single,GenMathematics.Matrices.float3x4@)">
            <summary>
            Inserts a 3x3 rotation and scale matrix without changing other values
            </summary>
            <param name="axis">Rotation axis</param>
            <param name="angle">Rotation angle in radians</param>
            <param name="scale">Scale applied to matrix</param>
            <param name="matrix">The result of the operation</param>
        </member>
        <member name="M:GenMathematics.AxisAngleMath.SetRotationScale(GenMathematics.Vectors.float3@,System.Single,GenMathematics.Vectors.float3@,GenMathematics.Matrices.float3x4@)">
            <summary>
            Inserts a 3x3 rotation and scale matrix without changing other values
            </summary>
            <param name="axis">Rotation axis</param>
            <param name="angle">Rotation angle in radians</param>
            <param name="scale">Scale applied to matrix</param>
            <param name="matrix">The result of the operation</param>
        </member>
        <member name="M:GenMathematics.AxisAngleMath.SetRotation(GenMathematics.Vectors.float4@,GenMathematics.Matrices.float3x4@)">
            <summary>
            Inserts a 3x3 rotation matrix without changing other values
            </summary>
            <param name="rotation">The 'xyz' components represent the axis and the 'w' component represents the rotation angle in radians</param>
            <param name="matrix">The result of the operation</param>
        </member>
        <member name="M:GenMathematics.AxisAngleMath.SetRotationScale(GenMathematics.Vectors.float4@,System.Single,GenMathematics.Matrices.float3x4@)">
            <summary>
            Inserts a 3x3 rotation and scale matrix without changing other values
            </summary>
            <param name="rotation">The 'xyz' components represent the axis and the 'w' component represents the rotation angle in radians</param>
            <param name="scale">Scale applied to matrix</param>
            <param name="matrix">The result of the operation</param>
        </member>
        <member name="M:GenMathematics.AxisAngleMath.SetRotationScale(GenMathematics.Vectors.float4@,GenMathematics.Vectors.float3@,GenMathematics.Matrices.float3x4@)">
            <summary>
            Inserts a 3x3 rotation and scale matrix without changing other values
            </summary>
            <param name="rotation">The 'xyz' components represent the axis and the 'w' component represents the rotation angle in radians</param>
            <param name="scale">Scale applied to matrix</param>
            <param name="matrix">The result of the operation</param>
        </member>
        <member name="M:GenMathematics.AxisAngleMath.SetRotation(GenMathematics.Vectors.float3@,System.Single,GenMathematics.Matrices.float4x3@)">
            <summary>
            Inserts a 3x3 rotation matrix
            </summary>
            <param name="axis">Rotation axis</param>
            <param name="angle">Rotation angle in radians</param>
            <param name="matrix">The result of the operation</param>
        </member>
        <member name="M:GenMathematics.AxisAngleMath.SetRotationScale(GenMathematics.Vectors.float3@,System.Single,System.Single,GenMathematics.Matrices.float4x3@)">
            <summary>
            Inserts a 3x3 rotation and scale matrix
            </summary>
            <param name="axis">Rotation axis</param>
            <param name="angle">Rotation angle in radians</param>
            <param name="scale">Scale applied to matrix</param>
            <param name="matrix">The result of the operation</param>
        </member>
        <member name="M:GenMathematics.AxisAngleMath.SetRotationScale(GenMathematics.Vectors.float3@,System.Single,GenMathematics.Vectors.float3@,GenMathematics.Matrices.float4x3@)">
            <summary>
            Inserts a 3x3 rotation and scale matrix
            </summary>
            <param name="axis">Rotation axis</param>
            <param name="angle">Rotation angle in radians</param>
            <param name="scale">Scale applied to matrix</param>
            <param name="matrix">The result of the operation</param>
        </member>
        <member name="M:GenMathematics.AxisAngleMath.SetRotation(GenMathematics.Vectors.float4@,GenMathematics.Matrices.float4x3@)">
            <summary>
            Inserts a 3x3 rotation matrix
            </summary>
            <param name="rotation">The 'xyz' components represent the axis and the 'w' component represents the rotation angle in radians</param>
            <param name="matrix">The result of the operation</param>
        </member>
        <member name="M:GenMathematics.AxisAngleMath.SetRotationScale(GenMathematics.Vectors.float4@,System.Single,GenMathematics.Matrices.float4x3@)">
            <summary>
            Inserts a 3x3 rotation and scale matrix
            </summary>
            <param name="rotation">The 'xyz' components represent the axis and the 'w' component represents the rotation angle in radians</param>
            <param name="scale">Scale applied to matrix</param>
            <param name="matrix">The result of the operation</param>
        </member>
        <member name="M:GenMathematics.AxisAngleMath.SetRotationScale(GenMathematics.Vectors.float4@,GenMathematics.Vectors.float3@,GenMathematics.Matrices.float4x3@)">
            <summary>
            Inserts a 3x3 rotation and scale matrix
            </summary>
            <param name="rotation">The 'xyz' components represent the axis and the 'w' component represents the rotation angle in radians</param>
            <param name="scale">Scale applied to matrix</param>
            <param name="matrix">The result of the operation</param>
        </member>
        <member name="M:GenMathematics.AxisAngleMath.SetRotation(GenMathematics.Vectors.float3@,System.Single,GenMathematics.Matrices.float4x4@)">
            <summary>
            Inserts a 3x3 rotation matrix without changing other values
            </summary>
            <param name="axis">Rotation axis</param>
            <param name="angle">Rotation angle in radians</param>
            <param name="matrix">The result of the operation</param>
        </member>
        <member name="M:GenMathematics.AxisAngleMath.SetRotationScale(GenMathematics.Vectors.float3@,System.Single,System.Single,GenMathematics.Matrices.float4x4@)">
            <summary>
            Inserts a 3x3 rotation and scale matrix without changing other values
            </summary>
            <param name="axis">Rotation axis</param>
            <param name="angle">Rotation angle in radians</param>
            <param name="scale">Scale applied to matrix</param>
            <param name="matrix">The result of the operation</param>
        </member>
        <member name="M:GenMathematics.AxisAngleMath.SetRotationScale(GenMathematics.Vectors.float3@,System.Single,GenMathematics.Vectors.float3@,GenMathematics.Matrices.float4x4@)">
            <summary>
            Inserts a 3x3 rotation and scale matrix without changing other values
            </summary>
            <param name="axis">Rotation axis</param>
            <param name="angle">Rotation angle in radians</param>
            <param name="scale">Scale applied to matrix</param>
            <param name="matrix">The result of the operation</param>
        </member>
        <member name="M:GenMathematics.AxisAngleMath.SetRotation(GenMathematics.Vectors.float4@,GenMathematics.Matrices.float4x4@)">
            <summary>
            Inserts a 3x3 rotation matrix without changing other values
            </summary>
            <param name="rotation">The 'xyz' components represent the axis and the 'w' component represents the rotation angle in radians</param>
            <param name="matrix">The result of the operation</param>
        </member>
        <member name="M:GenMathematics.AxisAngleMath.SetRotationScale(GenMathematics.Vectors.float4@,System.Single,GenMathematics.Matrices.float4x4@)">
            <summary>
            Inserts a 3x3 rotation and scale matrix without changing other values
            </summary>
            <param name="rotation">The 'xyz' components represent the axis and the 'w' component represents the rotation angle in radians</param>
            <param name="scale">Scale applied to matrix</param>
            <param name="matrix">The result of the operation</param>
        </member>
        <member name="M:GenMathematics.AxisAngleMath.SetRotationScale(GenMathematics.Vectors.float4@,GenMathematics.Vectors.float3@,GenMathematics.Matrices.float4x4@)">
            <summary>
            Inserts a 3x3 rotation and scale matrix without changing other values
            </summary>
            <param name="rotation">The 'xyz' components represent the axis and the 'w' component represents the rotation angle in radians</param>
            <param name="scale">Scale applied to matrix</param>
            <param name="matrix">The result of the operation</param>
        </member>
        <member name="M:GenMathematics.AxisAngleMath.FromTo(GenMathematics.Vectors.float3@,GenMathematics.Vectors.float3@,GenMathematics.Vectors.float4@)">
            <summary>
            Creates an axis-angle rotation from one direction to another
            </summary>
            <param name="from">Normalized direction vector from which the rotation is performed</param>
            <param name="to">Normalized vector in the direction of which the rotation is performed</param>
            <param name="axisAngle">The 'xyz' components represent the axis and the 'w' component represents the rotation angle in radians</param>
        </member>
        <member name="M:GenMathematics.AxisAngleMath.FromToRef(GenMathematics.Vectors.float3@,GenMathematics.Vectors.float3@,GenMathematics.Vectors.float3@,System.Single@)">
            <summary>
            Creates an axis-angle rotation from one direction to another
            </summary>
            <param name="from">Normalized direction vector from which the rotation is performed</param>
            <param name="to">Normalized vector in the direction of which the rotation is performed</param>
            <param name="axis">Rotation axis</param>
            <param name="angle">Rotation angle in radians</param>
        </member>
        <member name="M:GenMathematics.AxisAngleMath.FromTo(GenMathematics.Vectors.double3,GenMathematics.Vectors.double3)">
            <summary>
            Creates an axis-angle rotation from one direction to another
            </summary>
            <param name="from">Normalized direction vector from which the rotation is performed</param>
            <param name="to">Normalized vector in the direction of which the rotation is performed</param>
            <returns>The 'xyz' components represent the axis and the 'w' component represents the rotation angle in radians</returns>
        </member>
        <member name="M:GenMathematics.AxisAngleMath.FromTo(GenMathematics.Vectors.double3,GenMathematics.Vectors.double3,GenMathematics.Vectors.double3@,System.Double@)">
            <summary>
            Creates an axis-angle rotation from one direction to another
            </summary>
            <param name="from">Normalized direction vector from which the rotation is performed</param>
            <param name="to">Normalized vector in the direction of which the rotation is performed</param>
            <param name="axis">Rotation axis</param>
            <param name="angle">Rotation angle in radians</param>
        </member>
        <member name="M:GenMathematics.AxisAngleMath.SetRotation(GenMathematics.Vectors.double3@,System.Double,GenMathematics.Matrices.double3x3@)">
            <summary>
            Inserts a 3x3 rotation matrix
            </summary>
            <param name="axis">Rotation axis</param>
            <param name="angle">Rotation angle in radians</param>
            <param name="matrix">The result of the operation</param>
        </member>
        <member name="M:GenMathematics.AxisAngleMath.SetRotationScale(GenMathematics.Vectors.double3@,System.Double,System.Double,GenMathematics.Matrices.double3x3@)">
            <summary>
            Inserts a 3x3 rotation and scale matrix
            </summary>
            <param name="axis">Rotation axis</param>
            <param name="angle">Rotation angle in radians</param>
            <param name="scale">Scale applied to matrix</param>
            <param name="matrix">The result of the operation</param>
        </member>
        <member name="M:GenMathematics.AxisAngleMath.SetRotationScale(GenMathematics.Vectors.double3@,System.Double,GenMathematics.Vectors.double3@,GenMathematics.Matrices.double3x3@)">
            <summary>
            Inserts a 3x3 rotation and scale matrix
            </summary>
            <param name="axis">Rotation axis</param>
            <param name="angle">Rotation angle in radians</param>
            <param name="scale">Scale applied to matrix</param>
            <param name="matrix">The result of the operation</param>
        </member>
        <member name="M:GenMathematics.AxisAngleMath.SetRotation(GenMathematics.Vectors.double4@,GenMathematics.Matrices.double3x3@)">
            <summary>
            Inserts a 3x3 rotation matrix
            </summary>
            <param name="rotation">The 'xyz' components represent the axis and the 'w' component represents the rotation angle in radians</param>
            <param name="matrix">The result of the operation</param>
        </member>
        <member name="M:GenMathematics.AxisAngleMath.SetRotationScale(GenMathematics.Vectors.double4@,System.Double,GenMathematics.Matrices.double3x3@)">
            <summary>
            Inserts a 3x3 rotation and scale matrix
            </summary>
            <param name="rotation">The 'xyz' components represent the axis and the 'w' component represents the rotation angle in radians</param>
            <param name="scale">Scale applied to matrix</param>
            <param name="matrix">The result of the operation</param>
        </member>
        <member name="M:GenMathematics.AxisAngleMath.SetRotationScale(GenMathematics.Vectors.double4@,GenMathematics.Vectors.double3@,GenMathematics.Matrices.double3x3@)">
            <summary>
            Inserts a 3x3 rotation and scale matrix
            </summary>
            <param name="rotation">The 'xyz' components represent the axis and the 'w' component represents the rotation angle in radians</param>
            <param name="scale">Scale applied to matrix</param>
            <param name="matrix">The result of the operation</param>
        </member>
        <member name="M:GenMathematics.AxisAngleMath.SetRotation(GenMathematics.Vectors.double3@,System.Double,GenMathematics.Matrices.double3x4@)">
            <summary>
            Inserts a 3x3 rotation matrix without changing other values
            </summary>
            <param name="axis">Rotation axis</param>
            <param name="angle">Rotation angle in radians</param>
            <param name="matrix">The result of the operation</param>
        </member>
        <member name="M:GenMathematics.AxisAngleMath.SetRotationScale(GenMathematics.Vectors.double3@,System.Double,System.Double,GenMathematics.Matrices.double3x4@)">
            <summary>
            Inserts a 3x3 rotation and scale matrix without changing other values
            </summary>
            <param name="axis">Rotation axis</param>
            <param name="angle">Rotation angle in radians</param>
            <param name="scale">Scale applied to matrix</param>
            <param name="matrix">The result of the operation</param>
        </member>
        <member name="M:GenMathematics.AxisAngleMath.SetRotationScale(GenMathematics.Vectors.double3@,System.Double,GenMathematics.Vectors.double3@,GenMathematics.Matrices.double3x4@)">
            <summary>
            Inserts a 3x3 rotation and scale matrix without changing other values
            </summary>
            <param name="axis">Rotation axis</param>
            <param name="angle">Rotation angle in radians</param>
            <param name="scale">Scale applied to matrix</param>
            <param name="matrix">The result of the operation</param>
        </member>
        <member name="M:GenMathematics.AxisAngleMath.SetRotation(GenMathematics.Vectors.double4@,GenMathematics.Matrices.double3x4@)">
            <summary>
            Inserts a 3x3 rotation matrix without changing other values
            </summary>
            <param name="rotation">The 'xyz' components represent the axis and the 'w' component represents the rotation angle in radians</param>
            <param name="matrix">The result of the operation</param>
        </member>
        <member name="M:GenMathematics.AxisAngleMath.SetRotationScale(GenMathematics.Vectors.double4@,System.Double,GenMathematics.Matrices.double3x4@)">
            <summary>
            Inserts a 3x3 rotation and scale matrix without changing other values
            </summary>
            <param name="rotation">The 'xyz' components represent the axis and the 'w' component represents the rotation angle in radians</param>
            <param name="scale">Scale applied to matrix</param>
            <param name="matrix">The result of the operation</param>
        </member>
        <member name="M:GenMathematics.AxisAngleMath.SetRotationScale(GenMathematics.Vectors.double4@,GenMathematics.Vectors.double3@,GenMathematics.Matrices.double3x4@)">
            <summary>
            Inserts a 3x3 rotation and scale matrix without changing other values
            </summary>
            <param name="rotation">The 'xyz' components represent the axis and the 'w' component represents the rotation angle in radians</param>
            <param name="scale">Scale applied to matrix</param>
            <param name="matrix">The result of the operation</param>
        </member>
        <member name="M:GenMathematics.AxisAngleMath.SetRotation(GenMathematics.Vectors.double3@,System.Double,GenMathematics.Matrices.double4x3@)">
            <summary>
            Inserts a 3x3 rotation matrix
            </summary>
            <param name="axis">Rotation axis</param>
            <param name="angle">Rotation angle in radians</param>
            <param name="matrix">The result of the operation</param>
        </member>
        <member name="M:GenMathematics.AxisAngleMath.SetRotationScale(GenMathematics.Vectors.double3@,System.Double,System.Double,GenMathematics.Matrices.double4x3@)">
            <summary>
            Inserts a 3x3 rotation and scale matrix
            </summary>
            <param name="axis">Rotation axis</param>
            <param name="angle">Rotation angle in radians</param>
            <param name="scale">Scale applied to matrix</param>
            <param name="matrix">The result of the operation</param>
        </member>
        <member name="M:GenMathematics.AxisAngleMath.SetRotationScale(GenMathematics.Vectors.double3@,System.Double,GenMathematics.Vectors.double3@,GenMathematics.Matrices.double4x3@)">
            <summary>
            Inserts a 3x3 rotation and scale matrix
            </summary>
            <param name="axis">Rotation axis</param>
            <param name="angle">Rotation angle in radians</param>
            <param name="scale">Scale applied to matrix</param>
            <param name="matrix">The result of the operation</param>
        </member>
        <member name="M:GenMathematics.AxisAngleMath.SetRotation(GenMathematics.Vectors.double4@,GenMathematics.Matrices.double4x3@)">
            <summary>
            Inserts a 3x3 rotation matrix
            </summary>
            <param name="rotation">The 'xyz' components represent the axis and the 'w' component represents the rotation angle in radians</param>
            <param name="matrix">The result of the operation</param>
        </member>
        <member name="M:GenMathematics.AxisAngleMath.SetRotationScale(GenMathematics.Vectors.double4@,System.Double,GenMathematics.Matrices.double4x3@)">
            <summary>
            Inserts a 3x3 rotation and scale matrix
            </summary>
            <param name="rotation">The 'xyz' components represent the axis and the 'w' component represents the rotation angle in radians</param>
            <param name="scale">Scale applied to matrix</param>
            <param name="matrix">The result of the operation</param>
        </member>
        <member name="M:GenMathematics.AxisAngleMath.SetRotationScale(GenMathematics.Vectors.double4@,GenMathematics.Vectors.double3@,GenMathematics.Matrices.double4x3@)">
            <summary>
            Inserts a 3x3 rotation and scale matrix
            </summary>
            <param name="rotation">The 'xyz' components represent the axis and the 'w' component represents the rotation angle in radians</param>
            <param name="scale">Scale applied to matrix</param>
            <param name="matrix">The result of the operation</param>
        </member>
        <member name="M:GenMathematics.AxisAngleMath.SetRotation(GenMathematics.Vectors.double3@,System.Double,GenMathematics.Matrices.double4x4@)">
            <summary>
            Inserts a 3x3 rotation matrix without changing other values
            </summary>
            <param name="axis">Rotation axis</param>
            <param name="angle">Rotation angle in radians</param>
            <param name="matrix">The result of the operation</param>
        </member>
        <member name="M:GenMathematics.AxisAngleMath.SetRotationScale(GenMathematics.Vectors.double3@,System.Double,System.Double,GenMathematics.Matrices.double4x4@)">
            <summary>
            Inserts a 3x3 rotation and scale matrix without changing other values
            </summary>
            <param name="axis">Rotation axis</param>
            <param name="angle">Rotation angle in radians</param>
            <param name="scale">Scale applied to matrix</param>
            <param name="matrix">The result of the operation</param>
        </member>
        <member name="M:GenMathematics.AxisAngleMath.SetRotationScale(GenMathematics.Vectors.double3@,System.Double,GenMathematics.Vectors.double3@,GenMathematics.Matrices.double4x4@)">
            <summary>
            Inserts a 3x3 rotation and scale matrix without changing other values
            </summary>
            <param name="axis">Rotation axis</param>
            <param name="angle">Rotation angle in radians</param>
            <param name="scale">Scale applied to matrix</param>
            <param name="matrix">The result of the operation</param>
        </member>
        <member name="M:GenMathematics.AxisAngleMath.SetRotation(GenMathematics.Vectors.double4@,GenMathematics.Matrices.double4x4@)">
            <summary>
            Inserts a 3x3 rotation matrix without changing other values
            </summary>
            <param name="rotation">The 'xyz' components represent the axis and the 'w' component represents the rotation angle in radians</param>
            <param name="matrix">The result of the operation</param>
        </member>
        <member name="M:GenMathematics.AxisAngleMath.SetRotationScale(GenMathematics.Vectors.double4@,System.Double,GenMathematics.Matrices.double4x4@)">
            <summary>
            Inserts a 3x3 rotation and scale matrix without changing other values
            </summary>
            <param name="rotation">The 'xyz' components represent the axis and the 'w' component represents the rotation angle in radians</param>
            <param name="scale">Scale applied to matrix</param>
            <param name="matrix">The result of the operation</param>
        </member>
        <member name="M:GenMathematics.AxisAngleMath.SetRotationScale(GenMathematics.Vectors.double4@,GenMathematics.Vectors.double3@,GenMathematics.Matrices.double4x4@)">
            <summary>
            Inserts a 3x3 rotation and scale matrix without changing other values
            </summary>
            <param name="rotation">The 'xyz' components represent the axis and the 'w' component represents the rotation angle in radians</param>
            <param name="scale">Scale applied to matrix</param>
            <param name="matrix">The result of the operation</param>
        </member>
        <member name="M:GenMathematics.AxisAngleMath.FromTo(GenMathematics.Vectors.double3@,GenMathematics.Vectors.double3@,GenMathematics.Vectors.double4@)">
            <summary>
            Creates an axis-angle rotation from one direction to another
            </summary>
            <param name="from">Normalized direction vector from which the rotation is performed</param>
            <param name="to">Normalized vector in the direction of which the rotation is performed</param>
            <param name="axisAngle">The 'xyz' components represent the axis and the 'w' component represents the rotation angle in radians</param>
        </member>
        <member name="M:GenMathematics.AxisAngleMath.FromToRef(GenMathematics.Vectors.double3@,GenMathematics.Vectors.double3@,GenMathematics.Vectors.double3@,System.Double@)">
            <summary>
            Creates an axis-angle rotation from one direction to another
            </summary>
            <param name="from">Normalized direction vector from which the rotation is performed</param>
            <param name="to">Normalized vector in the direction of which the rotation is performed</param>
            <param name="axis">Rotation axis</param>
            <param name="angle">Rotation angle in radians</param>
        </member>
        <member name="T:GenMathematics.GenMath">
            <summary>
            Contains basic mathematical operations
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Clamp(System.Byte,System.Byte,System.Byte)">
            <summary>
            Limits the value between minimum and maximum
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Clamp(System.UInt16,System.UInt16,System.UInt16)">
            <summary>
            Limits the value between minimum and maximum
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Clamp(System.SByte,System.SByte,System.SByte)">
            <summary>
            Limits the value between minimum and maximum
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Clamp(System.Int16,System.Int16,System.Int16)">
            <summary>
            Limits the value between minimum and maximum
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Square(System.UInt32)">
            <summary>
            Squares a number
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.AbsDiff(System.UInt32,System.UInt32)">
            <summary>
            Returns the difference between two numbers as a positive number
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Ror(System.UInt32,System.Int32)">
            <summary>
            Circular shift right
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Rol(System.UInt32,System.Int32)">
            <summary>
            Circular shift left
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.NextPow2(System.UInt32)">
            <summary>
            Returns the smallest power of two greater than or equal to a value
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CountBits(System.UInt32)">
            <summary>
            Returns the number of 1 bits in a number
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Clamp(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Limits the value between minimum and maximum
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Square(System.UInt64)">
            <summary>
            Squares a number
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.AbsDiff(System.UInt64,System.UInt64)">
            <summary>
            Returns the difference between two numbers as a positive number
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Ror(System.UInt64,System.Int32)">
            <summary>
            Circular shift right
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Rol(System.UInt64,System.Int32)">
            <summary>
            Circular shift left
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.NextPow2(System.UInt64)">
            <summary>
            Returns the smallest power of two greater than or equal to a value
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CountBits(System.UInt64)">
            <summary>
            Returns the number of 1 bits in a number
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Clamp(System.UInt64,System.UInt64,System.UInt64)">
            <summary>
            Limits the value between minimum and maximum
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Square(System.Int32)">
            <summary>
            Squares a number
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.AbsDiff(System.Int32,System.Int32)">
            <summary>
            Returns the difference between two numbers as a positive number
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Ror(System.Int32,System.Int32)">
            <summary>
            Circular shift right
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Rol(System.Int32,System.Int32)">
            <summary>
            Circular shift left
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.NextPow2(System.Int32)">
            <summary>
            Returns the smallest power of two greater than or equal to a value
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CountBits(System.Int32)">
            <summary>
            Returns the number of 1 bits in a number
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Clamp(System.Int32,System.Int32,System.Int32)">
            <summary>
            Limits the value between minimum and maximum
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Square(System.Int64)">
            <summary>
            Squares a number
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.AbsDiff(System.Int64,System.Int64)">
            <summary>
            Returns the difference between two numbers as a positive number
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Ror(System.Int64,System.Int32)">
            <summary>
            Circular shift right
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Rol(System.Int64,System.Int32)">
            <summary>
            Circular shift left
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.NextPow2(System.Int64)">
            <summary>
            Returns the smallest power of two greater than or equal to a value
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CountBits(System.Int64)">
            <summary>
            Returns the number of 1 bits in a number
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Clamp(System.Int64,System.Int64,System.Int64)">
            <summary>
            Limits the value between minimum and maximum
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Square(System.Half)">
            <summary>
            Squares a number
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.AbsDiff(System.Half,System.Half)">
            <summary>
            Returns the difference between two numbers as a positive number
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Clamp(System.Half,System.Half,System.Half)">
            <summary>
            Limits the value between minimum and maximum
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Frac(System.Half)">
            <summary>
            Returns fractional part of value
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Reciprocal(System.Half)">
            <summary>
            Returns the reciprocal of the input
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.RSqrt(System.Half)">
            <summary>
            Returns the inverse square root of the value
            </summary>
        </member>
        <member name="F:GenMathematics.GenMath.HalfEpsilon">
            <summary>
            Threshold value by which division can no longer be performed
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.IsEpsilon(System.Half)">
            <summary>
            Returns <see langword="true"/> if the value is within the <see cref="F:GenMathematics.GenMath.HalfEpsilon"/>
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Square(System.Single)">
            <summary>
            Squares a number
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.AbsDiff(System.Single,System.Single)">
            <summary>
            Returns the difference between two numbers as a positive number
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Clamp(System.Single,System.Single,System.Single)">
            <summary>
            Limits the value between minimum and maximum
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Frac(System.Single)">
            <summary>
            Returns fractional part of value
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Reciprocal(System.Single)">
            <summary>
            Returns the reciprocal of the input
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.RSqrt(System.Single)">
            <summary>
            Returns the inverse square root of the value
            </summary>
        </member>
        <member name="F:GenMathematics.GenMath.FloatEpsilon">
            <summary>
            Threshold value by which division can no longer be performed
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.IsEpsilon(System.Single)">
            <summary>
            Returns <see langword="true"/> if the value is within the <see cref="F:GenMathematics.GenMath.FloatEpsilon"/>
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Square(System.Double)">
            <summary>
            Squares a number
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.AbsDiff(System.Double,System.Double)">
            <summary>
            Returns the difference between two numbers as a positive number
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Clamp(System.Double,System.Double,System.Double)">
            <summary>
            Limits the value between minimum and maximum
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Frac(System.Double)">
            <summary>
            Returns fractional part of value
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Reciprocal(System.Double)">
            <summary>
            Returns the reciprocal of the input
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.RSqrt(System.Double)">
            <summary>
            Returns the inverse square root of the value
            </summary>
        </member>
        <member name="F:GenMathematics.GenMath.DoubleEpsilon">
            <summary>
            Threshold value by which division can no longer be performed
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.IsEpsilon(System.Double)">
            <summary>
            Returns <see langword="true"/> if the value is within the <see cref="F:GenMathematics.GenMath.DoubleEpsilon"/>
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Identity(GenMathematics.Matrices.byte2x2@)">
            <summary>
            Initializes matrix as identity
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Identity(GenMathematics.Matrices.byte3x3@)">
            <summary>
            Initializes matrix as identity
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Identity(GenMathematics.Matrices.byte4x4@)">
            <summary>
            Initializes matrix as identity
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Identity(GenMathematics.Matrices.ushort2x2@)">
            <summary>
            Initializes matrix as identity
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Identity(GenMathematics.Matrices.ushort3x3@)">
            <summary>
            Initializes matrix as identity
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Identity(GenMathematics.Matrices.ushort4x4@)">
            <summary>
            Initializes matrix as identity
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Identity(GenMathematics.Matrices.sbyte2x2@)">
            <summary>
            Initializes matrix as identity
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Identity(GenMathematics.Matrices.sbyte3x3@)">
            <summary>
            Initializes matrix as identity
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Identity(GenMathematics.Matrices.sbyte4x4@)">
            <summary>
            Initializes matrix as identity
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Identity(GenMathematics.Matrices.short2x2@)">
            <summary>
            Initializes matrix as identity
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Identity(GenMathematics.Matrices.short3x3@)">
            <summary>
            Initializes matrix as identity
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Identity(GenMathematics.Matrices.short4x4@)">
            <summary>
            Initializes matrix as identity
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Identity(GenMathematics.Matrices.uint2x2@)">
            <summary>
            Initializes matrix as identity
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Identity(GenMathematics.Matrices.uint3x3@)">
            <summary>
            Initializes matrix as identity
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Identity(GenMathematics.Matrices.uint4x4@)">
            <summary>
            Initializes matrix as identity
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Identity(GenMathematics.Matrices.ulong2x2@)">
            <summary>
            Initializes matrix as identity
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Identity(GenMathematics.Matrices.ulong3x3@)">
            <summary>
            Initializes matrix as identity
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Identity(GenMathematics.Matrices.ulong4x4@)">
            <summary>
            Initializes matrix as identity
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Identity(GenMathematics.Matrices.int2x2@)">
            <summary>
            Initializes matrix as identity
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Identity(GenMathematics.Matrices.int3x3@)">
            <summary>
            Initializes matrix as identity
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Identity(GenMathematics.Matrices.int4x4@)">
            <summary>
            Initializes matrix as identity
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Identity(GenMathematics.Matrices.long2x2@)">
            <summary>
            Initializes matrix as identity
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Identity(GenMathematics.Matrices.long3x3@)">
            <summary>
            Initializes matrix as identity
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Identity(GenMathematics.Matrices.long4x4@)">
            <summary>
            Initializes matrix as identity
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Identity(GenMathematics.Matrices.half2x2@)">
            <summary>
            Initializes matrix as identity
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Identity(GenMathematics.Matrices.half3x3@)">
            <summary>
            Initializes matrix as identity
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Identity(GenMathematics.Matrices.half4x4@)">
            <summary>
            Initializes matrix as identity
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Identity(GenMathematics.Matrices.float2x2@)">
            <summary>
            Initializes matrix as identity
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Identity(GenMathematics.Matrices.float3x3@)">
            <summary>
            Initializes matrix as identity
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Identity(GenMathematics.Matrices.float4x4@)">
            <summary>
            Initializes matrix as identity
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Identity(GenMathematics.Matrices.double2x2@)">
            <summary>
            Initializes matrix as identity
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Identity(GenMathematics.Matrices.double3x3@)">
            <summary>
            Initializes matrix as identity
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Identity(GenMathematics.Matrices.double4x4@)">
            <summary>
            Initializes matrix as identity
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Transpose(GenMathematics.Matrices.byte2x2)">
            <summary>
            Transposes the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Transpose(GenMathematics.Matrices.byte2x3)">
            <summary>
            Transposes the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Transpose(GenMathematics.Matrices.byte2x4)">
            <summary>
            Transposes the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Transpose(GenMathematics.Matrices.byte3x2)">
            <summary>
            Transposes the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Transpose(GenMathematics.Matrices.byte3x3)">
            <summary>
            Transposes the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Transpose(GenMathematics.Matrices.byte3x3@,GenMathematics.Matrices.byte3x3@)">
            <summary>
            Transposes the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Transpose(GenMathematics.Matrices.byte3x4)">
            <summary>
            Transposes the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Transpose(GenMathematics.Matrices.byte3x4@,GenMathematics.Matrices.byte4x3@)">
            <summary>
            Transposes the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Transpose(GenMathematics.Matrices.byte4x2)">
            <summary>
            Transposes the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Transpose(GenMathematics.Matrices.byte4x3)">
            <summary>
            Transposes the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Transpose(GenMathematics.Matrices.byte4x3@,GenMathematics.Matrices.byte3x4@)">
            <summary>
            Transposes the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Transpose(GenMathematics.Matrices.byte4x4)">
            <summary>
            Transposes the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Transpose(GenMathematics.Matrices.byte4x4@,GenMathematics.Matrices.byte4x4@)">
            <summary>
            Transposes the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Transpose(GenMathematics.Matrices.ushort2x2)">
            <summary>
            Transposes the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Transpose(GenMathematics.Matrices.ushort2x3)">
            <summary>
            Transposes the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Transpose(GenMathematics.Matrices.ushort2x3@,GenMathematics.Matrices.ushort3x2@)">
            <summary>
            Transposes the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Transpose(GenMathematics.Matrices.ushort2x4)">
            <summary>
            Transposes the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Transpose(GenMathematics.Matrices.ushort2x4@,GenMathematics.Matrices.ushort4x2@)">
            <summary>
            Transposes the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Transpose(GenMathematics.Matrices.ushort3x2)">
            <summary>
            Transposes the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Transpose(GenMathematics.Matrices.ushort3x2@,GenMathematics.Matrices.ushort2x3@)">
            <summary>
            Transposes the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Transpose(GenMathematics.Matrices.ushort3x3)">
            <summary>
            Transposes the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Transpose(GenMathematics.Matrices.ushort3x3@,GenMathematics.Matrices.ushort3x3@)">
            <summary>
            Transposes the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Transpose(GenMathematics.Matrices.ushort3x4)">
            <summary>
            Transposes the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Transpose(GenMathematics.Matrices.ushort3x4@,GenMathematics.Matrices.ushort4x3@)">
            <summary>
            Transposes the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Transpose(GenMathematics.Matrices.ushort4x2)">
            <summary>
            Transposes the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Transpose(GenMathematics.Matrices.ushort4x2@,GenMathematics.Matrices.ushort2x4@)">
            <summary>
            Transposes the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Transpose(GenMathematics.Matrices.ushort4x3)">
            <summary>
            Transposes the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Transpose(GenMathematics.Matrices.ushort4x3@,GenMathematics.Matrices.ushort3x4@)">
            <summary>
            Transposes the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Transpose(GenMathematics.Matrices.ushort4x4)">
            <summary>
            Transposes the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Transpose(GenMathematics.Matrices.ushort4x4@,GenMathematics.Matrices.ushort4x4@)">
            <summary>
            Transposes the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Transpose(GenMathematics.Matrices.sbyte2x2)">
            <summary>
            Transposes the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Transpose(GenMathematics.Matrices.sbyte2x3)">
            <summary>
            Transposes the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Transpose(GenMathematics.Matrices.sbyte2x4)">
            <summary>
            Transposes the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Transpose(GenMathematics.Matrices.sbyte3x2)">
            <summary>
            Transposes the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Transpose(GenMathematics.Matrices.sbyte3x3)">
            <summary>
            Transposes the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Transpose(GenMathematics.Matrices.sbyte3x3@,GenMathematics.Matrices.sbyte3x3@)">
            <summary>
            Transposes the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Transpose(GenMathematics.Matrices.sbyte3x4)">
            <summary>
            Transposes the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Transpose(GenMathematics.Matrices.sbyte3x4@,GenMathematics.Matrices.sbyte4x3@)">
            <summary>
            Transposes the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Transpose(GenMathematics.Matrices.sbyte4x2)">
            <summary>
            Transposes the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Transpose(GenMathematics.Matrices.sbyte4x3)">
            <summary>
            Transposes the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Transpose(GenMathematics.Matrices.sbyte4x3@,GenMathematics.Matrices.sbyte3x4@)">
            <summary>
            Transposes the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Transpose(GenMathematics.Matrices.sbyte4x4)">
            <summary>
            Transposes the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Transpose(GenMathematics.Matrices.sbyte4x4@,GenMathematics.Matrices.sbyte4x4@)">
            <summary>
            Transposes the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Transpose(GenMathematics.Matrices.short2x2)">
            <summary>
            Transposes the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Transpose(GenMathematics.Matrices.short2x3)">
            <summary>
            Transposes the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Transpose(GenMathematics.Matrices.short2x3@,GenMathematics.Matrices.short3x2@)">
            <summary>
            Transposes the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Transpose(GenMathematics.Matrices.short2x4)">
            <summary>
            Transposes the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Transpose(GenMathematics.Matrices.short2x4@,GenMathematics.Matrices.short4x2@)">
            <summary>
            Transposes the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Transpose(GenMathematics.Matrices.short3x2)">
            <summary>
            Transposes the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Transpose(GenMathematics.Matrices.short3x2@,GenMathematics.Matrices.short2x3@)">
            <summary>
            Transposes the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Transpose(GenMathematics.Matrices.short3x3)">
            <summary>
            Transposes the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Transpose(GenMathematics.Matrices.short3x3@,GenMathematics.Matrices.short3x3@)">
            <summary>
            Transposes the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Transpose(GenMathematics.Matrices.short3x4)">
            <summary>
            Transposes the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Transpose(GenMathematics.Matrices.short3x4@,GenMathematics.Matrices.short4x3@)">
            <summary>
            Transposes the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Transpose(GenMathematics.Matrices.short4x2)">
            <summary>
            Transposes the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Transpose(GenMathematics.Matrices.short4x2@,GenMathematics.Matrices.short2x4@)">
            <summary>
            Transposes the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Transpose(GenMathematics.Matrices.short4x3)">
            <summary>
            Transposes the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Transpose(GenMathematics.Matrices.short4x3@,GenMathematics.Matrices.short3x4@)">
            <summary>
            Transposes the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Transpose(GenMathematics.Matrices.short4x4)">
            <summary>
            Transposes the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Transpose(GenMathematics.Matrices.short4x4@,GenMathematics.Matrices.short4x4@)">
            <summary>
            Transposes the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Transpose(GenMathematics.Matrices.bool2x2)">
            <summary>
            Transposes the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Transpose(GenMathematics.Matrices.bool2x2@,GenMathematics.Matrices.bool2x2@)">
            <summary>
            Transposes the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Transpose(GenMathematics.Matrices.bool2x3)">
            <summary>
            Transposes the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Transpose(GenMathematics.Matrices.bool2x3@,GenMathematics.Matrices.bool3x2@)">
            <summary>
            Transposes the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Transpose(GenMathematics.Matrices.bool2x4)">
            <summary>
            Transposes the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Transpose(GenMathematics.Matrices.bool2x4@,GenMathematics.Matrices.bool4x2@)">
            <summary>
            Transposes the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Transpose(GenMathematics.Matrices.bool3x2)">
            <summary>
            Transposes the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Transpose(GenMathematics.Matrices.bool3x2@,GenMathematics.Matrices.bool2x3@)">
            <summary>
            Transposes the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Transpose(GenMathematics.Matrices.bool3x3)">
            <summary>
            Transposes the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Transpose(GenMathematics.Matrices.bool3x3@,GenMathematics.Matrices.bool3x3@)">
            <summary>
            Transposes the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Transpose(GenMathematics.Matrices.bool3x4)">
            <summary>
            Transposes the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Transpose(GenMathematics.Matrices.bool3x4@,GenMathematics.Matrices.bool4x3@)">
            <summary>
            Transposes the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Transpose(GenMathematics.Matrices.bool4x2)">
            <summary>
            Transposes the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Transpose(GenMathematics.Matrices.bool4x2@,GenMathematics.Matrices.bool2x4@)">
            <summary>
            Transposes the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Transpose(GenMathematics.Matrices.bool4x3)">
            <summary>
            Transposes the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Transpose(GenMathematics.Matrices.bool4x3@,GenMathematics.Matrices.bool3x4@)">
            <summary>
            Transposes the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Transpose(GenMathematics.Matrices.bool4x4)">
            <summary>
            Transposes the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Transpose(GenMathematics.Matrices.bool4x4@,GenMathematics.Matrices.bool4x4@)">
            <summary>
            Transposes the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Transpose(GenMathematics.Matrices.uint2x2)">
            <summary>
            Transposes the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Transpose(GenMathematics.Matrices.uint2x2@,GenMathematics.Matrices.uint2x2@)">
            <summary>
            Transposes the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Transpose(GenMathematics.Matrices.uint2x3)">
            <summary>
            Transposes the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Transpose(GenMathematics.Matrices.uint2x3@,GenMathematics.Matrices.uint3x2@)">
            <summary>
            Transposes the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Transpose(GenMathematics.Matrices.uint2x4)">
            <summary>
            Transposes the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Transpose(GenMathematics.Matrices.uint2x4@,GenMathematics.Matrices.uint4x2@)">
            <summary>
            Transposes the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Transpose(GenMathematics.Matrices.uint3x2)">
            <summary>
            Transposes the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Transpose(GenMathematics.Matrices.uint3x2@,GenMathematics.Matrices.uint2x3@)">
            <summary>
            Transposes the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Transpose(GenMathematics.Matrices.uint3x3)">
            <summary>
            Transposes the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Transpose(GenMathematics.Matrices.uint3x3@,GenMathematics.Matrices.uint3x3@)">
            <summary>
            Transposes the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Transpose(GenMathematics.Matrices.uint3x4)">
            <summary>
            Transposes the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Transpose(GenMathematics.Matrices.uint3x4@,GenMathematics.Matrices.uint4x3@)">
            <summary>
            Transposes the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Transpose(GenMathematics.Matrices.uint4x2)">
            <summary>
            Transposes the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Transpose(GenMathematics.Matrices.uint4x2@,GenMathematics.Matrices.uint2x4@)">
            <summary>
            Transposes the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Transpose(GenMathematics.Matrices.uint4x3)">
            <summary>
            Transposes the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Transpose(GenMathematics.Matrices.uint4x3@,GenMathematics.Matrices.uint3x4@)">
            <summary>
            Transposes the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Transpose(GenMathematics.Matrices.uint4x4)">
            <summary>
            Transposes the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Transpose(GenMathematics.Matrices.uint4x4@,GenMathematics.Matrices.uint4x4@)">
            <summary>
            Transposes the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Transpose(GenMathematics.Matrices.ulong2x2)">
            <summary>
            Transposes the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Transpose(GenMathematics.Matrices.ulong2x2@,GenMathematics.Matrices.ulong2x2@)">
            <summary>
            Transposes the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Transpose(GenMathematics.Matrices.ulong2x3)">
            <summary>
            Transposes the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Transpose(GenMathematics.Matrices.ulong2x3@,GenMathematics.Matrices.ulong3x2@)">
            <summary>
            Transposes the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Transpose(GenMathematics.Matrices.ulong2x4)">
            <summary>
            Transposes the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Transpose(GenMathematics.Matrices.ulong2x4@,GenMathematics.Matrices.ulong4x2@)">
            <summary>
            Transposes the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Transpose(GenMathematics.Matrices.ulong3x2)">
            <summary>
            Transposes the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Transpose(GenMathematics.Matrices.ulong3x2@,GenMathematics.Matrices.ulong2x3@)">
            <summary>
            Transposes the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Transpose(GenMathematics.Matrices.ulong3x3)">
            <summary>
            Transposes the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Transpose(GenMathematics.Matrices.ulong3x3@,GenMathematics.Matrices.ulong3x3@)">
            <summary>
            Transposes the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Transpose(GenMathematics.Matrices.ulong3x4)">
            <summary>
            Transposes the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Transpose(GenMathematics.Matrices.ulong3x4@,GenMathematics.Matrices.ulong4x3@)">
            <summary>
            Transposes the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Transpose(GenMathematics.Matrices.ulong4x2)">
            <summary>
            Transposes the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Transpose(GenMathematics.Matrices.ulong4x2@,GenMathematics.Matrices.ulong2x4@)">
            <summary>
            Transposes the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Transpose(GenMathematics.Matrices.ulong4x3)">
            <summary>
            Transposes the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Transpose(GenMathematics.Matrices.ulong4x3@,GenMathematics.Matrices.ulong3x4@)">
            <summary>
            Transposes the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Transpose(GenMathematics.Matrices.ulong4x4)">
            <summary>
            Transposes the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Transpose(GenMathematics.Matrices.ulong4x4@,GenMathematics.Matrices.ulong4x4@)">
            <summary>
            Transposes the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Transpose(GenMathematics.Matrices.int2x2)">
            <summary>
            Transposes the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Transpose(GenMathematics.Matrices.int2x2@,GenMathematics.Matrices.int2x2@)">
            <summary>
            Transposes the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Transpose(GenMathematics.Matrices.int2x3)">
            <summary>
            Transposes the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Transpose(GenMathematics.Matrices.int2x3@,GenMathematics.Matrices.int3x2@)">
            <summary>
            Transposes the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Transpose(GenMathematics.Matrices.int2x4)">
            <summary>
            Transposes the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Transpose(GenMathematics.Matrices.int2x4@,GenMathematics.Matrices.int4x2@)">
            <summary>
            Transposes the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Transpose(GenMathematics.Matrices.int3x2)">
            <summary>
            Transposes the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Transpose(GenMathematics.Matrices.int3x2@,GenMathematics.Matrices.int2x3@)">
            <summary>
            Transposes the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Transpose(GenMathematics.Matrices.int3x3)">
            <summary>
            Transposes the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Transpose(GenMathematics.Matrices.int3x3@,GenMathematics.Matrices.int3x3@)">
            <summary>
            Transposes the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Transpose(GenMathematics.Matrices.int3x4)">
            <summary>
            Transposes the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Transpose(GenMathematics.Matrices.int3x4@,GenMathematics.Matrices.int4x3@)">
            <summary>
            Transposes the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Transpose(GenMathematics.Matrices.int4x2)">
            <summary>
            Transposes the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Transpose(GenMathematics.Matrices.int4x2@,GenMathematics.Matrices.int2x4@)">
            <summary>
            Transposes the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Transpose(GenMathematics.Matrices.int4x3)">
            <summary>
            Transposes the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Transpose(GenMathematics.Matrices.int4x3@,GenMathematics.Matrices.int3x4@)">
            <summary>
            Transposes the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Transpose(GenMathematics.Matrices.int4x4)">
            <summary>
            Transposes the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Transpose(GenMathematics.Matrices.int4x4@,GenMathematics.Matrices.int4x4@)">
            <summary>
            Transposes the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Transpose(GenMathematics.Matrices.long2x2)">
            <summary>
            Transposes the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Transpose(GenMathematics.Matrices.long2x2@,GenMathematics.Matrices.long2x2@)">
            <summary>
            Transposes the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Transpose(GenMathematics.Matrices.long2x3)">
            <summary>
            Transposes the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Transpose(GenMathematics.Matrices.long2x3@,GenMathematics.Matrices.long3x2@)">
            <summary>
            Transposes the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Transpose(GenMathematics.Matrices.long2x4)">
            <summary>
            Transposes the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Transpose(GenMathematics.Matrices.long2x4@,GenMathematics.Matrices.long4x2@)">
            <summary>
            Transposes the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Transpose(GenMathematics.Matrices.long3x2)">
            <summary>
            Transposes the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Transpose(GenMathematics.Matrices.long3x2@,GenMathematics.Matrices.long2x3@)">
            <summary>
            Transposes the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Transpose(GenMathematics.Matrices.long3x3)">
            <summary>
            Transposes the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Transpose(GenMathematics.Matrices.long3x3@,GenMathematics.Matrices.long3x3@)">
            <summary>
            Transposes the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Transpose(GenMathematics.Matrices.long3x4)">
            <summary>
            Transposes the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Transpose(GenMathematics.Matrices.long3x4@,GenMathematics.Matrices.long4x3@)">
            <summary>
            Transposes the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Transpose(GenMathematics.Matrices.long4x2)">
            <summary>
            Transposes the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Transpose(GenMathematics.Matrices.long4x2@,GenMathematics.Matrices.long2x4@)">
            <summary>
            Transposes the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Transpose(GenMathematics.Matrices.long4x3)">
            <summary>
            Transposes the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Transpose(GenMathematics.Matrices.long4x3@,GenMathematics.Matrices.long3x4@)">
            <summary>
            Transposes the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Transpose(GenMathematics.Matrices.long4x4)">
            <summary>
            Transposes the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Transpose(GenMathematics.Matrices.long4x4@,GenMathematics.Matrices.long4x4@)">
            <summary>
            Transposes the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Transpose(GenMathematics.Matrices.half2x2)">
            <summary>
            Transposes the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Transpose(GenMathematics.Matrices.half2x3)">
            <summary>
            Transposes the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Transpose(GenMathematics.Matrices.half2x3@,GenMathematics.Matrices.half3x2@)">
            <summary>
            Transposes the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Transpose(GenMathematics.Matrices.half2x4)">
            <summary>
            Transposes the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Transpose(GenMathematics.Matrices.half2x4@,GenMathematics.Matrices.half4x2@)">
            <summary>
            Transposes the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Transpose(GenMathematics.Matrices.half3x2)">
            <summary>
            Transposes the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Transpose(GenMathematics.Matrices.half3x2@,GenMathematics.Matrices.half2x3@)">
            <summary>
            Transposes the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Transpose(GenMathematics.Matrices.half3x3)">
            <summary>
            Transposes the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Transpose(GenMathematics.Matrices.half3x3@,GenMathematics.Matrices.half3x3@)">
            <summary>
            Transposes the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Transpose(GenMathematics.Matrices.half3x4)">
            <summary>
            Transposes the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Transpose(GenMathematics.Matrices.half3x4@,GenMathematics.Matrices.half4x3@)">
            <summary>
            Transposes the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Transpose(GenMathematics.Matrices.half4x2)">
            <summary>
            Transposes the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Transpose(GenMathematics.Matrices.half4x2@,GenMathematics.Matrices.half2x4@)">
            <summary>
            Transposes the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Transpose(GenMathematics.Matrices.half4x3)">
            <summary>
            Transposes the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Transpose(GenMathematics.Matrices.half4x3@,GenMathematics.Matrices.half3x4@)">
            <summary>
            Transposes the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Transpose(GenMathematics.Matrices.half4x4)">
            <summary>
            Transposes the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Transpose(GenMathematics.Matrices.half4x4@,GenMathematics.Matrices.half4x4@)">
            <summary>
            Transposes the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Transpose(GenMathematics.Matrices.float2x2)">
            <summary>
            Transposes the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Transpose(GenMathematics.Matrices.float2x2@,GenMathematics.Matrices.float2x2@)">
            <summary>
            Transposes the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Transpose(GenMathematics.Matrices.float2x3)">
            <summary>
            Transposes the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Transpose(GenMathematics.Matrices.float2x3@,GenMathematics.Matrices.float3x2@)">
            <summary>
            Transposes the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Transpose(GenMathematics.Matrices.float2x4)">
            <summary>
            Transposes the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Transpose(GenMathematics.Matrices.float2x4@,GenMathematics.Matrices.float4x2@)">
            <summary>
            Transposes the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Transpose(GenMathematics.Matrices.float3x2)">
            <summary>
            Transposes the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Transpose(GenMathematics.Matrices.float3x2@,GenMathematics.Matrices.float2x3@)">
            <summary>
            Transposes the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Transpose(GenMathematics.Matrices.float3x3)">
            <summary>
            Transposes the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Transpose(GenMathematics.Matrices.float3x3@,GenMathematics.Matrices.float3x3@)">
            <summary>
            Transposes the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Transpose(GenMathematics.Matrices.float3x4)">
            <summary>
            Transposes the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Transpose(GenMathematics.Matrices.float3x4@,GenMathematics.Matrices.float4x3@)">
            <summary>
            Transposes the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Transpose(GenMathematics.Matrices.float4x2)">
            <summary>
            Transposes the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Transpose(GenMathematics.Matrices.float4x2@,GenMathematics.Matrices.float2x4@)">
            <summary>
            Transposes the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Transpose(GenMathematics.Matrices.float4x3)">
            <summary>
            Transposes the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Transpose(GenMathematics.Matrices.float4x3@,GenMathematics.Matrices.float3x4@)">
            <summary>
            Transposes the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Transpose(GenMathematics.Matrices.float4x4)">
            <summary>
            Transposes the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Transpose(GenMathematics.Matrices.float4x4@,GenMathematics.Matrices.float4x4@)">
            <summary>
            Transposes the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Transpose(GenMathematics.Matrices.double2x2)">
            <summary>
            Transposes the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Transpose(GenMathematics.Matrices.double2x2@,GenMathematics.Matrices.double2x2@)">
            <summary>
            Transposes the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Transpose(GenMathematics.Matrices.double2x3)">
            <summary>
            Transposes the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Transpose(GenMathematics.Matrices.double2x3@,GenMathematics.Matrices.double3x2@)">
            <summary>
            Transposes the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Transpose(GenMathematics.Matrices.double2x4)">
            <summary>
            Transposes the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Transpose(GenMathematics.Matrices.double2x4@,GenMathematics.Matrices.double4x2@)">
            <summary>
            Transposes the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Transpose(GenMathematics.Matrices.double3x2)">
            <summary>
            Transposes the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Transpose(GenMathematics.Matrices.double3x2@,GenMathematics.Matrices.double2x3@)">
            <summary>
            Transposes the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Transpose(GenMathematics.Matrices.double3x3)">
            <summary>
            Transposes the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Transpose(GenMathematics.Matrices.double3x3@,GenMathematics.Matrices.double3x3@)">
            <summary>
            Transposes the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Transpose(GenMathematics.Matrices.double3x4)">
            <summary>
            Transposes the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Transpose(GenMathematics.Matrices.double3x4@,GenMathematics.Matrices.double4x3@)">
            <summary>
            Transposes the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Transpose(GenMathematics.Matrices.double4x2)">
            <summary>
            Transposes the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Transpose(GenMathematics.Matrices.double4x2@,GenMathematics.Matrices.double2x4@)">
            <summary>
            Transposes the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Transpose(GenMathematics.Matrices.double4x3)">
            <summary>
            Transposes the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Transpose(GenMathematics.Matrices.double4x3@,GenMathematics.Matrices.double3x4@)">
            <summary>
            Transposes the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Transpose(GenMathematics.Matrices.double4x4)">
            <summary>
            Transposes the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Transpose(GenMathematics.Matrices.double4x4@,GenMathematics.Matrices.double4x4@)">
            <summary>
            Transposes the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Vectors.uint2,GenMathematics.Matrices.uint2x2)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Vectors.uint2,GenMathematics.Matrices.uint2x2@,GenMathematics.Vectors.uint2@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Vectors.uint3,GenMathematics.Matrices.uint3x2)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Vectors.uint3@,GenMathematics.Matrices.uint3x2@,GenMathematics.Vectors.uint2@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Vectors.uint4,GenMathematics.Matrices.uint4x2)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Vectors.uint4@,GenMathematics.Matrices.uint4x2@,GenMathematics.Vectors.uint2@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Vectors.uint2,GenMathematics.Matrices.uint2x3)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Vectors.uint2,GenMathematics.Matrices.uint2x3@,GenMathematics.Vectors.uint3@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Vectors.uint3,GenMathematics.Matrices.uint3x3)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Vectors.uint3@,GenMathematics.Matrices.uint3x3@,GenMathematics.Vectors.uint3@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Vectors.uint4,GenMathematics.Matrices.uint4x3)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Vectors.uint4@,GenMathematics.Matrices.uint4x3@,GenMathematics.Vectors.uint3@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Vectors.uint2,GenMathematics.Matrices.uint2x4)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Vectors.uint2,GenMathematics.Matrices.uint2x4@,GenMathematics.Vectors.uint4@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Vectors.uint3,GenMathematics.Matrices.uint3x4)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Vectors.uint3@,GenMathematics.Matrices.uint3x4@,GenMathematics.Vectors.uint4@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Vectors.uint4,GenMathematics.Matrices.uint4x4)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Vectors.uint4@,GenMathematics.Matrices.uint4x4@,GenMathematics.Vectors.uint4@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.uint2x2,GenMathematics.Vectors.uint2)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.uint2x2@,GenMathematics.Vectors.uint2,GenMathematics.Vectors.uint2@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.uint2x3,GenMathematics.Vectors.uint3)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.uint2x3@,GenMathematics.Vectors.uint3@,GenMathematics.Vectors.uint2@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.uint2x4,GenMathematics.Vectors.uint4)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.uint2x4@,GenMathematics.Vectors.uint4@,GenMathematics.Vectors.uint2@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.uint2x2,GenMathematics.Matrices.uint2x2)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.uint2x2@,GenMathematics.Matrices.uint2x2@,GenMathematics.Matrices.uint2x2@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.uint2x3,GenMathematics.Matrices.uint3x2)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.uint2x3@,GenMathematics.Matrices.uint3x2@,GenMathematics.Matrices.uint2x2@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.uint2x4,GenMathematics.Matrices.uint4x2)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.uint2x4@,GenMathematics.Matrices.uint4x2@,GenMathematics.Matrices.uint2x2@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.uint2x2,GenMathematics.Matrices.uint2x3)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.uint2x2@,GenMathematics.Matrices.uint2x3@,GenMathematics.Matrices.uint2x3@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.uint2x3,GenMathematics.Matrices.uint3x3)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.uint2x3@,GenMathematics.Matrices.uint3x3@,GenMathematics.Matrices.uint2x3@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.uint2x4,GenMathematics.Matrices.uint4x3)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.uint2x4@,GenMathematics.Matrices.uint4x3@,GenMathematics.Matrices.uint2x3@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.uint2x2,GenMathematics.Matrices.uint2x4)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.uint2x2@,GenMathematics.Matrices.uint2x4@,GenMathematics.Matrices.uint2x4@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.uint2x3,GenMathematics.Matrices.uint3x4)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.uint2x3@,GenMathematics.Matrices.uint3x4@,GenMathematics.Matrices.uint2x4@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.uint2x4,GenMathematics.Matrices.uint4x4)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.uint2x4@,GenMathematics.Matrices.uint4x4@,GenMathematics.Matrices.uint2x4@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.uint3x2,GenMathematics.Vectors.uint2)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.uint3x2@,GenMathematics.Vectors.uint2,GenMathematics.Vectors.uint3@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.uint3x3,GenMathematics.Vectors.uint3)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.uint3x3@,GenMathematics.Vectors.uint3@,GenMathematics.Vectors.uint3@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.uint3x4,GenMathematics.Vectors.uint4)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.uint3x4@,GenMathematics.Vectors.uint4@,GenMathematics.Vectors.uint3@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.uint3x2,GenMathematics.Matrices.uint2x2)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.uint3x2@,GenMathematics.Matrices.uint2x2@,GenMathematics.Matrices.uint3x2@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.uint3x3,GenMathematics.Matrices.uint3x2)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.uint3x3@,GenMathematics.Matrices.uint3x2@,GenMathematics.Matrices.uint3x2@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.uint3x4,GenMathematics.Matrices.uint4x2)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.uint3x4@,GenMathematics.Matrices.uint4x2@,GenMathematics.Matrices.uint3x2@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.uint3x2,GenMathematics.Matrices.uint2x3)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.uint3x2@,GenMathematics.Matrices.uint2x3@,GenMathematics.Matrices.uint3x3@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.uint3x3,GenMathematics.Matrices.uint3x3)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.uint3x3@,GenMathematics.Matrices.uint3x3@,GenMathematics.Matrices.uint3x3@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.uint3x4,GenMathematics.Matrices.uint4x3)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.uint3x4@,GenMathematics.Matrices.uint4x3@,GenMathematics.Matrices.uint3x3@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.uint3x2,GenMathematics.Matrices.uint2x4)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.uint3x2@,GenMathematics.Matrices.uint2x4@,GenMathematics.Matrices.uint3x4@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.uint3x3,GenMathematics.Matrices.uint3x4)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.uint3x3@,GenMathematics.Matrices.uint3x4@,GenMathematics.Matrices.uint3x4@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.uint3x4,GenMathematics.Matrices.uint4x4)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.uint3x4@,GenMathematics.Matrices.uint4x4@,GenMathematics.Matrices.uint3x4@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.uint4x2,GenMathematics.Vectors.uint2)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.uint4x2@,GenMathematics.Vectors.uint2,GenMathematics.Vectors.uint4@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.uint4x3,GenMathematics.Vectors.uint3)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.uint4x3@,GenMathematics.Vectors.uint3@,GenMathematics.Vectors.uint4@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.uint4x4,GenMathematics.Vectors.uint4)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.uint4x4@,GenMathematics.Vectors.uint4@,GenMathematics.Vectors.uint4@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.uint4x2,GenMathematics.Matrices.uint2x2)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.uint4x2@,GenMathematics.Matrices.uint2x2@,GenMathematics.Matrices.uint4x2@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.uint4x3,GenMathematics.Matrices.uint3x2)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.uint4x3@,GenMathematics.Matrices.uint3x2@,GenMathematics.Matrices.uint4x2@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.uint4x4,GenMathematics.Matrices.uint4x2)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.uint4x4@,GenMathematics.Matrices.uint4x2@,GenMathematics.Matrices.uint4x2@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.uint4x2,GenMathematics.Matrices.uint2x3)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.uint4x2@,GenMathematics.Matrices.uint2x3@,GenMathematics.Matrices.uint4x3@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.uint4x3,GenMathematics.Matrices.uint3x3)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.uint4x3@,GenMathematics.Matrices.uint3x3@,GenMathematics.Matrices.uint4x3@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.uint4x4,GenMathematics.Matrices.uint4x3)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.uint4x4@,GenMathematics.Matrices.uint4x3@,GenMathematics.Matrices.uint4x3@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.uint4x2,GenMathematics.Matrices.uint2x4)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.uint4x2@,GenMathematics.Matrices.uint2x4@,GenMathematics.Matrices.uint4x4@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.uint4x3,GenMathematics.Matrices.uint3x4)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.uint4x3@,GenMathematics.Matrices.uint3x4@,GenMathematics.Matrices.uint4x4@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.uint4x4,GenMathematics.Matrices.uint4x4)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.uint4x4@,GenMathematics.Matrices.uint4x4@,GenMathematics.Matrices.uint4x4@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Vectors.ulong2,GenMathematics.Matrices.ulong2x2)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Vectors.ulong2@,GenMathematics.Matrices.ulong2x2@,GenMathematics.Vectors.ulong2@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Vectors.ulong3,GenMathematics.Matrices.ulong3x2)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Vectors.ulong3@,GenMathematics.Matrices.ulong3x2@,GenMathematics.Vectors.ulong2@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Vectors.ulong4,GenMathematics.Matrices.ulong4x2)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Vectors.ulong4@,GenMathematics.Matrices.ulong4x2@,GenMathematics.Vectors.ulong2@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Vectors.ulong2,GenMathematics.Matrices.ulong2x3)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Vectors.ulong2@,GenMathematics.Matrices.ulong2x3@,GenMathematics.Vectors.ulong3@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Vectors.ulong3,GenMathematics.Matrices.ulong3x3)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Vectors.ulong3@,GenMathematics.Matrices.ulong3x3@,GenMathematics.Vectors.ulong3@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Vectors.ulong4,GenMathematics.Matrices.ulong4x3)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Vectors.ulong4@,GenMathematics.Matrices.ulong4x3@,GenMathematics.Vectors.ulong3@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Vectors.ulong2,GenMathematics.Matrices.ulong2x4)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Vectors.ulong2@,GenMathematics.Matrices.ulong2x4@,GenMathematics.Vectors.ulong4@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Vectors.ulong3,GenMathematics.Matrices.ulong3x4)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Vectors.ulong3@,GenMathematics.Matrices.ulong3x4@,GenMathematics.Vectors.ulong4@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Vectors.ulong4,GenMathematics.Matrices.ulong4x4)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Vectors.ulong4@,GenMathematics.Matrices.ulong4x4@,GenMathematics.Vectors.ulong4@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.ulong2x2,GenMathematics.Vectors.ulong2)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.ulong2x2@,GenMathematics.Vectors.ulong2@,GenMathematics.Vectors.ulong2@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.ulong2x3,GenMathematics.Vectors.ulong3)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.ulong2x3@,GenMathematics.Vectors.ulong3@,GenMathematics.Vectors.ulong2@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.ulong2x4,GenMathematics.Vectors.ulong4)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.ulong2x4@,GenMathematics.Vectors.ulong4@,GenMathematics.Vectors.ulong2@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.ulong2x2,GenMathematics.Matrices.ulong2x2)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.ulong2x2@,GenMathematics.Matrices.ulong2x2@,GenMathematics.Matrices.ulong2x2@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.ulong2x3,GenMathematics.Matrices.ulong3x2)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.ulong2x3@,GenMathematics.Matrices.ulong3x2@,GenMathematics.Matrices.ulong2x2@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.ulong2x4,GenMathematics.Matrices.ulong4x2)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.ulong2x4@,GenMathematics.Matrices.ulong4x2@,GenMathematics.Matrices.ulong2x2@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.ulong2x2,GenMathematics.Matrices.ulong2x3)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.ulong2x2@,GenMathematics.Matrices.ulong2x3@,GenMathematics.Matrices.ulong2x3@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.ulong2x3,GenMathematics.Matrices.ulong3x3)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.ulong2x3@,GenMathematics.Matrices.ulong3x3@,GenMathematics.Matrices.ulong2x3@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.ulong2x4,GenMathematics.Matrices.ulong4x3)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.ulong2x4@,GenMathematics.Matrices.ulong4x3@,GenMathematics.Matrices.ulong2x3@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.ulong2x2,GenMathematics.Matrices.ulong2x4)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.ulong2x2@,GenMathematics.Matrices.ulong2x4@,GenMathematics.Matrices.ulong2x4@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.ulong2x3,GenMathematics.Matrices.ulong3x4)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.ulong2x3@,GenMathematics.Matrices.ulong3x4@,GenMathematics.Matrices.ulong2x4@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.ulong2x4,GenMathematics.Matrices.ulong4x4)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.ulong2x4@,GenMathematics.Matrices.ulong4x4@,GenMathematics.Matrices.ulong2x4@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.ulong3x2,GenMathematics.Vectors.ulong2)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.ulong3x2@,GenMathematics.Vectors.ulong2@,GenMathematics.Vectors.ulong3@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.ulong3x3,GenMathematics.Vectors.ulong3)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.ulong3x3@,GenMathematics.Vectors.ulong3@,GenMathematics.Vectors.ulong3@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.ulong3x4,GenMathematics.Vectors.ulong4)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.ulong3x4@,GenMathematics.Vectors.ulong4@,GenMathematics.Vectors.ulong3@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.ulong3x2,GenMathematics.Matrices.ulong2x2)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.ulong3x2@,GenMathematics.Matrices.ulong2x2@,GenMathematics.Matrices.ulong3x2@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.ulong3x3,GenMathematics.Matrices.ulong3x2)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.ulong3x3@,GenMathematics.Matrices.ulong3x2@,GenMathematics.Matrices.ulong3x2@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.ulong3x4,GenMathematics.Matrices.ulong4x2)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.ulong3x4@,GenMathematics.Matrices.ulong4x2@,GenMathematics.Matrices.ulong3x2@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.ulong3x2,GenMathematics.Matrices.ulong2x3)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.ulong3x2@,GenMathematics.Matrices.ulong2x3@,GenMathematics.Matrices.ulong3x3@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.ulong3x3,GenMathematics.Matrices.ulong3x3)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.ulong3x3@,GenMathematics.Matrices.ulong3x3@,GenMathematics.Matrices.ulong3x3@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.ulong3x4,GenMathematics.Matrices.ulong4x3)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.ulong3x4@,GenMathematics.Matrices.ulong4x3@,GenMathematics.Matrices.ulong3x3@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.ulong3x2,GenMathematics.Matrices.ulong2x4)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.ulong3x2@,GenMathematics.Matrices.ulong2x4@,GenMathematics.Matrices.ulong3x4@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.ulong3x3,GenMathematics.Matrices.ulong3x4)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.ulong3x3@,GenMathematics.Matrices.ulong3x4@,GenMathematics.Matrices.ulong3x4@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.ulong3x4,GenMathematics.Matrices.ulong4x4)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.ulong3x4@,GenMathematics.Matrices.ulong4x4@,GenMathematics.Matrices.ulong3x4@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.ulong4x2,GenMathematics.Vectors.ulong2)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.ulong4x2@,GenMathematics.Vectors.ulong2@,GenMathematics.Vectors.ulong4@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.ulong4x3,GenMathematics.Vectors.ulong3)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.ulong4x3@,GenMathematics.Vectors.ulong3@,GenMathematics.Vectors.ulong4@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.ulong4x4,GenMathematics.Vectors.ulong4)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.ulong4x4@,GenMathematics.Vectors.ulong4@,GenMathematics.Vectors.ulong4@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.ulong4x2,GenMathematics.Matrices.ulong2x2)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.ulong4x2@,GenMathematics.Matrices.ulong2x2@,GenMathematics.Matrices.ulong4x2@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.ulong4x3,GenMathematics.Matrices.ulong3x2)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.ulong4x3@,GenMathematics.Matrices.ulong3x2@,GenMathematics.Matrices.ulong4x2@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.ulong4x4,GenMathematics.Matrices.ulong4x2)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.ulong4x4@,GenMathematics.Matrices.ulong4x2@,GenMathematics.Matrices.ulong4x2@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.ulong4x2,GenMathematics.Matrices.ulong2x3)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.ulong4x2@,GenMathematics.Matrices.ulong2x3@,GenMathematics.Matrices.ulong4x3@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.ulong4x3,GenMathematics.Matrices.ulong3x3)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.ulong4x3@,GenMathematics.Matrices.ulong3x3@,GenMathematics.Matrices.ulong4x3@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.ulong4x4,GenMathematics.Matrices.ulong4x3)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.ulong4x4@,GenMathematics.Matrices.ulong4x3@,GenMathematics.Matrices.ulong4x3@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.ulong4x2,GenMathematics.Matrices.ulong2x4)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.ulong4x2@,GenMathematics.Matrices.ulong2x4@,GenMathematics.Matrices.ulong4x4@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.ulong4x3,GenMathematics.Matrices.ulong3x4)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.ulong4x3@,GenMathematics.Matrices.ulong3x4@,GenMathematics.Matrices.ulong4x4@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.ulong4x4,GenMathematics.Matrices.ulong4x4)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.ulong4x4@,GenMathematics.Matrices.ulong4x4@,GenMathematics.Matrices.ulong4x4@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Vectors.int2,GenMathematics.Matrices.int2x2)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Vectors.int2,GenMathematics.Matrices.int2x2@,GenMathematics.Vectors.int2@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Vectors.int3,GenMathematics.Matrices.int3x2)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Vectors.int3@,GenMathematics.Matrices.int3x2@,GenMathematics.Vectors.int2@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Vectors.int4,GenMathematics.Matrices.int4x2)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Vectors.int4@,GenMathematics.Matrices.int4x2@,GenMathematics.Vectors.int2@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Vectors.int2,GenMathematics.Matrices.int2x3)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Vectors.int2,GenMathematics.Matrices.int2x3@,GenMathematics.Vectors.int3@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Vectors.int3,GenMathematics.Matrices.int3x3)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Vectors.int3@,GenMathematics.Matrices.int3x3@,GenMathematics.Vectors.int3@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Vectors.int4,GenMathematics.Matrices.int4x3)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Vectors.int4@,GenMathematics.Matrices.int4x3@,GenMathematics.Vectors.int3@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Vectors.int2,GenMathematics.Matrices.int2x4)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Vectors.int2,GenMathematics.Matrices.int2x4@,GenMathematics.Vectors.int4@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Vectors.int3,GenMathematics.Matrices.int3x4)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Vectors.int3@,GenMathematics.Matrices.int3x4@,GenMathematics.Vectors.int4@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Vectors.int4,GenMathematics.Matrices.int4x4)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Vectors.int4@,GenMathematics.Matrices.int4x4@,GenMathematics.Vectors.int4@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.int2x2,GenMathematics.Vectors.int2)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.int2x2@,GenMathematics.Vectors.int2,GenMathematics.Vectors.int2@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.int2x3,GenMathematics.Vectors.int3)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.int2x3@,GenMathematics.Vectors.int3@,GenMathematics.Vectors.int2@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.int2x4,GenMathematics.Vectors.int4)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.int2x4@,GenMathematics.Vectors.int4@,GenMathematics.Vectors.int2@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.int2x2,GenMathematics.Matrices.int2x2)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.int2x2@,GenMathematics.Matrices.int2x2@,GenMathematics.Matrices.int2x2@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.int2x3,GenMathematics.Matrices.int3x2)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.int2x3@,GenMathematics.Matrices.int3x2@,GenMathematics.Matrices.int2x2@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.int2x4,GenMathematics.Matrices.int4x2)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.int2x4@,GenMathematics.Matrices.int4x2@,GenMathematics.Matrices.int2x2@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.int2x2,GenMathematics.Matrices.int2x3)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.int2x2@,GenMathematics.Matrices.int2x3@,GenMathematics.Matrices.int2x3@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.int2x3,GenMathematics.Matrices.int3x3)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.int2x3@,GenMathematics.Matrices.int3x3@,GenMathematics.Matrices.int2x3@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.int2x4,GenMathematics.Matrices.int4x3)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.int2x4@,GenMathematics.Matrices.int4x3@,GenMathematics.Matrices.int2x3@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.int2x2,GenMathematics.Matrices.int2x4)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.int2x2@,GenMathematics.Matrices.int2x4@,GenMathematics.Matrices.int2x4@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.int2x3,GenMathematics.Matrices.int3x4)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.int2x3@,GenMathematics.Matrices.int3x4@,GenMathematics.Matrices.int2x4@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.int2x4,GenMathematics.Matrices.int4x4)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.int2x4@,GenMathematics.Matrices.int4x4@,GenMathematics.Matrices.int2x4@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.int3x2,GenMathematics.Vectors.int2)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.int3x2@,GenMathematics.Vectors.int2,GenMathematics.Vectors.int3@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.int3x3,GenMathematics.Vectors.int3)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.int3x3@,GenMathematics.Vectors.int3@,GenMathematics.Vectors.int3@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.int3x4,GenMathematics.Vectors.int4)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.int3x4@,GenMathematics.Vectors.int4@,GenMathematics.Vectors.int3@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.int3x2,GenMathematics.Matrices.int2x2)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.int3x2@,GenMathematics.Matrices.int2x2@,GenMathematics.Matrices.int3x2@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.int3x3,GenMathematics.Matrices.int3x2)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.int3x3@,GenMathematics.Matrices.int3x2@,GenMathematics.Matrices.int3x2@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.int3x4,GenMathematics.Matrices.int4x2)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.int3x4@,GenMathematics.Matrices.int4x2@,GenMathematics.Matrices.int3x2@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.int3x2,GenMathematics.Matrices.int2x3)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.int3x2@,GenMathematics.Matrices.int2x3@,GenMathematics.Matrices.int3x3@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.int3x3,GenMathematics.Matrices.int3x3)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.int3x3@,GenMathematics.Matrices.int3x3@,GenMathematics.Matrices.int3x3@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.int3x4,GenMathematics.Matrices.int4x3)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.int3x4@,GenMathematics.Matrices.int4x3@,GenMathematics.Matrices.int3x3@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.int3x2,GenMathematics.Matrices.int2x4)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.int3x2@,GenMathematics.Matrices.int2x4@,GenMathematics.Matrices.int3x4@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.int3x3,GenMathematics.Matrices.int3x4)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.int3x3@,GenMathematics.Matrices.int3x4@,GenMathematics.Matrices.int3x4@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.int3x4,GenMathematics.Matrices.int4x4)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.int3x4@,GenMathematics.Matrices.int4x4@,GenMathematics.Matrices.int3x4@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.int4x2,GenMathematics.Vectors.int2)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.int4x2@,GenMathematics.Vectors.int2,GenMathematics.Vectors.int4@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.int4x3,GenMathematics.Vectors.int3)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.int4x3@,GenMathematics.Vectors.int3@,GenMathematics.Vectors.int4@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.int4x4,GenMathematics.Vectors.int4)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.int4x4@,GenMathematics.Vectors.int4@,GenMathematics.Vectors.int4@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.int4x2,GenMathematics.Matrices.int2x2)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.int4x2@,GenMathematics.Matrices.int2x2@,GenMathematics.Matrices.int4x2@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.int4x3,GenMathematics.Matrices.int3x2)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.int4x3@,GenMathematics.Matrices.int3x2@,GenMathematics.Matrices.int4x2@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.int4x4,GenMathematics.Matrices.int4x2)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.int4x4@,GenMathematics.Matrices.int4x2@,GenMathematics.Matrices.int4x2@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.int4x2,GenMathematics.Matrices.int2x3)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.int4x2@,GenMathematics.Matrices.int2x3@,GenMathematics.Matrices.int4x3@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.int4x3,GenMathematics.Matrices.int3x3)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.int4x3@,GenMathematics.Matrices.int3x3@,GenMathematics.Matrices.int4x3@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.int4x4,GenMathematics.Matrices.int4x3)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.int4x4@,GenMathematics.Matrices.int4x3@,GenMathematics.Matrices.int4x3@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.int4x2,GenMathematics.Matrices.int2x4)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.int4x2@,GenMathematics.Matrices.int2x4@,GenMathematics.Matrices.int4x4@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.int4x3,GenMathematics.Matrices.int3x4)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.int4x3@,GenMathematics.Matrices.int3x4@,GenMathematics.Matrices.int4x4@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.int4x4,GenMathematics.Matrices.int4x4)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.int4x4@,GenMathematics.Matrices.int4x4@,GenMathematics.Matrices.int4x4@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Vectors.long2,GenMathematics.Matrices.long2x2)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Vectors.long2@,GenMathematics.Matrices.long2x2@,GenMathematics.Vectors.long2@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Vectors.long3,GenMathematics.Matrices.long3x2)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Vectors.long3@,GenMathematics.Matrices.long3x2@,GenMathematics.Vectors.long2@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Vectors.long4,GenMathematics.Matrices.long4x2)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Vectors.long4@,GenMathematics.Matrices.long4x2@,GenMathematics.Vectors.long2@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Vectors.long2,GenMathematics.Matrices.long2x3)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Vectors.long2@,GenMathematics.Matrices.long2x3@,GenMathematics.Vectors.long3@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Vectors.long3,GenMathematics.Matrices.long3x3)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Vectors.long3@,GenMathematics.Matrices.long3x3@,GenMathematics.Vectors.long3@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Vectors.long4,GenMathematics.Matrices.long4x3)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Vectors.long4@,GenMathematics.Matrices.long4x3@,GenMathematics.Vectors.long3@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Vectors.long2,GenMathematics.Matrices.long2x4)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Vectors.long2@,GenMathematics.Matrices.long2x4@,GenMathematics.Vectors.long4@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Vectors.long3,GenMathematics.Matrices.long3x4)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Vectors.long3@,GenMathematics.Matrices.long3x4@,GenMathematics.Vectors.long4@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Vectors.long4,GenMathematics.Matrices.long4x4)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Vectors.long4@,GenMathematics.Matrices.long4x4@,GenMathematics.Vectors.long4@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.long2x2,GenMathematics.Vectors.long2)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.long2x2@,GenMathematics.Vectors.long2@,GenMathematics.Vectors.long2@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.long2x3,GenMathematics.Vectors.long3)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.long2x3@,GenMathematics.Vectors.long3@,GenMathematics.Vectors.long2@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.long2x4,GenMathematics.Vectors.long4)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.long2x4@,GenMathematics.Vectors.long4@,GenMathematics.Vectors.long2@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.long2x2,GenMathematics.Matrices.long2x2)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.long2x2@,GenMathematics.Matrices.long2x2@,GenMathematics.Matrices.long2x2@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.long2x3,GenMathematics.Matrices.long3x2)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.long2x3@,GenMathematics.Matrices.long3x2@,GenMathematics.Matrices.long2x2@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.long2x4,GenMathematics.Matrices.long4x2)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.long2x4@,GenMathematics.Matrices.long4x2@,GenMathematics.Matrices.long2x2@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.long2x2,GenMathematics.Matrices.long2x3)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.long2x2@,GenMathematics.Matrices.long2x3@,GenMathematics.Matrices.long2x3@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.long2x3,GenMathematics.Matrices.long3x3)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.long2x3@,GenMathematics.Matrices.long3x3@,GenMathematics.Matrices.long2x3@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.long2x4,GenMathematics.Matrices.long4x3)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.long2x4@,GenMathematics.Matrices.long4x3@,GenMathematics.Matrices.long2x3@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.long2x2,GenMathematics.Matrices.long2x4)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.long2x2@,GenMathematics.Matrices.long2x4@,GenMathematics.Matrices.long2x4@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.long2x3,GenMathematics.Matrices.long3x4)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.long2x3@,GenMathematics.Matrices.long3x4@,GenMathematics.Matrices.long2x4@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.long2x4,GenMathematics.Matrices.long4x4)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.long2x4@,GenMathematics.Matrices.long4x4@,GenMathematics.Matrices.long2x4@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.long3x2,GenMathematics.Vectors.long2)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.long3x2@,GenMathematics.Vectors.long2@,GenMathematics.Vectors.long3@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.long3x3,GenMathematics.Vectors.long3)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.long3x3@,GenMathematics.Vectors.long3@,GenMathematics.Vectors.long3@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.long3x4,GenMathematics.Vectors.long4)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.long3x4@,GenMathematics.Vectors.long4@,GenMathematics.Vectors.long3@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.long3x2,GenMathematics.Matrices.long2x2)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.long3x2@,GenMathematics.Matrices.long2x2@,GenMathematics.Matrices.long3x2@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.long3x3,GenMathematics.Matrices.long3x2)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.long3x3@,GenMathematics.Matrices.long3x2@,GenMathematics.Matrices.long3x2@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.long3x4,GenMathematics.Matrices.long4x2)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.long3x4@,GenMathematics.Matrices.long4x2@,GenMathematics.Matrices.long3x2@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.long3x2,GenMathematics.Matrices.long2x3)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.long3x2@,GenMathematics.Matrices.long2x3@,GenMathematics.Matrices.long3x3@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.long3x3,GenMathematics.Matrices.long3x3)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.long3x3@,GenMathematics.Matrices.long3x3@,GenMathematics.Matrices.long3x3@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.long3x4,GenMathematics.Matrices.long4x3)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.long3x4@,GenMathematics.Matrices.long4x3@,GenMathematics.Matrices.long3x3@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.long3x2,GenMathematics.Matrices.long2x4)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.long3x2@,GenMathematics.Matrices.long2x4@,GenMathematics.Matrices.long3x4@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.long3x3,GenMathematics.Matrices.long3x4)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.long3x3@,GenMathematics.Matrices.long3x4@,GenMathematics.Matrices.long3x4@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.long3x4,GenMathematics.Matrices.long4x4)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.long3x4@,GenMathematics.Matrices.long4x4@,GenMathematics.Matrices.long3x4@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.long4x2,GenMathematics.Vectors.long2)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.long4x2@,GenMathematics.Vectors.long2@,GenMathematics.Vectors.long4@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.long4x3,GenMathematics.Vectors.long3)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.long4x3@,GenMathematics.Vectors.long3@,GenMathematics.Vectors.long4@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.long4x4,GenMathematics.Vectors.long4)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.long4x4@,GenMathematics.Vectors.long4@,GenMathematics.Vectors.long4@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.long4x2,GenMathematics.Matrices.long2x2)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.long4x2@,GenMathematics.Matrices.long2x2@,GenMathematics.Matrices.long4x2@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.long4x3,GenMathematics.Matrices.long3x2)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.long4x3@,GenMathematics.Matrices.long3x2@,GenMathematics.Matrices.long4x2@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.long4x4,GenMathematics.Matrices.long4x2)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.long4x4@,GenMathematics.Matrices.long4x2@,GenMathematics.Matrices.long4x2@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.long4x2,GenMathematics.Matrices.long2x3)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.long4x2@,GenMathematics.Matrices.long2x3@,GenMathematics.Matrices.long4x3@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.long4x3,GenMathematics.Matrices.long3x3)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.long4x3@,GenMathematics.Matrices.long3x3@,GenMathematics.Matrices.long4x3@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.long4x4,GenMathematics.Matrices.long4x3)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.long4x4@,GenMathematics.Matrices.long4x3@,GenMathematics.Matrices.long4x3@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.long4x2,GenMathematics.Matrices.long2x4)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.long4x2@,GenMathematics.Matrices.long2x4@,GenMathematics.Matrices.long4x4@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.long4x3,GenMathematics.Matrices.long3x4)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.long4x3@,GenMathematics.Matrices.long3x4@,GenMathematics.Matrices.long4x4@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.long4x4,GenMathematics.Matrices.long4x4)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.long4x4@,GenMathematics.Matrices.long4x4@,GenMathematics.Matrices.long4x4@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Vectors.half2,GenMathematics.Matrices.half2x2)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Vectors.half3,GenMathematics.Matrices.half3x2)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Vectors.half3,GenMathematics.Matrices.half3x2@,GenMathematics.Vectors.half2@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Vectors.half4,GenMathematics.Matrices.half4x2)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Vectors.half4,GenMathematics.Matrices.half4x2@,GenMathematics.Vectors.half2@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Vectors.half2,GenMathematics.Matrices.half2x3)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Vectors.half2,GenMathematics.Matrices.half2x3@,GenMathematics.Vectors.half3@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Vectors.half3,GenMathematics.Matrices.half3x3)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Vectors.half3,GenMathematics.Matrices.half3x3@,GenMathematics.Vectors.half3@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Vectors.half4,GenMathematics.Matrices.half4x3)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Vectors.half4,GenMathematics.Matrices.half4x3@,GenMathematics.Vectors.half3@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Vectors.half2,GenMathematics.Matrices.half2x4)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Vectors.half2,GenMathematics.Matrices.half2x4@,GenMathematics.Vectors.half4@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Vectors.half3,GenMathematics.Matrices.half3x4)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Vectors.half3,GenMathematics.Matrices.half3x4@,GenMathematics.Vectors.half4@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Vectors.half4,GenMathematics.Matrices.half4x4)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Vectors.half4,GenMathematics.Matrices.half4x4@,GenMathematics.Vectors.half4@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.half2x2,GenMathematics.Vectors.half2)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.half2x3,GenMathematics.Vectors.half3)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.half2x3@,GenMathematics.Vectors.half3,GenMathematics.Vectors.half2@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.half2x4,GenMathematics.Vectors.half4)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.half2x4@,GenMathematics.Vectors.half4,GenMathematics.Vectors.half2@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.half2x2,GenMathematics.Matrices.half2x2)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.half2x3,GenMathematics.Matrices.half3x2)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.half2x3@,GenMathematics.Matrices.half3x2@,GenMathematics.Matrices.half2x2@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.half2x4,GenMathematics.Matrices.half4x2)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.half2x4@,GenMathematics.Matrices.half4x2@,GenMathematics.Matrices.half2x2@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.half2x2,GenMathematics.Matrices.half2x3)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.half2x2,GenMathematics.Matrices.half2x3@,GenMathematics.Matrices.half2x3@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.half2x3,GenMathematics.Matrices.half3x3)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.half2x3@,GenMathematics.Matrices.half3x3@,GenMathematics.Matrices.half2x3@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.half2x4,GenMathematics.Matrices.half4x3)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.half2x4@,GenMathematics.Matrices.half4x3@,GenMathematics.Matrices.half2x3@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.half2x2,GenMathematics.Matrices.half2x4)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.half2x2,GenMathematics.Matrices.half2x4@,GenMathematics.Matrices.half2x4@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.half2x3,GenMathematics.Matrices.half3x4)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.half2x3@,GenMathematics.Matrices.half3x4@,GenMathematics.Matrices.half2x4@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.half2x4,GenMathematics.Matrices.half4x4)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.half2x4@,GenMathematics.Matrices.half4x4@,GenMathematics.Matrices.half2x4@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.half3x2,GenMathematics.Vectors.half2)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.half3x2@,GenMathematics.Vectors.half2,GenMathematics.Vectors.half3@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.half3x3,GenMathematics.Vectors.half3)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.half3x3@,GenMathematics.Vectors.half3,GenMathematics.Vectors.half3@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.half3x4,GenMathematics.Vectors.half4)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.half3x4@,GenMathematics.Vectors.half4,GenMathematics.Vectors.half3@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.half3x2,GenMathematics.Matrices.half2x2)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.half3x2@,GenMathematics.Matrices.half2x2,GenMathematics.Matrices.half3x2@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.half3x3,GenMathematics.Matrices.half3x2)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.half3x3@,GenMathematics.Matrices.half3x2@,GenMathematics.Matrices.half3x2@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.half3x4,GenMathematics.Matrices.half4x2)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.half3x4@,GenMathematics.Matrices.half4x2@,GenMathematics.Matrices.half3x2@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.half3x2,GenMathematics.Matrices.half2x3)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.half3x2@,GenMathematics.Matrices.half2x3@,GenMathematics.Matrices.half3x3@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.half3x3,GenMathematics.Matrices.half3x3)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.half3x3@,GenMathematics.Matrices.half3x3@,GenMathematics.Matrices.half3x3@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.half3x4,GenMathematics.Matrices.half4x3)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.half3x4@,GenMathematics.Matrices.half4x3@,GenMathematics.Matrices.half3x3@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.half3x2,GenMathematics.Matrices.half2x4)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.half3x2@,GenMathematics.Matrices.half2x4@,GenMathematics.Matrices.half3x4@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.half3x3,GenMathematics.Matrices.half3x4)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.half3x3@,GenMathematics.Matrices.half3x4@,GenMathematics.Matrices.half3x4@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.half3x4,GenMathematics.Matrices.half4x4)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.half3x4@,GenMathematics.Matrices.half4x4@,GenMathematics.Matrices.half3x4@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.half4x2,GenMathematics.Vectors.half2)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.half4x2@,GenMathematics.Vectors.half2,GenMathematics.Vectors.half4@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.half4x3,GenMathematics.Vectors.half3)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.half4x3@,GenMathematics.Vectors.half3,GenMathematics.Vectors.half4@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.half4x4,GenMathematics.Vectors.half4)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.half4x4@,GenMathematics.Vectors.half4,GenMathematics.Vectors.half4@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.half4x2,GenMathematics.Matrices.half2x2)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.half4x2@,GenMathematics.Matrices.half2x2,GenMathematics.Matrices.half4x2@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.half4x3,GenMathematics.Matrices.half3x2)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.half4x3@,GenMathematics.Matrices.half3x2@,GenMathematics.Matrices.half4x2@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.half4x4,GenMathematics.Matrices.half4x2)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.half4x4@,GenMathematics.Matrices.half4x2@,GenMathematics.Matrices.half4x2@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.half4x2,GenMathematics.Matrices.half2x3)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.half4x2@,GenMathematics.Matrices.half2x3@,GenMathematics.Matrices.half4x3@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.half4x3,GenMathematics.Matrices.half3x3)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.half4x3@,GenMathematics.Matrices.half3x3@,GenMathematics.Matrices.half4x3@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.half4x4,GenMathematics.Matrices.half4x3)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.half4x4@,GenMathematics.Matrices.half4x3@,GenMathematics.Matrices.half4x3@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.half4x2,GenMathematics.Matrices.half2x4)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.half4x2@,GenMathematics.Matrices.half2x4@,GenMathematics.Matrices.half4x4@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.half4x3,GenMathematics.Matrices.half3x4)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.half4x3@,GenMathematics.Matrices.half3x4@,GenMathematics.Matrices.half4x4@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.half4x4,GenMathematics.Matrices.half4x4)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.half4x4@,GenMathematics.Matrices.half4x4@,GenMathematics.Matrices.half4x4@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Vectors.float2,GenMathematics.Matrices.float2x2)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Vectors.float2,GenMathematics.Matrices.float2x2@,GenMathematics.Vectors.float2@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Vectors.float3,GenMathematics.Matrices.float3x2)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Vectors.float3@,GenMathematics.Matrices.float3x2@,GenMathematics.Vectors.float2@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Vectors.float4,GenMathematics.Matrices.float4x2)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Vectors.float4@,GenMathematics.Matrices.float4x2@,GenMathematics.Vectors.float2@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Vectors.float2,GenMathematics.Matrices.float2x3)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Vectors.float2,GenMathematics.Matrices.float2x3@,GenMathematics.Vectors.float3@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Vectors.float3,GenMathematics.Matrices.float3x3)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Vectors.float3@,GenMathematics.Matrices.float3x3@,GenMathematics.Vectors.float3@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Vectors.float4,GenMathematics.Matrices.float4x3)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Vectors.float4@,GenMathematics.Matrices.float4x3@,GenMathematics.Vectors.float3@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Vectors.float2,GenMathematics.Matrices.float2x4)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Vectors.float2,GenMathematics.Matrices.float2x4@,GenMathematics.Vectors.float4@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Vectors.float3,GenMathematics.Matrices.float3x4)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Vectors.float3@,GenMathematics.Matrices.float3x4@,GenMathematics.Vectors.float4@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Vectors.float4,GenMathematics.Matrices.float4x4)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Vectors.float4@,GenMathematics.Matrices.float4x4@,GenMathematics.Vectors.float4@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.float2x2,GenMathematics.Vectors.float2)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.float2x2@,GenMathematics.Vectors.float2,GenMathematics.Vectors.float2@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.float2x3,GenMathematics.Vectors.float3)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.float2x3@,GenMathematics.Vectors.float3@,GenMathematics.Vectors.float2@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.float2x4,GenMathematics.Vectors.float4)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.float2x4@,GenMathematics.Vectors.float4@,GenMathematics.Vectors.float2@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.float2x2,GenMathematics.Matrices.float2x2)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.float2x2@,GenMathematics.Matrices.float2x2@,GenMathematics.Matrices.float2x2@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.float2x3,GenMathematics.Matrices.float3x2)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.float2x3@,GenMathematics.Matrices.float3x2@,GenMathematics.Matrices.float2x2@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.float2x4,GenMathematics.Matrices.float4x2)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.float2x4@,GenMathematics.Matrices.float4x2@,GenMathematics.Matrices.float2x2@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.float2x2,GenMathematics.Matrices.float2x3)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.float2x2@,GenMathematics.Matrices.float2x3@,GenMathematics.Matrices.float2x3@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.float2x3,GenMathematics.Matrices.float3x3)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.float2x3@,GenMathematics.Matrices.float3x3@,GenMathematics.Matrices.float2x3@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.float2x4,GenMathematics.Matrices.float4x3)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.float2x4@,GenMathematics.Matrices.float4x3@,GenMathematics.Matrices.float2x3@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.float2x2,GenMathematics.Matrices.float2x4)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.float2x2@,GenMathematics.Matrices.float2x4@,GenMathematics.Matrices.float2x4@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.float2x3,GenMathematics.Matrices.float3x4)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.float2x3@,GenMathematics.Matrices.float3x4@,GenMathematics.Matrices.float2x4@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.float2x4,GenMathematics.Matrices.float4x4)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.float2x4@,GenMathematics.Matrices.float4x4@,GenMathematics.Matrices.float2x4@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.float3x2,GenMathematics.Vectors.float2)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.float3x2@,GenMathematics.Vectors.float2,GenMathematics.Vectors.float3@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.float3x3,GenMathematics.Vectors.float3)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.float3x3@,GenMathematics.Vectors.float3@,GenMathematics.Vectors.float3@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.float3x4,GenMathematics.Vectors.float4)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.float3x4@,GenMathematics.Vectors.float4@,GenMathematics.Vectors.float3@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.float3x2,GenMathematics.Matrices.float2x2)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.float3x2@,GenMathematics.Matrices.float2x2@,GenMathematics.Matrices.float3x2@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.float3x3,GenMathematics.Matrices.float3x2)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.float3x3@,GenMathematics.Matrices.float3x2@,GenMathematics.Matrices.float3x2@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.float3x4,GenMathematics.Matrices.float4x2)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.float3x4@,GenMathematics.Matrices.float4x2@,GenMathematics.Matrices.float3x2@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.float3x2,GenMathematics.Matrices.float2x3)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.float3x2@,GenMathematics.Matrices.float2x3@,GenMathematics.Matrices.float3x3@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.float3x3,GenMathematics.Matrices.float3x3)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.float3x3@,GenMathematics.Matrices.float3x3@,GenMathematics.Matrices.float3x3@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.float3x4,GenMathematics.Matrices.float4x3)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.float3x4@,GenMathematics.Matrices.float4x3@,GenMathematics.Matrices.float3x3@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.float3x2,GenMathematics.Matrices.float2x4)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.float3x2@,GenMathematics.Matrices.float2x4@,GenMathematics.Matrices.float3x4@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.float3x3,GenMathematics.Matrices.float3x4)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.float3x3@,GenMathematics.Matrices.float3x4@,GenMathematics.Matrices.float3x4@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.float3x4,GenMathematics.Matrices.float4x4)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.float3x4@,GenMathematics.Matrices.float4x4@,GenMathematics.Matrices.float3x4@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.float4x2,GenMathematics.Vectors.float2)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.float4x2@,GenMathematics.Vectors.float2,GenMathematics.Vectors.float4@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.float4x3,GenMathematics.Vectors.float3)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.float4x3@,GenMathematics.Vectors.float3@,GenMathematics.Vectors.float4@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.float4x4,GenMathematics.Vectors.float4)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.float4x4@,GenMathematics.Vectors.float4@,GenMathematics.Vectors.float4@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.float4x2,GenMathematics.Matrices.float2x2)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.float4x2@,GenMathematics.Matrices.float2x2@,GenMathematics.Matrices.float4x2@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.float4x3,GenMathematics.Matrices.float3x2)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.float4x3@,GenMathematics.Matrices.float3x2@,GenMathematics.Matrices.float4x2@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.float4x4,GenMathematics.Matrices.float4x2)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.float4x4@,GenMathematics.Matrices.float4x2@,GenMathematics.Matrices.float4x2@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.float4x2,GenMathematics.Matrices.float2x3)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.float4x2@,GenMathematics.Matrices.float2x3@,GenMathematics.Matrices.float4x3@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.float4x3,GenMathematics.Matrices.float3x3)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.float4x3@,GenMathematics.Matrices.float3x3@,GenMathematics.Matrices.float4x3@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.float4x4,GenMathematics.Matrices.float4x3)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.float4x4@,GenMathematics.Matrices.float4x3@,GenMathematics.Matrices.float4x3@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.float4x2,GenMathematics.Matrices.float2x4)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.float4x2@,GenMathematics.Matrices.float2x4@,GenMathematics.Matrices.float4x4@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.float4x3,GenMathematics.Matrices.float3x4)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.float4x3@,GenMathematics.Matrices.float3x4@,GenMathematics.Matrices.float4x4@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.float4x4,GenMathematics.Matrices.float4x4)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.float4x4@,GenMathematics.Matrices.float4x4@,GenMathematics.Matrices.float4x4@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Vectors.double2,GenMathematics.Matrices.double2x2)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Vectors.double2@,GenMathematics.Matrices.double2x2@,GenMathematics.Vectors.double2@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Vectors.double3,GenMathematics.Matrices.double3x2)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Vectors.double3@,GenMathematics.Matrices.double3x2@,GenMathematics.Vectors.double2@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Vectors.double4,GenMathematics.Matrices.double4x2)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Vectors.double4@,GenMathematics.Matrices.double4x2@,GenMathematics.Vectors.double2@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Vectors.double2,GenMathematics.Matrices.double2x3)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Vectors.double2@,GenMathematics.Matrices.double2x3@,GenMathematics.Vectors.double3@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Vectors.double3,GenMathematics.Matrices.double3x3)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Vectors.double3@,GenMathematics.Matrices.double3x3@,GenMathematics.Vectors.double3@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Vectors.double4,GenMathematics.Matrices.double4x3)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Vectors.double4@,GenMathematics.Matrices.double4x3@,GenMathematics.Vectors.double3@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Vectors.double2,GenMathematics.Matrices.double2x4)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Vectors.double2@,GenMathematics.Matrices.double2x4@,GenMathematics.Vectors.double4@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Vectors.double3,GenMathematics.Matrices.double3x4)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Vectors.double3@,GenMathematics.Matrices.double3x4@,GenMathematics.Vectors.double4@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Vectors.double4,GenMathematics.Matrices.double4x4)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Vectors.double4@,GenMathematics.Matrices.double4x4@,GenMathematics.Vectors.double4@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.double2x2,GenMathematics.Vectors.double2)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.double2x2@,GenMathematics.Vectors.double2@,GenMathematics.Vectors.double2@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.double2x3,GenMathematics.Vectors.double3)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.double2x3@,GenMathematics.Vectors.double3@,GenMathematics.Vectors.double2@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.double2x4,GenMathematics.Vectors.double4)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.double2x4@,GenMathematics.Vectors.double4@,GenMathematics.Vectors.double2@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.double2x2,GenMathematics.Matrices.double2x2)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.double2x2@,GenMathematics.Matrices.double2x2@,GenMathematics.Matrices.double2x2@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.double2x3,GenMathematics.Matrices.double3x2)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.double2x3@,GenMathematics.Matrices.double3x2@,GenMathematics.Matrices.double2x2@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.double2x4,GenMathematics.Matrices.double4x2)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.double2x4@,GenMathematics.Matrices.double4x2@,GenMathematics.Matrices.double2x2@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.double2x2,GenMathematics.Matrices.double2x3)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.double2x2@,GenMathematics.Matrices.double2x3@,GenMathematics.Matrices.double2x3@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.double2x3,GenMathematics.Matrices.double3x3)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.double2x3@,GenMathematics.Matrices.double3x3@,GenMathematics.Matrices.double2x3@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.double2x4,GenMathematics.Matrices.double4x3)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.double2x4@,GenMathematics.Matrices.double4x3@,GenMathematics.Matrices.double2x3@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.double2x2,GenMathematics.Matrices.double2x4)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.double2x2@,GenMathematics.Matrices.double2x4@,GenMathematics.Matrices.double2x4@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.double2x3,GenMathematics.Matrices.double3x4)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.double2x3@,GenMathematics.Matrices.double3x4@,GenMathematics.Matrices.double2x4@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.double2x4,GenMathematics.Matrices.double4x4)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.double2x4@,GenMathematics.Matrices.double4x4@,GenMathematics.Matrices.double2x4@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.double3x2,GenMathematics.Vectors.double2)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.double3x2@,GenMathematics.Vectors.double2@,GenMathematics.Vectors.double3@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.double3x3,GenMathematics.Vectors.double3)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.double3x3@,GenMathematics.Vectors.double3@,GenMathematics.Vectors.double3@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.double3x4,GenMathematics.Vectors.double4)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.double3x4@,GenMathematics.Vectors.double4@,GenMathematics.Vectors.double3@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.double3x2,GenMathematics.Matrices.double2x2)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.double3x2@,GenMathematics.Matrices.double2x2@,GenMathematics.Matrices.double3x2@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.double3x3,GenMathematics.Matrices.double3x2)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.double3x3@,GenMathematics.Matrices.double3x2@,GenMathematics.Matrices.double3x2@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.double3x4,GenMathematics.Matrices.double4x2)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.double3x4@,GenMathematics.Matrices.double4x2@,GenMathematics.Matrices.double3x2@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.double3x2,GenMathematics.Matrices.double2x3)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.double3x2@,GenMathematics.Matrices.double2x3@,GenMathematics.Matrices.double3x3@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.double3x3,GenMathematics.Matrices.double3x3)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.double3x3@,GenMathematics.Matrices.double3x3@,GenMathematics.Matrices.double3x3@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.double3x4,GenMathematics.Matrices.double4x3)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.double3x4@,GenMathematics.Matrices.double4x3@,GenMathematics.Matrices.double3x3@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.double3x2,GenMathematics.Matrices.double2x4)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.double3x2@,GenMathematics.Matrices.double2x4@,GenMathematics.Matrices.double3x4@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.double3x3,GenMathematics.Matrices.double3x4)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.double3x3@,GenMathematics.Matrices.double3x4@,GenMathematics.Matrices.double3x4@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.double3x4,GenMathematics.Matrices.double4x4)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.double3x4@,GenMathematics.Matrices.double4x4@,GenMathematics.Matrices.double3x4@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.double4x2,GenMathematics.Vectors.double2)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.double4x2@,GenMathematics.Vectors.double2@,GenMathematics.Vectors.double4@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.double4x3,GenMathematics.Vectors.double3)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.double4x3@,GenMathematics.Vectors.double3@,GenMathematics.Vectors.double4@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.double4x4,GenMathematics.Vectors.double4)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.double4x4@,GenMathematics.Vectors.double4@,GenMathematics.Vectors.double4@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.double4x2,GenMathematics.Matrices.double2x2)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.double4x2@,GenMathematics.Matrices.double2x2@,GenMathematics.Matrices.double4x2@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.double4x3,GenMathematics.Matrices.double3x2)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.double4x3@,GenMathematics.Matrices.double3x2@,GenMathematics.Matrices.double4x2@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.double4x4,GenMathematics.Matrices.double4x2)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.double4x4@,GenMathematics.Matrices.double4x2@,GenMathematics.Matrices.double4x2@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.double4x2,GenMathematics.Matrices.double2x3)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.double4x2@,GenMathematics.Matrices.double2x3@,GenMathematics.Matrices.double4x3@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.double4x3,GenMathematics.Matrices.double3x3)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.double4x3@,GenMathematics.Matrices.double3x3@,GenMathematics.Matrices.double4x3@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.double4x4,GenMathematics.Matrices.double4x3)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.double4x4@,GenMathematics.Matrices.double4x3@,GenMathematics.Matrices.double4x3@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.double4x2,GenMathematics.Matrices.double2x4)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.double4x2@,GenMathematics.Matrices.double2x4@,GenMathematics.Matrices.double4x4@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.double4x3,GenMathematics.Matrices.double3x4)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.double4x3@,GenMathematics.Matrices.double3x4@,GenMathematics.Matrices.double4x4@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.double4x4,GenMathematics.Matrices.double4x4)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Multiply(GenMathematics.Matrices.double4x4@,GenMathematics.Matrices.double4x4@,GenMathematics.Matrices.double4x4@)">
            <summary>
            Multiplies matrices
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Determinant(GenMathematics.Matrices.uint2x2@)">
            <summary>
            Computes the determinant of the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Determinant(GenMathematics.Matrices.uint3x3@)">
            <summary>
            Computes the determinant of the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Determinant(GenMathematics.Matrices.uint4x4@)">
            <summary>
            Computes the determinant of the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Determinant(GenMathematics.Matrices.ulong2x2@)">
            <summary>
            Computes the determinant of the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Determinant(GenMathematics.Matrices.ulong3x3@)">
            <summary>
            Computes the determinant of the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Determinant(GenMathematics.Matrices.ulong4x4@)">
            <summary>
            Computes the determinant of the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Determinant(GenMathematics.Matrices.int2x2@)">
            <summary>
            Computes the determinant of the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Determinant(GenMathematics.Matrices.int3x3@)">
            <summary>
            Computes the determinant of the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Determinant(GenMathematics.Matrices.int4x4@)">
            <summary>
            Computes the determinant of the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Determinant(GenMathematics.Matrices.long2x2@)">
            <summary>
            Computes the determinant of the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Determinant(GenMathematics.Matrices.long3x3@)">
            <summary>
            Computes the determinant of the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Determinant(GenMathematics.Matrices.long4x4@)">
            <summary>
            Computes the determinant of the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Determinant(GenMathematics.Matrices.half2x2)">
            <summary>
            Computes the determinant of the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Determinant(GenMathematics.Matrices.half3x3@)">
            <summary>
            Computes the determinant of the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Determinant(GenMathematics.Matrices.half4x4@)">
            <summary>
            Computes the determinant of the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Determinant(GenMathematics.Matrices.float2x2@)">
            <summary>
            Computes the determinant of the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Determinant(GenMathematics.Matrices.float3x3@)">
            <summary>
            Computes the determinant of the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Determinant(GenMathematics.Matrices.float4x4@)">
            <summary>
            Computes the determinant of the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Determinant(GenMathematics.Matrices.double2x2@)">
            <summary>
            Computes the determinant of the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Determinant(GenMathematics.Matrices.double3x3@)">
            <summary>
            Computes the determinant of the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Determinant(GenMathematics.Matrices.double4x4@)">
            <summary>
            Computes the determinant of the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Invert(GenMathematics.Matrices.half2x2,GenMathematics.Matrices.half2x2@)">
            <summary>
            Inverts the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Invert(GenMathematics.Matrices.half3x3@,GenMathematics.Matrices.half3x3@)">
            <summary>
            Inverts the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Invert(GenMathematics.Matrices.half4x4@,GenMathematics.Matrices.half4x4@)">
            <summary>
            Inverts the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Invert(GenMathematics.Matrices.float2x2@,GenMathematics.Matrices.float2x2@)">
            <summary>
            Inverts the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Invert(GenMathematics.Matrices.float3x3@,GenMathematics.Matrices.float3x3@)">
            <summary>
            Inverts the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Invert(GenMathematics.Matrices.double2x2@,GenMathematics.Matrices.double2x2@)">
            <summary>
            Inverts the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Invert(GenMathematics.Matrices.double3x3@,GenMathematics.Matrices.double3x3@)">
            <summary>
            Inverts the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Invert(GenMathematics.Matrices.double4x4@,GenMathematics.Matrices.double4x4@)">
            <summary>
            Inverts the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Decompose(GenMathematics.Matrices.half2x2,System.Half@,GenMathematics.Vectors.half2@)">
            <summary>
            Decomposes a transformation matrix into its components
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Decompose(GenMathematics.Matrices.half2x3@,System.Half@,GenMathematics.Vectors.half2@,GenMathematics.Vectors.half2@)">
            <summary>
            Decomposes a transformation matrix into its components
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Decompose(GenMathematics.Matrices.half2x4@,System.Half@,GenMathematics.Vectors.half2@,GenMathematics.Vectors.half2@)">
            <summary>
            Decomposes a transformation matrix into its components
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Decompose(GenMathematics.Matrices.float2x2@,System.Single@,GenMathematics.Vectors.float2@)">
            <summary>
            Decomposes a transformation matrix into its components
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Decompose(GenMathematics.Matrices.float2x3@,System.Single@,GenMathematics.Vectors.float2@,GenMathematics.Vectors.float2@)">
            <summary>
            Decomposes a transformation matrix into its components
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Decompose(GenMathematics.Matrices.float2x4@,System.Single@,GenMathematics.Vectors.float2@,GenMathematics.Vectors.float2@)">
            <summary>
            Decomposes a transformation matrix into its components
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Decompose(GenMathematics.Matrices.double2x2@,System.Double@,GenMathematics.Vectors.double2@)">
            <summary>
            Decomposes a transformation matrix into its components
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Decompose(GenMathematics.Matrices.double2x3@,System.Double@,GenMathematics.Vectors.double2@,GenMathematics.Vectors.double2@)">
            <summary>
            Decomposes a transformation matrix into its components
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Decompose(GenMathematics.Matrices.double2x4@,System.Double@,GenMathematics.Vectors.double2@,GenMathematics.Vectors.double2@)">
            <summary>
            Decomposes a transformation matrix into its components
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.SetRotation(System.Half,GenMathematics.Matrices.half2x2@)">
            <summary>
            Creates a 2x2 rotation matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.SetScale(System.Half,GenMathematics.Matrices.half2x2@)">
            <summary>
            Creates a 2x2 scale matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.SetScale(GenMathematics.Vectors.half2,GenMathematics.Matrices.half2x2@)">
            <summary>
            Creates a 2x2 scale matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.ChangeScale(System.Half,GenMathematics.Matrices.half2x2@)">
            <summary>
            Changes the 2x2 scale part of the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.ChangeScale(GenMathematics.Vectors.half2,GenMathematics.Matrices.half2x2@)">
            <summary>
            Changes the 2x2 scale part of the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.SetRotationScale(System.Half,System.Half,GenMathematics.Matrices.half2x2@)">
            <summary>
            Creates a 2x2 rotation and scale matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.SetRotationScale(System.Half,GenMathematics.Vectors.half2,GenMathematics.Matrices.half2x2@)">
            <summary>
            Creates a 2x2 rotation and scale matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.SetRotation(System.Half,GenMathematics.Matrices.half2x3@)">
            <summary>
            Inserts a 2x2 rotation matrix without changing other values
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.SetScale(System.Half,GenMathematics.Matrices.half2x3@)">
            <summary>
            Inserts a 2x2 scale matrix without changing other values
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.SetScale(GenMathematics.Vectors.half2,GenMathematics.Matrices.half2x3@)">
            <summary>
            Inserts a 2x2 scale matrix without changing other values
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.ChangeScale(System.Half,GenMathematics.Matrices.half2x3@)">
            <summary>
            Changes the 2x2 scale part of the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.ChangeScale(GenMathematics.Vectors.half2,GenMathematics.Matrices.half2x3@)">
            <summary>
            Changes the 2x2 scale part of the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.SetTranslation(GenMathematics.Vectors.half2,GenMathematics.Matrices.half2x3@)">
            <summary>
            Inserts a 2D translation into the 3rd column of the matrix without changing other values
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.SetRotationScale(System.Half,System.Half,GenMathematics.Matrices.half2x3@)">
            <summary>
            Inserts a 2x2 rotation and scale matrix without changing other values
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.SetRotationScale(System.Half,GenMathematics.Vectors.half2,GenMathematics.Matrices.half2x3@)">
            <summary>
            Inserts a 2x2 rotation and scale matrix without changing other values
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.SetRotation(System.Half,GenMathematics.Matrices.half2x4@)">
            <summary>
            Inserts a 2x2 rotation matrix without changing other values
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.SetScale(System.Half,GenMathematics.Matrices.half2x4@)">
            <summary>
            Inserts a 2x2 scale matrix without changing other values
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.SetScale(GenMathematics.Vectors.half2,GenMathematics.Matrices.half2x4@)">
            <summary>
            Inserts a 2x2 scale matrix without changing other values
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.ChangeScale(System.Half,GenMathematics.Matrices.half2x4@)">
            <summary>
            Changes the 2x2 scale part of the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.ChangeScale(GenMathematics.Vectors.half2,GenMathematics.Matrices.half2x4@)">
            <summary>
            Changes the 2x2 scale part of the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.SetTranslation(GenMathematics.Vectors.half2,GenMathematics.Matrices.half2x4@)">
            <summary>
            Inserts a 2D translation into the 3rd column of the matrix without changing other values
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.SetRotationScale(System.Half,System.Half,GenMathematics.Matrices.half2x4@)">
            <summary>
            Inserts a 2x2 rotation and scale matrix without changing other values
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.SetRotationScale(System.Half,GenMathematics.Vectors.half2,GenMathematics.Matrices.half2x4@)">
            <summary>
            Inserts a 2x2 rotation and scale matrix without changing other values
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.SetRotation(GenMathematics.Vectors.half3,GenMathematics.Vectors.half3,GenMathematics.Matrices.half3x3@)">
            <summary>
            Creates a 3x3 rotation matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.SetRotationX(System.Half,GenMathematics.Matrices.half3x3@)">
            <summary>
            Creates a 3x3 rotation matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.SetRotationY(System.Half,GenMathematics.Matrices.half3x3@)">
            <summary>
            Creates a 3x3 rotation matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.SetRotationZ(System.Half,GenMathematics.Matrices.half3x3@)">
            <summary>
            Creates a 3x3 rotation matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.SetScale(System.Half,GenMathematics.Matrices.half3x3@)">
            <summary>
            Creates a 3x3 scale matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.SetScale(GenMathematics.Vectors.half3,GenMathematics.Matrices.half3x3@)">
            <summary>
            Creates a 3x3 scale matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.ChangeScale(System.Half,GenMathematics.Matrices.half3x3@)">
            <summary>
            Changes the 3x3 scale part of the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.ChangeScale(GenMathematics.Vectors.half3,GenMathematics.Matrices.half3x3@)">
            <summary>
            Changes the 3x3 scale part of the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.SetRotation(GenMathematics.Vectors.half3,GenMathematics.Vectors.half3,GenMathematics.Matrices.half3x4@)">
            <summary>
            Inserts a 3x3 rotation matrix without changing other values
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.SetRotationX(System.Half,GenMathematics.Matrices.half3x4@)">
            <summary>
            Inserts a 3x3 rotation matrix without changing other values
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.SetRotationY(System.Half,GenMathematics.Matrices.half3x4@)">
            <summary>
            Inserts a 3x3 rotation matrix without changing other values
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.SetRotationZ(System.Half,GenMathematics.Matrices.half3x4@)">
            <summary>
            Inserts a 3x3 rotation matrix without changing other values
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.SetScale(System.Half,GenMathematics.Matrices.half3x4@)">
            <summary>
            Inserts a 3x3 scale matrix without changing other values
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.SetScale(GenMathematics.Vectors.half3,GenMathematics.Matrices.half3x4@)">
            <summary>
            Inserts a 3x3 scale matrix without changing other values
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.ChangeScale(System.Half,GenMathematics.Matrices.half3x4@)">
            <summary>
            Changes the 3x3 scale part of the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.ChangeScale(GenMathematics.Vectors.half3,GenMathematics.Matrices.half3x4@)">
            <summary>
            Changes the 3x3 scale part of the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.SetTranslation(GenMathematics.Vectors.half3,GenMathematics.Matrices.half3x4@)">
            <summary>
            Inserts a 3D translation into the 4th column of the matrix without changing other values
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.LookAtMatrix(GenMathematics.Vectors.half3,GenMathematics.Vectors.half3,GenMathematics.Vectors.half3,GenMathematics.Matrices.half3x4@)">
            <summary>
            Creates a right-handed view matrix
            </summary>
            <param name="fromPos">The position of the camera</param>
            <param name="toPos">The target towards which the camera is pointing</param>
            <param name="up">The direction that is "up" from the camera's point of view</param>
            <param name="matrix">The right-handed view matrix</param>
        </member>
        <member name="M:GenMathematics.GenMath.SetRotation(GenMathematics.Vectors.half3,GenMathematics.Vectors.half3,GenMathematics.Matrices.half4x3@)">
            <summary>
            Inserts a 3x3 rotation matrix without changing other values
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.SetRotationX(System.Half,GenMathematics.Matrices.half4x3@)">
            <summary>
            Inserts a 3x3 rotation matrix without changing other values
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.SetRotationY(System.Half,GenMathematics.Matrices.half4x3@)">
            <summary>
            Inserts a 3x3 rotation matrix without changing other values
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.SetRotationZ(System.Half,GenMathematics.Matrices.half4x3@)">
            <summary>
            Inserts a 3x3 rotation matrix without changing other values
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.SetScale(System.Half,GenMathematics.Matrices.half4x3@)">
            <summary>
            Inserts a 3x3 scale matrix without changing other values
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.SetScale(GenMathematics.Vectors.half3,GenMathematics.Matrices.half4x3@)">
            <summary>
            Inserts a 3x3 scale matrix without changing other values
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.ChangeScale(System.Half,GenMathematics.Matrices.half4x3@)">
            <summary>
            Changes the 3x3 scale part of the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.ChangeScale(GenMathematics.Vectors.half3,GenMathematics.Matrices.half4x3@)">
            <summary>
            Changes the 3x3 scale part of the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.SetRotation(GenMathematics.Vectors.half3,GenMathematics.Vectors.half3,GenMathematics.Matrices.half4x4@)">
            <summary>
            Inserts a 3x3 rotation matrix without changing other values
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.SetRotationX(System.Half,GenMathematics.Matrices.half4x4@)">
            <summary>
            Inserts a 3x3 rotation matrix without changing other values
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.SetRotationY(System.Half,GenMathematics.Matrices.half4x4@)">
            <summary>
            Inserts a 3x3 rotation matrix without changing other values
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.SetRotationZ(System.Half,GenMathematics.Matrices.half4x4@)">
            <summary>
            Inserts a 3x3 rotation matrix without changing other values
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.SetScale(System.Half,GenMathematics.Matrices.half4x4@)">
            <summary>
            Inserts a 3x3 scale matrix without changing other values
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.SetScale(GenMathematics.Vectors.half3,GenMathematics.Matrices.half4x4@)">
            <summary>
            Inserts a 3x3 scale matrix without changing other values
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.ChangeScale(System.Half,GenMathematics.Matrices.half4x4@)">
            <summary>
            Changes the 3x3 scale part of the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.ChangeScale(GenMathematics.Vectors.half3,GenMathematics.Matrices.half4x4@)">
            <summary>
            Changes the 3x3 scale part of the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.SetTranslation(GenMathematics.Vectors.half3,GenMathematics.Matrices.half4x4@)">
            <summary>
            Inserts a 3D translation into the 4th column of the matrix without changing other values
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.LookAtMatrix(GenMathematics.Vectors.half3,GenMathematics.Vectors.half3,GenMathematics.Vectors.half3,GenMathematics.Matrices.half4x4@)">
            <summary>
            Creates a right-handed view matrix
            </summary>
            <param name="fromPos">The position of the camera</param>
            <param name="toPos">The target towards which the camera is pointing</param>
            <param name="up">The direction that is "up" from the camera's point of view</param>
            <param name="matrix">The right-handed view matrix</param>
        </member>
        <member name="M:GenMathematics.GenMath.OrthographicMatrix(System.Half,System.Half,System.Half,System.Half,System.Half,System.Half,GenMathematics.Matrices.half4x4@)">
            <summary>
            Creates a right-handed orthographic projection matrix
            </summary>
            <param name="left">The minimum X-value of the view volume</param>
            <param name="right">The maximum X-value of the view volume</param>
            <param name="bottom">The minimum Y-value of the view volume</param>
            <param name="top">The maximum Y-value of the view volume</param>
            <param name="depthNear">The minimum Z-value of the view volume</param>
            <param name="depthFar">The maximum Z-value of the view volume</param>
            <param name="matrix">The right-handed orthographic projection matrix</param>
        </member>
        <member name="M:GenMathematics.GenMath.PerspectiveMatrix(System.Half,System.Half,System.Half,System.Half,System.Half,System.Half,GenMathematics.Matrices.half4x4@)">
            <summary>
            Creates a right-handed perspective projection matrix
            </summary>
            <param name="left">The minimum x-value of the view volume at the near view plane</param>
            <param name="right">The maximum x-value of the view volume at the near view plane</param>
            <param name="bottom">The minimum y-value of the view volume at the near view plane</param>
            <param name="top">The maximum y-value of the view volume at the near view plane</param>
            <param name="depthNear">The distance to the near view plane</param>
            <param name="depthFar">The distance to the far view plane</param>
            <param name="matrix">The right-handed perspective projection matrix</param>
        </member>
        <member name="M:GenMathematics.GenMath.SetRotation(System.Single,GenMathematics.Matrices.float2x2@)">
            <summary>
            Creates a 2x2 rotation matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.SetScale(System.Single,GenMathematics.Matrices.float2x2@)">
            <summary>
            Creates a 2x2 scale matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.SetScale(GenMathematics.Vectors.float2,GenMathematics.Matrices.float2x2@)">
            <summary>
            Creates a 2x2 scale matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.ChangeScale(System.Single,GenMathematics.Matrices.float2x2@)">
            <summary>
            Changes the 2x2 scale part of the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.ChangeScale(GenMathematics.Vectors.float2,GenMathematics.Matrices.float2x2@)">
            <summary>
            Changes the 2x2 scale part of the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.SetRotationScale(System.Single,System.Single,GenMathematics.Matrices.float2x2@)">
            <summary>
            Creates a 2x2 rotation and scale matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.SetRotationScale(System.Single,GenMathematics.Vectors.float2,GenMathematics.Matrices.float2x2@)">
            <summary>
            Creates a 2x2 rotation and scale matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.SetRotation(System.Single,GenMathematics.Matrices.float2x3@)">
            <summary>
            Inserts a 2x2 rotation matrix without changing other values
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.SetScale(System.Single,GenMathematics.Matrices.float2x3@)">
            <summary>
            Inserts a 2x2 scale matrix without changing other values
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.SetScale(GenMathematics.Vectors.float2,GenMathematics.Matrices.float2x3@)">
            <summary>
            Inserts a 2x2 scale matrix without changing other values
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.ChangeScale(System.Single,GenMathematics.Matrices.float2x3@)">
            <summary>
            Changes the 2x2 scale part of the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.ChangeScale(GenMathematics.Vectors.float2,GenMathematics.Matrices.float2x3@)">
            <summary>
            Changes the 2x2 scale part of the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.SetTranslation(GenMathematics.Vectors.float2,GenMathematics.Matrices.float2x3@)">
            <summary>
            Inserts a 2D translation into the 3rd column of the matrix without changing other values
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.SetRotationScale(System.Single,System.Single,GenMathematics.Matrices.float2x3@)">
            <summary>
            Inserts a 2x2 rotation and scale matrix without changing other values
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.SetRotationScale(System.Single,GenMathematics.Vectors.float2,GenMathematics.Matrices.float2x3@)">
            <summary>
            Inserts a 2x2 rotation and scale matrix without changing other values
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.SetRotation(System.Single,GenMathematics.Matrices.float2x4@)">
            <summary>
            Inserts a 2x2 rotation matrix without changing other values
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.SetScale(System.Single,GenMathematics.Matrices.float2x4@)">
            <summary>
            Inserts a 2x2 scale matrix without changing other values
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.SetScale(GenMathematics.Vectors.float2,GenMathematics.Matrices.float2x4@)">
            <summary>
            Inserts a 2x2 scale matrix without changing other values
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.ChangeScale(System.Single,GenMathematics.Matrices.float2x4@)">
            <summary>
            Changes the 2x2 scale part of the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.ChangeScale(GenMathematics.Vectors.float2,GenMathematics.Matrices.float2x4@)">
            <summary>
            Changes the 2x2 scale part of the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.SetTranslation(GenMathematics.Vectors.float2,GenMathematics.Matrices.float2x4@)">
            <summary>
            Inserts a 2D translation into the 3rd column of the matrix without changing other values
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.SetRotationScale(System.Single,System.Single,GenMathematics.Matrices.float2x4@)">
            <summary>
            Inserts a 2x2 rotation and scale matrix without changing other values
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.SetRotationScale(System.Single,GenMathematics.Vectors.float2,GenMathematics.Matrices.float2x4@)">
            <summary>
            Inserts a 2x2 rotation and scale matrix without changing other values
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.SetRotation(GenMathematics.Vectors.float3@,GenMathematics.Vectors.float3@,GenMathematics.Matrices.float3x3@)">
            <summary>
            Creates a 3x3 rotation matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.SetRotationX(System.Single,GenMathematics.Matrices.float3x3@)">
            <summary>
            Creates a 3x3 rotation matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.SetRotationY(System.Single,GenMathematics.Matrices.float3x3@)">
            <summary>
            Creates a 3x3 rotation matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.SetRotationZ(System.Single,GenMathematics.Matrices.float3x3@)">
            <summary>
            Creates a 3x3 rotation matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.SetScale(System.Single,GenMathematics.Matrices.float3x3@)">
            <summary>
            Creates a 3x3 scale matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.SetScale(GenMathematics.Vectors.float3@,GenMathematics.Matrices.float3x3@)">
            <summary>
            Creates a 3x3 scale matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.ChangeScale(System.Single,GenMathematics.Matrices.float3x3@)">
            <summary>
            Changes the 3x3 scale part of the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.ChangeScale(GenMathematics.Vectors.float3@,GenMathematics.Matrices.float3x3@)">
            <summary>
            Changes the 3x3 scale part of the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.SetRotation(GenMathematics.Vectors.float3@,GenMathematics.Vectors.float3@,GenMathematics.Matrices.float3x4@)">
            <summary>
            Inserts a 3x3 rotation matrix without changing other values
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.SetRotationX(System.Single,GenMathematics.Matrices.float3x4@)">
            <summary>
            Inserts a 3x3 rotation matrix without changing other values
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.SetRotationY(System.Single,GenMathematics.Matrices.float3x4@)">
            <summary>
            Inserts a 3x3 rotation matrix without changing other values
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.SetRotationZ(System.Single,GenMathematics.Matrices.float3x4@)">
            <summary>
            Inserts a 3x3 rotation matrix without changing other values
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.SetScale(System.Single,GenMathematics.Matrices.float3x4@)">
            <summary>
            Inserts a 3x3 scale matrix without changing other values
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.SetScale(GenMathematics.Vectors.float3@,GenMathematics.Matrices.float3x4@)">
            <summary>
            Inserts a 3x3 scale matrix without changing other values
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.ChangeScale(System.Single,GenMathematics.Matrices.float3x4@)">
            <summary>
            Changes the 3x3 scale part of the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.ChangeScale(GenMathematics.Vectors.float3@,GenMathematics.Matrices.float3x4@)">
            <summary>
            Changes the 3x3 scale part of the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.SetTranslation(GenMathematics.Vectors.float3@,GenMathematics.Matrices.float3x4@)">
            <summary>
            Inserts a 3D translation into the 4th column of the matrix without changing other values
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.LookAtMatrix(GenMathematics.Vectors.float3@,GenMathematics.Vectors.float3@,GenMathematics.Vectors.float3@,GenMathematics.Matrices.float3x4@)">
            <summary>
            Creates a right-handed view matrix
            </summary>
            <param name="fromPos">The position of the camera</param>
            <param name="toPos">The target towards which the camera is pointing</param>
            <param name="up">The direction that is "up" from the camera's point of view</param>
            <param name="matrix">The right-handed view matrix</param>
        </member>
        <member name="M:GenMathematics.GenMath.SetRotation(GenMathematics.Vectors.float3@,GenMathematics.Vectors.float3@,GenMathematics.Matrices.float4x3@)">
            <summary>
            Inserts a 3x3 rotation matrix without changing other values
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.SetRotationX(System.Single,GenMathematics.Matrices.float4x3@)">
            <summary>
            Inserts a 3x3 rotation matrix without changing other values
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.SetRotationY(System.Single,GenMathematics.Matrices.float4x3@)">
            <summary>
            Inserts a 3x3 rotation matrix without changing other values
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.SetRotationZ(System.Single,GenMathematics.Matrices.float4x3@)">
            <summary>
            Inserts a 3x3 rotation matrix without changing other values
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.SetScale(System.Single,GenMathematics.Matrices.float4x3@)">
            <summary>
            Inserts a 3x3 scale matrix without changing other values
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.SetScale(GenMathematics.Vectors.float3@,GenMathematics.Matrices.float4x3@)">
            <summary>
            Inserts a 3x3 scale matrix without changing other values
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.ChangeScale(System.Single,GenMathematics.Matrices.float4x3@)">
            <summary>
            Changes the 3x3 scale part of the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.ChangeScale(GenMathematics.Vectors.float3@,GenMathematics.Matrices.float4x3@)">
            <summary>
            Changes the 3x3 scale part of the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.SetRotation(GenMathematics.Vectors.float3@,GenMathematics.Vectors.float3@,GenMathematics.Matrices.float4x4@)">
            <summary>
            Inserts a 3x3 rotation matrix without changing other values
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.SetRotationX(System.Single,GenMathematics.Matrices.float4x4@)">
            <summary>
            Inserts a 3x3 rotation matrix without changing other values
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.SetRotationY(System.Single,GenMathematics.Matrices.float4x4@)">
            <summary>
            Inserts a 3x3 rotation matrix without changing other values
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.SetRotationZ(System.Single,GenMathematics.Matrices.float4x4@)">
            <summary>
            Inserts a 3x3 rotation matrix without changing other values
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.SetScale(System.Single,GenMathematics.Matrices.float4x4@)">
            <summary>
            Inserts a 3x3 scale matrix without changing other values
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.SetScale(GenMathematics.Vectors.float3@,GenMathematics.Matrices.float4x4@)">
            <summary>
            Inserts a 3x3 scale matrix without changing other values
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.ChangeScale(System.Single,GenMathematics.Matrices.float4x4@)">
            <summary>
            Changes the 3x3 scale part of the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.ChangeScale(GenMathematics.Vectors.float3@,GenMathematics.Matrices.float4x4@)">
            <summary>
            Changes the 3x3 scale part of the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.SetTranslation(GenMathematics.Vectors.float3@,GenMathematics.Matrices.float4x4@)">
            <summary>
            Inserts a 3D translation into the 4th column of the matrix without changing other values
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.LookAtMatrix(GenMathematics.Vectors.float3@,GenMathematics.Vectors.float3@,GenMathematics.Vectors.float3@,GenMathematics.Matrices.float4x4@)">
            <summary>
            Creates a right-handed view matrix
            </summary>
            <param name="fromPos">The position of the camera</param>
            <param name="toPos">The target towards which the camera is pointing</param>
            <param name="up">The direction that is "up" from the camera's point of view</param>
            <param name="matrix">The right-handed view matrix</param>
        </member>
        <member name="M:GenMathematics.GenMath.OrthographicMatrix(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,GenMathematics.Matrices.float4x4@)">
            <summary>
            Creates a right-handed orthographic projection matrix
            </summary>
            <param name="left">The minimum X-value of the view volume</param>
            <param name="right">The maximum X-value of the view volume</param>
            <param name="bottom">The minimum Y-value of the view volume</param>
            <param name="top">The maximum Y-value of the view volume</param>
            <param name="depthNear">The minimum Z-value of the view volume</param>
            <param name="depthFar">The maximum Z-value of the view volume</param>
            <param name="matrix">The right-handed orthographic projection matrix</param>
        </member>
        <member name="M:GenMathematics.GenMath.PerspectiveMatrix(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,GenMathematics.Matrices.float4x4@)">
            <summary>
            Creates a right-handed perspective projection matrix
            </summary>
            <param name="left">The minimum x-value of the view volume at the near view plane</param>
            <param name="right">The maximum x-value of the view volume at the near view plane</param>
            <param name="bottom">The minimum y-value of the view volume at the near view plane</param>
            <param name="top">The maximum y-value of the view volume at the near view plane</param>
            <param name="depthNear">The distance to the near view plane</param>
            <param name="depthFar">The distance to the far view plane</param>
            <param name="matrix">The right-handed perspective projection matrix</param>
        </member>
        <member name="M:GenMathematics.GenMath.SetRotation(System.Double,GenMathematics.Matrices.double2x2@)">
            <summary>
            Creates a 2x2 rotation matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.SetScale(System.Double,GenMathematics.Matrices.double2x2@)">
            <summary>
            Creates a 2x2 scale matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.SetScale(GenMathematics.Vectors.double2@,GenMathematics.Matrices.double2x2@)">
            <summary>
            Creates a 2x2 scale matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.ChangeScale(System.Double,GenMathematics.Matrices.double2x2@)">
            <summary>
            Changes the 2x2 scale part of the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.ChangeScale(GenMathematics.Vectors.double2@,GenMathematics.Matrices.double2x2@)">
            <summary>
            Changes the 2x2 scale part of the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.SetRotationScale(System.Double,System.Double,GenMathematics.Matrices.double2x2@)">
            <summary>
            Creates a 2x2 rotation and scale matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.SetRotationScale(System.Double,GenMathematics.Vectors.double2@,GenMathematics.Matrices.double2x2@)">
            <summary>
            Creates a 2x2 rotation and scale matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.SetRotation(System.Double,GenMathematics.Matrices.double2x3@)">
            <summary>
            Inserts a 2x2 rotation matrix without changing other values
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.SetScale(System.Double,GenMathematics.Matrices.double2x3@)">
            <summary>
            Inserts a 2x2 scale matrix without changing other values
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.SetScale(GenMathematics.Vectors.double2@,GenMathematics.Matrices.double2x3@)">
            <summary>
            Inserts a 2x2 scale matrix without changing other values
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.ChangeScale(System.Double,GenMathematics.Matrices.double2x3@)">
            <summary>
            Changes the 2x2 scale part of the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.ChangeScale(GenMathematics.Vectors.double2@,GenMathematics.Matrices.double2x3@)">
            <summary>
            Changes the 2x2 scale part of the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.SetTranslation(GenMathematics.Vectors.double2@,GenMathematics.Matrices.double2x3@)">
            <summary>
            Inserts a 2D translation into the 3rd column of the matrix without changing other values
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.SetRotationScale(System.Double,System.Double,GenMathematics.Matrices.double2x3@)">
            <summary>
            Inserts a 2x2 rotation and scale matrix without changing other values
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.SetRotationScale(System.Double,GenMathematics.Vectors.double2@,GenMathematics.Matrices.double2x3@)">
            <summary>
            Inserts a 2x2 rotation and scale matrix without changing other values
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.SetRotation(System.Double,GenMathematics.Matrices.double2x4@)">
            <summary>
            Inserts a 2x2 rotation matrix without changing other values
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.SetScale(System.Double,GenMathematics.Matrices.double2x4@)">
            <summary>
            Inserts a 2x2 scale matrix without changing other values
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.SetScale(GenMathematics.Vectors.double2@,GenMathematics.Matrices.double2x4@)">
            <summary>
            Inserts a 2x2 scale matrix without changing other values
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.ChangeScale(System.Double,GenMathematics.Matrices.double2x4@)">
            <summary>
            Changes the 2x2 scale part of the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.ChangeScale(GenMathematics.Vectors.double2@,GenMathematics.Matrices.double2x4@)">
            <summary>
            Changes the 2x2 scale part of the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.SetTranslation(GenMathematics.Vectors.double2@,GenMathematics.Matrices.double2x4@)">
            <summary>
            Inserts a 2D translation into the 3rd column of the matrix without changing other values
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.SetRotationScale(System.Double,System.Double,GenMathematics.Matrices.double2x4@)">
            <summary>
            Inserts a 2x2 rotation and scale matrix without changing other values
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.SetRotationScale(System.Double,GenMathematics.Vectors.double2@,GenMathematics.Matrices.double2x4@)">
            <summary>
            Inserts a 2x2 rotation and scale matrix without changing other values
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.SetRotation(GenMathematics.Vectors.double3@,GenMathematics.Vectors.double3@,GenMathematics.Matrices.double3x3@)">
            <summary>
            Creates a 3x3 rotation matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.SetRotationX(System.Double,GenMathematics.Matrices.double3x3@)">
            <summary>
            Creates a 3x3 rotation matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.SetRotationY(System.Double,GenMathematics.Matrices.double3x3@)">
            <summary>
            Creates a 3x3 rotation matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.SetRotationZ(System.Double,GenMathematics.Matrices.double3x3@)">
            <summary>
            Creates a 3x3 rotation matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.SetScale(System.Double,GenMathematics.Matrices.double3x3@)">
            <summary>
            Creates a 3x3 scale matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.SetScale(GenMathematics.Vectors.double3@,GenMathematics.Matrices.double3x3@)">
            <summary>
            Creates a 3x3 scale matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.ChangeScale(System.Double,GenMathematics.Matrices.double3x3@)">
            <summary>
            Changes the 3x3 scale part of the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.ChangeScale(GenMathematics.Vectors.double3@,GenMathematics.Matrices.double3x3@)">
            <summary>
            Changes the 3x3 scale part of the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.SetRotation(GenMathematics.Vectors.double3@,GenMathematics.Vectors.double3@,GenMathematics.Matrices.double3x4@)">
            <summary>
            Inserts a 3x3 rotation matrix without changing other values
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.SetRotationX(System.Double,GenMathematics.Matrices.double3x4@)">
            <summary>
            Inserts a 3x3 rotation matrix without changing other values
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.SetRotationY(System.Double,GenMathematics.Matrices.double3x4@)">
            <summary>
            Inserts a 3x3 rotation matrix without changing other values
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.SetRotationZ(System.Double,GenMathematics.Matrices.double3x4@)">
            <summary>
            Inserts a 3x3 rotation matrix without changing other values
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.SetScale(System.Double,GenMathematics.Matrices.double3x4@)">
            <summary>
            Inserts a 3x3 scale matrix without changing other values
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.SetScale(GenMathematics.Vectors.double3@,GenMathematics.Matrices.double3x4@)">
            <summary>
            Inserts a 3x3 scale matrix without changing other values
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.ChangeScale(System.Double,GenMathematics.Matrices.double3x4@)">
            <summary>
            Changes the 3x3 scale part of the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.ChangeScale(GenMathematics.Vectors.double3@,GenMathematics.Matrices.double3x4@)">
            <summary>
            Changes the 3x3 scale part of the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.SetTranslation(GenMathematics.Vectors.double3@,GenMathematics.Matrices.double3x4@)">
            <summary>
            Inserts a 3D translation into the 4th column of the matrix without changing other values
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.LookAtMatrix(GenMathematics.Vectors.double3@,GenMathematics.Vectors.double3@,GenMathematics.Vectors.double3@,GenMathematics.Matrices.double3x4@)">
            <summary>
            Creates a right-handed view matrix
            </summary>
            <param name="fromPos">The position of the camera</param>
            <param name="toPos">The target towards which the camera is pointing</param>
            <param name="up">The direction that is "up" from the camera's point of view</param>
            <param name="matrix">The right-handed view matrix</param>
        </member>
        <member name="M:GenMathematics.GenMath.SetRotation(GenMathematics.Vectors.double3@,GenMathematics.Vectors.double3@,GenMathematics.Matrices.double4x3@)">
            <summary>
            Inserts a 3x3 rotation matrix without changing other values
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.SetRotationX(System.Double,GenMathematics.Matrices.double4x3@)">
            <summary>
            Inserts a 3x3 rotation matrix without changing other values
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.SetRotationY(System.Double,GenMathematics.Matrices.double4x3@)">
            <summary>
            Inserts a 3x3 rotation matrix without changing other values
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.SetRotationZ(System.Double,GenMathematics.Matrices.double4x3@)">
            <summary>
            Inserts a 3x3 rotation matrix without changing other values
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.SetScale(System.Double,GenMathematics.Matrices.double4x3@)">
            <summary>
            Inserts a 3x3 scale matrix without changing other values
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.SetScale(GenMathematics.Vectors.double3@,GenMathematics.Matrices.double4x3@)">
            <summary>
            Inserts a 3x3 scale matrix without changing other values
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.ChangeScale(System.Double,GenMathematics.Matrices.double4x3@)">
            <summary>
            Changes the 3x3 scale part of the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.ChangeScale(GenMathematics.Vectors.double3@,GenMathematics.Matrices.double4x3@)">
            <summary>
            Changes the 3x3 scale part of the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.SetRotation(GenMathematics.Vectors.double3@,GenMathematics.Vectors.double3@,GenMathematics.Matrices.double4x4@)">
            <summary>
            Inserts a 3x3 rotation matrix without changing other values
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.SetRotationX(System.Double,GenMathematics.Matrices.double4x4@)">
            <summary>
            Inserts a 3x3 rotation matrix without changing other values
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.SetRotationY(System.Double,GenMathematics.Matrices.double4x4@)">
            <summary>
            Inserts a 3x3 rotation matrix without changing other values
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.SetRotationZ(System.Double,GenMathematics.Matrices.double4x4@)">
            <summary>
            Inserts a 3x3 rotation matrix without changing other values
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.SetScale(System.Double,GenMathematics.Matrices.double4x4@)">
            <summary>
            Inserts a 3x3 scale matrix without changing other values
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.SetScale(GenMathematics.Vectors.double3@,GenMathematics.Matrices.double4x4@)">
            <summary>
            Inserts a 3x3 scale matrix without changing other values
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.ChangeScale(System.Double,GenMathematics.Matrices.double4x4@)">
            <summary>
            Changes the 3x3 scale part of the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.ChangeScale(GenMathematics.Vectors.double3@,GenMathematics.Matrices.double4x4@)">
            <summary>
            Changes the 3x3 scale part of the matrix
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.SetTranslation(GenMathematics.Vectors.double3@,GenMathematics.Matrices.double4x4@)">
            <summary>
            Inserts a 3D translation into the 4th column of the matrix without changing other values
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.LookAtMatrix(GenMathematics.Vectors.double3@,GenMathematics.Vectors.double3@,GenMathematics.Vectors.double3@,GenMathematics.Matrices.double4x4@)">
            <summary>
            Creates a right-handed view matrix
            </summary>
            <param name="fromPos">The position of the camera</param>
            <param name="toPos">The target towards which the camera is pointing</param>
            <param name="up">The direction that is "up" from the camera's point of view</param>
            <param name="matrix">The right-handed view matrix</param>
        </member>
        <member name="M:GenMathematics.GenMath.OrthographicMatrix(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,GenMathematics.Matrices.double4x4@)">
            <summary>
            Creates a right-handed orthographic projection matrix
            </summary>
            <param name="left">The minimum X-value of the view volume</param>
            <param name="right">The maximum X-value of the view volume</param>
            <param name="bottom">The minimum Y-value of the view volume</param>
            <param name="top">The maximum Y-value of the view volume</param>
            <param name="depthNear">The minimum Z-value of the view volume</param>
            <param name="depthFar">The maximum Z-value of the view volume</param>
            <param name="matrix">The right-handed orthographic projection matrix</param>
        </member>
        <member name="M:GenMathematics.GenMath.PerspectiveMatrix(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,GenMathematics.Matrices.double4x4@)">
            <summary>
            Creates a right-handed perspective projection matrix
            </summary>
            <param name="left">The minimum x-value of the view volume at the near view plane</param>
            <param name="right">The maximum x-value of the view volume at the near view plane</param>
            <param name="bottom">The minimum y-value of the view volume at the near view plane</param>
            <param name="top">The maximum y-value of the view volume at the near view plane</param>
            <param name="depthNear">The distance to the near view plane</param>
            <param name="depthFar">The distance to the far view plane</param>
            <param name="matrix">The right-handed perspective projection matrix</param>
        </member>
        <member name="M:GenMathematics.GenMath.Shift(GenMathematics.Vectors.byte2,System.Int32)">
            <summary>
            Shifts components in a loop in a positive or negative direction
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Select(GenMathematics.Vectors.byte2,GenMathematics.Vectors.byte2,GenMathematics.Vectors.bool2)">
            <summary>
            Selects components from two vectors according to conditions
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Select(GenMathematics.Vectors.byte2,GenMathematics.Vectors.byte2,System.Boolean)">
            <summary>
            Selects components from two vectors according to condition
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CompressLeft(GenMathematics.Vectors.byte2,GenMathematics.Vectors.bool2)">
            <summary>
            Leaves the components specified in the condition and shifts them to the left
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CompressLeft(GenMathematics.Vectors.byte2,System.Int32)">
            <summary>
            Leaves the components specified in the mask and shifts them to the left
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CompressRight(GenMathematics.Vectors.byte2,GenMathematics.Vectors.bool2)">
            <summary>
            Leaves the components specified in the condition and shifts them to the right
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CompressRight(GenMathematics.Vectors.byte2,System.Int32)">
            <summary>
            Leaves the components specified in the mask and shifts them to the right
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.UnionMin(GenMathematics.Vectors.byte2)">
            <summary>
            Returns the minimum vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.UnionMax(GenMathematics.Vectors.byte2)">
            <summary>
            Returns the maximum vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.UnionSum(GenMathematics.Vectors.byte2)">
            <summary>
            Returns the sum of the vector components
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Min(GenMathematics.Vectors.byte2,GenMathematics.Vectors.byte2)">
            <summary>
            Computes the smallest value of two for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Max(GenMathematics.Vectors.byte2,GenMathematics.Vectors.byte2)">
            <summary>
            Computes the largest value of two for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Clamp(GenMathematics.Vectors.byte2,GenMathematics.Vectors.byte2,GenMathematics.Vectors.byte2)">
            <summary>
            Clamps each vector component between min and max
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Clamp(GenMathematics.Vectors.byte2,System.Byte,System.Byte)">
            <summary>
            Clamps each vector component between min and max
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.IsZero(GenMathematics.Vectors.byte2)">
            <summary>
            Returns true if all components are zero
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.AnyZero(GenMathematics.Vectors.byte2)">
            <summary>
            Returns true if at least one of the components is zero
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Shift(GenMathematics.Vectors.byte3,System.Int32)">
            <summary>
            Shifts components in a loop in a positive or negative direction
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Select(GenMathematics.Vectors.byte3,GenMathematics.Vectors.byte3,GenMathematics.Vectors.bool3)">
            <summary>
            Selects components from two vectors according to conditions
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Select(GenMathematics.Vectors.byte3,GenMathematics.Vectors.byte3,System.Boolean)">
            <summary>
            Selects components from two vectors according to condition
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CompressLeft(GenMathematics.Vectors.byte3,GenMathematics.Vectors.bool3)">
            <summary>
            Leaves the components specified in the condition and shifts them to the left
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CompressLeft(GenMathematics.Vectors.byte3,System.Int32)">
            <summary>
            Leaves the components specified in the mask and shifts them to the left
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CompressRight(GenMathematics.Vectors.byte3,GenMathematics.Vectors.bool3)">
            <summary>
            Leaves the components specified in the condition and shifts them to the right
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CompressRight(GenMathematics.Vectors.byte3,System.Int32)">
            <summary>
            Leaves the components specified in the mask and shifts them to the right
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.UnionMin(GenMathematics.Vectors.byte3)">
            <summary>
            Returns the minimum vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.UnionMax(GenMathematics.Vectors.byte3)">
            <summary>
            Returns the maximum vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.UnionSum(GenMathematics.Vectors.byte3)">
            <summary>
            Returns the sum of the vector components
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Min(GenMathematics.Vectors.byte3,GenMathematics.Vectors.byte3)">
            <summary>
            Computes the smallest value of two for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Max(GenMathematics.Vectors.byte3,GenMathematics.Vectors.byte3)">
            <summary>
            Computes the largest value of two for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Clamp(GenMathematics.Vectors.byte3,GenMathematics.Vectors.byte3,GenMathematics.Vectors.byte3)">
            <summary>
            Clamps each vector component between min and max
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Clamp(GenMathematics.Vectors.byte3,System.Byte,System.Byte)">
            <summary>
            Clamps each vector component between min and max
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.IsZero(GenMathematics.Vectors.byte3)">
            <summary>
            Returns true if all components are zero
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.AnyZero(GenMathematics.Vectors.byte3)">
            <summary>
            Returns true if at least one of the components is zero
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Shift(GenMathematics.Vectors.byte4,System.Int32)">
            <summary>
            Shifts components in a loop in a positive or negative direction
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Select(GenMathematics.Vectors.byte4,GenMathematics.Vectors.byte4,GenMathematics.Vectors.bool4)">
            <summary>
            Selects components from two vectors according to conditions
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Select(GenMathematics.Vectors.byte4,GenMathematics.Vectors.byte4,System.Boolean)">
            <summary>
            Selects components from two vectors according to condition
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CompressLeft(GenMathematics.Vectors.byte4,GenMathematics.Vectors.bool4)">
            <summary>
            Leaves the components specified in the condition and shifts them to the left
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CompressLeft(GenMathematics.Vectors.byte4,System.Int32)">
            <summary>
            Leaves the components specified in the mask and shifts them to the left
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CompressRight(GenMathematics.Vectors.byte4,GenMathematics.Vectors.bool4)">
            <summary>
            Leaves the components specified in the condition and shifts them to the right
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CompressRight(GenMathematics.Vectors.byte4,System.Int32)">
            <summary>
            Leaves the components specified in the mask and shifts them to the right
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.UnionMin(GenMathematics.Vectors.byte4)">
            <summary>
            Returns the minimum vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.UnionMax(GenMathematics.Vectors.byte4)">
            <summary>
            Returns the maximum vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.UnionSum(GenMathematics.Vectors.byte4)">
            <summary>
            Returns the sum of the vector components
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Min(GenMathematics.Vectors.byte4,GenMathematics.Vectors.byte4)">
            <summary>
            Computes the smallest value of two for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Max(GenMathematics.Vectors.byte4,GenMathematics.Vectors.byte4)">
            <summary>
            Computes the largest value of two for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Clamp(GenMathematics.Vectors.byte4,GenMathematics.Vectors.byte4,GenMathematics.Vectors.byte4)">
            <summary>
            Clamps each vector component between min and max
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Clamp(GenMathematics.Vectors.byte4,System.Byte,System.Byte)">
            <summary>
            Clamps each vector component between min and max
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.IsZero(GenMathematics.Vectors.byte4)">
            <summary>
            Returns true if all components are zero
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.AnyZero(GenMathematics.Vectors.byte4)">
            <summary>
            Returns true if at least one of the components is zero
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Shift(GenMathematics.Vectors.ushort2,System.Int32)">
            <summary>
            Shifts components in a loop in a positive or negative direction
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Select(GenMathematics.Vectors.ushort2,GenMathematics.Vectors.ushort2,GenMathematics.Vectors.bool2)">
            <summary>
            Selects components from two vectors according to conditions
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Select(GenMathematics.Vectors.ushort2,GenMathematics.Vectors.ushort2,System.Boolean)">
            <summary>
            Selects components from two vectors according to condition
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CompressLeft(GenMathematics.Vectors.ushort2,GenMathematics.Vectors.bool2)">
            <summary>
            Leaves the components specified in the condition and shifts them to the left
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CompressLeft(GenMathematics.Vectors.ushort2,System.Int32)">
            <summary>
            Leaves the components specified in the mask and shifts them to the left
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CompressRight(GenMathematics.Vectors.ushort2,GenMathematics.Vectors.bool2)">
            <summary>
            Leaves the components specified in the condition and shifts them to the right
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CompressRight(GenMathematics.Vectors.ushort2,System.Int32)">
            <summary>
            Leaves the components specified in the mask and shifts them to the right
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.UnionMin(GenMathematics.Vectors.ushort2)">
            <summary>
            Returns the minimum vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.UnionMax(GenMathematics.Vectors.ushort2)">
            <summary>
            Returns the maximum vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.UnionSum(GenMathematics.Vectors.ushort2)">
            <summary>
            Returns the sum of the vector components
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Min(GenMathematics.Vectors.ushort2,GenMathematics.Vectors.ushort2)">
            <summary>
            Computes the smallest value of two for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Max(GenMathematics.Vectors.ushort2,GenMathematics.Vectors.ushort2)">
            <summary>
            Computes the largest value of two for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Clamp(GenMathematics.Vectors.ushort2,GenMathematics.Vectors.ushort2,GenMathematics.Vectors.ushort2)">
            <summary>
            Clamps each vector component between min and max
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Clamp(GenMathematics.Vectors.ushort2,System.UInt16,System.UInt16)">
            <summary>
            Clamps each vector component between min and max
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.IsZero(GenMathematics.Vectors.ushort2)">
            <summary>
            Returns true if all components are zero
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.AnyZero(GenMathematics.Vectors.ushort2)">
            <summary>
            Returns true if at least one of the components is zero
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Shift(GenMathematics.Vectors.ushort3,System.Int32)">
            <summary>
            Shifts components in a loop in a positive or negative direction
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Select(GenMathematics.Vectors.ushort3,GenMathematics.Vectors.ushort3,GenMathematics.Vectors.bool3)">
            <summary>
            Selects components from two vectors according to conditions
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Select(GenMathematics.Vectors.ushort3,GenMathematics.Vectors.ushort3,System.Boolean)">
            <summary>
            Selects components from two vectors according to condition
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CompressLeft(GenMathematics.Vectors.ushort3,GenMathematics.Vectors.bool3)">
            <summary>
            Leaves the components specified in the condition and shifts them to the left
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CompressLeft(GenMathematics.Vectors.ushort3,System.Int32)">
            <summary>
            Leaves the components specified in the mask and shifts them to the left
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CompressRight(GenMathematics.Vectors.ushort3,GenMathematics.Vectors.bool3)">
            <summary>
            Leaves the components specified in the condition and shifts them to the right
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CompressRight(GenMathematics.Vectors.ushort3,System.Int32)">
            <summary>
            Leaves the components specified in the mask and shifts them to the right
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.UnionMin(GenMathematics.Vectors.ushort3)">
            <summary>
            Returns the minimum vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.UnionMax(GenMathematics.Vectors.ushort3)">
            <summary>
            Returns the maximum vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.UnionSum(GenMathematics.Vectors.ushort3)">
            <summary>
            Returns the sum of the vector components
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Min(GenMathematics.Vectors.ushort3,GenMathematics.Vectors.ushort3)">
            <summary>
            Computes the smallest value of two for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Max(GenMathematics.Vectors.ushort3,GenMathematics.Vectors.ushort3)">
            <summary>
            Computes the largest value of two for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Clamp(GenMathematics.Vectors.ushort3,GenMathematics.Vectors.ushort3,GenMathematics.Vectors.ushort3)">
            <summary>
            Clamps each vector component between min and max
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Clamp(GenMathematics.Vectors.ushort3,System.UInt16,System.UInt16)">
            <summary>
            Clamps each vector component between min and max
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.IsZero(GenMathematics.Vectors.ushort3)">
            <summary>
            Returns true if all components are zero
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.AnyZero(GenMathematics.Vectors.ushort3)">
            <summary>
            Returns true if at least one of the components is zero
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Shift(GenMathematics.Vectors.ushort4,System.Int32)">
            <summary>
            Shifts components in a loop in a positive or negative direction
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Select(GenMathematics.Vectors.ushort4,GenMathematics.Vectors.ushort4,GenMathematics.Vectors.bool4)">
            <summary>
            Selects components from two vectors according to conditions
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Select(GenMathematics.Vectors.ushort4,GenMathematics.Vectors.ushort4,System.Boolean)">
            <summary>
            Selects components from two vectors according to condition
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CompressLeft(GenMathematics.Vectors.ushort4,GenMathematics.Vectors.bool4)">
            <summary>
            Leaves the components specified in the condition and shifts them to the left
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CompressLeft(GenMathematics.Vectors.ushort4,System.Int32)">
            <summary>
            Leaves the components specified in the mask and shifts them to the left
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CompressRight(GenMathematics.Vectors.ushort4,GenMathematics.Vectors.bool4)">
            <summary>
            Leaves the components specified in the condition and shifts them to the right
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CompressRight(GenMathematics.Vectors.ushort4,System.Int32)">
            <summary>
            Leaves the components specified in the mask and shifts them to the right
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.UnionMin(GenMathematics.Vectors.ushort4)">
            <summary>
            Returns the minimum vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.UnionMax(GenMathematics.Vectors.ushort4)">
            <summary>
            Returns the maximum vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.UnionSum(GenMathematics.Vectors.ushort4)">
            <summary>
            Returns the sum of the vector components
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Min(GenMathematics.Vectors.ushort4,GenMathematics.Vectors.ushort4)">
            <summary>
            Computes the smallest value of two for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Max(GenMathematics.Vectors.ushort4,GenMathematics.Vectors.ushort4)">
            <summary>
            Computes the largest value of two for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Clamp(GenMathematics.Vectors.ushort4,GenMathematics.Vectors.ushort4,GenMathematics.Vectors.ushort4)">
            <summary>
            Clamps each vector component between min and max
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Clamp(GenMathematics.Vectors.ushort4,System.UInt16,System.UInt16)">
            <summary>
            Clamps each vector component between min and max
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.IsZero(GenMathematics.Vectors.ushort4)">
            <summary>
            Returns true if all components are zero
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.AnyZero(GenMathematics.Vectors.ushort4)">
            <summary>
            Returns true if at least one of the components is zero
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Shift(GenMathematics.Vectors.sbyte2,System.Int32)">
            <summary>
            Shifts components in a loop in a positive or negative direction
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Select(GenMathematics.Vectors.sbyte2,GenMathematics.Vectors.sbyte2,GenMathematics.Vectors.bool2)">
            <summary>
            Selects components from two vectors according to conditions
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Select(GenMathematics.Vectors.sbyte2,GenMathematics.Vectors.sbyte2,System.Boolean)">
            <summary>
            Selects components from two vectors according to condition
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CompressLeft(GenMathematics.Vectors.sbyte2,GenMathematics.Vectors.bool2)">
            <summary>
            Leaves the components specified in the condition and shifts them to the left
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CompressLeft(GenMathematics.Vectors.sbyte2,System.Int32)">
            <summary>
            Leaves the components specified in the mask and shifts them to the left
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CompressRight(GenMathematics.Vectors.sbyte2,GenMathematics.Vectors.bool2)">
            <summary>
            Leaves the components specified in the condition and shifts them to the right
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CompressRight(GenMathematics.Vectors.sbyte2,System.Int32)">
            <summary>
            Leaves the components specified in the mask and shifts them to the right
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.UnionMin(GenMathematics.Vectors.sbyte2)">
            <summary>
            Returns the minimum vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.UnionMax(GenMathematics.Vectors.sbyte2)">
            <summary>
            Returns the maximum vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.UnionSum(GenMathematics.Vectors.sbyte2)">
            <summary>
            Returns the sum of the vector components
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Min(GenMathematics.Vectors.sbyte2,GenMathematics.Vectors.sbyte2)">
            <summary>
            Computes the smallest value of two for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Max(GenMathematics.Vectors.sbyte2,GenMathematics.Vectors.sbyte2)">
            <summary>
            Computes the largest value of two for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Clamp(GenMathematics.Vectors.sbyte2,GenMathematics.Vectors.sbyte2,GenMathematics.Vectors.sbyte2)">
            <summary>
            Clamps each vector component between min and max
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Clamp(GenMathematics.Vectors.sbyte2,System.SByte,System.SByte)">
            <summary>
            Clamps each vector component between min and max
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.IsZero(GenMathematics.Vectors.sbyte2)">
            <summary>
            Returns true if all components are zero
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.AnyZero(GenMathematics.Vectors.sbyte2)">
            <summary>
            Returns true if at least one of the components is zero
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Abs(GenMathematics.Vectors.sbyte2)">
            <summary>
            Computes the absolute for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Sign(GenMathematics.Vectors.sbyte2)">
            <summary>
            Returns the sign of each component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.BitSign(GenMathematics.Vectors.sbyte2)">
            <summary>
            Sets a bit for a component if it is less than zero
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.BoolSign(GenMathematics.Vectors.sbyte2)">
            <summary>
            Returns true for a component if it is less than zero
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Shift(GenMathematics.Vectors.sbyte3,System.Int32)">
            <summary>
            Shifts components in a loop in a positive or negative direction
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Select(GenMathematics.Vectors.sbyte3,GenMathematics.Vectors.sbyte3,GenMathematics.Vectors.bool3)">
            <summary>
            Selects components from two vectors according to conditions
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Select(GenMathematics.Vectors.sbyte3,GenMathematics.Vectors.sbyte3,System.Boolean)">
            <summary>
            Selects components from two vectors according to condition
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CompressLeft(GenMathematics.Vectors.sbyte3,GenMathematics.Vectors.bool3)">
            <summary>
            Leaves the components specified in the condition and shifts them to the left
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CompressLeft(GenMathematics.Vectors.sbyte3,System.Int32)">
            <summary>
            Leaves the components specified in the mask and shifts them to the left
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CompressRight(GenMathematics.Vectors.sbyte3,GenMathematics.Vectors.bool3)">
            <summary>
            Leaves the components specified in the condition and shifts them to the right
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CompressRight(GenMathematics.Vectors.sbyte3,System.Int32)">
            <summary>
            Leaves the components specified in the mask and shifts them to the right
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.UnionMin(GenMathematics.Vectors.sbyte3)">
            <summary>
            Returns the minimum vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.UnionMax(GenMathematics.Vectors.sbyte3)">
            <summary>
            Returns the maximum vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.UnionSum(GenMathematics.Vectors.sbyte3)">
            <summary>
            Returns the sum of the vector components
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Min(GenMathematics.Vectors.sbyte3,GenMathematics.Vectors.sbyte3)">
            <summary>
            Computes the smallest value of two for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Max(GenMathematics.Vectors.sbyte3,GenMathematics.Vectors.sbyte3)">
            <summary>
            Computes the largest value of two for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Clamp(GenMathematics.Vectors.sbyte3,GenMathematics.Vectors.sbyte3,GenMathematics.Vectors.sbyte3)">
            <summary>
            Clamps each vector component between min and max
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Clamp(GenMathematics.Vectors.sbyte3,System.SByte,System.SByte)">
            <summary>
            Clamps each vector component between min and max
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.IsZero(GenMathematics.Vectors.sbyte3)">
            <summary>
            Returns true if all components are zero
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.AnyZero(GenMathematics.Vectors.sbyte3)">
            <summary>
            Returns true if at least one of the components is zero
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Abs(GenMathematics.Vectors.sbyte3)">
            <summary>
            Computes the absolute for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Sign(GenMathematics.Vectors.sbyte3)">
            <summary>
            Returns the sign of each component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.BitSign(GenMathematics.Vectors.sbyte3)">
            <summary>
            Sets a bit for a component if it is less than zero
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.BoolSign(GenMathematics.Vectors.sbyte3)">
            <summary>
            Returns true for a component if it is less than zero
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Shift(GenMathematics.Vectors.sbyte4,System.Int32)">
            <summary>
            Shifts components in a loop in a positive or negative direction
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Select(GenMathematics.Vectors.sbyte4,GenMathematics.Vectors.sbyte4,GenMathematics.Vectors.bool4)">
            <summary>
            Selects components from two vectors according to conditions
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Select(GenMathematics.Vectors.sbyte4,GenMathematics.Vectors.sbyte4,System.Boolean)">
            <summary>
            Selects components from two vectors according to condition
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CompressLeft(GenMathematics.Vectors.sbyte4,GenMathematics.Vectors.bool4)">
            <summary>
            Leaves the components specified in the condition and shifts them to the left
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CompressLeft(GenMathematics.Vectors.sbyte4,System.Int32)">
            <summary>
            Leaves the components specified in the mask and shifts them to the left
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CompressRight(GenMathematics.Vectors.sbyte4,GenMathematics.Vectors.bool4)">
            <summary>
            Leaves the components specified in the condition and shifts them to the right
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CompressRight(GenMathematics.Vectors.sbyte4,System.Int32)">
            <summary>
            Leaves the components specified in the mask and shifts them to the right
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.UnionMin(GenMathematics.Vectors.sbyte4)">
            <summary>
            Returns the minimum vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.UnionMax(GenMathematics.Vectors.sbyte4)">
            <summary>
            Returns the maximum vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.UnionSum(GenMathematics.Vectors.sbyte4)">
            <summary>
            Returns the sum of the vector components
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Min(GenMathematics.Vectors.sbyte4,GenMathematics.Vectors.sbyte4)">
            <summary>
            Computes the smallest value of two for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Max(GenMathematics.Vectors.sbyte4,GenMathematics.Vectors.sbyte4)">
            <summary>
            Computes the largest value of two for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Clamp(GenMathematics.Vectors.sbyte4,GenMathematics.Vectors.sbyte4,GenMathematics.Vectors.sbyte4)">
            <summary>
            Clamps each vector component between min and max
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Clamp(GenMathematics.Vectors.sbyte4,System.SByte,System.SByte)">
            <summary>
            Clamps each vector component between min and max
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.IsZero(GenMathematics.Vectors.sbyte4)">
            <summary>
            Returns true if all components are zero
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.AnyZero(GenMathematics.Vectors.sbyte4)">
            <summary>
            Returns true if at least one of the components is zero
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Abs(GenMathematics.Vectors.sbyte4)">
            <summary>
            Computes the absolute for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Sign(GenMathematics.Vectors.sbyte4)">
            <summary>
            Returns the sign of each component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.BitSign(GenMathematics.Vectors.sbyte4)">
            <summary>
            Sets a bit for a component if it is less than zero
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.BoolSign(GenMathematics.Vectors.sbyte4)">
            <summary>
            Returns true for a component if it is less than zero
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Shift(GenMathematics.Vectors.short2,System.Int32)">
            <summary>
            Shifts components in a loop in a positive or negative direction
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Select(GenMathematics.Vectors.short2,GenMathematics.Vectors.short2,GenMathematics.Vectors.bool2)">
            <summary>
            Selects components from two vectors according to conditions
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Select(GenMathematics.Vectors.short2,GenMathematics.Vectors.short2,System.Boolean)">
            <summary>
            Selects components from two vectors according to condition
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CompressLeft(GenMathematics.Vectors.short2,GenMathematics.Vectors.bool2)">
            <summary>
            Leaves the components specified in the condition and shifts them to the left
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CompressLeft(GenMathematics.Vectors.short2,System.Int32)">
            <summary>
            Leaves the components specified in the mask and shifts them to the left
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CompressRight(GenMathematics.Vectors.short2,GenMathematics.Vectors.bool2)">
            <summary>
            Leaves the components specified in the condition and shifts them to the right
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CompressRight(GenMathematics.Vectors.short2,System.Int32)">
            <summary>
            Leaves the components specified in the mask and shifts them to the right
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.UnionMin(GenMathematics.Vectors.short2)">
            <summary>
            Returns the minimum vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.UnionMax(GenMathematics.Vectors.short2)">
            <summary>
            Returns the maximum vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.UnionSum(GenMathematics.Vectors.short2)">
            <summary>
            Returns the sum of the vector components
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Min(GenMathematics.Vectors.short2,GenMathematics.Vectors.short2)">
            <summary>
            Computes the smallest value of two for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Max(GenMathematics.Vectors.short2,GenMathematics.Vectors.short2)">
            <summary>
            Computes the largest value of two for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Clamp(GenMathematics.Vectors.short2,GenMathematics.Vectors.short2,GenMathematics.Vectors.short2)">
            <summary>
            Clamps each vector component between min and max
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Clamp(GenMathematics.Vectors.short2,System.Int16,System.Int16)">
            <summary>
            Clamps each vector component between min and max
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.IsZero(GenMathematics.Vectors.short2)">
            <summary>
            Returns true if all components are zero
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.AnyZero(GenMathematics.Vectors.short2)">
            <summary>
            Returns true if at least one of the components is zero
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Abs(GenMathematics.Vectors.short2)">
            <summary>
            Computes the absolute for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Sign(GenMathematics.Vectors.short2)">
            <summary>
            Returns the sign of each component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.BitSign(GenMathematics.Vectors.short2)">
            <summary>
            Sets a bit for a component if it is less than zero
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.BoolSign(GenMathematics.Vectors.short2)">
            <summary>
            Returns true for a component if it is less than zero
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Shift(GenMathematics.Vectors.short3,System.Int32)">
            <summary>
            Shifts components in a loop in a positive or negative direction
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Select(GenMathematics.Vectors.short3,GenMathematics.Vectors.short3,GenMathematics.Vectors.bool3)">
            <summary>
            Selects components from two vectors according to conditions
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Select(GenMathematics.Vectors.short3,GenMathematics.Vectors.short3,System.Boolean)">
            <summary>
            Selects components from two vectors according to condition
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CompressLeft(GenMathematics.Vectors.short3,GenMathematics.Vectors.bool3)">
            <summary>
            Leaves the components specified in the condition and shifts them to the left
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CompressLeft(GenMathematics.Vectors.short3,System.Int32)">
            <summary>
            Leaves the components specified in the mask and shifts them to the left
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CompressRight(GenMathematics.Vectors.short3,GenMathematics.Vectors.bool3)">
            <summary>
            Leaves the components specified in the condition and shifts them to the right
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CompressRight(GenMathematics.Vectors.short3,System.Int32)">
            <summary>
            Leaves the components specified in the mask and shifts them to the right
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.UnionMin(GenMathematics.Vectors.short3)">
            <summary>
            Returns the minimum vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.UnionMax(GenMathematics.Vectors.short3)">
            <summary>
            Returns the maximum vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.UnionSum(GenMathematics.Vectors.short3)">
            <summary>
            Returns the sum of the vector components
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Min(GenMathematics.Vectors.short3,GenMathematics.Vectors.short3)">
            <summary>
            Computes the smallest value of two for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Max(GenMathematics.Vectors.short3,GenMathematics.Vectors.short3)">
            <summary>
            Computes the largest value of two for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Clamp(GenMathematics.Vectors.short3,GenMathematics.Vectors.short3,GenMathematics.Vectors.short3)">
            <summary>
            Clamps each vector component between min and max
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Clamp(GenMathematics.Vectors.short3,System.Int16,System.Int16)">
            <summary>
            Clamps each vector component between min and max
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.IsZero(GenMathematics.Vectors.short3)">
            <summary>
            Returns true if all components are zero
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.AnyZero(GenMathematics.Vectors.short3)">
            <summary>
            Returns true if at least one of the components is zero
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Abs(GenMathematics.Vectors.short3)">
            <summary>
            Computes the absolute for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Sign(GenMathematics.Vectors.short3)">
            <summary>
            Returns the sign of each component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.BitSign(GenMathematics.Vectors.short3)">
            <summary>
            Sets a bit for a component if it is less than zero
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.BoolSign(GenMathematics.Vectors.short3)">
            <summary>
            Returns true for a component if it is less than zero
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Shift(GenMathematics.Vectors.short4,System.Int32)">
            <summary>
            Shifts components in a loop in a positive or negative direction
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Select(GenMathematics.Vectors.short4,GenMathematics.Vectors.short4,GenMathematics.Vectors.bool4)">
            <summary>
            Selects components from two vectors according to conditions
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Select(GenMathematics.Vectors.short4,GenMathematics.Vectors.short4,System.Boolean)">
            <summary>
            Selects components from two vectors according to condition
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CompressLeft(GenMathematics.Vectors.short4,GenMathematics.Vectors.bool4)">
            <summary>
            Leaves the components specified in the condition and shifts them to the left
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CompressLeft(GenMathematics.Vectors.short4,System.Int32)">
            <summary>
            Leaves the components specified in the mask and shifts them to the left
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CompressRight(GenMathematics.Vectors.short4,GenMathematics.Vectors.bool4)">
            <summary>
            Leaves the components specified in the condition and shifts them to the right
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CompressRight(GenMathematics.Vectors.short4,System.Int32)">
            <summary>
            Leaves the components specified in the mask and shifts them to the right
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.UnionMin(GenMathematics.Vectors.short4)">
            <summary>
            Returns the minimum vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.UnionMax(GenMathematics.Vectors.short4)">
            <summary>
            Returns the maximum vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.UnionSum(GenMathematics.Vectors.short4)">
            <summary>
            Returns the sum of the vector components
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Min(GenMathematics.Vectors.short4,GenMathematics.Vectors.short4)">
            <summary>
            Computes the smallest value of two for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Max(GenMathematics.Vectors.short4,GenMathematics.Vectors.short4)">
            <summary>
            Computes the largest value of two for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Clamp(GenMathematics.Vectors.short4,GenMathematics.Vectors.short4,GenMathematics.Vectors.short4)">
            <summary>
            Clamps each vector component between min and max
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Clamp(GenMathematics.Vectors.short4,System.Int16,System.Int16)">
            <summary>
            Clamps each vector component between min and max
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.IsZero(GenMathematics.Vectors.short4)">
            <summary>
            Returns true if all components are zero
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.AnyZero(GenMathematics.Vectors.short4)">
            <summary>
            Returns true if at least one of the components is zero
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Abs(GenMathematics.Vectors.short4)">
            <summary>
            Computes the absolute for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Sign(GenMathematics.Vectors.short4)">
            <summary>
            Returns the sign of each component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.BitSign(GenMathematics.Vectors.short4)">
            <summary>
            Sets a bit for a component if it is less than zero
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.BoolSign(GenMathematics.Vectors.short4)">
            <summary>
            Returns true for a component if it is less than zero
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.UnionOr(GenMathematics.Vectors.bool2)">
            <summary>
            Returns the result of an OR operation between all vector components
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.UnionAnd(GenMathematics.Vectors.bool2)">
            <summary>
            Returns the result of an AND operation between all vector components
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Shift(GenMathematics.Vectors.bool2,System.Int32)">
            <summary>
            Shifts components in a loop in a positive or negative direction
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Select(GenMathematics.Vectors.bool2,GenMathematics.Vectors.bool2,GenMathematics.Vectors.bool2)">
            <summary>
            Selects components from two vectors according to conditions
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Select(GenMathematics.Vectors.bool2,GenMathematics.Vectors.bool2,System.Boolean)">
            <summary>
            Selects components from two vectors according to condition
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CompressLeft(GenMathematics.Vectors.bool2,GenMathematics.Vectors.bool2)">
            <summary>
            Leaves the components specified in the condition and shifts them to the left
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CompressLeft(GenMathematics.Vectors.bool2,System.Int32)">
            <summary>
            Leaves the components specified in the mask and shifts them to the left
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CompressRight(GenMathematics.Vectors.bool2,GenMathematics.Vectors.bool2)">
            <summary>
            Leaves the components specified in the condition and shifts them to the right
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CompressRight(GenMathematics.Vectors.bool2,System.Int32)">
            <summary>
            Leaves the components specified in the mask and shifts them to the right
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.UnionOr(GenMathematics.Vectors.bool3)">
            <summary>
            Returns the result of an OR operation between all vector components
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.UnionOrRef(GenMathematics.Vectors.bool3@)">
            <summary>
            Returns the result of an OR operation between all vector components
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.UnionAnd(GenMathematics.Vectors.bool3)">
            <summary>
            Returns the result of an AND operation between all vector components
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.UnionAndRef(GenMathematics.Vectors.bool3@)">
            <summary>
            Returns the result of an AND operation between all vector components
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Shift(GenMathematics.Vectors.bool3,System.Int32)">
            <summary>
            Shifts components in a loop in a positive or negative direction
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Shift(GenMathematics.Vectors.bool3,System.Int32,GenMathematics.Vectors.bool3@)">
            <summary>
            Shifts components in a loop in a positive or negative direction
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Select(GenMathematics.Vectors.bool3,GenMathematics.Vectors.bool3,GenMathematics.Vectors.bool3)">
            <summary>
            Selects components from two vectors according to conditions
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Select(GenMathematics.Vectors.bool3@,GenMathematics.Vectors.bool3@,GenMathematics.Vectors.bool3,GenMathematics.Vectors.bool3@)">
            <summary>
            Selects components from two vectors according to conditions
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Select(GenMathematics.Vectors.bool3,GenMathematics.Vectors.bool3,System.Boolean)">
            <summary>
            Selects components from two vectors according to condition
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Select(GenMathematics.Vectors.bool3@,GenMathematics.Vectors.bool3@,System.Boolean,GenMathematics.Vectors.bool3@)">
            <summary>
            Selects components from two vectors according to condition
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CompressLeft(GenMathematics.Vectors.bool3,GenMathematics.Vectors.bool3)">
            <summary>
            Leaves the components specified in the condition and shifts them to the left
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CompressLeft(GenMathematics.Vectors.bool3@,GenMathematics.Vectors.bool3,GenMathematics.Vectors.bool3@)">
            <summary>
            Leaves the components specified in the condition and shifts them to the left
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CompressLeft(GenMathematics.Vectors.bool3,System.Int32)">
            <summary>
            Leaves the components specified in the mask and shifts them to the left
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CompressLeft(GenMathematics.Vectors.bool3@,System.Int32,GenMathematics.Vectors.bool3@)">
            <summary>
            Leaves the components specified in the mask and shifts them to the left
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CompressRight(GenMathematics.Vectors.bool3,GenMathematics.Vectors.bool3)">
            <summary>
            Leaves the components specified in the condition and shifts them to the right
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CompressRight(GenMathematics.Vectors.bool3@,GenMathematics.Vectors.bool3,GenMathematics.Vectors.bool3@)">
            <summary>
            Leaves the components specified in the condition and shifts them to the right
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CompressRight(GenMathematics.Vectors.bool3,System.Int32)">
            <summary>
            Leaves the components specified in the mask and shifts them to the right
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CompressRight(GenMathematics.Vectors.bool3@,System.Int32,GenMathematics.Vectors.bool3@)">
            <summary>
            Leaves the components specified in the mask and shifts them to the right
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.UnionOr(GenMathematics.Vectors.bool4)">
            <summary>
            Returns the result of an OR operation between all vector components
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.UnionOrRef(GenMathematics.Vectors.bool4@)">
            <summary>
            Returns the result of an OR operation between all vector components
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.UnionAnd(GenMathematics.Vectors.bool4)">
            <summary>
            Returns the result of an AND operation between all vector components
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.UnionAndRef(GenMathematics.Vectors.bool4@)">
            <summary>
            Returns the result of an AND operation between all vector components
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Shift(GenMathematics.Vectors.bool4,System.Int32)">
            <summary>
            Shifts components in a loop in a positive or negative direction
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Shift(GenMathematics.Vectors.bool4,System.Int32,GenMathematics.Vectors.bool4@)">
            <summary>
            Shifts components in a loop in a positive or negative direction
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Select(GenMathematics.Vectors.bool4,GenMathematics.Vectors.bool4,GenMathematics.Vectors.bool4)">
            <summary>
            Selects components from two vectors according to conditions
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Select(GenMathematics.Vectors.bool4@,GenMathematics.Vectors.bool4@,GenMathematics.Vectors.bool4,GenMathematics.Vectors.bool4@)">
            <summary>
            Selects components from two vectors according to conditions
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Select(GenMathematics.Vectors.bool4,GenMathematics.Vectors.bool4,System.Boolean)">
            <summary>
            Selects components from two vectors according to condition
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Select(GenMathematics.Vectors.bool4@,GenMathematics.Vectors.bool4@,System.Boolean,GenMathematics.Vectors.bool4@)">
            <summary>
            Selects components from two vectors according to condition
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CompressLeft(GenMathematics.Vectors.bool4,GenMathematics.Vectors.bool4)">
            <summary>
            Leaves the components specified in the condition and shifts them to the left
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CompressLeft(GenMathematics.Vectors.bool4@,GenMathematics.Vectors.bool4,GenMathematics.Vectors.bool4@)">
            <summary>
            Leaves the components specified in the condition and shifts them to the left
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CompressLeft(GenMathematics.Vectors.bool4,System.Int32)">
            <summary>
            Leaves the components specified in the mask and shifts them to the left
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CompressLeft(GenMathematics.Vectors.bool4@,System.Int32,GenMathematics.Vectors.bool4@)">
            <summary>
            Leaves the components specified in the mask and shifts them to the left
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CompressRight(GenMathematics.Vectors.bool4,GenMathematics.Vectors.bool4)">
            <summary>
            Leaves the components specified in the condition and shifts them to the right
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CompressRight(GenMathematics.Vectors.bool4@,GenMathematics.Vectors.bool4,GenMathematics.Vectors.bool4@)">
            <summary>
            Leaves the components specified in the condition and shifts them to the right
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CompressRight(GenMathematics.Vectors.bool4,System.Int32)">
            <summary>
            Leaves the components specified in the mask and shifts them to the right
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CompressRight(GenMathematics.Vectors.bool4@,System.Int32,GenMathematics.Vectors.bool4@)">
            <summary>
            Leaves the components specified in the mask and shifts them to the right
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.LengthSq(GenMathematics.Vectors.uint2)">
            <summary>
            Returns the square of the vector length
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Manhattan(GenMathematics.Vectors.uint2)">
            <summary>
            Returns the Manhattan length of the vector
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Manhattan(GenMathematics.Vectors.uint2,GenMathematics.Vectors.uint2)">
            <summary>
            Returns the Manhattan distance between vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Dot(GenMathematics.Vectors.uint2,GenMathematics.Vectors.uint2)">
            <summary>
            Returns the scalar product of vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.PerpDot(GenMathematics.Vectors.uint2,GenMathematics.Vectors.uint2)">
            <summary>
            Returns the perpendicular dot product of vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.DistanceSq(GenMathematics.Vectors.uint2,GenMathematics.Vectors.uint2)">
            <summary>
            Returns the square of the distance between vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Square(GenMathematics.Vectors.uint2)">
            <summary>
            Squares each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.AbsDiff(GenMathematics.Vectors.uint2,GenMathematics.Vectors.uint2)">
            <summary>
            Calculates the absolute difference between the components of two vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Ror(GenMathematics.Vectors.uint2,GenMathematics.Vectors.int2)">
            <summary>
            Rotates the bits of each vector component to the right
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Ror(GenMathematics.Vectors.uint2,System.Int32)">
            <summary>
            Rotates the bits of each vector component to the right
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Rol(GenMathematics.Vectors.uint2,GenMathematics.Vectors.int2)">
            <summary>
            Rotates the bits of each vector component to the left
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Rol(GenMathematics.Vectors.uint2,System.Int32)">
            <summary>
            Rotates the bits of each vector component to the left
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.NextPow2(GenMathematics.Vectors.uint2)">
            <summary>
            Computes the next power of two for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CountBits(GenMathematics.Vectors.uint2)">
            <summary>
            Counts the number of bits for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.UnionOr(GenMathematics.Vectors.uint2)">
            <summary>
            Returns the result of an OR operation between all vector components
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.UnionAnd(GenMathematics.Vectors.uint2)">
            <summary>
            Returns the result of an AND operation between all vector components
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Shift(GenMathematics.Vectors.uint2,System.Int32)">
            <summary>
            Shifts components in a loop in a positive or negative direction
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Select(GenMathematics.Vectors.uint2,GenMathematics.Vectors.uint2,GenMathematics.Vectors.bool2)">
            <summary>
            Selects components from two vectors according to conditions
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Select(GenMathematics.Vectors.uint2,GenMathematics.Vectors.uint2,System.Boolean)">
            <summary>
            Selects components from two vectors according to condition
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CompressLeft(GenMathematics.Vectors.uint2,GenMathematics.Vectors.bool2)">
            <summary>
            Leaves the components specified in the condition and shifts them to the left
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CompressLeft(GenMathematics.Vectors.uint2,System.Int32)">
            <summary>
            Leaves the components specified in the mask and shifts them to the left
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CompressRight(GenMathematics.Vectors.uint2,GenMathematics.Vectors.bool2)">
            <summary>
            Leaves the components specified in the condition and shifts them to the right
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CompressRight(GenMathematics.Vectors.uint2,System.Int32)">
            <summary>
            Leaves the components specified in the mask and shifts them to the right
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.UnionMin(GenMathematics.Vectors.uint2)">
            <summary>
            Returns the minimum vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.UnionMax(GenMathematics.Vectors.uint2)">
            <summary>
            Returns the maximum vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.UnionSum(GenMathematics.Vectors.uint2)">
            <summary>
            Returns the sum of the vector components
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Min(GenMathematics.Vectors.uint2,GenMathematics.Vectors.uint2)">
            <summary>
            Computes the smallest value of two for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Max(GenMathematics.Vectors.uint2,GenMathematics.Vectors.uint2)">
            <summary>
            Computes the largest value of two for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Clamp(GenMathematics.Vectors.uint2,GenMathematics.Vectors.uint2,GenMathematics.Vectors.uint2)">
            <summary>
            Clamps each vector component between min and max
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Clamp(GenMathematics.Vectors.uint2,System.UInt32,System.UInt32)">
            <summary>
            Clamps each vector component between min and max
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.IsZero(GenMathematics.Vectors.uint2)">
            <summary>
            Returns true if all components are zero
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.AnyZero(GenMathematics.Vectors.uint2)">
            <summary>
            Returns true if at least one of the components is zero
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.LengthSq(GenMathematics.Vectors.uint3)">
            <summary>
            Returns the square of the vector length
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.LengthSqRef(GenMathematics.Vectors.uint3@)">
            <summary>
            Returns the square of the vector length
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Manhattan(GenMathematics.Vectors.uint3)">
            <summary>
            Returns the Manhattan length of the vector
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.ManhattanRef(GenMathematics.Vectors.uint3@)">
            <summary>
            Returns the Manhattan length of the vector
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Manhattan(GenMathematics.Vectors.uint3,GenMathematics.Vectors.uint3)">
            <summary>
            Returns the Manhattan distance between vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.ManhattanRef(GenMathematics.Vectors.uint3@,GenMathematics.Vectors.uint3@)">
            <summary>
            Returns the Manhattan distance between vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Dot(GenMathematics.Vectors.uint3,GenMathematics.Vectors.uint3)">
            <summary>
            Returns the scalar product of vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.DotRef(GenMathematics.Vectors.uint3@,GenMathematics.Vectors.uint3@)">
            <summary>
            Returns the scalar product of vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.PerpDot(GenMathematics.Vectors.uint3,GenMathematics.Vectors.uint3)">
            <summary>
            Returns the perpendicular dot product of vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.PerpDotRef(GenMathematics.Vectors.uint3@,GenMathematics.Vectors.uint3@)">
            <summary>
            Returns the perpendicular dot product of vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.DistanceSq(GenMathematics.Vectors.uint3,GenMathematics.Vectors.uint3)">
            <summary>
            Returns the square of the distance between vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.DistanceSqRef(GenMathematics.Vectors.uint3@,GenMathematics.Vectors.uint3@)">
            <summary>
            Returns the square of the distance between vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Square(GenMathematics.Vectors.uint3)">
            <summary>
            Squares each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Square(GenMathematics.Vectors.uint3@,GenMathematics.Vectors.uint3@)">
            <summary>
            Squares each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.AbsDiff(GenMathematics.Vectors.uint3,GenMathematics.Vectors.uint3)">
            <summary>
            Calculates the absolute difference between the components of two vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.AbsDiff(GenMathematics.Vectors.uint3@,GenMathematics.Vectors.uint3@,GenMathematics.Vectors.uint3@)">
            <summary>
            Calculates the absolute difference between the components of two vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Cross(GenMathematics.Vectors.uint3,GenMathematics.Vectors.uint3)">
            <summary>
            Returns the vector product of vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Cross(GenMathematics.Vectors.uint3@,GenMathematics.Vectors.uint3@,GenMathematics.Vectors.uint3@)">
            <summary>
            Returns the vector product of vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Ror(GenMathematics.Vectors.uint3,GenMathematics.Vectors.int3)">
            <summary>
            Rotates the bits of each vector component to the right
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Ror(GenMathematics.Vectors.uint3@,GenMathematics.Vectors.int3@,GenMathematics.Vectors.uint3@)">
            <summary>
            Rotates the bits of each vector component to the right
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Ror(GenMathematics.Vectors.uint3,System.Int32)">
            <summary>
            Rotates the bits of each vector component to the right
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Ror(GenMathematics.Vectors.uint3@,System.Int32,GenMathematics.Vectors.uint3@)">
            <summary>
            Rotates the bits of each vector component to the right
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Rol(GenMathematics.Vectors.uint3,GenMathematics.Vectors.int3)">
            <summary>
            Rotates the bits of each vector component to the left
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Rol(GenMathematics.Vectors.uint3@,GenMathematics.Vectors.int3@,GenMathematics.Vectors.uint3@)">
            <summary>
            Rotates the bits of each vector component to the left
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Rol(GenMathematics.Vectors.uint3,System.Int32)">
            <summary>
            Rotates the bits of each vector component to the left
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Rol(GenMathematics.Vectors.uint3@,System.Int32,GenMathematics.Vectors.uint3@)">
            <summary>
            Rotates the bits of each vector component to the left
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.NextPow2(GenMathematics.Vectors.uint3)">
            <summary>
            Computes the next power of two for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.NextPow2(GenMathematics.Vectors.uint3@,GenMathematics.Vectors.uint3@)">
            <summary>
            Computes the next power of two for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CountBits(GenMathematics.Vectors.uint3)">
            <summary>
            Counts the number of bits for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CountBits(GenMathematics.Vectors.uint3@,GenMathematics.Vectors.uint3@)">
            <summary>
            Counts the number of bits for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.UnionOr(GenMathematics.Vectors.uint3)">
            <summary>
            Returns the result of an OR operation between all vector components
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.UnionOrRef(GenMathematics.Vectors.uint3@)">
            <summary>
            Returns the result of an OR operation between all vector components
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.UnionAnd(GenMathematics.Vectors.uint3)">
            <summary>
            Returns the result of an AND operation between all vector components
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.UnionAndRef(GenMathematics.Vectors.uint3@)">
            <summary>
            Returns the result of an AND operation between all vector components
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Shift(GenMathematics.Vectors.uint3,System.Int32)">
            <summary>
            Shifts components in a loop in a positive or negative direction
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Shift(GenMathematics.Vectors.uint3,System.Int32,GenMathematics.Vectors.uint3@)">
            <summary>
            Shifts components in a loop in a positive or negative direction
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Select(GenMathematics.Vectors.uint3,GenMathematics.Vectors.uint3,GenMathematics.Vectors.bool3)">
            <summary>
            Selects components from two vectors according to conditions
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Select(GenMathematics.Vectors.uint3@,GenMathematics.Vectors.uint3@,GenMathematics.Vectors.bool3,GenMathematics.Vectors.uint3@)">
            <summary>
            Selects components from two vectors according to conditions
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Select(GenMathematics.Vectors.uint3,GenMathematics.Vectors.uint3,System.Boolean)">
            <summary>
            Selects components from two vectors according to condition
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Select(GenMathematics.Vectors.uint3@,GenMathematics.Vectors.uint3@,System.Boolean,GenMathematics.Vectors.uint3@)">
            <summary>
            Selects components from two vectors according to condition
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CompressLeft(GenMathematics.Vectors.uint3,GenMathematics.Vectors.bool3)">
            <summary>
            Leaves the components specified in the condition and shifts them to the left
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CompressLeft(GenMathematics.Vectors.uint3@,GenMathematics.Vectors.bool3,GenMathematics.Vectors.uint3@)">
            <summary>
            Leaves the components specified in the condition and shifts them to the left
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CompressLeft(GenMathematics.Vectors.uint3,System.Int32)">
            <summary>
            Leaves the components specified in the mask and shifts them to the left
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CompressLeft(GenMathematics.Vectors.uint3@,System.Int32,GenMathematics.Vectors.uint3@)">
            <summary>
            Leaves the components specified in the mask and shifts them to the left
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CompressRight(GenMathematics.Vectors.uint3,GenMathematics.Vectors.bool3)">
            <summary>
            Leaves the components specified in the condition and shifts them to the right
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CompressRight(GenMathematics.Vectors.uint3@,GenMathematics.Vectors.bool3,GenMathematics.Vectors.uint3@)">
            <summary>
            Leaves the components specified in the condition and shifts them to the right
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CompressRight(GenMathematics.Vectors.uint3,System.Int32)">
            <summary>
            Leaves the components specified in the mask and shifts them to the right
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CompressRight(GenMathematics.Vectors.uint3@,System.Int32,GenMathematics.Vectors.uint3@)">
            <summary>
            Leaves the components specified in the mask and shifts them to the right
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.UnionMin(GenMathematics.Vectors.uint3)">
            <summary>
            Returns the minimum vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.UnionMinRef(GenMathematics.Vectors.uint3@)">
            <summary>
            Returns the minimum vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.UnionMax(GenMathematics.Vectors.uint3)">
            <summary>
            Returns the maximum vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.UnionMaxRef(GenMathematics.Vectors.uint3@)">
            <summary>
            Returns the maximum vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.UnionSum(GenMathematics.Vectors.uint3)">
            <summary>
            Returns the sum of the vector components
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.UnionSumRef(GenMathematics.Vectors.uint3@)">
            <summary>
            Returns the sum of the vector components
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Min(GenMathematics.Vectors.uint3,GenMathematics.Vectors.uint3)">
            <summary>
            Computes the smallest value of two for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Min(GenMathematics.Vectors.uint3@,GenMathematics.Vectors.uint3@,GenMathematics.Vectors.uint3@)">
            <summary>
            Computes the smallest value of two for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Max(GenMathematics.Vectors.uint3,GenMathematics.Vectors.uint3)">
            <summary>
            Computes the largest value of two for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Max(GenMathematics.Vectors.uint3@,GenMathematics.Vectors.uint3@,GenMathematics.Vectors.uint3@)">
            <summary>
            Computes the largest value of two for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Clamp(GenMathematics.Vectors.uint3,GenMathematics.Vectors.uint3,GenMathematics.Vectors.uint3)">
            <summary>
            Clamps each vector component between min and max
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Clamp(GenMathematics.Vectors.uint3@,GenMathematics.Vectors.uint3@,GenMathematics.Vectors.uint3@,GenMathematics.Vectors.uint3@)">
            <summary>
            Clamps each vector component between min and max
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Clamp(GenMathematics.Vectors.uint3,System.UInt32,System.UInt32)">
            <summary>
            Clamps each vector component between min and max
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Clamp(GenMathematics.Vectors.uint3@,System.UInt32,System.UInt32,GenMathematics.Vectors.uint3@)">
            <summary>
            Clamps each vector component between min and max
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.IsZero(GenMathematics.Vectors.uint3)">
            <summary>
            Returns true if all components are zero
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.IsZeroRef(GenMathematics.Vectors.uint3@)">
            <summary>
            Returns true if all components are zero
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.AnyZero(GenMathematics.Vectors.uint3)">
            <summary>
            Returns true if at least one of the components is zero
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.AnyZeroRef(GenMathematics.Vectors.uint3@)">
            <summary>
            Returns true if at least one of the components is zero
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.LengthSq(GenMathematics.Vectors.uint4)">
            <summary>
            Returns the square of the vector length
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.LengthSqRef(GenMathematics.Vectors.uint4@)">
            <summary>
            Returns the square of the vector length
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Manhattan(GenMathematics.Vectors.uint4)">
            <summary>
            Returns the Manhattan length of the vector
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.ManhattanRef(GenMathematics.Vectors.uint4@)">
            <summary>
            Returns the Manhattan length of the vector
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Manhattan(GenMathematics.Vectors.uint4,GenMathematics.Vectors.uint4)">
            <summary>
            Returns the Manhattan distance between vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.ManhattanRef(GenMathematics.Vectors.uint4@,GenMathematics.Vectors.uint4@)">
            <summary>
            Returns the Manhattan distance between vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Dot(GenMathematics.Vectors.uint4,GenMathematics.Vectors.uint4)">
            <summary>
            Returns the scalar product of vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.DotRef(GenMathematics.Vectors.uint4@,GenMathematics.Vectors.uint4@)">
            <summary>
            Returns the scalar product of vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.DistanceSq(GenMathematics.Vectors.uint4,GenMathematics.Vectors.uint4)">
            <summary>
            Returns the square of the distance between vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.DistanceSqRef(GenMathematics.Vectors.uint4@,GenMathematics.Vectors.uint4@)">
            <summary>
            Returns the square of the distance between vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Square(GenMathematics.Vectors.uint4)">
            <summary>
            Squares each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Square(GenMathematics.Vectors.uint4@,GenMathematics.Vectors.uint4@)">
            <summary>
            Squares each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.AbsDiff(GenMathematics.Vectors.uint4,GenMathematics.Vectors.uint4)">
            <summary>
            Calculates the absolute difference between the components of two vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.AbsDiff(GenMathematics.Vectors.uint4@,GenMathematics.Vectors.uint4@,GenMathematics.Vectors.uint4@)">
            <summary>
            Calculates the absolute difference between the components of two vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Ror(GenMathematics.Vectors.uint4,GenMathematics.Vectors.int4)">
            <summary>
            Rotates the bits of each vector component to the right
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Ror(GenMathematics.Vectors.uint4@,GenMathematics.Vectors.int4@,GenMathematics.Vectors.uint4@)">
            <summary>
            Rotates the bits of each vector component to the right
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Ror(GenMathematics.Vectors.uint4,System.Int32)">
            <summary>
            Rotates the bits of each vector component to the right
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Ror(GenMathematics.Vectors.uint4@,System.Int32,GenMathematics.Vectors.uint4@)">
            <summary>
            Rotates the bits of each vector component to the right
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Rol(GenMathematics.Vectors.uint4,GenMathematics.Vectors.int4)">
            <summary>
            Rotates the bits of each vector component to the left
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Rol(GenMathematics.Vectors.uint4@,GenMathematics.Vectors.int4@,GenMathematics.Vectors.uint4@)">
            <summary>
            Rotates the bits of each vector component to the left
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Rol(GenMathematics.Vectors.uint4,System.Int32)">
            <summary>
            Rotates the bits of each vector component to the left
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Rol(GenMathematics.Vectors.uint4@,System.Int32,GenMathematics.Vectors.uint4@)">
            <summary>
            Rotates the bits of each vector component to the left
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.NextPow2(GenMathematics.Vectors.uint4)">
            <summary>
            Computes the next power of two for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.NextPow2(GenMathematics.Vectors.uint4@,GenMathematics.Vectors.uint4@)">
            <summary>
            Computes the next power of two for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CountBits(GenMathematics.Vectors.uint4)">
            <summary>
            Counts the number of bits for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CountBits(GenMathematics.Vectors.uint4@,GenMathematics.Vectors.uint4@)">
            <summary>
            Counts the number of bits for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.UnionOr(GenMathematics.Vectors.uint4)">
            <summary>
            Returns the result of an OR operation between all vector components
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.UnionOrRef(GenMathematics.Vectors.uint4@)">
            <summary>
            Returns the result of an OR operation between all vector components
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.UnionAnd(GenMathematics.Vectors.uint4)">
            <summary>
            Returns the result of an AND operation between all vector components
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.UnionAndRef(GenMathematics.Vectors.uint4@)">
            <summary>
            Returns the result of an AND operation between all vector components
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Shift(GenMathematics.Vectors.uint4,System.Int32)">
            <summary>
            Shifts components in a loop in a positive or negative direction
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Shift(GenMathematics.Vectors.uint4,System.Int32,GenMathematics.Vectors.uint4@)">
            <summary>
            Shifts components in a loop in a positive or negative direction
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Select(GenMathematics.Vectors.uint4,GenMathematics.Vectors.uint4,GenMathematics.Vectors.bool4)">
            <summary>
            Selects components from two vectors according to conditions
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Select(GenMathematics.Vectors.uint4@,GenMathematics.Vectors.uint4@,GenMathematics.Vectors.bool4,GenMathematics.Vectors.uint4@)">
            <summary>
            Selects components from two vectors according to conditions
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Select(GenMathematics.Vectors.uint4,GenMathematics.Vectors.uint4,System.Boolean)">
            <summary>
            Selects components from two vectors according to condition
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Select(GenMathematics.Vectors.uint4@,GenMathematics.Vectors.uint4@,System.Boolean,GenMathematics.Vectors.uint4@)">
            <summary>
            Selects components from two vectors according to condition
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CompressLeft(GenMathematics.Vectors.uint4,GenMathematics.Vectors.bool4)">
            <summary>
            Leaves the components specified in the condition and shifts them to the left
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CompressLeft(GenMathematics.Vectors.uint4@,GenMathematics.Vectors.bool4,GenMathematics.Vectors.uint4@)">
            <summary>
            Leaves the components specified in the condition and shifts them to the left
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CompressLeft(GenMathematics.Vectors.uint4,System.Int32)">
            <summary>
            Leaves the components specified in the mask and shifts them to the left
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CompressLeft(GenMathematics.Vectors.uint4@,System.Int32,GenMathematics.Vectors.uint4@)">
            <summary>
            Leaves the components specified in the mask and shifts them to the left
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CompressRight(GenMathematics.Vectors.uint4,GenMathematics.Vectors.bool4)">
            <summary>
            Leaves the components specified in the condition and shifts them to the right
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CompressRight(GenMathematics.Vectors.uint4@,GenMathematics.Vectors.bool4,GenMathematics.Vectors.uint4@)">
            <summary>
            Leaves the components specified in the condition and shifts them to the right
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CompressRight(GenMathematics.Vectors.uint4,System.Int32)">
            <summary>
            Leaves the components specified in the mask and shifts them to the right
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CompressRight(GenMathematics.Vectors.uint4@,System.Int32,GenMathematics.Vectors.uint4@)">
            <summary>
            Leaves the components specified in the mask and shifts them to the right
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.UnionMin(GenMathematics.Vectors.uint4)">
            <summary>
            Returns the minimum vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.UnionMinRef(GenMathematics.Vectors.uint4@)">
            <summary>
            Returns the minimum vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.UnionMax(GenMathematics.Vectors.uint4)">
            <summary>
            Returns the maximum vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.UnionMaxRef(GenMathematics.Vectors.uint4@)">
            <summary>
            Returns the maximum vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.UnionSum(GenMathematics.Vectors.uint4)">
            <summary>
            Returns the sum of the vector components
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.UnionSumRef(GenMathematics.Vectors.uint4@)">
            <summary>
            Returns the sum of the vector components
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Min(GenMathematics.Vectors.uint4,GenMathematics.Vectors.uint4)">
            <summary>
            Computes the smallest value of two for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Min(GenMathematics.Vectors.uint4@,GenMathematics.Vectors.uint4@,GenMathematics.Vectors.uint4@)">
            <summary>
            Computes the smallest value of two for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Max(GenMathematics.Vectors.uint4,GenMathematics.Vectors.uint4)">
            <summary>
            Computes the largest value of two for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Max(GenMathematics.Vectors.uint4@,GenMathematics.Vectors.uint4@,GenMathematics.Vectors.uint4@)">
            <summary>
            Computes the largest value of two for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Clamp(GenMathematics.Vectors.uint4,GenMathematics.Vectors.uint4,GenMathematics.Vectors.uint4)">
            <summary>
            Clamps each vector component between min and max
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Clamp(GenMathematics.Vectors.uint4@,GenMathematics.Vectors.uint4@,GenMathematics.Vectors.uint4@,GenMathematics.Vectors.uint4@)">
            <summary>
            Clamps each vector component between min and max
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Clamp(GenMathematics.Vectors.uint4,System.UInt32,System.UInt32)">
            <summary>
            Clamps each vector component between min and max
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Clamp(GenMathematics.Vectors.uint4@,System.UInt32,System.UInt32,GenMathematics.Vectors.uint4@)">
            <summary>
            Clamps each vector component between min and max
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.IsZero(GenMathematics.Vectors.uint4)">
            <summary>
            Returns true if all components are zero
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.IsZeroRef(GenMathematics.Vectors.uint4@)">
            <summary>
            Returns true if all components are zero
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.AnyZero(GenMathematics.Vectors.uint4)">
            <summary>
            Returns true if at least one of the components is zero
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.AnyZeroRef(GenMathematics.Vectors.uint4@)">
            <summary>
            Returns true if at least one of the components is zero
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.LengthSq(GenMathematics.Vectors.ulong2)">
            <summary>
            Returns the square of the vector length
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.LengthSqRef(GenMathematics.Vectors.ulong2@)">
            <summary>
            Returns the square of the vector length
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Manhattan(GenMathematics.Vectors.ulong2)">
            <summary>
            Returns the Manhattan length of the vector
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.ManhattanRef(GenMathematics.Vectors.ulong2@)">
            <summary>
            Returns the Manhattan length of the vector
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Manhattan(GenMathematics.Vectors.ulong2,GenMathematics.Vectors.ulong2)">
            <summary>
            Returns the Manhattan distance between vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.ManhattanRef(GenMathematics.Vectors.ulong2@,GenMathematics.Vectors.ulong2@)">
            <summary>
            Returns the Manhattan distance between vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Dot(GenMathematics.Vectors.ulong2,GenMathematics.Vectors.ulong2)">
            <summary>
            Returns the scalar product of vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.DotRef(GenMathematics.Vectors.ulong2@,GenMathematics.Vectors.ulong2@)">
            <summary>
            Returns the scalar product of vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.PerpDot(GenMathematics.Vectors.ulong2,GenMathematics.Vectors.ulong2)">
            <summary>
            Returns the perpendicular dot product of vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.PerpDotRef(GenMathematics.Vectors.ulong2@,GenMathematics.Vectors.ulong2@)">
            <summary>
            Returns the perpendicular dot product of vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.DistanceSq(GenMathematics.Vectors.ulong2,GenMathematics.Vectors.ulong2)">
            <summary>
            Returns the square of the distance between vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.DistanceSqRef(GenMathematics.Vectors.ulong2@,GenMathematics.Vectors.ulong2@)">
            <summary>
            Returns the square of the distance between vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Square(GenMathematics.Vectors.ulong2)">
            <summary>
            Squares each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Square(GenMathematics.Vectors.ulong2@,GenMathematics.Vectors.ulong2@)">
            <summary>
            Squares each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.AbsDiff(GenMathematics.Vectors.ulong2,GenMathematics.Vectors.ulong2)">
            <summary>
            Calculates the absolute difference between the components of two vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.AbsDiff(GenMathematics.Vectors.ulong2@,GenMathematics.Vectors.ulong2@,GenMathematics.Vectors.ulong2@)">
            <summary>
            Calculates the absolute difference between the components of two vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Ror(GenMathematics.Vectors.ulong2,GenMathematics.Vectors.int2)">
            <summary>
            Rotates the bits of each vector component to the right
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Ror(GenMathematics.Vectors.ulong2@,GenMathematics.Vectors.int2,GenMathematics.Vectors.ulong2@)">
            <summary>
            Rotates the bits of each vector component to the right
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Ror(GenMathematics.Vectors.ulong2,System.Int32)">
            <summary>
            Rotates the bits of each vector component to the right
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Ror(GenMathematics.Vectors.ulong2@,System.Int32,GenMathematics.Vectors.ulong2@)">
            <summary>
            Rotates the bits of each vector component to the right
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Rol(GenMathematics.Vectors.ulong2,GenMathematics.Vectors.int2)">
            <summary>
            Rotates the bits of each vector component to the left
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Rol(GenMathematics.Vectors.ulong2@,GenMathematics.Vectors.int2,GenMathematics.Vectors.ulong2@)">
            <summary>
            Rotates the bits of each vector component to the left
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Rol(GenMathematics.Vectors.ulong2,System.Int32)">
            <summary>
            Rotates the bits of each vector component to the left
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Rol(GenMathematics.Vectors.ulong2@,System.Int32,GenMathematics.Vectors.ulong2@)">
            <summary>
            Rotates the bits of each vector component to the left
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.NextPow2(GenMathematics.Vectors.ulong2)">
            <summary>
            Computes the next power of two for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.NextPow2(GenMathematics.Vectors.ulong2@,GenMathematics.Vectors.ulong2@)">
            <summary>
            Computes the next power of two for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CountBits(GenMathematics.Vectors.ulong2)">
            <summary>
            Counts the number of bits for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CountBits(GenMathematics.Vectors.ulong2@,GenMathematics.Vectors.ulong2@)">
            <summary>
            Counts the number of bits for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.UnionOr(GenMathematics.Vectors.ulong2)">
            <summary>
            Returns the result of an OR operation between all vector components
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.UnionOrRef(GenMathematics.Vectors.ulong2@)">
            <summary>
            Returns the result of an OR operation between all vector components
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.UnionAnd(GenMathematics.Vectors.ulong2)">
            <summary>
            Returns the result of an AND operation between all vector components
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.UnionAndRef(GenMathematics.Vectors.ulong2@)">
            <summary>
            Returns the result of an AND operation between all vector components
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Shift(GenMathematics.Vectors.ulong2,System.Int32)">
            <summary>
            Shifts components in a loop in a positive or negative direction
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Shift(GenMathematics.Vectors.ulong2,System.Int32,GenMathematics.Vectors.ulong2@)">
            <summary>
            Shifts components in a loop in a positive or negative direction
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Select(GenMathematics.Vectors.ulong2,GenMathematics.Vectors.ulong2,GenMathematics.Vectors.bool2)">
            <summary>
            Selects components from two vectors according to conditions
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Select(GenMathematics.Vectors.ulong2@,GenMathematics.Vectors.ulong2@,GenMathematics.Vectors.bool2,GenMathematics.Vectors.ulong2@)">
            <summary>
            Selects components from two vectors according to conditions
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Select(GenMathematics.Vectors.ulong2,GenMathematics.Vectors.ulong2,System.Boolean)">
            <summary>
            Selects components from two vectors according to condition
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Select(GenMathematics.Vectors.ulong2@,GenMathematics.Vectors.ulong2@,System.Boolean,GenMathematics.Vectors.ulong2@)">
            <summary>
            Selects components from two vectors according to condition
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CompressLeft(GenMathematics.Vectors.ulong2,GenMathematics.Vectors.bool2)">
            <summary>
            Leaves the components specified in the condition and shifts them to the left
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CompressLeft(GenMathematics.Vectors.ulong2@,GenMathematics.Vectors.bool2,GenMathematics.Vectors.ulong2@)">
            <summary>
            Leaves the components specified in the condition and shifts them to the left
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CompressLeft(GenMathematics.Vectors.ulong2,System.Int32)">
            <summary>
            Leaves the components specified in the mask and shifts them to the left
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CompressLeft(GenMathematics.Vectors.ulong2@,System.Int32,GenMathematics.Vectors.ulong2@)">
            <summary>
            Leaves the components specified in the mask and shifts them to the left
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CompressRight(GenMathematics.Vectors.ulong2,GenMathematics.Vectors.bool2)">
            <summary>
            Leaves the components specified in the condition and shifts them to the right
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CompressRight(GenMathematics.Vectors.ulong2@,GenMathematics.Vectors.bool2,GenMathematics.Vectors.ulong2@)">
            <summary>
            Leaves the components specified in the condition and shifts them to the right
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CompressRight(GenMathematics.Vectors.ulong2,System.Int32)">
            <summary>
            Leaves the components specified in the mask and shifts them to the right
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CompressRight(GenMathematics.Vectors.ulong2@,System.Int32,GenMathematics.Vectors.ulong2@)">
            <summary>
            Leaves the components specified in the mask and shifts them to the right
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.UnionMin(GenMathematics.Vectors.ulong2)">
            <summary>
            Returns the minimum vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.UnionMinRef(GenMathematics.Vectors.ulong2@)">
            <summary>
            Returns the minimum vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.UnionMax(GenMathematics.Vectors.ulong2)">
            <summary>
            Returns the maximum vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.UnionMaxRef(GenMathematics.Vectors.ulong2@)">
            <summary>
            Returns the maximum vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.UnionSum(GenMathematics.Vectors.ulong2)">
            <summary>
            Returns the sum of the vector components
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.UnionSumRef(GenMathematics.Vectors.ulong2@)">
            <summary>
            Returns the sum of the vector components
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Min(GenMathematics.Vectors.ulong2,GenMathematics.Vectors.ulong2)">
            <summary>
            Computes the smallest value of two for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Min(GenMathematics.Vectors.ulong2@,GenMathematics.Vectors.ulong2@,GenMathematics.Vectors.ulong2@)">
            <summary>
            Computes the smallest value of two for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Max(GenMathematics.Vectors.ulong2,GenMathematics.Vectors.ulong2)">
            <summary>
            Computes the largest value of two for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Max(GenMathematics.Vectors.ulong2@,GenMathematics.Vectors.ulong2@,GenMathematics.Vectors.ulong2@)">
            <summary>
            Computes the largest value of two for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Clamp(GenMathematics.Vectors.ulong2,GenMathematics.Vectors.ulong2,GenMathematics.Vectors.ulong2)">
            <summary>
            Clamps each vector component between min and max
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Clamp(GenMathematics.Vectors.ulong2@,GenMathematics.Vectors.ulong2@,GenMathematics.Vectors.ulong2@,GenMathematics.Vectors.ulong2@)">
            <summary>
            Clamps each vector component between min and max
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Clamp(GenMathematics.Vectors.ulong2,System.UInt64,System.UInt64)">
            <summary>
            Clamps each vector component between min and max
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Clamp(GenMathematics.Vectors.ulong2@,System.UInt64,System.UInt64,GenMathematics.Vectors.ulong2@)">
            <summary>
            Clamps each vector component between min and max
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.IsZero(GenMathematics.Vectors.ulong2)">
            <summary>
            Returns true if all components are zero
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.IsZeroRef(GenMathematics.Vectors.ulong2@)">
            <summary>
            Returns true if all components are zero
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.AnyZero(GenMathematics.Vectors.ulong2)">
            <summary>
            Returns true if at least one of the components is zero
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.AnyZeroRef(GenMathematics.Vectors.ulong2@)">
            <summary>
            Returns true if at least one of the components is zero
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.LengthSq(GenMathematics.Vectors.ulong3)">
            <summary>
            Returns the square of the vector length
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.LengthSqRef(GenMathematics.Vectors.ulong3@)">
            <summary>
            Returns the square of the vector length
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Manhattan(GenMathematics.Vectors.ulong3)">
            <summary>
            Returns the Manhattan length of the vector
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.ManhattanRef(GenMathematics.Vectors.ulong3@)">
            <summary>
            Returns the Manhattan length of the vector
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Manhattan(GenMathematics.Vectors.ulong3,GenMathematics.Vectors.ulong3)">
            <summary>
            Returns the Manhattan distance between vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.ManhattanRef(GenMathematics.Vectors.ulong3@,GenMathematics.Vectors.ulong3@)">
            <summary>
            Returns the Manhattan distance between vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Dot(GenMathematics.Vectors.ulong3,GenMathematics.Vectors.ulong3)">
            <summary>
            Returns the scalar product of vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.DotRef(GenMathematics.Vectors.ulong3@,GenMathematics.Vectors.ulong3@)">
            <summary>
            Returns the scalar product of vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.PerpDot(GenMathematics.Vectors.ulong3,GenMathematics.Vectors.ulong3)">
            <summary>
            Returns the perpendicular dot product of vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.PerpDotRef(GenMathematics.Vectors.ulong3@,GenMathematics.Vectors.ulong3@)">
            <summary>
            Returns the perpendicular dot product of vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.DistanceSq(GenMathematics.Vectors.ulong3,GenMathematics.Vectors.ulong3)">
            <summary>
            Returns the square of the distance between vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.DistanceSqRef(GenMathematics.Vectors.ulong3@,GenMathematics.Vectors.ulong3@)">
            <summary>
            Returns the square of the distance between vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Square(GenMathematics.Vectors.ulong3)">
            <summary>
            Squares each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Square(GenMathematics.Vectors.ulong3@,GenMathematics.Vectors.ulong3@)">
            <summary>
            Squares each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.AbsDiff(GenMathematics.Vectors.ulong3,GenMathematics.Vectors.ulong3)">
            <summary>
            Calculates the absolute difference between the components of two vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.AbsDiff(GenMathematics.Vectors.ulong3@,GenMathematics.Vectors.ulong3@,GenMathematics.Vectors.ulong3@)">
            <summary>
            Calculates the absolute difference between the components of two vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Cross(GenMathematics.Vectors.ulong3,GenMathematics.Vectors.ulong3)">
            <summary>
            Returns the vector product of vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Cross(GenMathematics.Vectors.ulong3@,GenMathematics.Vectors.ulong3@,GenMathematics.Vectors.ulong3@)">
            <summary>
            Returns the vector product of vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Ror(GenMathematics.Vectors.ulong3,GenMathematics.Vectors.int3)">
            <summary>
            Rotates the bits of each vector component to the right
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Ror(GenMathematics.Vectors.ulong3@,GenMathematics.Vectors.int3@,GenMathematics.Vectors.ulong3@)">
            <summary>
            Rotates the bits of each vector component to the right
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Ror(GenMathematics.Vectors.ulong3,System.Int32)">
            <summary>
            Rotates the bits of each vector component to the right
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Ror(GenMathematics.Vectors.ulong3@,System.Int32,GenMathematics.Vectors.ulong3@)">
            <summary>
            Rotates the bits of each vector component to the right
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Rol(GenMathematics.Vectors.ulong3,GenMathematics.Vectors.int3)">
            <summary>
            Rotates the bits of each vector component to the left
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Rol(GenMathematics.Vectors.ulong3@,GenMathematics.Vectors.int3@,GenMathematics.Vectors.ulong3@)">
            <summary>
            Rotates the bits of each vector component to the left
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Rol(GenMathematics.Vectors.ulong3,System.Int32)">
            <summary>
            Rotates the bits of each vector component to the left
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Rol(GenMathematics.Vectors.ulong3@,System.Int32,GenMathematics.Vectors.ulong3@)">
            <summary>
            Rotates the bits of each vector component to the left
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.NextPow2(GenMathematics.Vectors.ulong3)">
            <summary>
            Computes the next power of two for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.NextPow2(GenMathematics.Vectors.ulong3@,GenMathematics.Vectors.ulong3@)">
            <summary>
            Computes the next power of two for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CountBits(GenMathematics.Vectors.ulong3)">
            <summary>
            Counts the number of bits for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CountBits(GenMathematics.Vectors.ulong3@,GenMathematics.Vectors.ulong3@)">
            <summary>
            Counts the number of bits for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.UnionOr(GenMathematics.Vectors.ulong3)">
            <summary>
            Returns the result of an OR operation between all vector components
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.UnionOrRef(GenMathematics.Vectors.ulong3@)">
            <summary>
            Returns the result of an OR operation between all vector components
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.UnionAnd(GenMathematics.Vectors.ulong3)">
            <summary>
            Returns the result of an AND operation between all vector components
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.UnionAndRef(GenMathematics.Vectors.ulong3@)">
            <summary>
            Returns the result of an AND operation between all vector components
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Shift(GenMathematics.Vectors.ulong3,System.Int32)">
            <summary>
            Shifts components in a loop in a positive or negative direction
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Shift(GenMathematics.Vectors.ulong3,System.Int32,GenMathematics.Vectors.ulong3@)">
            <summary>
            Shifts components in a loop in a positive or negative direction
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Select(GenMathematics.Vectors.ulong3,GenMathematics.Vectors.ulong3,GenMathematics.Vectors.bool3)">
            <summary>
            Selects components from two vectors according to conditions
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Select(GenMathematics.Vectors.ulong3@,GenMathematics.Vectors.ulong3@,GenMathematics.Vectors.bool3,GenMathematics.Vectors.ulong3@)">
            <summary>
            Selects components from two vectors according to conditions
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Select(GenMathematics.Vectors.ulong3,GenMathematics.Vectors.ulong3,System.Boolean)">
            <summary>
            Selects components from two vectors according to condition
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Select(GenMathematics.Vectors.ulong3@,GenMathematics.Vectors.ulong3@,System.Boolean,GenMathematics.Vectors.ulong3@)">
            <summary>
            Selects components from two vectors according to condition
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CompressLeft(GenMathematics.Vectors.ulong3,GenMathematics.Vectors.bool3)">
            <summary>
            Leaves the components specified in the condition and shifts them to the left
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CompressLeft(GenMathematics.Vectors.ulong3@,GenMathematics.Vectors.bool3,GenMathematics.Vectors.ulong3@)">
            <summary>
            Leaves the components specified in the condition and shifts them to the left
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CompressLeft(GenMathematics.Vectors.ulong3,System.Int32)">
            <summary>
            Leaves the components specified in the mask and shifts them to the left
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CompressLeft(GenMathematics.Vectors.ulong3@,System.Int32,GenMathematics.Vectors.ulong3@)">
            <summary>
            Leaves the components specified in the mask and shifts them to the left
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CompressRight(GenMathematics.Vectors.ulong3,GenMathematics.Vectors.bool3)">
            <summary>
            Leaves the components specified in the condition and shifts them to the right
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CompressRight(GenMathematics.Vectors.ulong3@,GenMathematics.Vectors.bool3,GenMathematics.Vectors.ulong3@)">
            <summary>
            Leaves the components specified in the condition and shifts them to the right
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CompressRight(GenMathematics.Vectors.ulong3,System.Int32)">
            <summary>
            Leaves the components specified in the mask and shifts them to the right
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CompressRight(GenMathematics.Vectors.ulong3@,System.Int32,GenMathematics.Vectors.ulong3@)">
            <summary>
            Leaves the components specified in the mask and shifts them to the right
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.UnionMin(GenMathematics.Vectors.ulong3)">
            <summary>
            Returns the minimum vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.UnionMinRef(GenMathematics.Vectors.ulong3@)">
            <summary>
            Returns the minimum vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.UnionMax(GenMathematics.Vectors.ulong3)">
            <summary>
            Returns the maximum vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.UnionMaxRef(GenMathematics.Vectors.ulong3@)">
            <summary>
            Returns the maximum vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.UnionSum(GenMathematics.Vectors.ulong3)">
            <summary>
            Returns the sum of the vector components
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.UnionSumRef(GenMathematics.Vectors.ulong3@)">
            <summary>
            Returns the sum of the vector components
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Min(GenMathematics.Vectors.ulong3,GenMathematics.Vectors.ulong3)">
            <summary>
            Computes the smallest value of two for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Min(GenMathematics.Vectors.ulong3@,GenMathematics.Vectors.ulong3@,GenMathematics.Vectors.ulong3@)">
            <summary>
            Computes the smallest value of two for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Max(GenMathematics.Vectors.ulong3,GenMathematics.Vectors.ulong3)">
            <summary>
            Computes the largest value of two for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Max(GenMathematics.Vectors.ulong3@,GenMathematics.Vectors.ulong3@,GenMathematics.Vectors.ulong3@)">
            <summary>
            Computes the largest value of two for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Clamp(GenMathematics.Vectors.ulong3,GenMathematics.Vectors.ulong3,GenMathematics.Vectors.ulong3)">
            <summary>
            Clamps each vector component between min and max
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Clamp(GenMathematics.Vectors.ulong3@,GenMathematics.Vectors.ulong3@,GenMathematics.Vectors.ulong3@,GenMathematics.Vectors.ulong3@)">
            <summary>
            Clamps each vector component between min and max
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Clamp(GenMathematics.Vectors.ulong3,System.UInt64,System.UInt64)">
            <summary>
            Clamps each vector component between min and max
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Clamp(GenMathematics.Vectors.ulong3@,System.UInt64,System.UInt64,GenMathematics.Vectors.ulong3@)">
            <summary>
            Clamps each vector component between min and max
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.IsZero(GenMathematics.Vectors.ulong3)">
            <summary>
            Returns true if all components are zero
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.IsZeroRef(GenMathematics.Vectors.ulong3@)">
            <summary>
            Returns true if all components are zero
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.AnyZero(GenMathematics.Vectors.ulong3)">
            <summary>
            Returns true if at least one of the components is zero
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.AnyZeroRef(GenMathematics.Vectors.ulong3@)">
            <summary>
            Returns true if at least one of the components is zero
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.LengthSq(GenMathematics.Vectors.ulong4)">
            <summary>
            Returns the square of the vector length
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.LengthSqRef(GenMathematics.Vectors.ulong4@)">
            <summary>
            Returns the square of the vector length
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Manhattan(GenMathematics.Vectors.ulong4)">
            <summary>
            Returns the Manhattan length of the vector
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.ManhattanRef(GenMathematics.Vectors.ulong4@)">
            <summary>
            Returns the Manhattan length of the vector
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Manhattan(GenMathematics.Vectors.ulong4,GenMathematics.Vectors.ulong4)">
            <summary>
            Returns the Manhattan distance between vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.ManhattanRef(GenMathematics.Vectors.ulong4@,GenMathematics.Vectors.ulong4@)">
            <summary>
            Returns the Manhattan distance between vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Dot(GenMathematics.Vectors.ulong4,GenMathematics.Vectors.ulong4)">
            <summary>
            Returns the scalar product of vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.DotRef(GenMathematics.Vectors.ulong4@,GenMathematics.Vectors.ulong4@)">
            <summary>
            Returns the scalar product of vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.DistanceSq(GenMathematics.Vectors.ulong4,GenMathematics.Vectors.ulong4)">
            <summary>
            Returns the square of the distance between vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.DistanceSqRef(GenMathematics.Vectors.ulong4@,GenMathematics.Vectors.ulong4@)">
            <summary>
            Returns the square of the distance between vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Square(GenMathematics.Vectors.ulong4)">
            <summary>
            Squares each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Square(GenMathematics.Vectors.ulong4@,GenMathematics.Vectors.ulong4@)">
            <summary>
            Squares each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.AbsDiff(GenMathematics.Vectors.ulong4,GenMathematics.Vectors.ulong4)">
            <summary>
            Calculates the absolute difference between the components of two vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.AbsDiff(GenMathematics.Vectors.ulong4@,GenMathematics.Vectors.ulong4@,GenMathematics.Vectors.ulong4@)">
            <summary>
            Calculates the absolute difference between the components of two vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Ror(GenMathematics.Vectors.ulong4,GenMathematics.Vectors.int4)">
            <summary>
            Rotates the bits of each vector component to the right
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Ror(GenMathematics.Vectors.ulong4@,GenMathematics.Vectors.int4@,GenMathematics.Vectors.ulong4@)">
            <summary>
            Rotates the bits of each vector component to the right
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Ror(GenMathematics.Vectors.ulong4,System.Int32)">
            <summary>
            Rotates the bits of each vector component to the right
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Ror(GenMathematics.Vectors.ulong4@,System.Int32,GenMathematics.Vectors.ulong4@)">
            <summary>
            Rotates the bits of each vector component to the right
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Rol(GenMathematics.Vectors.ulong4,GenMathematics.Vectors.int4)">
            <summary>
            Rotates the bits of each vector component to the left
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Rol(GenMathematics.Vectors.ulong4@,GenMathematics.Vectors.int4@,GenMathematics.Vectors.ulong4@)">
            <summary>
            Rotates the bits of each vector component to the left
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Rol(GenMathematics.Vectors.ulong4,System.Int32)">
            <summary>
            Rotates the bits of each vector component to the left
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Rol(GenMathematics.Vectors.ulong4@,System.Int32,GenMathematics.Vectors.ulong4@)">
            <summary>
            Rotates the bits of each vector component to the left
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.NextPow2(GenMathematics.Vectors.ulong4)">
            <summary>
            Computes the next power of two for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.NextPow2(GenMathematics.Vectors.ulong4@,GenMathematics.Vectors.ulong4@)">
            <summary>
            Computes the next power of two for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CountBits(GenMathematics.Vectors.ulong4)">
            <summary>
            Counts the number of bits for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CountBits(GenMathematics.Vectors.ulong4@,GenMathematics.Vectors.ulong4@)">
            <summary>
            Counts the number of bits for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.UnionOr(GenMathematics.Vectors.ulong4)">
            <summary>
            Returns the result of an OR operation between all vector components
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.UnionOrRef(GenMathematics.Vectors.ulong4@)">
            <summary>
            Returns the result of an OR operation between all vector components
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.UnionAnd(GenMathematics.Vectors.ulong4)">
            <summary>
            Returns the result of an AND operation between all vector components
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.UnionAndRef(GenMathematics.Vectors.ulong4@)">
            <summary>
            Returns the result of an AND operation between all vector components
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Shift(GenMathematics.Vectors.ulong4,System.Int32)">
            <summary>
            Shifts components in a loop in a positive or negative direction
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Shift(GenMathematics.Vectors.ulong4,System.Int32,GenMathematics.Vectors.ulong4@)">
            <summary>
            Shifts components in a loop in a positive or negative direction
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Select(GenMathematics.Vectors.ulong4,GenMathematics.Vectors.ulong4,GenMathematics.Vectors.bool4)">
            <summary>
            Selects components from two vectors according to conditions
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Select(GenMathematics.Vectors.ulong4@,GenMathematics.Vectors.ulong4@,GenMathematics.Vectors.bool4,GenMathematics.Vectors.ulong4@)">
            <summary>
            Selects components from two vectors according to conditions
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Select(GenMathematics.Vectors.ulong4,GenMathematics.Vectors.ulong4,System.Boolean)">
            <summary>
            Selects components from two vectors according to condition
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Select(GenMathematics.Vectors.ulong4@,GenMathematics.Vectors.ulong4@,System.Boolean,GenMathematics.Vectors.ulong4@)">
            <summary>
            Selects components from two vectors according to condition
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CompressLeft(GenMathematics.Vectors.ulong4,GenMathematics.Vectors.bool4)">
            <summary>
            Leaves the components specified in the condition and shifts them to the left
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CompressLeft(GenMathematics.Vectors.ulong4@,GenMathematics.Vectors.bool4,GenMathematics.Vectors.ulong4@)">
            <summary>
            Leaves the components specified in the condition and shifts them to the left
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CompressLeft(GenMathematics.Vectors.ulong4,System.Int32)">
            <summary>
            Leaves the components specified in the mask and shifts them to the left
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CompressLeft(GenMathematics.Vectors.ulong4@,System.Int32,GenMathematics.Vectors.ulong4@)">
            <summary>
            Leaves the components specified in the mask and shifts them to the left
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CompressRight(GenMathematics.Vectors.ulong4,GenMathematics.Vectors.bool4)">
            <summary>
            Leaves the components specified in the condition and shifts them to the right
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CompressRight(GenMathematics.Vectors.ulong4@,GenMathematics.Vectors.bool4,GenMathematics.Vectors.ulong4@)">
            <summary>
            Leaves the components specified in the condition and shifts them to the right
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CompressRight(GenMathematics.Vectors.ulong4,System.Int32)">
            <summary>
            Leaves the components specified in the mask and shifts them to the right
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CompressRight(GenMathematics.Vectors.ulong4@,System.Int32,GenMathematics.Vectors.ulong4@)">
            <summary>
            Leaves the components specified in the mask and shifts them to the right
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.UnionMin(GenMathematics.Vectors.ulong4)">
            <summary>
            Returns the minimum vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.UnionMinRef(GenMathematics.Vectors.ulong4@)">
            <summary>
            Returns the minimum vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.UnionMax(GenMathematics.Vectors.ulong4)">
            <summary>
            Returns the maximum vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.UnionMaxRef(GenMathematics.Vectors.ulong4@)">
            <summary>
            Returns the maximum vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.UnionSum(GenMathematics.Vectors.ulong4)">
            <summary>
            Returns the sum of the vector components
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.UnionSumRef(GenMathematics.Vectors.ulong4@)">
            <summary>
            Returns the sum of the vector components
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Min(GenMathematics.Vectors.ulong4,GenMathematics.Vectors.ulong4)">
            <summary>
            Computes the smallest value of two for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Min(GenMathematics.Vectors.ulong4@,GenMathematics.Vectors.ulong4@,GenMathematics.Vectors.ulong4@)">
            <summary>
            Computes the smallest value of two for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Max(GenMathematics.Vectors.ulong4,GenMathematics.Vectors.ulong4)">
            <summary>
            Computes the largest value of two for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Max(GenMathematics.Vectors.ulong4@,GenMathematics.Vectors.ulong4@,GenMathematics.Vectors.ulong4@)">
            <summary>
            Computes the largest value of two for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Clamp(GenMathematics.Vectors.ulong4,GenMathematics.Vectors.ulong4,GenMathematics.Vectors.ulong4)">
            <summary>
            Clamps each vector component between min and max
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Clamp(GenMathematics.Vectors.ulong4@,GenMathematics.Vectors.ulong4@,GenMathematics.Vectors.ulong4@,GenMathematics.Vectors.ulong4@)">
            <summary>
            Clamps each vector component between min and max
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Clamp(GenMathematics.Vectors.ulong4,System.UInt64,System.UInt64)">
            <summary>
            Clamps each vector component between min and max
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Clamp(GenMathematics.Vectors.ulong4@,System.UInt64,System.UInt64,GenMathematics.Vectors.ulong4@)">
            <summary>
            Clamps each vector component between min and max
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.IsZero(GenMathematics.Vectors.ulong4)">
            <summary>
            Returns true if all components are zero
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.IsZeroRef(GenMathematics.Vectors.ulong4@)">
            <summary>
            Returns true if all components are zero
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.AnyZero(GenMathematics.Vectors.ulong4)">
            <summary>
            Returns true if at least one of the components is zero
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.AnyZeroRef(GenMathematics.Vectors.ulong4@)">
            <summary>
            Returns true if at least one of the components is zero
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.LengthSq(GenMathematics.Vectors.int2)">
            <summary>
            Returns the square of the vector length
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Manhattan(GenMathematics.Vectors.int2)">
            <summary>
            Returns the Manhattan length of the vector
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Manhattan(GenMathematics.Vectors.int2,GenMathematics.Vectors.int2)">
            <summary>
            Returns the Manhattan distance between vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Dot(GenMathematics.Vectors.int2,GenMathematics.Vectors.int2)">
            <summary>
            Returns the scalar product of vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.PerpDot(GenMathematics.Vectors.int2,GenMathematics.Vectors.int2)">
            <summary>
            Returns the perpendicular dot product of vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.DistanceSq(GenMathematics.Vectors.int2,GenMathematics.Vectors.int2)">
            <summary>
            Returns the square of the distance between vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Square(GenMathematics.Vectors.int2)">
            <summary>
            Squares each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.AbsDiff(GenMathematics.Vectors.int2,GenMathematics.Vectors.int2)">
            <summary>
            Calculates the absolute difference between the components of two vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Ror(GenMathematics.Vectors.int2,GenMathematics.Vectors.int2)">
            <summary>
            Rotates the bits of each vector component to the right
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Ror(GenMathematics.Vectors.int2,System.Int32)">
            <summary>
            Rotates the bits of each vector component to the right
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Rol(GenMathematics.Vectors.int2,GenMathematics.Vectors.int2)">
            <summary>
            Rotates the bits of each vector component to the left
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Rol(GenMathematics.Vectors.int2,System.Int32)">
            <summary>
            Rotates the bits of each vector component to the left
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.NextPow2(GenMathematics.Vectors.int2)">
            <summary>
            Computes the next power of two for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CountBits(GenMathematics.Vectors.int2)">
            <summary>
            Counts the number of bits for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.UnionOr(GenMathematics.Vectors.int2)">
            <summary>
            Returns the result of an OR operation between all vector components
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.UnionAnd(GenMathematics.Vectors.int2)">
            <summary>
            Returns the result of an AND operation between all vector components
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Shift(GenMathematics.Vectors.int2,System.Int32)">
            <summary>
            Shifts components in a loop in a positive or negative direction
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Select(GenMathematics.Vectors.int2,GenMathematics.Vectors.int2,GenMathematics.Vectors.bool2)">
            <summary>
            Selects components from two vectors according to conditions
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Select(GenMathematics.Vectors.int2,GenMathematics.Vectors.int2,System.Boolean)">
            <summary>
            Selects components from two vectors according to condition
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CompressLeft(GenMathematics.Vectors.int2,GenMathematics.Vectors.bool2)">
            <summary>
            Leaves the components specified in the condition and shifts them to the left
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CompressLeft(GenMathematics.Vectors.int2,System.Int32)">
            <summary>
            Leaves the components specified in the mask and shifts them to the left
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CompressRight(GenMathematics.Vectors.int2,GenMathematics.Vectors.bool2)">
            <summary>
            Leaves the components specified in the condition and shifts them to the right
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CompressRight(GenMathematics.Vectors.int2,System.Int32)">
            <summary>
            Leaves the components specified in the mask and shifts them to the right
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.UnionMin(GenMathematics.Vectors.int2)">
            <summary>
            Returns the minimum vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.UnionMax(GenMathematics.Vectors.int2)">
            <summary>
            Returns the maximum vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.UnionSum(GenMathematics.Vectors.int2)">
            <summary>
            Returns the sum of the vector components
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Min(GenMathematics.Vectors.int2,GenMathematics.Vectors.int2)">
            <summary>
            Computes the smallest value of two for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Max(GenMathematics.Vectors.int2,GenMathematics.Vectors.int2)">
            <summary>
            Computes the largest value of two for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Clamp(GenMathematics.Vectors.int2,GenMathematics.Vectors.int2,GenMathematics.Vectors.int2)">
            <summary>
            Clamps each vector component between min and max
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Clamp(GenMathematics.Vectors.int2,System.Int32,System.Int32)">
            <summary>
            Clamps each vector component between min and max
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.IsZero(GenMathematics.Vectors.int2)">
            <summary>
            Returns true if all components are zero
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.AnyZero(GenMathematics.Vectors.int2)">
            <summary>
            Returns true if at least one of the components is zero
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Abs(GenMathematics.Vectors.int2)">
            <summary>
            Computes the absolute for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Sign(GenMathematics.Vectors.int2)">
            <summary>
            Returns the sign of each component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.BitSign(GenMathematics.Vectors.int2)">
            <summary>
            Sets a bit for a component if it is less than zero
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.BoolSign(GenMathematics.Vectors.int2)">
            <summary>
            Returns true for a component if it is less than zero
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.LengthSq(GenMathematics.Vectors.int3)">
            <summary>
            Returns the square of the vector length
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.LengthSqRef(GenMathematics.Vectors.int3@)">
            <summary>
            Returns the square of the vector length
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Manhattan(GenMathematics.Vectors.int3)">
            <summary>
            Returns the Manhattan length of the vector
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.ManhattanRef(GenMathematics.Vectors.int3@)">
            <summary>
            Returns the Manhattan length of the vector
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Manhattan(GenMathematics.Vectors.int3,GenMathematics.Vectors.int3)">
            <summary>
            Returns the Manhattan distance between vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.ManhattanRef(GenMathematics.Vectors.int3@,GenMathematics.Vectors.int3@)">
            <summary>
            Returns the Manhattan distance between vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Dot(GenMathematics.Vectors.int3,GenMathematics.Vectors.int3)">
            <summary>
            Returns the scalar product of vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.DotRef(GenMathematics.Vectors.int3@,GenMathematics.Vectors.int3@)">
            <summary>
            Returns the scalar product of vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.PerpDot(GenMathematics.Vectors.int3,GenMathematics.Vectors.int3)">
            <summary>
            Returns the perpendicular dot product of vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.PerpDotRef(GenMathematics.Vectors.int3@,GenMathematics.Vectors.int3@)">
            <summary>
            Returns the perpendicular dot product of vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.DistanceSq(GenMathematics.Vectors.int3,GenMathematics.Vectors.int3)">
            <summary>
            Returns the square of the distance between vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.DistanceSqRef(GenMathematics.Vectors.int3@,GenMathematics.Vectors.int3@)">
            <summary>
            Returns the square of the distance between vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Square(GenMathematics.Vectors.int3)">
            <summary>
            Squares each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Square(GenMathematics.Vectors.int3@,GenMathematics.Vectors.int3@)">
            <summary>
            Squares each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.AbsDiff(GenMathematics.Vectors.int3,GenMathematics.Vectors.int3)">
            <summary>
            Calculates the absolute difference between the components of two vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.AbsDiff(GenMathematics.Vectors.int3@,GenMathematics.Vectors.int3@,GenMathematics.Vectors.int3@)">
            <summary>
            Calculates the absolute difference between the components of two vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Cross(GenMathematics.Vectors.int3,GenMathematics.Vectors.int3)">
            <summary>
            Returns the vector product of vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Cross(GenMathematics.Vectors.int3@,GenMathematics.Vectors.int3@,GenMathematics.Vectors.int3@)">
            <summary>
            Returns the vector product of vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Ror(GenMathematics.Vectors.int3,GenMathematics.Vectors.int3)">
            <summary>
            Rotates the bits of each vector component to the right
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Ror(GenMathematics.Vectors.int3@,GenMathematics.Vectors.int3@,GenMathematics.Vectors.int3@)">
            <summary>
            Rotates the bits of each vector component to the right
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Ror(GenMathematics.Vectors.int3,System.Int32)">
            <summary>
            Rotates the bits of each vector component to the right
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Ror(GenMathematics.Vectors.int3@,System.Int32,GenMathematics.Vectors.int3@)">
            <summary>
            Rotates the bits of each vector component to the right
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Rol(GenMathematics.Vectors.int3,GenMathematics.Vectors.int3)">
            <summary>
            Rotates the bits of each vector component to the left
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Rol(GenMathematics.Vectors.int3@,GenMathematics.Vectors.int3@,GenMathematics.Vectors.int3@)">
            <summary>
            Rotates the bits of each vector component to the left
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Rol(GenMathematics.Vectors.int3,System.Int32)">
            <summary>
            Rotates the bits of each vector component to the left
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Rol(GenMathematics.Vectors.int3@,System.Int32,GenMathematics.Vectors.int3@)">
            <summary>
            Rotates the bits of each vector component to the left
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.NextPow2(GenMathematics.Vectors.int3)">
            <summary>
            Computes the next power of two for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.NextPow2(GenMathematics.Vectors.int3@,GenMathematics.Vectors.int3@)">
            <summary>
            Computes the next power of two for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CountBits(GenMathematics.Vectors.int3)">
            <summary>
            Counts the number of bits for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CountBits(GenMathematics.Vectors.int3@,GenMathematics.Vectors.int3@)">
            <summary>
            Counts the number of bits for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.UnionOr(GenMathematics.Vectors.int3)">
            <summary>
            Returns the result of an OR operation between all vector components
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.UnionOrRef(GenMathematics.Vectors.int3@)">
            <summary>
            Returns the result of an OR operation between all vector components
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.UnionAnd(GenMathematics.Vectors.int3)">
            <summary>
            Returns the result of an AND operation between all vector components
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.UnionAndRef(GenMathematics.Vectors.int3@)">
            <summary>
            Returns the result of an AND operation between all vector components
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Shift(GenMathematics.Vectors.int3,System.Int32)">
            <summary>
            Shifts components in a loop in a positive or negative direction
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Shift(GenMathematics.Vectors.int3,System.Int32,GenMathematics.Vectors.int3@)">
            <summary>
            Shifts components in a loop in a positive or negative direction
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Select(GenMathematics.Vectors.int3,GenMathematics.Vectors.int3,GenMathematics.Vectors.bool3)">
            <summary>
            Selects components from two vectors according to conditions
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Select(GenMathematics.Vectors.int3@,GenMathematics.Vectors.int3@,GenMathematics.Vectors.bool3,GenMathematics.Vectors.int3@)">
            <summary>
            Selects components from two vectors according to conditions
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Select(GenMathematics.Vectors.int3,GenMathematics.Vectors.int3,System.Boolean)">
            <summary>
            Selects components from two vectors according to condition
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Select(GenMathematics.Vectors.int3@,GenMathematics.Vectors.int3@,System.Boolean,GenMathematics.Vectors.int3@)">
            <summary>
            Selects components from two vectors according to condition
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CompressLeft(GenMathematics.Vectors.int3,GenMathematics.Vectors.bool3)">
            <summary>
            Leaves the components specified in the condition and shifts them to the left
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CompressLeft(GenMathematics.Vectors.int3@,GenMathematics.Vectors.bool3,GenMathematics.Vectors.int3@)">
            <summary>
            Leaves the components specified in the condition and shifts them to the left
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CompressLeft(GenMathematics.Vectors.int3,System.Int32)">
            <summary>
            Leaves the components specified in the mask and shifts them to the left
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CompressLeft(GenMathematics.Vectors.int3@,System.Int32,GenMathematics.Vectors.int3@)">
            <summary>
            Leaves the components specified in the mask and shifts them to the left
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CompressRight(GenMathematics.Vectors.int3,GenMathematics.Vectors.bool3)">
            <summary>
            Leaves the components specified in the condition and shifts them to the right
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CompressRight(GenMathematics.Vectors.int3@,GenMathematics.Vectors.bool3,GenMathematics.Vectors.int3@)">
            <summary>
            Leaves the components specified in the condition and shifts them to the right
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CompressRight(GenMathematics.Vectors.int3,System.Int32)">
            <summary>
            Leaves the components specified in the mask and shifts them to the right
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CompressRight(GenMathematics.Vectors.int3@,System.Int32,GenMathematics.Vectors.int3@)">
            <summary>
            Leaves the components specified in the mask and shifts them to the right
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.UnionMin(GenMathematics.Vectors.int3)">
            <summary>
            Returns the minimum vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.UnionMinRef(GenMathematics.Vectors.int3@)">
            <summary>
            Returns the minimum vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.UnionMax(GenMathematics.Vectors.int3)">
            <summary>
            Returns the maximum vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.UnionMaxRef(GenMathematics.Vectors.int3@)">
            <summary>
            Returns the maximum vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.UnionSum(GenMathematics.Vectors.int3)">
            <summary>
            Returns the sum of the vector components
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.UnionSumRef(GenMathematics.Vectors.int3@)">
            <summary>
            Returns the sum of the vector components
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Min(GenMathematics.Vectors.int3,GenMathematics.Vectors.int3)">
            <summary>
            Computes the smallest value of two for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Min(GenMathematics.Vectors.int3@,GenMathematics.Vectors.int3@,GenMathematics.Vectors.int3@)">
            <summary>
            Computes the smallest value of two for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Max(GenMathematics.Vectors.int3,GenMathematics.Vectors.int3)">
            <summary>
            Computes the largest value of two for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Max(GenMathematics.Vectors.int3@,GenMathematics.Vectors.int3@,GenMathematics.Vectors.int3@)">
            <summary>
            Computes the largest value of two for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Clamp(GenMathematics.Vectors.int3,GenMathematics.Vectors.int3,GenMathematics.Vectors.int3)">
            <summary>
            Clamps each vector component between min and max
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Clamp(GenMathematics.Vectors.int3@,GenMathematics.Vectors.int3@,GenMathematics.Vectors.int3@,GenMathematics.Vectors.int3@)">
            <summary>
            Clamps each vector component between min and max
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Clamp(GenMathematics.Vectors.int3,System.Int32,System.Int32)">
            <summary>
            Clamps each vector component between min and max
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Clamp(GenMathematics.Vectors.int3@,System.Int32,System.Int32,GenMathematics.Vectors.int3@)">
            <summary>
            Clamps each vector component between min and max
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.IsZero(GenMathematics.Vectors.int3)">
            <summary>
            Returns true if all components are zero
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.IsZeroRef(GenMathematics.Vectors.int3@)">
            <summary>
            Returns true if all components are zero
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.AnyZero(GenMathematics.Vectors.int3)">
            <summary>
            Returns true if at least one of the components is zero
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.AnyZeroRef(GenMathematics.Vectors.int3@)">
            <summary>
            Returns true if at least one of the components is zero
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Abs(GenMathematics.Vectors.int3)">
            <summary>
            Computes the absolute for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Abs(GenMathematics.Vectors.int3@,GenMathematics.Vectors.int3@)">
            <summary>
            Computes the absolute for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Sign(GenMathematics.Vectors.int3)">
            <summary>
            Returns the sign of each component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Sign(GenMathematics.Vectors.int3@,GenMathematics.Vectors.int3@)">
            <summary>
            Returns the sign of each component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.BitSign(GenMathematics.Vectors.int3)">
            <summary>
            Sets a bit for a component if it is less than zero
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.BitSignRef(GenMathematics.Vectors.int3@)">
            <summary>
            Sets a bit for a component if it is less than zero
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.BoolSign(GenMathematics.Vectors.int3)">
            <summary>
            Returns true for a component if it is less than zero
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.BoolSignRef(GenMathematics.Vectors.int3@)">
            <summary>
            Returns true for a component if it is less than zero
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.LengthSq(GenMathematics.Vectors.int4)">
            <summary>
            Returns the square of the vector length
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.LengthSqRef(GenMathematics.Vectors.int4@)">
            <summary>
            Returns the square of the vector length
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Manhattan(GenMathematics.Vectors.int4)">
            <summary>
            Returns the Manhattan length of the vector
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.ManhattanRef(GenMathematics.Vectors.int4@)">
            <summary>
            Returns the Manhattan length of the vector
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Manhattan(GenMathematics.Vectors.int4,GenMathematics.Vectors.int4)">
            <summary>
            Returns the Manhattan distance between vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.ManhattanRef(GenMathematics.Vectors.int4@,GenMathematics.Vectors.int4@)">
            <summary>
            Returns the Manhattan distance between vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Dot(GenMathematics.Vectors.int4,GenMathematics.Vectors.int4)">
            <summary>
            Returns the scalar product of vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.DotRef(GenMathematics.Vectors.int4@,GenMathematics.Vectors.int4@)">
            <summary>
            Returns the scalar product of vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.DistanceSq(GenMathematics.Vectors.int4,GenMathematics.Vectors.int4)">
            <summary>
            Returns the square of the distance between vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.DistanceSqRef(GenMathematics.Vectors.int4@,GenMathematics.Vectors.int4@)">
            <summary>
            Returns the square of the distance between vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Square(GenMathematics.Vectors.int4)">
            <summary>
            Squares each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Square(GenMathematics.Vectors.int4@,GenMathematics.Vectors.int4@)">
            <summary>
            Squares each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.AbsDiff(GenMathematics.Vectors.int4,GenMathematics.Vectors.int4)">
            <summary>
            Calculates the absolute difference between the components of two vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.AbsDiff(GenMathematics.Vectors.int4@,GenMathematics.Vectors.int4@,GenMathematics.Vectors.int4@)">
            <summary>
            Calculates the absolute difference between the components of two vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Ror(GenMathematics.Vectors.int4,GenMathematics.Vectors.int4)">
            <summary>
            Rotates the bits of each vector component to the right
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Ror(GenMathematics.Vectors.int4@,GenMathematics.Vectors.int4@,GenMathematics.Vectors.int4@)">
            <summary>
            Rotates the bits of each vector component to the right
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Ror(GenMathematics.Vectors.int4,System.Int32)">
            <summary>
            Rotates the bits of each vector component to the right
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Ror(GenMathematics.Vectors.int4@,System.Int32,GenMathematics.Vectors.int4@)">
            <summary>
            Rotates the bits of each vector component to the right
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Rol(GenMathematics.Vectors.int4,GenMathematics.Vectors.int4)">
            <summary>
            Rotates the bits of each vector component to the left
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Rol(GenMathematics.Vectors.int4@,GenMathematics.Vectors.int4@,GenMathematics.Vectors.int4@)">
            <summary>
            Rotates the bits of each vector component to the left
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Rol(GenMathematics.Vectors.int4,System.Int32)">
            <summary>
            Rotates the bits of each vector component to the left
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Rol(GenMathematics.Vectors.int4@,System.Int32,GenMathematics.Vectors.int4@)">
            <summary>
            Rotates the bits of each vector component to the left
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.NextPow2(GenMathematics.Vectors.int4)">
            <summary>
            Computes the next power of two for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.NextPow2(GenMathematics.Vectors.int4@,GenMathematics.Vectors.int4@)">
            <summary>
            Computes the next power of two for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CountBits(GenMathematics.Vectors.int4)">
            <summary>
            Counts the number of bits for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CountBits(GenMathematics.Vectors.int4@,GenMathematics.Vectors.int4@)">
            <summary>
            Counts the number of bits for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.UnionOr(GenMathematics.Vectors.int4)">
            <summary>
            Returns the result of an OR operation between all vector components
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.UnionOrRef(GenMathematics.Vectors.int4@)">
            <summary>
            Returns the result of an OR operation between all vector components
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.UnionAnd(GenMathematics.Vectors.int4)">
            <summary>
            Returns the result of an AND operation between all vector components
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.UnionAndRef(GenMathematics.Vectors.int4@)">
            <summary>
            Returns the result of an AND operation between all vector components
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Shift(GenMathematics.Vectors.int4,System.Int32)">
            <summary>
            Shifts components in a loop in a positive or negative direction
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Shift(GenMathematics.Vectors.int4,System.Int32,GenMathematics.Vectors.int4@)">
            <summary>
            Shifts components in a loop in a positive or negative direction
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Select(GenMathematics.Vectors.int4,GenMathematics.Vectors.int4,GenMathematics.Vectors.bool4)">
            <summary>
            Selects components from two vectors according to conditions
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Select(GenMathematics.Vectors.int4@,GenMathematics.Vectors.int4@,GenMathematics.Vectors.bool4,GenMathematics.Vectors.int4@)">
            <summary>
            Selects components from two vectors according to conditions
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Select(GenMathematics.Vectors.int4,GenMathematics.Vectors.int4,System.Boolean)">
            <summary>
            Selects components from two vectors according to condition
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Select(GenMathematics.Vectors.int4@,GenMathematics.Vectors.int4@,System.Boolean,GenMathematics.Vectors.int4@)">
            <summary>
            Selects components from two vectors according to condition
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CompressLeft(GenMathematics.Vectors.int4,GenMathematics.Vectors.bool4)">
            <summary>
            Leaves the components specified in the condition and shifts them to the left
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CompressLeft(GenMathematics.Vectors.int4@,GenMathematics.Vectors.bool4,GenMathematics.Vectors.int4@)">
            <summary>
            Leaves the components specified in the condition and shifts them to the left
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CompressLeft(GenMathematics.Vectors.int4,System.Int32)">
            <summary>
            Leaves the components specified in the mask and shifts them to the left
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CompressLeft(GenMathematics.Vectors.int4@,System.Int32,GenMathematics.Vectors.int4@)">
            <summary>
            Leaves the components specified in the mask and shifts them to the left
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CompressRight(GenMathematics.Vectors.int4,GenMathematics.Vectors.bool4)">
            <summary>
            Leaves the components specified in the condition and shifts them to the right
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CompressRight(GenMathematics.Vectors.int4@,GenMathematics.Vectors.bool4,GenMathematics.Vectors.int4@)">
            <summary>
            Leaves the components specified in the condition and shifts them to the right
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CompressRight(GenMathematics.Vectors.int4,System.Int32)">
            <summary>
            Leaves the components specified in the mask and shifts them to the right
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CompressRight(GenMathematics.Vectors.int4@,System.Int32,GenMathematics.Vectors.int4@)">
            <summary>
            Leaves the components specified in the mask and shifts them to the right
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.UnionMin(GenMathematics.Vectors.int4)">
            <summary>
            Returns the minimum vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.UnionMinRef(GenMathematics.Vectors.int4@)">
            <summary>
            Returns the minimum vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.UnionMax(GenMathematics.Vectors.int4)">
            <summary>
            Returns the maximum vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.UnionMaxRef(GenMathematics.Vectors.int4@)">
            <summary>
            Returns the maximum vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.UnionSum(GenMathematics.Vectors.int4)">
            <summary>
            Returns the sum of the vector components
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.UnionSumRef(GenMathematics.Vectors.int4@)">
            <summary>
            Returns the sum of the vector components
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Min(GenMathematics.Vectors.int4,GenMathematics.Vectors.int4)">
            <summary>
            Computes the smallest value of two for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Min(GenMathematics.Vectors.int4@,GenMathematics.Vectors.int4@,GenMathematics.Vectors.int4@)">
            <summary>
            Computes the smallest value of two for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Max(GenMathematics.Vectors.int4,GenMathematics.Vectors.int4)">
            <summary>
            Computes the largest value of two for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Max(GenMathematics.Vectors.int4@,GenMathematics.Vectors.int4@,GenMathematics.Vectors.int4@)">
            <summary>
            Computes the largest value of two for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Clamp(GenMathematics.Vectors.int4,GenMathematics.Vectors.int4,GenMathematics.Vectors.int4)">
            <summary>
            Clamps each vector component between min and max
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Clamp(GenMathematics.Vectors.int4@,GenMathematics.Vectors.int4@,GenMathematics.Vectors.int4@,GenMathematics.Vectors.int4@)">
            <summary>
            Clamps each vector component between min and max
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Clamp(GenMathematics.Vectors.int4,System.Int32,System.Int32)">
            <summary>
            Clamps each vector component between min and max
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Clamp(GenMathematics.Vectors.int4@,System.Int32,System.Int32,GenMathematics.Vectors.int4@)">
            <summary>
            Clamps each vector component between min and max
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.IsZero(GenMathematics.Vectors.int4)">
            <summary>
            Returns true if all components are zero
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.IsZeroRef(GenMathematics.Vectors.int4@)">
            <summary>
            Returns true if all components are zero
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.AnyZero(GenMathematics.Vectors.int4)">
            <summary>
            Returns true if at least one of the components is zero
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.AnyZeroRef(GenMathematics.Vectors.int4@)">
            <summary>
            Returns true if at least one of the components is zero
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Abs(GenMathematics.Vectors.int4)">
            <summary>
            Computes the absolute for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Abs(GenMathematics.Vectors.int4@,GenMathematics.Vectors.int4@)">
            <summary>
            Computes the absolute for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Sign(GenMathematics.Vectors.int4)">
            <summary>
            Returns the sign of each component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Sign(GenMathematics.Vectors.int4@,GenMathematics.Vectors.int4@)">
            <summary>
            Returns the sign of each component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.BitSign(GenMathematics.Vectors.int4)">
            <summary>
            Sets a bit for a component if it is less than zero
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.BitSignRef(GenMathematics.Vectors.int4@)">
            <summary>
            Sets a bit for a component if it is less than zero
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.BoolSign(GenMathematics.Vectors.int4)">
            <summary>
            Returns true for a component if it is less than zero
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.BoolSignRef(GenMathematics.Vectors.int4@)">
            <summary>
            Returns true for a component if it is less than zero
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.LengthSq(GenMathematics.Vectors.long2)">
            <summary>
            Returns the square of the vector length
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.LengthSqRef(GenMathematics.Vectors.long2@)">
            <summary>
            Returns the square of the vector length
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Manhattan(GenMathematics.Vectors.long2)">
            <summary>
            Returns the Manhattan length of the vector
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.ManhattanRef(GenMathematics.Vectors.long2@)">
            <summary>
            Returns the Manhattan length of the vector
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Manhattan(GenMathematics.Vectors.long2,GenMathematics.Vectors.long2)">
            <summary>
            Returns the Manhattan distance between vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.ManhattanRef(GenMathematics.Vectors.long2@,GenMathematics.Vectors.long2@)">
            <summary>
            Returns the Manhattan distance between vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Dot(GenMathematics.Vectors.long2,GenMathematics.Vectors.long2)">
            <summary>
            Returns the scalar product of vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.DotRef(GenMathematics.Vectors.long2@,GenMathematics.Vectors.long2@)">
            <summary>
            Returns the scalar product of vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.PerpDot(GenMathematics.Vectors.long2,GenMathematics.Vectors.long2)">
            <summary>
            Returns the perpendicular dot product of vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.PerpDotRef(GenMathematics.Vectors.long2@,GenMathematics.Vectors.long2@)">
            <summary>
            Returns the perpendicular dot product of vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.DistanceSq(GenMathematics.Vectors.long2,GenMathematics.Vectors.long2)">
            <summary>
            Returns the square of the distance between vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.DistanceSqRef(GenMathematics.Vectors.long2@,GenMathematics.Vectors.long2@)">
            <summary>
            Returns the square of the distance between vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Square(GenMathematics.Vectors.long2)">
            <summary>
            Squares each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Square(GenMathematics.Vectors.long2@,GenMathematics.Vectors.long2@)">
            <summary>
            Squares each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.AbsDiff(GenMathematics.Vectors.long2,GenMathematics.Vectors.long2)">
            <summary>
            Calculates the absolute difference between the components of two vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.AbsDiff(GenMathematics.Vectors.long2@,GenMathematics.Vectors.long2@,GenMathematics.Vectors.long2@)">
            <summary>
            Calculates the absolute difference between the components of two vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Ror(GenMathematics.Vectors.long2,GenMathematics.Vectors.int2)">
            <summary>
            Rotates the bits of each vector component to the right
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Ror(GenMathematics.Vectors.long2@,GenMathematics.Vectors.int2,GenMathematics.Vectors.long2@)">
            <summary>
            Rotates the bits of each vector component to the right
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Ror(GenMathematics.Vectors.long2,System.Int32)">
            <summary>
            Rotates the bits of each vector component to the right
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Ror(GenMathematics.Vectors.long2@,System.Int32,GenMathematics.Vectors.long2@)">
            <summary>
            Rotates the bits of each vector component to the right
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Rol(GenMathematics.Vectors.long2,GenMathematics.Vectors.int2)">
            <summary>
            Rotates the bits of each vector component to the left
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Rol(GenMathematics.Vectors.long2@,GenMathematics.Vectors.int2,GenMathematics.Vectors.long2@)">
            <summary>
            Rotates the bits of each vector component to the left
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Rol(GenMathematics.Vectors.long2,System.Int32)">
            <summary>
            Rotates the bits of each vector component to the left
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Rol(GenMathematics.Vectors.long2@,System.Int32,GenMathematics.Vectors.long2@)">
            <summary>
            Rotates the bits of each vector component to the left
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.NextPow2(GenMathematics.Vectors.long2)">
            <summary>
            Computes the next power of two for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.NextPow2(GenMathematics.Vectors.long2@,GenMathematics.Vectors.long2@)">
            <summary>
            Computes the next power of two for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CountBits(GenMathematics.Vectors.long2)">
            <summary>
            Counts the number of bits for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CountBits(GenMathematics.Vectors.long2@,GenMathematics.Vectors.long2@)">
            <summary>
            Counts the number of bits for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.UnionOr(GenMathematics.Vectors.long2)">
            <summary>
            Returns the result of an OR operation between all vector components
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.UnionOrRef(GenMathematics.Vectors.long2@)">
            <summary>
            Returns the result of an OR operation between all vector components
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.UnionAnd(GenMathematics.Vectors.long2)">
            <summary>
            Returns the result of an AND operation between all vector components
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.UnionAndRef(GenMathematics.Vectors.long2@)">
            <summary>
            Returns the result of an AND operation between all vector components
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Shift(GenMathematics.Vectors.long2,System.Int32)">
            <summary>
            Shifts components in a loop in a positive or negative direction
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Shift(GenMathematics.Vectors.long2,System.Int32,GenMathematics.Vectors.long2@)">
            <summary>
            Shifts components in a loop in a positive or negative direction
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Select(GenMathematics.Vectors.long2,GenMathematics.Vectors.long2,GenMathematics.Vectors.bool2)">
            <summary>
            Selects components from two vectors according to conditions
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Select(GenMathematics.Vectors.long2@,GenMathematics.Vectors.long2@,GenMathematics.Vectors.bool2,GenMathematics.Vectors.long2@)">
            <summary>
            Selects components from two vectors according to conditions
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Select(GenMathematics.Vectors.long2,GenMathematics.Vectors.long2,System.Boolean)">
            <summary>
            Selects components from two vectors according to condition
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Select(GenMathematics.Vectors.long2@,GenMathematics.Vectors.long2@,System.Boolean,GenMathematics.Vectors.long2@)">
            <summary>
            Selects components from two vectors according to condition
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CompressLeft(GenMathematics.Vectors.long2,GenMathematics.Vectors.bool2)">
            <summary>
            Leaves the components specified in the condition and shifts them to the left
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CompressLeft(GenMathematics.Vectors.long2@,GenMathematics.Vectors.bool2,GenMathematics.Vectors.long2@)">
            <summary>
            Leaves the components specified in the condition and shifts them to the left
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CompressLeft(GenMathematics.Vectors.long2,System.Int32)">
            <summary>
            Leaves the components specified in the mask and shifts them to the left
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CompressLeft(GenMathematics.Vectors.long2@,System.Int32,GenMathematics.Vectors.long2@)">
            <summary>
            Leaves the components specified in the mask and shifts them to the left
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CompressRight(GenMathematics.Vectors.long2,GenMathematics.Vectors.bool2)">
            <summary>
            Leaves the components specified in the condition and shifts them to the right
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CompressRight(GenMathematics.Vectors.long2@,GenMathematics.Vectors.bool2,GenMathematics.Vectors.long2@)">
            <summary>
            Leaves the components specified in the condition and shifts them to the right
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CompressRight(GenMathematics.Vectors.long2,System.Int32)">
            <summary>
            Leaves the components specified in the mask and shifts them to the right
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CompressRight(GenMathematics.Vectors.long2@,System.Int32,GenMathematics.Vectors.long2@)">
            <summary>
            Leaves the components specified in the mask and shifts them to the right
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.UnionMin(GenMathematics.Vectors.long2)">
            <summary>
            Returns the minimum vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.UnionMinRef(GenMathematics.Vectors.long2@)">
            <summary>
            Returns the minimum vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.UnionMax(GenMathematics.Vectors.long2)">
            <summary>
            Returns the maximum vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.UnionMaxRef(GenMathematics.Vectors.long2@)">
            <summary>
            Returns the maximum vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.UnionSum(GenMathematics.Vectors.long2)">
            <summary>
            Returns the sum of the vector components
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.UnionSumRef(GenMathematics.Vectors.long2@)">
            <summary>
            Returns the sum of the vector components
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Min(GenMathematics.Vectors.long2,GenMathematics.Vectors.long2)">
            <summary>
            Computes the smallest value of two for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Min(GenMathematics.Vectors.long2@,GenMathematics.Vectors.long2@,GenMathematics.Vectors.long2@)">
            <summary>
            Computes the smallest value of two for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Max(GenMathematics.Vectors.long2,GenMathematics.Vectors.long2)">
            <summary>
            Computes the largest value of two for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Max(GenMathematics.Vectors.long2@,GenMathematics.Vectors.long2@,GenMathematics.Vectors.long2@)">
            <summary>
            Computes the largest value of two for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Clamp(GenMathematics.Vectors.long2,GenMathematics.Vectors.long2,GenMathematics.Vectors.long2)">
            <summary>
            Clamps each vector component between min and max
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Clamp(GenMathematics.Vectors.long2@,GenMathematics.Vectors.long2@,GenMathematics.Vectors.long2@,GenMathematics.Vectors.long2@)">
            <summary>
            Clamps each vector component between min and max
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Clamp(GenMathematics.Vectors.long2,System.Int64,System.Int64)">
            <summary>
            Clamps each vector component between min and max
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Clamp(GenMathematics.Vectors.long2@,System.Int64,System.Int64,GenMathematics.Vectors.long2@)">
            <summary>
            Clamps each vector component between min and max
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.IsZero(GenMathematics.Vectors.long2)">
            <summary>
            Returns true if all components are zero
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.IsZeroRef(GenMathematics.Vectors.long2@)">
            <summary>
            Returns true if all components are zero
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.AnyZero(GenMathematics.Vectors.long2)">
            <summary>
            Returns true if at least one of the components is zero
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.AnyZeroRef(GenMathematics.Vectors.long2@)">
            <summary>
            Returns true if at least one of the components is zero
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Abs(GenMathematics.Vectors.long2)">
            <summary>
            Computes the absolute for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Abs(GenMathematics.Vectors.long2@,GenMathematics.Vectors.long2@)">
            <summary>
            Computes the absolute for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Sign(GenMathematics.Vectors.long2)">
            <summary>
            Returns the sign of each component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Sign(GenMathematics.Vectors.long2@,GenMathematics.Vectors.int2@)">
            <summary>
            Returns the sign of each component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.BitSign(GenMathematics.Vectors.long2)">
            <summary>
            Sets a bit for a component if it is less than zero
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.BitSignRef(GenMathematics.Vectors.long2@)">
            <summary>
            Sets a bit for a component if it is less than zero
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.BoolSign(GenMathematics.Vectors.long2)">
            <summary>
            Returns true for a component if it is less than zero
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.BoolSignRef(GenMathematics.Vectors.long2@)">
            <summary>
            Returns true for a component if it is less than zero
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.LengthSq(GenMathematics.Vectors.long3)">
            <summary>
            Returns the square of the vector length
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.LengthSqRef(GenMathematics.Vectors.long3@)">
            <summary>
            Returns the square of the vector length
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Manhattan(GenMathematics.Vectors.long3)">
            <summary>
            Returns the Manhattan length of the vector
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.ManhattanRef(GenMathematics.Vectors.long3@)">
            <summary>
            Returns the Manhattan length of the vector
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Manhattan(GenMathematics.Vectors.long3,GenMathematics.Vectors.long3)">
            <summary>
            Returns the Manhattan distance between vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.ManhattanRef(GenMathematics.Vectors.long3@,GenMathematics.Vectors.long3@)">
            <summary>
            Returns the Manhattan distance between vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Dot(GenMathematics.Vectors.long3,GenMathematics.Vectors.long3)">
            <summary>
            Returns the scalar product of vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.DotRef(GenMathematics.Vectors.long3@,GenMathematics.Vectors.long3@)">
            <summary>
            Returns the scalar product of vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.PerpDot(GenMathematics.Vectors.long3,GenMathematics.Vectors.long3)">
            <summary>
            Returns the perpendicular dot product of vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.PerpDotRef(GenMathematics.Vectors.long3@,GenMathematics.Vectors.long3@)">
            <summary>
            Returns the perpendicular dot product of vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.DistanceSq(GenMathematics.Vectors.long3,GenMathematics.Vectors.long3)">
            <summary>
            Returns the square of the distance between vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.DistanceSqRef(GenMathematics.Vectors.long3@,GenMathematics.Vectors.long3@)">
            <summary>
            Returns the square of the distance between vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Square(GenMathematics.Vectors.long3)">
            <summary>
            Squares each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Square(GenMathematics.Vectors.long3@,GenMathematics.Vectors.long3@)">
            <summary>
            Squares each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.AbsDiff(GenMathematics.Vectors.long3,GenMathematics.Vectors.long3)">
            <summary>
            Calculates the absolute difference between the components of two vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.AbsDiff(GenMathematics.Vectors.long3@,GenMathematics.Vectors.long3@,GenMathematics.Vectors.long3@)">
            <summary>
            Calculates the absolute difference between the components of two vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Cross(GenMathematics.Vectors.long3,GenMathematics.Vectors.long3)">
            <summary>
            Returns the vector product of vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Cross(GenMathematics.Vectors.long3@,GenMathematics.Vectors.long3@,GenMathematics.Vectors.long3@)">
            <summary>
            Returns the vector product of vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Ror(GenMathematics.Vectors.long3,GenMathematics.Vectors.int3)">
            <summary>
            Rotates the bits of each vector component to the right
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Ror(GenMathematics.Vectors.long3@,GenMathematics.Vectors.int3@,GenMathematics.Vectors.long3@)">
            <summary>
            Rotates the bits of each vector component to the right
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Ror(GenMathematics.Vectors.long3,System.Int32)">
            <summary>
            Rotates the bits of each vector component to the right
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Ror(GenMathematics.Vectors.long3@,System.Int32,GenMathematics.Vectors.long3@)">
            <summary>
            Rotates the bits of each vector component to the right
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Rol(GenMathematics.Vectors.long3,GenMathematics.Vectors.int3)">
            <summary>
            Rotates the bits of each vector component to the left
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Rol(GenMathematics.Vectors.long3@,GenMathematics.Vectors.int3@,GenMathematics.Vectors.long3@)">
            <summary>
            Rotates the bits of each vector component to the left
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Rol(GenMathematics.Vectors.long3,System.Int32)">
            <summary>
            Rotates the bits of each vector component to the left
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Rol(GenMathematics.Vectors.long3@,System.Int32,GenMathematics.Vectors.long3@)">
            <summary>
            Rotates the bits of each vector component to the left
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.NextPow2(GenMathematics.Vectors.long3)">
            <summary>
            Computes the next power of two for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.NextPow2(GenMathematics.Vectors.long3@,GenMathematics.Vectors.long3@)">
            <summary>
            Computes the next power of two for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CountBits(GenMathematics.Vectors.long3)">
            <summary>
            Counts the number of bits for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CountBits(GenMathematics.Vectors.long3@,GenMathematics.Vectors.long3@)">
            <summary>
            Counts the number of bits for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.UnionOr(GenMathematics.Vectors.long3)">
            <summary>
            Returns the result of an OR operation between all vector components
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.UnionOrRef(GenMathematics.Vectors.long3@)">
            <summary>
            Returns the result of an OR operation between all vector components
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.UnionAnd(GenMathematics.Vectors.long3)">
            <summary>
            Returns the result of an AND operation between all vector components
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.UnionAndRef(GenMathematics.Vectors.long3@)">
            <summary>
            Returns the result of an AND operation between all vector components
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Shift(GenMathematics.Vectors.long3,System.Int32)">
            <summary>
            Shifts components in a loop in a positive or negative direction
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Shift(GenMathematics.Vectors.long3,System.Int32,GenMathematics.Vectors.long3@)">
            <summary>
            Shifts components in a loop in a positive or negative direction
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Select(GenMathematics.Vectors.long3,GenMathematics.Vectors.long3,GenMathematics.Vectors.bool3)">
            <summary>
            Selects components from two vectors according to conditions
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Select(GenMathematics.Vectors.long3@,GenMathematics.Vectors.long3@,GenMathematics.Vectors.bool3,GenMathematics.Vectors.long3@)">
            <summary>
            Selects components from two vectors according to conditions
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Select(GenMathematics.Vectors.long3,GenMathematics.Vectors.long3,System.Boolean)">
            <summary>
            Selects components from two vectors according to condition
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Select(GenMathematics.Vectors.long3@,GenMathematics.Vectors.long3@,System.Boolean,GenMathematics.Vectors.long3@)">
            <summary>
            Selects components from two vectors according to condition
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CompressLeft(GenMathematics.Vectors.long3,GenMathematics.Vectors.bool3)">
            <summary>
            Leaves the components specified in the condition and shifts them to the left
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CompressLeft(GenMathematics.Vectors.long3@,GenMathematics.Vectors.bool3,GenMathematics.Vectors.long3@)">
            <summary>
            Leaves the components specified in the condition and shifts them to the left
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CompressLeft(GenMathematics.Vectors.long3,System.Int32)">
            <summary>
            Leaves the components specified in the mask and shifts them to the left
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CompressLeft(GenMathematics.Vectors.long3@,System.Int32,GenMathematics.Vectors.long3@)">
            <summary>
            Leaves the components specified in the mask and shifts them to the left
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CompressRight(GenMathematics.Vectors.long3,GenMathematics.Vectors.bool3)">
            <summary>
            Leaves the components specified in the condition and shifts them to the right
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CompressRight(GenMathematics.Vectors.long3@,GenMathematics.Vectors.bool3,GenMathematics.Vectors.long3@)">
            <summary>
            Leaves the components specified in the condition and shifts them to the right
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CompressRight(GenMathematics.Vectors.long3,System.Int32)">
            <summary>
            Leaves the components specified in the mask and shifts them to the right
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CompressRight(GenMathematics.Vectors.long3@,System.Int32,GenMathematics.Vectors.long3@)">
            <summary>
            Leaves the components specified in the mask and shifts them to the right
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.UnionMin(GenMathematics.Vectors.long3)">
            <summary>
            Returns the minimum vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.UnionMinRef(GenMathematics.Vectors.long3@)">
            <summary>
            Returns the minimum vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.UnionMax(GenMathematics.Vectors.long3)">
            <summary>
            Returns the maximum vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.UnionMaxRef(GenMathematics.Vectors.long3@)">
            <summary>
            Returns the maximum vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.UnionSum(GenMathematics.Vectors.long3)">
            <summary>
            Returns the sum of the vector components
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.UnionSumRef(GenMathematics.Vectors.long3@)">
            <summary>
            Returns the sum of the vector components
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Min(GenMathematics.Vectors.long3,GenMathematics.Vectors.long3)">
            <summary>
            Computes the smallest value of two for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Min(GenMathematics.Vectors.long3@,GenMathematics.Vectors.long3@,GenMathematics.Vectors.long3@)">
            <summary>
            Computes the smallest value of two for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Max(GenMathematics.Vectors.long3,GenMathematics.Vectors.long3)">
            <summary>
            Computes the largest value of two for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Max(GenMathematics.Vectors.long3@,GenMathematics.Vectors.long3@,GenMathematics.Vectors.long3@)">
            <summary>
            Computes the largest value of two for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Clamp(GenMathematics.Vectors.long3,GenMathematics.Vectors.long3,GenMathematics.Vectors.long3)">
            <summary>
            Clamps each vector component between min and max
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Clamp(GenMathematics.Vectors.long3@,GenMathematics.Vectors.long3@,GenMathematics.Vectors.long3@,GenMathematics.Vectors.long3@)">
            <summary>
            Clamps each vector component between min and max
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Clamp(GenMathematics.Vectors.long3,System.Int64,System.Int64)">
            <summary>
            Clamps each vector component between min and max
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Clamp(GenMathematics.Vectors.long3@,System.Int64,System.Int64,GenMathematics.Vectors.long3@)">
            <summary>
            Clamps each vector component between min and max
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.IsZero(GenMathematics.Vectors.long3)">
            <summary>
            Returns true if all components are zero
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.IsZeroRef(GenMathematics.Vectors.long3@)">
            <summary>
            Returns true if all components are zero
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.AnyZero(GenMathematics.Vectors.long3)">
            <summary>
            Returns true if at least one of the components is zero
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.AnyZeroRef(GenMathematics.Vectors.long3@)">
            <summary>
            Returns true if at least one of the components is zero
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Abs(GenMathematics.Vectors.long3)">
            <summary>
            Computes the absolute for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Abs(GenMathematics.Vectors.long3@,GenMathematics.Vectors.long3@)">
            <summary>
            Computes the absolute for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Sign(GenMathematics.Vectors.long3)">
            <summary>
            Returns the sign of each component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Sign(GenMathematics.Vectors.long3@,GenMathematics.Vectors.int3@)">
            <summary>
            Returns the sign of each component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.BitSign(GenMathematics.Vectors.long3)">
            <summary>
            Sets a bit for a component if it is less than zero
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.BitSignRef(GenMathematics.Vectors.long3@)">
            <summary>
            Sets a bit for a component if it is less than zero
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.BoolSign(GenMathematics.Vectors.long3)">
            <summary>
            Returns true for a component if it is less than zero
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.BoolSignRef(GenMathematics.Vectors.long3@)">
            <summary>
            Returns true for a component if it is less than zero
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.LengthSq(GenMathematics.Vectors.long4)">
            <summary>
            Returns the square of the vector length
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.LengthSqRef(GenMathematics.Vectors.long4@)">
            <summary>
            Returns the square of the vector length
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Manhattan(GenMathematics.Vectors.long4)">
            <summary>
            Returns the Manhattan length of the vector
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.ManhattanRef(GenMathematics.Vectors.long4@)">
            <summary>
            Returns the Manhattan length of the vector
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Manhattan(GenMathematics.Vectors.long4,GenMathematics.Vectors.long4)">
            <summary>
            Returns the Manhattan distance between vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.ManhattanRef(GenMathematics.Vectors.long4@,GenMathematics.Vectors.long4@)">
            <summary>
            Returns the Manhattan distance between vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Dot(GenMathematics.Vectors.long4,GenMathematics.Vectors.long4)">
            <summary>
            Returns the scalar product of vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.DotRef(GenMathematics.Vectors.long4@,GenMathematics.Vectors.long4@)">
            <summary>
            Returns the scalar product of vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.DistanceSq(GenMathematics.Vectors.long4,GenMathematics.Vectors.long4)">
            <summary>
            Returns the square of the distance between vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.DistanceSqRef(GenMathematics.Vectors.long4@,GenMathematics.Vectors.long4@)">
            <summary>
            Returns the square of the distance between vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Square(GenMathematics.Vectors.long4)">
            <summary>
            Squares each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Square(GenMathematics.Vectors.long4@,GenMathematics.Vectors.long4@)">
            <summary>
            Squares each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.AbsDiff(GenMathematics.Vectors.long4,GenMathematics.Vectors.long4)">
            <summary>
            Calculates the absolute difference between the components of two vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.AbsDiff(GenMathematics.Vectors.long4@,GenMathematics.Vectors.long4@,GenMathematics.Vectors.long4@)">
            <summary>
            Calculates the absolute difference between the components of two vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Ror(GenMathematics.Vectors.long4,GenMathematics.Vectors.int4)">
            <summary>
            Rotates the bits of each vector component to the right
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Ror(GenMathematics.Vectors.long4@,GenMathematics.Vectors.int4@,GenMathematics.Vectors.long4@)">
            <summary>
            Rotates the bits of each vector component to the right
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Ror(GenMathematics.Vectors.long4,System.Int32)">
            <summary>
            Rotates the bits of each vector component to the right
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Ror(GenMathematics.Vectors.long4@,System.Int32,GenMathematics.Vectors.long4@)">
            <summary>
            Rotates the bits of each vector component to the right
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Rol(GenMathematics.Vectors.long4,GenMathematics.Vectors.int4)">
            <summary>
            Rotates the bits of each vector component to the left
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Rol(GenMathematics.Vectors.long4@,GenMathematics.Vectors.int4@,GenMathematics.Vectors.long4@)">
            <summary>
            Rotates the bits of each vector component to the left
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Rol(GenMathematics.Vectors.long4,System.Int32)">
            <summary>
            Rotates the bits of each vector component to the left
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Rol(GenMathematics.Vectors.long4@,System.Int32,GenMathematics.Vectors.long4@)">
            <summary>
            Rotates the bits of each vector component to the left
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.NextPow2(GenMathematics.Vectors.long4)">
            <summary>
            Computes the next power of two for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.NextPow2(GenMathematics.Vectors.long4@,GenMathematics.Vectors.long4@)">
            <summary>
            Computes the next power of two for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CountBits(GenMathematics.Vectors.long4)">
            <summary>
            Counts the number of bits for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CountBits(GenMathematics.Vectors.long4@,GenMathematics.Vectors.long4@)">
            <summary>
            Counts the number of bits for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.UnionOr(GenMathematics.Vectors.long4)">
            <summary>
            Returns the result of an OR operation between all vector components
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.UnionOrRef(GenMathematics.Vectors.long4@)">
            <summary>
            Returns the result of an OR operation between all vector components
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.UnionAnd(GenMathematics.Vectors.long4)">
            <summary>
            Returns the result of an AND operation between all vector components
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.UnionAndRef(GenMathematics.Vectors.long4@)">
            <summary>
            Returns the result of an AND operation between all vector components
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Shift(GenMathematics.Vectors.long4,System.Int32)">
            <summary>
            Shifts components in a loop in a positive or negative direction
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Shift(GenMathematics.Vectors.long4,System.Int32,GenMathematics.Vectors.long4@)">
            <summary>
            Shifts components in a loop in a positive or negative direction
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Select(GenMathematics.Vectors.long4,GenMathematics.Vectors.long4,GenMathematics.Vectors.bool4)">
            <summary>
            Selects components from two vectors according to conditions
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Select(GenMathematics.Vectors.long4@,GenMathematics.Vectors.long4@,GenMathematics.Vectors.bool4,GenMathematics.Vectors.long4@)">
            <summary>
            Selects components from two vectors according to conditions
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Select(GenMathematics.Vectors.long4,GenMathematics.Vectors.long4,System.Boolean)">
            <summary>
            Selects components from two vectors according to condition
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Select(GenMathematics.Vectors.long4@,GenMathematics.Vectors.long4@,System.Boolean,GenMathematics.Vectors.long4@)">
            <summary>
            Selects components from two vectors according to condition
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CompressLeft(GenMathematics.Vectors.long4,GenMathematics.Vectors.bool4)">
            <summary>
            Leaves the components specified in the condition and shifts them to the left
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CompressLeft(GenMathematics.Vectors.long4@,GenMathematics.Vectors.bool4,GenMathematics.Vectors.long4@)">
            <summary>
            Leaves the components specified in the condition and shifts them to the left
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CompressLeft(GenMathematics.Vectors.long4,System.Int32)">
            <summary>
            Leaves the components specified in the mask and shifts them to the left
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CompressLeft(GenMathematics.Vectors.long4@,System.Int32,GenMathematics.Vectors.long4@)">
            <summary>
            Leaves the components specified in the mask and shifts them to the left
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CompressRight(GenMathematics.Vectors.long4,GenMathematics.Vectors.bool4)">
            <summary>
            Leaves the components specified in the condition and shifts them to the right
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CompressRight(GenMathematics.Vectors.long4@,GenMathematics.Vectors.bool4,GenMathematics.Vectors.long4@)">
            <summary>
            Leaves the components specified in the condition and shifts them to the right
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CompressRight(GenMathematics.Vectors.long4,System.Int32)">
            <summary>
            Leaves the components specified in the mask and shifts them to the right
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CompressRight(GenMathematics.Vectors.long4@,System.Int32,GenMathematics.Vectors.long4@)">
            <summary>
            Leaves the components specified in the mask and shifts them to the right
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.UnionMin(GenMathematics.Vectors.long4)">
            <summary>
            Returns the minimum vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.UnionMinRef(GenMathematics.Vectors.long4@)">
            <summary>
            Returns the minimum vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.UnionMax(GenMathematics.Vectors.long4)">
            <summary>
            Returns the maximum vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.UnionMaxRef(GenMathematics.Vectors.long4@)">
            <summary>
            Returns the maximum vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.UnionSum(GenMathematics.Vectors.long4)">
            <summary>
            Returns the sum of the vector components
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.UnionSumRef(GenMathematics.Vectors.long4@)">
            <summary>
            Returns the sum of the vector components
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Min(GenMathematics.Vectors.long4,GenMathematics.Vectors.long4)">
            <summary>
            Computes the smallest value of two for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Min(GenMathematics.Vectors.long4@,GenMathematics.Vectors.long4@,GenMathematics.Vectors.long4@)">
            <summary>
            Computes the smallest value of two for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Max(GenMathematics.Vectors.long4,GenMathematics.Vectors.long4)">
            <summary>
            Computes the largest value of two for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Max(GenMathematics.Vectors.long4@,GenMathematics.Vectors.long4@,GenMathematics.Vectors.long4@)">
            <summary>
            Computes the largest value of two for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Clamp(GenMathematics.Vectors.long4,GenMathematics.Vectors.long4,GenMathematics.Vectors.long4)">
            <summary>
            Clamps each vector component between min and max
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Clamp(GenMathematics.Vectors.long4@,GenMathematics.Vectors.long4@,GenMathematics.Vectors.long4@,GenMathematics.Vectors.long4@)">
            <summary>
            Clamps each vector component between min and max
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Clamp(GenMathematics.Vectors.long4,System.Int64,System.Int64)">
            <summary>
            Clamps each vector component between min and max
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Clamp(GenMathematics.Vectors.long4@,System.Int64,System.Int64,GenMathematics.Vectors.long4@)">
            <summary>
            Clamps each vector component between min and max
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.IsZero(GenMathematics.Vectors.long4)">
            <summary>
            Returns true if all components are zero
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.IsZeroRef(GenMathematics.Vectors.long4@)">
            <summary>
            Returns true if all components are zero
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.AnyZero(GenMathematics.Vectors.long4)">
            <summary>
            Returns true if at least one of the components is zero
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.AnyZeroRef(GenMathematics.Vectors.long4@)">
            <summary>
            Returns true if at least one of the components is zero
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Abs(GenMathematics.Vectors.long4)">
            <summary>
            Computes the absolute for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Abs(GenMathematics.Vectors.long4@,GenMathematics.Vectors.long4@)">
            <summary>
            Computes the absolute for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Sign(GenMathematics.Vectors.long4)">
            <summary>
            Returns the sign of each component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Sign(GenMathematics.Vectors.long4@,GenMathematics.Vectors.int4@)">
            <summary>
            Returns the sign of each component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.BitSign(GenMathematics.Vectors.long4)">
            <summary>
            Sets a bit for a component if it is less than zero
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.BitSignRef(GenMathematics.Vectors.long4@)">
            <summary>
            Sets a bit for a component if it is less than zero
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.BoolSign(GenMathematics.Vectors.long4)">
            <summary>
            Returns true for a component if it is less than zero
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.BoolSignRef(GenMathematics.Vectors.long4@)">
            <summary>
            Returns true for a component if it is less than zero
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.LengthSq(GenMathematics.Vectors.half2)">
            <summary>
            Returns the square of the vector length
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Manhattan(GenMathematics.Vectors.half2)">
            <summary>
            Returns the Manhattan length of the vector
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Manhattan(GenMathematics.Vectors.half2,GenMathematics.Vectors.half2)">
            <summary>
            Returns the Manhattan distance between vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Dot(GenMathematics.Vectors.half2,GenMathematics.Vectors.half2)">
            <summary>
            Returns the scalar product of vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.PerpDot(GenMathematics.Vectors.half2,GenMathematics.Vectors.half2)">
            <summary>
            Returns the perpendicular dot product of vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.DistanceSq(GenMathematics.Vectors.half2,GenMathematics.Vectors.half2)">
            <summary>
            Returns the square of the distance between vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Square(GenMathematics.Vectors.half2)">
            <summary>
            Squares each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.AbsDiff(GenMathematics.Vectors.half2,GenMathematics.Vectors.half2)">
            <summary>
            Calculates the absolute difference between the components of two vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Shift(GenMathematics.Vectors.half2,System.Int32)">
            <summary>
            Shifts components in a loop in a positive or negative direction
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Select(GenMathematics.Vectors.half2,GenMathematics.Vectors.half2,GenMathematics.Vectors.bool2)">
            <summary>
            Selects components from two vectors according to conditions
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Select(GenMathematics.Vectors.half2,GenMathematics.Vectors.half2,System.Boolean)">
            <summary>
            Selects components from two vectors according to condition
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CompressLeft(GenMathematics.Vectors.half2,GenMathematics.Vectors.bool2)">
            <summary>
            Leaves the components specified in the condition and shifts them to the left
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CompressLeft(GenMathematics.Vectors.half2,System.Int32)">
            <summary>
            Leaves the components specified in the mask and shifts them to the left
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CompressRight(GenMathematics.Vectors.half2,GenMathematics.Vectors.bool2)">
            <summary>
            Leaves the components specified in the condition and shifts them to the right
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CompressRight(GenMathematics.Vectors.half2,System.Int32)">
            <summary>
            Leaves the components specified in the mask and shifts them to the right
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.UnionMin(GenMathematics.Vectors.half2)">
            <summary>
            Returns the minimum vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.UnionMax(GenMathematics.Vectors.half2)">
            <summary>
            Returns the maximum vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.UnionSum(GenMathematics.Vectors.half2)">
            <summary>
            Returns the sum of the vector components
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Min(GenMathematics.Vectors.half2,GenMathematics.Vectors.half2)">
            <summary>
            Computes the smallest value of two for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Max(GenMathematics.Vectors.half2,GenMathematics.Vectors.half2)">
            <summary>
            Computes the largest value of two for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Clamp(GenMathematics.Vectors.half2,GenMathematics.Vectors.half2,GenMathematics.Vectors.half2)">
            <summary>
            Clamps each vector component between min and max
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Clamp(GenMathematics.Vectors.half2,System.Half,System.Half)">
            <summary>
            Clamps each vector component between min and max
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.IsZero(GenMathematics.Vectors.half2)">
            <summary>
            Returns true if all components are zero
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.AnyZero(GenMathematics.Vectors.half2)">
            <summary>
            Returns true if at least one of the components is zero
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Length(GenMathematics.Vectors.half2)">
            <summary>
            Returns the vector length
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Distance(GenMathematics.Vectors.half2,GenMathematics.Vectors.half2)">
            <summary>
            Returns the distance between vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Angle(GenMathematics.Vectors.half2,GenMathematics.Vectors.half2)">
            <summary>
            Returns the unsigned angle between normals
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.AngleNorm(GenMathematics.Vectors.half2,GenMathematics.Vectors.half2)">
            <summary>
            Returns the unsigned angle between vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.SignedAngle(GenMathematics.Vectors.half2,GenMathematics.Vectors.half2)">
            <summary>
            Returns the clockwise angle between vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Floor(GenMathematics.Vectors.half2)">
            <summary>
            Computes the floor for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Ceil(GenMathematics.Vectors.half2)">
            <summary>
            Computes the ceiling for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Round(GenMathematics.Vectors.half2)">
            <summary>
            Rounds each vector component to the nearest integer
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Tan(GenMathematics.Vectors.half2)">
            <summary>
            Computes the tangent for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Tanh(GenMathematics.Vectors.half2)">
            <summary>
            Computes the hyperbolic tangent for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Atan(GenMathematics.Vectors.half2)">
            <summary>
            Computes the arc-tangent for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Atanh(GenMathematics.Vectors.half2)">
            <summary>
            Computes the hyperbolic arc-tangent for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Atan2(GenMathematics.Vectors.half2,GenMathematics.Vectors.half2)">
            <summary>
            Computes the arc-tangent for the quotient of two vectors for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Sin(GenMathematics.Vectors.half2)">
            <summary>
            Computes the sine for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Sinh(GenMathematics.Vectors.half2)">
            <summary>
            Computes the hyperbolic sine for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Asin(GenMathematics.Vectors.half2)">
            <summary>
            Computes the arc-sine for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Asinh(GenMathematics.Vectors.half2)">
            <summary>
            Computes the hyperbolic arc-sine for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Cos(GenMathematics.Vectors.half2)">
            <summary>
            Computes the cosine for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Cosh(GenMathematics.Vectors.half2)">
            <summary>
            Computes the hyperbolic cosine for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Acos(GenMathematics.Vectors.half2)">
            <summary>
            Computes the arc-cosine for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Acosh(GenMathematics.Vectors.half2)">
            <summary>
            Computes the hyperbolic arc-cosine for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Truncate(GenMathematics.Vectors.half2)">
            <summary>
            Truncates each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Frac(GenMathematics.Vectors.half2)">
            <summary>
            Computes the fractional part for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Reciprocal(GenMathematics.Vectors.half2)">
            <summary>
            Computes the reciprocal for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Pow(GenMathematics.Vectors.half2,GenMathematics.Vectors.half2)">
            <summary>
            Raises each vector component to a given power
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Pow(GenMathematics.Vectors.half2,System.Half)">
            <summary>
            Raises each vector component to a given power
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Exp(GenMathematics.Vectors.half2)">
            <summary>
            Raises E to a given power
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Log(GenMathematics.Vectors.half2)">
            <summary>
            Computes the natural (<c>base-E</c>) logarithm for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Log2(GenMathematics.Vectors.half2)">
            <summary>
            Computes the <c>base-2</c> logarithm for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Log10(GenMathematics.Vectors.half2)">
            <summary>
            Computes the <c>base-10</c>) logarithm for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Log(GenMathematics.Vectors.half2,GenMathematics.Vectors.half2)">
            <summary>
            Computes the logarithm of a value in the specified base for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Log(GenMathematics.Vectors.half2,System.Half)">
            <summary>
            Computes the logarithm of a value in the specified base for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Sqrt(GenMathematics.Vectors.half2)">
            <summary>
            Computes the square-root for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.RSqrt(GenMathematics.Vectors.half2)">
            <summary>
            Computes the reciprocal square-root for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Cbrt(GenMathematics.Vectors.half2)">
            <summary>
            Computes the cube-root for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Lerp(GenMathematics.Vectors.half2,GenMathematics.Vectors.half2,System.Half)">
            <summary>
            Linear interpolation between vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.SLerp(GenMathematics.Vectors.half2,GenMathematics.Vectors.half2,System.Half)">
            <summary>
            Spherical linear interpolation between normals
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Normalize(GenMathematics.Vectors.half2)">
            <summary>
            Normalizes the vector
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.NormalizeSafe(GenMathematics.Vectors.half2,GenMathematics.Vectors.half2)">
            <summary>
            Normalizes the vector. Returns the specified fallback if the operation fails.
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Project(GenMathematics.Vectors.half2,GenMathematics.Vectors.half2)">
            <summary>
            Projects a value onto a vector, returning a point on the vector
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Project(GenMathematics.Vectors.half2,GenMathematics.Vectors.half2,GenMathematics.Vectors.half2)">
            <summary>
            Projects a value onto a line, returning a point on the line
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.ScalarProject(GenMathematics.Vectors.half2,GenMathematics.Vectors.half2)">
            <summary>
            Projects a value onto a vector, returning a scalar of the vector's length
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.ScalarProject(GenMathematics.Vectors.half2,GenMathematics.Vectors.half2,GenMathematics.Vectors.half2)">
            <summary>
            Projects a value onto a line, returning a direction scalar
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Intersect(GenMathematics.Vectors.half2,GenMathematics.Vectors.half2,GenMathematics.Vectors.half2,GenMathematics.Vectors.half2,System.Half@,System.Half@)">
            <summary>
            Calculates the closest point between lines, returning scalars of the lines' directions. Returns true if successful, and false if the lines are parallel.
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.ClampLength(GenMathematics.Vectors.half2,System.Half,System.Half)">
            <summary>
            Limits the vector length between min and max
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Reflect(GenMathematics.Vectors.half2,GenMathematics.Vectors.half2)">
            <summary>
            Returns the vector reflected from the plane with a given normal
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Refract(GenMathematics.Vectors.half2,GenMathematics.Vectors.half2,System.Half)">
            <summary>
            Returns a vector refracted by a plane surface with a given refraction index
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Abs(GenMathematics.Vectors.half2)">
            <summary>
            Computes the absolute for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Sign(GenMathematics.Vectors.half2)">
            <summary>
            Returns the sign of each component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.BitSign(GenMathematics.Vectors.half2)">
            <summary>
            Sets a bit for a component if it is less than zero
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.BoolSign(GenMathematics.Vectors.half2)">
            <summary>
            Returns true for a component if it is less than zero
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.LengthSq(GenMathematics.Vectors.half3)">
            <summary>
            Returns the square of the vector length
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Manhattan(GenMathematics.Vectors.half3)">
            <summary>
            Returns the Manhattan length of the vector
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Manhattan(GenMathematics.Vectors.half3,GenMathematics.Vectors.half3)">
            <summary>
            Returns the Manhattan distance between vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Dot(GenMathematics.Vectors.half3,GenMathematics.Vectors.half3)">
            <summary>
            Returns the scalar product of vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.PerpDot(GenMathematics.Vectors.half3,GenMathematics.Vectors.half3)">
            <summary>
            Returns the perpendicular dot product of vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.DistanceSq(GenMathematics.Vectors.half3,GenMathematics.Vectors.half3)">
            <summary>
            Returns the square of the distance between vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Square(GenMathematics.Vectors.half3)">
            <summary>
            Squares each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.AbsDiff(GenMathematics.Vectors.half3,GenMathematics.Vectors.half3)">
            <summary>
            Calculates the absolute difference between the components of two vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Cross(GenMathematics.Vectors.half3,GenMathematics.Vectors.half3)">
            <summary>
            Returns the vector product of vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Shift(GenMathematics.Vectors.half3,System.Int32)">
            <summary>
            Shifts components in a loop in a positive or negative direction
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Select(GenMathematics.Vectors.half3,GenMathematics.Vectors.half3,GenMathematics.Vectors.bool3)">
            <summary>
            Selects components from two vectors according to conditions
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Select(GenMathematics.Vectors.half3,GenMathematics.Vectors.half3,System.Boolean)">
            <summary>
            Selects components from two vectors according to condition
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CompressLeft(GenMathematics.Vectors.half3,GenMathematics.Vectors.bool3)">
            <summary>
            Leaves the components specified in the condition and shifts them to the left
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CompressLeft(GenMathematics.Vectors.half3,System.Int32)">
            <summary>
            Leaves the components specified in the mask and shifts them to the left
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CompressRight(GenMathematics.Vectors.half3,GenMathematics.Vectors.bool3)">
            <summary>
            Leaves the components specified in the condition and shifts them to the right
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CompressRight(GenMathematics.Vectors.half3,System.Int32)">
            <summary>
            Leaves the components specified in the mask and shifts them to the right
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.UnionMin(GenMathematics.Vectors.half3)">
            <summary>
            Returns the minimum vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.UnionMax(GenMathematics.Vectors.half3)">
            <summary>
            Returns the maximum vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.UnionSum(GenMathematics.Vectors.half3)">
            <summary>
            Returns the sum of the vector components
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Min(GenMathematics.Vectors.half3,GenMathematics.Vectors.half3)">
            <summary>
            Computes the smallest value of two for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Max(GenMathematics.Vectors.half3,GenMathematics.Vectors.half3)">
            <summary>
            Computes the largest value of two for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Clamp(GenMathematics.Vectors.half3,GenMathematics.Vectors.half3,GenMathematics.Vectors.half3)">
            <summary>
            Clamps each vector component between min and max
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Clamp(GenMathematics.Vectors.half3,System.Half,System.Half)">
            <summary>
            Clamps each vector component between min and max
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.IsZero(GenMathematics.Vectors.half3)">
            <summary>
            Returns true if all components are zero
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.AnyZero(GenMathematics.Vectors.half3)">
            <summary>
            Returns true if at least one of the components is zero
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Length(GenMathematics.Vectors.half3)">
            <summary>
            Returns the vector length
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Distance(GenMathematics.Vectors.half3,GenMathematics.Vectors.half3)">
            <summary>
            Returns the distance between vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Angle(GenMathematics.Vectors.half3,GenMathematics.Vectors.half3)">
            <summary>
            Returns the unsigned angle between normals
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.AngleNorm(GenMathematics.Vectors.half3,GenMathematics.Vectors.half3)">
            <summary>
            Returns the unsigned angle between vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.SignedAngle(GenMathematics.Vectors.half3,GenMathematics.Vectors.half3,GenMathematics.Vectors.half3)">
            <summary>
            Returns the clockwise angle between vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.SignedAngleInv(GenMathematics.Vectors.half3,GenMathematics.Vectors.half3,GenMathematics.Vectors.half3)">
            <summary>
            Returns the counterclockwise angle between vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Floor(GenMathematics.Vectors.half3)">
            <summary>
            Computes the floor for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Ceil(GenMathematics.Vectors.half3)">
            <summary>
            Computes the ceiling for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Round(GenMathematics.Vectors.half3)">
            <summary>
            Rounds each vector component to the nearest integer
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Tan(GenMathematics.Vectors.half3)">
            <summary>
            Computes the tangent for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Tanh(GenMathematics.Vectors.half3)">
            <summary>
            Computes the hyperbolic tangent for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Atan(GenMathematics.Vectors.half3)">
            <summary>
            Computes the arc-tangent for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Atanh(GenMathematics.Vectors.half3)">
            <summary>
            Computes the hyperbolic arc-tangent for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Atan2(GenMathematics.Vectors.half3,GenMathematics.Vectors.half3)">
            <summary>
            Computes the arc-tangent for the quotient of two vectors for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Sin(GenMathematics.Vectors.half3)">
            <summary>
            Computes the sine for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Sinh(GenMathematics.Vectors.half3)">
            <summary>
            Computes the hyperbolic sine for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Asin(GenMathematics.Vectors.half3)">
            <summary>
            Computes the arc-sine for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Asinh(GenMathematics.Vectors.half3)">
            <summary>
            Computes the hyperbolic arc-sine for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Cos(GenMathematics.Vectors.half3)">
            <summary>
            Computes the cosine for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Cosh(GenMathematics.Vectors.half3)">
            <summary>
            Computes the hyperbolic cosine for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Acos(GenMathematics.Vectors.half3)">
            <summary>
            Computes the arc-cosine for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Acosh(GenMathematics.Vectors.half3)">
            <summary>
            Computes the hyperbolic arc-cosine for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Truncate(GenMathematics.Vectors.half3)">
            <summary>
            Truncates each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Frac(GenMathematics.Vectors.half3)">
            <summary>
            Computes the fractional part for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Reciprocal(GenMathematics.Vectors.half3)">
            <summary>
            Computes the reciprocal for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Pow(GenMathematics.Vectors.half3,GenMathematics.Vectors.half3)">
            <summary>
            Raises each vector component to a given power
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Pow(GenMathematics.Vectors.half3,System.Half)">
            <summary>
            Raises each vector component to a given power
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Exp(GenMathematics.Vectors.half3)">
            <summary>
            Raises E to a given power
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Log(GenMathematics.Vectors.half3)">
            <summary>
            Computes the natural (<c>base-E</c>) logarithm for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Log2(GenMathematics.Vectors.half3)">
            <summary>
            Computes the <c>base-2</c> logarithm for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Log10(GenMathematics.Vectors.half3)">
            <summary>
            Computes the <c>base-10</c>) logarithm for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Log(GenMathematics.Vectors.half3,GenMathematics.Vectors.half3)">
            <summary>
            Computes the logarithm of a value in the specified base for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Log(GenMathematics.Vectors.half3,System.Half)">
            <summary>
            Computes the logarithm of a value in the specified base for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Sqrt(GenMathematics.Vectors.half3)">
            <summary>
            Computes the square-root for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.RSqrt(GenMathematics.Vectors.half3)">
            <summary>
            Computes the reciprocal square-root for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Cbrt(GenMathematics.Vectors.half3)">
            <summary>
            Computes the cube-root for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Lerp(GenMathematics.Vectors.half3,GenMathematics.Vectors.half3,System.Half)">
            <summary>
            Linear interpolation between vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.SLerp(GenMathematics.Vectors.half3,GenMathematics.Vectors.half3,System.Half)">
            <summary>
            Spherical linear interpolation between normals
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Normalize(GenMathematics.Vectors.half3)">
            <summary>
            Normalizes the vector
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.NormalizeSafe(GenMathematics.Vectors.half3,GenMathematics.Vectors.half3)">
            <summary>
            Normalizes the vector. Returns the specified fallback if the operation fails.
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Project(GenMathematics.Vectors.half3,GenMathematics.Vectors.half3)">
            <summary>
            Projects a value onto a vector, returning a point on the vector
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Project(GenMathematics.Vectors.half3,GenMathematics.Vectors.half3,GenMathematics.Vectors.half3)">
            <summary>
            Projects a value onto a line, returning a point on the line
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.ScalarProject(GenMathematics.Vectors.half3,GenMathematics.Vectors.half3)">
            <summary>
            Projects a value onto a vector, returning a scalar of the vector's length
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.ScalarProject(GenMathematics.Vectors.half3,GenMathematics.Vectors.half3,GenMathematics.Vectors.half3)">
            <summary>
            Projects a value onto a line, returning a direction scalar
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Intersect(GenMathematics.Vectors.half3,GenMathematics.Vectors.half3,GenMathematics.Vectors.half3,GenMathematics.Vectors.half3,System.Half@,System.Half@)">
            <summary>
            Calculates the closest point between lines, returning scalars of the lines' directions. Returns true if successful, and false if the lines are parallel.
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.ClampLength(GenMathematics.Vectors.half3,System.Half,System.Half)">
            <summary>
            Limits the vector length between min and max
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Reflect(GenMathematics.Vectors.half3,GenMathematics.Vectors.half3)">
            <summary>
            Returns the vector reflected from the plane with a given normal
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Refract(GenMathematics.Vectors.half3,GenMathematics.Vectors.half3,System.Half)">
            <summary>
            Returns a vector refracted by a plane surface with a given refraction index
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Abs(GenMathematics.Vectors.half3)">
            <summary>
            Computes the absolute for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Sign(GenMathematics.Vectors.half3)">
            <summary>
            Returns the sign of each component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.BitSign(GenMathematics.Vectors.half3)">
            <summary>
            Sets a bit for a component if it is less than zero
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.BoolSign(GenMathematics.Vectors.half3)">
            <summary>
            Returns true for a component if it is less than zero
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.LengthSq(GenMathematics.Vectors.half4)">
            <summary>
            Returns the square of the vector length
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Manhattan(GenMathematics.Vectors.half4)">
            <summary>
            Returns the Manhattan length of the vector
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Manhattan(GenMathematics.Vectors.half4,GenMathematics.Vectors.half4)">
            <summary>
            Returns the Manhattan distance between vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Dot(GenMathematics.Vectors.half4,GenMathematics.Vectors.half4)">
            <summary>
            Returns the scalar product of vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.DistanceSq(GenMathematics.Vectors.half4,GenMathematics.Vectors.half4)">
            <summary>
            Returns the square of the distance between vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Square(GenMathematics.Vectors.half4)">
            <summary>
            Squares each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.AbsDiff(GenMathematics.Vectors.half4,GenMathematics.Vectors.half4)">
            <summary>
            Calculates the absolute difference between the components of two vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Shift(GenMathematics.Vectors.half4,System.Int32)">
            <summary>
            Shifts components in a loop in a positive or negative direction
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Select(GenMathematics.Vectors.half4,GenMathematics.Vectors.half4,GenMathematics.Vectors.bool4)">
            <summary>
            Selects components from two vectors according to conditions
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Select(GenMathematics.Vectors.half4,GenMathematics.Vectors.half4,System.Boolean)">
            <summary>
            Selects components from two vectors according to condition
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CompressLeft(GenMathematics.Vectors.half4,GenMathematics.Vectors.bool4)">
            <summary>
            Leaves the components specified in the condition and shifts them to the left
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CompressLeft(GenMathematics.Vectors.half4,System.Int32)">
            <summary>
            Leaves the components specified in the mask and shifts them to the left
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CompressRight(GenMathematics.Vectors.half4,GenMathematics.Vectors.bool4)">
            <summary>
            Leaves the components specified in the condition and shifts them to the right
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CompressRight(GenMathematics.Vectors.half4,System.Int32)">
            <summary>
            Leaves the components specified in the mask and shifts them to the right
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.UnionMin(GenMathematics.Vectors.half4)">
            <summary>
            Returns the minimum vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.UnionMax(GenMathematics.Vectors.half4)">
            <summary>
            Returns the maximum vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.UnionSum(GenMathematics.Vectors.half4)">
            <summary>
            Returns the sum of the vector components
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Min(GenMathematics.Vectors.half4,GenMathematics.Vectors.half4)">
            <summary>
            Computes the smallest value of two for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Max(GenMathematics.Vectors.half4,GenMathematics.Vectors.half4)">
            <summary>
            Computes the largest value of two for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Clamp(GenMathematics.Vectors.half4,GenMathematics.Vectors.half4,GenMathematics.Vectors.half4)">
            <summary>
            Clamps each vector component between min and max
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Clamp(GenMathematics.Vectors.half4,System.Half,System.Half)">
            <summary>
            Clamps each vector component between min and max
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.IsZero(GenMathematics.Vectors.half4)">
            <summary>
            Returns true if all components are zero
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.AnyZero(GenMathematics.Vectors.half4)">
            <summary>
            Returns true if at least one of the components is zero
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Length(GenMathematics.Vectors.half4)">
            <summary>
            Returns the vector length
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Distance(GenMathematics.Vectors.half4,GenMathematics.Vectors.half4)">
            <summary>
            Returns the distance between vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Angle(GenMathematics.Vectors.half4,GenMathematics.Vectors.half4)">
            <summary>
            Returns the unsigned angle between normals
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.AngleNorm(GenMathematics.Vectors.half4,GenMathematics.Vectors.half4)">
            <summary>
            Returns the unsigned angle between vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Floor(GenMathematics.Vectors.half4)">
            <summary>
            Computes the floor for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Ceil(GenMathematics.Vectors.half4)">
            <summary>
            Computes the ceiling for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Round(GenMathematics.Vectors.half4)">
            <summary>
            Rounds each vector component to the nearest integer
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Tan(GenMathematics.Vectors.half4)">
            <summary>
            Computes the tangent for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Tanh(GenMathematics.Vectors.half4)">
            <summary>
            Computes the hyperbolic tangent for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Atan(GenMathematics.Vectors.half4)">
            <summary>
            Computes the arc-tangent for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Atanh(GenMathematics.Vectors.half4)">
            <summary>
            Computes the hyperbolic arc-tangent for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Atan2(GenMathematics.Vectors.half4,GenMathematics.Vectors.half4)">
            <summary>
            Computes the arc-tangent for the quotient of two vectors for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Sin(GenMathematics.Vectors.half4)">
            <summary>
            Computes the sine for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Sinh(GenMathematics.Vectors.half4)">
            <summary>
            Computes the hyperbolic sine for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Asin(GenMathematics.Vectors.half4)">
            <summary>
            Computes the arc-sine for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Asinh(GenMathematics.Vectors.half4)">
            <summary>
            Computes the hyperbolic arc-sine for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Cos(GenMathematics.Vectors.half4)">
            <summary>
            Computes the cosine for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Cosh(GenMathematics.Vectors.half4)">
            <summary>
            Computes the hyperbolic cosine for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Acos(GenMathematics.Vectors.half4)">
            <summary>
            Computes the arc-cosine for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Acosh(GenMathematics.Vectors.half4)">
            <summary>
            Computes the hyperbolic arc-cosine for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Truncate(GenMathematics.Vectors.half4)">
            <summary>
            Truncates each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Frac(GenMathematics.Vectors.half4)">
            <summary>
            Computes the fractional part for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Reciprocal(GenMathematics.Vectors.half4)">
            <summary>
            Computes the reciprocal for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Pow(GenMathematics.Vectors.half4,GenMathematics.Vectors.half4)">
            <summary>
            Raises each vector component to a given power
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Pow(GenMathematics.Vectors.half4,System.Half)">
            <summary>
            Raises each vector component to a given power
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Exp(GenMathematics.Vectors.half4)">
            <summary>
            Raises E to a given power
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Log(GenMathematics.Vectors.half4)">
            <summary>
            Computes the natural (<c>base-E</c>) logarithm for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Log2(GenMathematics.Vectors.half4)">
            <summary>
            Computes the <c>base-2</c> logarithm for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Log10(GenMathematics.Vectors.half4)">
            <summary>
            Computes the <c>base-10</c>) logarithm for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Log(GenMathematics.Vectors.half4,GenMathematics.Vectors.half4)">
            <summary>
            Computes the logarithm of a value in the specified base for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Log(GenMathematics.Vectors.half4,System.Half)">
            <summary>
            Computes the logarithm of a value in the specified base for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Sqrt(GenMathematics.Vectors.half4)">
            <summary>
            Computes the square-root for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.RSqrt(GenMathematics.Vectors.half4)">
            <summary>
            Computes the reciprocal square-root for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Cbrt(GenMathematics.Vectors.half4)">
            <summary>
            Computes the cube-root for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Lerp(GenMathematics.Vectors.half4,GenMathematics.Vectors.half4,System.Half)">
            <summary>
            Linear interpolation between vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.SLerp(GenMathematics.Vectors.half4,GenMathematics.Vectors.half4,System.Half)">
            <summary>
            Spherical linear interpolation between normals
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Normalize(GenMathematics.Vectors.half4)">
            <summary>
            Normalizes the vector
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.NormalizeSafe(GenMathematics.Vectors.half4,GenMathematics.Vectors.half4)">
            <summary>
            Normalizes the vector. Returns the specified fallback if the operation fails.
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Project(GenMathematics.Vectors.half4,GenMathematics.Vectors.half4)">
            <summary>
            Projects a value onto a vector, returning a point on the vector
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Project(GenMathematics.Vectors.half4,GenMathematics.Vectors.half4,GenMathematics.Vectors.half4)">
            <summary>
            Projects a value onto a line, returning a point on the line
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.ScalarProject(GenMathematics.Vectors.half4,GenMathematics.Vectors.half4)">
            <summary>
            Projects a value onto a vector, returning a scalar of the vector's length
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.ScalarProject(GenMathematics.Vectors.half4,GenMathematics.Vectors.half4,GenMathematics.Vectors.half4)">
            <summary>
            Projects a value onto a line, returning a direction scalar
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Intersect(GenMathematics.Vectors.half4,GenMathematics.Vectors.half4,GenMathematics.Vectors.half4,GenMathematics.Vectors.half4,System.Half@,System.Half@)">
            <summary>
            Calculates the closest point between lines, returning scalars of the lines' directions. Returns true if successful, and false if the lines are parallel.
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.ClampLength(GenMathematics.Vectors.half4,System.Half,System.Half)">
            <summary>
            Limits the vector length between min and max
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Reflect(GenMathematics.Vectors.half4,GenMathematics.Vectors.half4)">
            <summary>
            Returns the vector reflected from the plane with a given normal
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Refract(GenMathematics.Vectors.half4,GenMathematics.Vectors.half4,System.Half)">
            <summary>
            Returns a vector refracted by a plane surface with a given refraction index
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Abs(GenMathematics.Vectors.half4)">
            <summary>
            Computes the absolute for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Sign(GenMathematics.Vectors.half4)">
            <summary>
            Returns the sign of each component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.BitSign(GenMathematics.Vectors.half4)">
            <summary>
            Sets a bit for a component if it is less than zero
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.BoolSign(GenMathematics.Vectors.half4)">
            <summary>
            Returns true for a component if it is less than zero
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.LengthSq(GenMathematics.Vectors.float2)">
            <summary>
            Returns the square of the vector length
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Manhattan(GenMathematics.Vectors.float2)">
            <summary>
            Returns the Manhattan length of the vector
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Manhattan(GenMathematics.Vectors.float2,GenMathematics.Vectors.float2)">
            <summary>
            Returns the Manhattan distance between vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Dot(GenMathematics.Vectors.float2,GenMathematics.Vectors.float2)">
            <summary>
            Returns the scalar product of vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.PerpDot(GenMathematics.Vectors.float2,GenMathematics.Vectors.float2)">
            <summary>
            Returns the perpendicular dot product of vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.DistanceSq(GenMathematics.Vectors.float2,GenMathematics.Vectors.float2)">
            <summary>
            Returns the square of the distance between vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Square(GenMathematics.Vectors.float2)">
            <summary>
            Squares each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.AbsDiff(GenMathematics.Vectors.float2,GenMathematics.Vectors.float2)">
            <summary>
            Calculates the absolute difference between the components of two vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Shift(GenMathematics.Vectors.float2,System.Int32)">
            <summary>
            Shifts components in a loop in a positive or negative direction
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Select(GenMathematics.Vectors.float2,GenMathematics.Vectors.float2,GenMathematics.Vectors.bool2)">
            <summary>
            Selects components from two vectors according to conditions
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Select(GenMathematics.Vectors.float2,GenMathematics.Vectors.float2,System.Boolean)">
            <summary>
            Selects components from two vectors according to condition
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CompressLeft(GenMathematics.Vectors.float2,GenMathematics.Vectors.bool2)">
            <summary>
            Leaves the components specified in the condition and shifts them to the left
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CompressLeft(GenMathematics.Vectors.float2,System.Int32)">
            <summary>
            Leaves the components specified in the mask and shifts them to the left
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CompressRight(GenMathematics.Vectors.float2,GenMathematics.Vectors.bool2)">
            <summary>
            Leaves the components specified in the condition and shifts them to the right
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CompressRight(GenMathematics.Vectors.float2,System.Int32)">
            <summary>
            Leaves the components specified in the mask and shifts them to the right
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.UnionMin(GenMathematics.Vectors.float2)">
            <summary>
            Returns the minimum vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.UnionMax(GenMathematics.Vectors.float2)">
            <summary>
            Returns the maximum vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.UnionSum(GenMathematics.Vectors.float2)">
            <summary>
            Returns the sum of the vector components
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Min(GenMathematics.Vectors.float2,GenMathematics.Vectors.float2)">
            <summary>
            Computes the smallest value of two for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Max(GenMathematics.Vectors.float2,GenMathematics.Vectors.float2)">
            <summary>
            Computes the largest value of two for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Clamp(GenMathematics.Vectors.float2,GenMathematics.Vectors.float2,GenMathematics.Vectors.float2)">
            <summary>
            Clamps each vector component between min and max
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Clamp(GenMathematics.Vectors.float2,System.Single,System.Single)">
            <summary>
            Clamps each vector component between min and max
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.IsZero(GenMathematics.Vectors.float2)">
            <summary>
            Returns true if all components are zero
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.AnyZero(GenMathematics.Vectors.float2)">
            <summary>
            Returns true if at least one of the components is zero
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Length(GenMathematics.Vectors.float2)">
            <summary>
            Returns the vector length
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Distance(GenMathematics.Vectors.float2,GenMathematics.Vectors.float2)">
            <summary>
            Returns the distance between vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Angle(GenMathematics.Vectors.float2,GenMathematics.Vectors.float2)">
            <summary>
            Returns the unsigned angle between normals
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.AngleNorm(GenMathematics.Vectors.float2,GenMathematics.Vectors.float2)">
            <summary>
            Returns the unsigned angle between vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.SignedAngle(GenMathematics.Vectors.float2,GenMathematics.Vectors.float2)">
            <summary>
            Returns the clockwise angle between vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Floor(GenMathematics.Vectors.float2)">
            <summary>
            Computes the floor for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Ceil(GenMathematics.Vectors.float2)">
            <summary>
            Computes the ceiling for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Round(GenMathematics.Vectors.float2)">
            <summary>
            Rounds each vector component to the nearest integer
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Tan(GenMathematics.Vectors.float2)">
            <summary>
            Computes the tangent for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Tanh(GenMathematics.Vectors.float2)">
            <summary>
            Computes the hyperbolic tangent for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Atan(GenMathematics.Vectors.float2)">
            <summary>
            Computes the arc-tangent for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Atanh(GenMathematics.Vectors.float2)">
            <summary>
            Computes the hyperbolic arc-tangent for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Atan2(GenMathematics.Vectors.float2,GenMathematics.Vectors.float2)">
            <summary>
            Computes the arc-tangent for the quotient of two vectors for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Sin(GenMathematics.Vectors.float2)">
            <summary>
            Computes the sine for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Sinh(GenMathematics.Vectors.float2)">
            <summary>
            Computes the hyperbolic sine for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Asin(GenMathematics.Vectors.float2)">
            <summary>
            Computes the arc-sine for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Asinh(GenMathematics.Vectors.float2)">
            <summary>
            Computes the hyperbolic arc-sine for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Cos(GenMathematics.Vectors.float2)">
            <summary>
            Computes the cosine for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Cosh(GenMathematics.Vectors.float2)">
            <summary>
            Computes the hyperbolic cosine for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Acos(GenMathematics.Vectors.float2)">
            <summary>
            Computes the arc-cosine for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Acosh(GenMathematics.Vectors.float2)">
            <summary>
            Computes the hyperbolic arc-cosine for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Truncate(GenMathematics.Vectors.float2)">
            <summary>
            Truncates each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Frac(GenMathematics.Vectors.float2)">
            <summary>
            Computes the fractional part for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Reciprocal(GenMathematics.Vectors.float2)">
            <summary>
            Computes the reciprocal for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Pow(GenMathematics.Vectors.float2,GenMathematics.Vectors.float2)">
            <summary>
            Raises each vector component to a given power
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Pow(GenMathematics.Vectors.float2,System.Single)">
            <summary>
            Raises each vector component to a given power
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Exp(GenMathematics.Vectors.float2)">
            <summary>
            Raises E to a given power
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Log(GenMathematics.Vectors.float2)">
            <summary>
            Computes the natural (<c>base-E</c>) logarithm for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Log2(GenMathematics.Vectors.float2)">
            <summary>
            Computes the <c>base-2</c> logarithm for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Log10(GenMathematics.Vectors.float2)">
            <summary>
            Computes the <c>base-10</c>) logarithm for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Log(GenMathematics.Vectors.float2,GenMathematics.Vectors.float2)">
            <summary>
            Computes the logarithm of a value in the specified base for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Log(GenMathematics.Vectors.float2,System.Single)">
            <summary>
            Computes the logarithm of a value in the specified base for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Sqrt(GenMathematics.Vectors.float2)">
            <summary>
            Computes the square-root for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.RSqrt(GenMathematics.Vectors.float2)">
            <summary>
            Computes the reciprocal square-root for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Cbrt(GenMathematics.Vectors.float2)">
            <summary>
            Computes the cube-root for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Lerp(GenMathematics.Vectors.float2,GenMathematics.Vectors.float2,System.Single)">
            <summary>
            Linear interpolation between vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.SLerp(GenMathematics.Vectors.float2,GenMathematics.Vectors.float2,System.Single)">
            <summary>
            Spherical linear interpolation between normals
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Normalize(GenMathematics.Vectors.float2)">
            <summary>
            Normalizes the vector
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.NormalizeSafe(GenMathematics.Vectors.float2,GenMathematics.Vectors.float2)">
            <summary>
            Normalizes the vector. Returns the specified fallback if the operation fails.
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Project(GenMathematics.Vectors.float2,GenMathematics.Vectors.float2)">
            <summary>
            Projects a value onto a vector, returning a point on the vector
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Project(GenMathematics.Vectors.float2,GenMathematics.Vectors.float2,GenMathematics.Vectors.float2)">
            <summary>
            Projects a value onto a line, returning a point on the line
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.ScalarProject(GenMathematics.Vectors.float2,GenMathematics.Vectors.float2)">
            <summary>
            Projects a value onto a vector, returning a scalar of the vector's length
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.ScalarProject(GenMathematics.Vectors.float2,GenMathematics.Vectors.float2,GenMathematics.Vectors.float2)">
            <summary>
            Projects a value onto a line, returning a direction scalar
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Intersect(GenMathematics.Vectors.float2,GenMathematics.Vectors.float2,GenMathematics.Vectors.float2,GenMathematics.Vectors.float2,System.Single@,System.Single@)">
            <summary>
            Calculates the closest point between lines, returning scalars of the lines' directions. Returns true if successful, and false if the lines are parallel.
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.ClampLength(GenMathematics.Vectors.float2,System.Single,System.Single)">
            <summary>
            Limits the vector length between min and max
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Reflect(GenMathematics.Vectors.float2,GenMathematics.Vectors.float2)">
            <summary>
            Returns the vector reflected from the plane with a given normal
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Refract(GenMathematics.Vectors.float2,GenMathematics.Vectors.float2,System.Single)">
            <summary>
            Returns a vector refracted by a plane surface with a given refraction index
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Abs(GenMathematics.Vectors.float2)">
            <summary>
            Computes the absolute for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Sign(GenMathematics.Vectors.float2)">
            <summary>
            Returns the sign of each component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.BitSign(GenMathematics.Vectors.float2)">
            <summary>
            Sets a bit for a component if it is less than zero
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.BoolSign(GenMathematics.Vectors.float2)">
            <summary>
            Returns true for a component if it is less than zero
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.LengthSq(GenMathematics.Vectors.float3)">
            <summary>
            Returns the square of the vector length
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.LengthSqRef(GenMathematics.Vectors.float3@)">
            <summary>
            Returns the square of the vector length
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Manhattan(GenMathematics.Vectors.float3)">
            <summary>
            Returns the Manhattan length of the vector
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.ManhattanRef(GenMathematics.Vectors.float3@)">
            <summary>
            Returns the Manhattan length of the vector
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Manhattan(GenMathematics.Vectors.float3,GenMathematics.Vectors.float3)">
            <summary>
            Returns the Manhattan distance between vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.ManhattanRef(GenMathematics.Vectors.float3@,GenMathematics.Vectors.float3@)">
            <summary>
            Returns the Manhattan distance between vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Dot(GenMathematics.Vectors.float3,GenMathematics.Vectors.float3)">
            <summary>
            Returns the scalar product of vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.DotRef(GenMathematics.Vectors.float3@,GenMathematics.Vectors.float3@)">
            <summary>
            Returns the scalar product of vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.PerpDot(GenMathematics.Vectors.float3,GenMathematics.Vectors.float3)">
            <summary>
            Returns the perpendicular dot product of vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.PerpDotRef(GenMathematics.Vectors.float3@,GenMathematics.Vectors.float3@)">
            <summary>
            Returns the perpendicular dot product of vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.DistanceSq(GenMathematics.Vectors.float3,GenMathematics.Vectors.float3)">
            <summary>
            Returns the square of the distance between vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.DistanceSqRef(GenMathematics.Vectors.float3@,GenMathematics.Vectors.float3@)">
            <summary>
            Returns the square of the distance between vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Square(GenMathematics.Vectors.float3)">
            <summary>
            Squares each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Square(GenMathematics.Vectors.float3@,GenMathematics.Vectors.float3@)">
            <summary>
            Squares each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.AbsDiff(GenMathematics.Vectors.float3,GenMathematics.Vectors.float3)">
            <summary>
            Calculates the absolute difference between the components of two vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.AbsDiff(GenMathematics.Vectors.float3@,GenMathematics.Vectors.float3@,GenMathematics.Vectors.float3@)">
            <summary>
            Calculates the absolute difference between the components of two vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Cross(GenMathematics.Vectors.float3,GenMathematics.Vectors.float3)">
            <summary>
            Returns the vector product of vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Cross(GenMathematics.Vectors.float3@,GenMathematics.Vectors.float3@,GenMathematics.Vectors.float3@)">
            <summary>
            Returns the vector product of vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Shift(GenMathematics.Vectors.float3,System.Int32)">
            <summary>
            Shifts components in a loop in a positive or negative direction
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Shift(GenMathematics.Vectors.float3,System.Int32,GenMathematics.Vectors.float3@)">
            <summary>
            Shifts components in a loop in a positive or negative direction
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Select(GenMathematics.Vectors.float3,GenMathematics.Vectors.float3,GenMathematics.Vectors.bool3)">
            <summary>
            Selects components from two vectors according to conditions
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Select(GenMathematics.Vectors.float3@,GenMathematics.Vectors.float3@,GenMathematics.Vectors.bool3,GenMathematics.Vectors.float3@)">
            <summary>
            Selects components from two vectors according to conditions
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Select(GenMathematics.Vectors.float3,GenMathematics.Vectors.float3,System.Boolean)">
            <summary>
            Selects components from two vectors according to condition
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Select(GenMathematics.Vectors.float3@,GenMathematics.Vectors.float3@,System.Boolean,GenMathematics.Vectors.float3@)">
            <summary>
            Selects components from two vectors according to condition
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CompressLeft(GenMathematics.Vectors.float3,GenMathematics.Vectors.bool3)">
            <summary>
            Leaves the components specified in the condition and shifts them to the left
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CompressLeft(GenMathematics.Vectors.float3@,GenMathematics.Vectors.bool3,GenMathematics.Vectors.float3@)">
            <summary>
            Leaves the components specified in the condition and shifts them to the left
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CompressLeft(GenMathematics.Vectors.float3,System.Int32)">
            <summary>
            Leaves the components specified in the mask and shifts them to the left
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CompressLeft(GenMathematics.Vectors.float3@,System.Int32,GenMathematics.Vectors.float3@)">
            <summary>
            Leaves the components specified in the mask and shifts them to the left
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CompressRight(GenMathematics.Vectors.float3,GenMathematics.Vectors.bool3)">
            <summary>
            Leaves the components specified in the condition and shifts them to the right
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CompressRight(GenMathematics.Vectors.float3@,GenMathematics.Vectors.bool3,GenMathematics.Vectors.float3@)">
            <summary>
            Leaves the components specified in the condition and shifts them to the right
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CompressRight(GenMathematics.Vectors.float3,System.Int32)">
            <summary>
            Leaves the components specified in the mask and shifts them to the right
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CompressRight(GenMathematics.Vectors.float3@,System.Int32,GenMathematics.Vectors.float3@)">
            <summary>
            Leaves the components specified in the mask and shifts them to the right
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.UnionMin(GenMathematics.Vectors.float3)">
            <summary>
            Returns the minimum vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.UnionMinRef(GenMathematics.Vectors.float3@)">
            <summary>
            Returns the minimum vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.UnionMax(GenMathematics.Vectors.float3)">
            <summary>
            Returns the maximum vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.UnionMaxRef(GenMathematics.Vectors.float3@)">
            <summary>
            Returns the maximum vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.UnionSum(GenMathematics.Vectors.float3)">
            <summary>
            Returns the sum of the vector components
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.UnionSumRef(GenMathematics.Vectors.float3@)">
            <summary>
            Returns the sum of the vector components
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Min(GenMathematics.Vectors.float3,GenMathematics.Vectors.float3)">
            <summary>
            Computes the smallest value of two for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Min(GenMathematics.Vectors.float3@,GenMathematics.Vectors.float3@,GenMathematics.Vectors.float3@)">
            <summary>
            Computes the smallest value of two for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Max(GenMathematics.Vectors.float3,GenMathematics.Vectors.float3)">
            <summary>
            Computes the largest value of two for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Max(GenMathematics.Vectors.float3@,GenMathematics.Vectors.float3@,GenMathematics.Vectors.float3@)">
            <summary>
            Computes the largest value of two for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Clamp(GenMathematics.Vectors.float3,GenMathematics.Vectors.float3,GenMathematics.Vectors.float3)">
            <summary>
            Clamps each vector component between min and max
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Clamp(GenMathematics.Vectors.float3@,GenMathematics.Vectors.float3@,GenMathematics.Vectors.float3@,GenMathematics.Vectors.float3@)">
            <summary>
            Clamps each vector component between min and max
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Clamp(GenMathematics.Vectors.float3,System.Single,System.Single)">
            <summary>
            Clamps each vector component between min and max
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Clamp(GenMathematics.Vectors.float3@,System.Single,System.Single,GenMathematics.Vectors.float3@)">
            <summary>
            Clamps each vector component between min and max
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.IsZero(GenMathematics.Vectors.float3)">
            <summary>
            Returns true if all components are zero
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.IsZeroRef(GenMathematics.Vectors.float3@)">
            <summary>
            Returns true if all components are zero
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.AnyZero(GenMathematics.Vectors.float3)">
            <summary>
            Returns true if at least one of the components is zero
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.AnyZeroRef(GenMathematics.Vectors.float3@)">
            <summary>
            Returns true if at least one of the components is zero
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Length(GenMathematics.Vectors.float3)">
            <summary>
            Returns the vector length
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.LengthRef(GenMathematics.Vectors.float3@)">
            <summary>
            Returns the vector length
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Distance(GenMathematics.Vectors.float3,GenMathematics.Vectors.float3)">
            <summary>
            Returns the distance between vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.DistanceRef(GenMathematics.Vectors.float3@,GenMathematics.Vectors.float3@)">
            <summary>
            Returns the distance between vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Angle(GenMathematics.Vectors.float3,GenMathematics.Vectors.float3)">
            <summary>
            Returns the unsigned angle between normals
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.AngleRef(GenMathematics.Vectors.float3@,GenMathematics.Vectors.float3@)">
            <summary>
            Returns the unsigned angle between normals
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.AngleNorm(GenMathematics.Vectors.float3,GenMathematics.Vectors.float3)">
            <summary>
            Returns the unsigned angle between vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.AngleNormRef(GenMathematics.Vectors.float3@,GenMathematics.Vectors.float3@)">
            <summary>
            Returns the unsigned angle between vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.SignedAngle(GenMathematics.Vectors.float3,GenMathematics.Vectors.float3,GenMathematics.Vectors.float3)">
            <summary>
            Returns the clockwise angle between vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.SignedAngleRef(GenMathematics.Vectors.float3@,GenMathematics.Vectors.float3@,GenMathematics.Vectors.float3@)">
            <summary>
            Returns the clockwise angle between vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.SignedAngleInv(GenMathematics.Vectors.float3,GenMathematics.Vectors.float3,GenMathematics.Vectors.float3)">
            <summary>
            Returns the counterclockwise angle between vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.SignedAngleInvRef(GenMathematics.Vectors.float3@,GenMathematics.Vectors.float3@,GenMathematics.Vectors.float3@)">
            <summary>
            Returns the counterclockwise angle between vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Floor(GenMathematics.Vectors.float3)">
            <summary>
            Computes the floor for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Floor(GenMathematics.Vectors.float3@,GenMathematics.Vectors.float3@)">
            <summary>
            Computes the floor for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Ceil(GenMathematics.Vectors.float3)">
            <summary>
            Computes the ceiling for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Ceil(GenMathematics.Vectors.float3@,GenMathematics.Vectors.float3@)">
            <summary>
            Computes the ceiling for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Round(GenMathematics.Vectors.float3)">
            <summary>
            Rounds each vector component to the nearest integer
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Round(GenMathematics.Vectors.float3@,GenMathematics.Vectors.float3@)">
            <summary>
            Rounds each vector component to the nearest integer
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Tan(GenMathematics.Vectors.float3)">
            <summary>
            Computes the tangent for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Tan(GenMathematics.Vectors.float3@,GenMathematics.Vectors.float3@)">
            <summary>
            Computes the tangent for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Tanh(GenMathematics.Vectors.float3)">
            <summary>
            Computes the hyperbolic tangent for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Tanh(GenMathematics.Vectors.float3@,GenMathematics.Vectors.float3@)">
            <summary>
            Computes the hyperbolic tangent for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Atan(GenMathematics.Vectors.float3)">
            <summary>
            Computes the arc-tangent for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Atan(GenMathematics.Vectors.float3@,GenMathematics.Vectors.float3@)">
            <summary>
            Computes the arc-tangent for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Atanh(GenMathematics.Vectors.float3)">
            <summary>
            Computes the hyperbolic arc-tangent for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Atanh(GenMathematics.Vectors.float3@,GenMathematics.Vectors.float3@)">
            <summary>
            Computes the hyperbolic arc-tangent for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Atan2(GenMathematics.Vectors.float3,GenMathematics.Vectors.float3)">
            <summary>
            Computes the arc-tangent for the quotient of two vectors for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Atan2(GenMathematics.Vectors.float3@,GenMathematics.Vectors.float3@,GenMathematics.Vectors.float3@)">
            <summary>
            Computes the arc-tangent for the quotient of two vectors for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Sin(GenMathematics.Vectors.float3)">
            <summary>
            Computes the sine for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Sin(GenMathematics.Vectors.float3@,GenMathematics.Vectors.float3@)">
            <summary>
            Computes the sine for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Sinh(GenMathematics.Vectors.float3)">
            <summary>
            Computes the hyperbolic sine for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Sinh(GenMathematics.Vectors.float3@,GenMathematics.Vectors.float3@)">
            <summary>
            Computes the hyperbolic sine for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Asin(GenMathematics.Vectors.float3)">
            <summary>
            Computes the arc-sine for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Asin(GenMathematics.Vectors.float3@,GenMathematics.Vectors.float3@)">
            <summary>
            Computes the arc-sine for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Asinh(GenMathematics.Vectors.float3)">
            <summary>
            Computes the hyperbolic arc-sine for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Asinh(GenMathematics.Vectors.float3@,GenMathematics.Vectors.float3@)">
            <summary>
            Computes the hyperbolic arc-sine for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Cos(GenMathematics.Vectors.float3)">
            <summary>
            Computes the cosine for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Cos(GenMathematics.Vectors.float3@,GenMathematics.Vectors.float3@)">
            <summary>
            Computes the cosine for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Cosh(GenMathematics.Vectors.float3)">
            <summary>
            Computes the hyperbolic cosine for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Cosh(GenMathematics.Vectors.float3@,GenMathematics.Vectors.float3@)">
            <summary>
            Computes the hyperbolic cosine for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Acos(GenMathematics.Vectors.float3)">
            <summary>
            Computes the arc-cosine for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Acos(GenMathematics.Vectors.float3@,GenMathematics.Vectors.float3@)">
            <summary>
            Computes the arc-cosine for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Acosh(GenMathematics.Vectors.float3)">
            <summary>
            Computes the hyperbolic arc-cosine for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Acosh(GenMathematics.Vectors.float3@,GenMathematics.Vectors.float3@)">
            <summary>
            Computes the hyperbolic arc-cosine for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Truncate(GenMathematics.Vectors.float3)">
            <summary>
            Truncates each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Truncate(GenMathematics.Vectors.float3@,GenMathematics.Vectors.float3@)">
            <summary>
            Truncates each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Frac(GenMathematics.Vectors.float3)">
            <summary>
            Computes the fractional part for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Frac(GenMathematics.Vectors.float3@,GenMathematics.Vectors.float3@)">
            <summary>
            Computes the fractional part for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Reciprocal(GenMathematics.Vectors.float3)">
            <summary>
            Computes the reciprocal for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Reciprocal(GenMathematics.Vectors.float3@,GenMathematics.Vectors.float3@)">
            <summary>
            Computes the reciprocal for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Pow(GenMathematics.Vectors.float3,GenMathematics.Vectors.float3)">
            <summary>
            Raises each vector component to a given power
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Pow(GenMathematics.Vectors.float3@,GenMathematics.Vectors.float3@,GenMathematics.Vectors.float3@)">
            <summary>
            Raises each vector component to a given power
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Pow(GenMathematics.Vectors.float3,System.Single)">
            <summary>
            Raises each vector component to a given power
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Pow(GenMathematics.Vectors.float3@,System.Single,GenMathematics.Vectors.float3@)">
            <summary>
            Raises each vector component to a given power
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Exp(GenMathematics.Vectors.float3)">
            <summary>
            Raises E to a given power
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Exp(GenMathematics.Vectors.float3@,GenMathematics.Vectors.float3@)">
            <summary>
            Raises E to a given power
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Log(GenMathematics.Vectors.float3)">
            <summary>
            Computes the natural (<c>base-E</c>) logarithm for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Log(GenMathematics.Vectors.float3@,GenMathematics.Vectors.float3@)">
            <summary>
            Computes the natural (<c>base-E</c>) logarithm for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Log2(GenMathematics.Vectors.float3)">
            <summary>
            Computes the <c>base-2</c> logarithm for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Log2(GenMathematics.Vectors.float3@,GenMathematics.Vectors.float3@)">
            <summary>
            Computes the <c>base-2</c> logarithm for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Log10(GenMathematics.Vectors.float3)">
            <summary>
            Computes the <c>base-10</c>) logarithm for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Log10(GenMathematics.Vectors.float3@,GenMathematics.Vectors.float3@)">
            <summary>
            Computes the <c>base-10</c>) logarithm for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Log(GenMathematics.Vectors.float3,GenMathematics.Vectors.float3)">
            <summary>
            Computes the logarithm of a value in the specified base for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Log(GenMathematics.Vectors.float3@,GenMathematics.Vectors.float3@,GenMathematics.Vectors.float3@)">
            <summary>
            Computes the logarithm of a value in the specified base for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Log(GenMathematics.Vectors.float3,System.Single)">
            <summary>
            Computes the logarithm of a value in the specified base for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Log(GenMathematics.Vectors.float3@,System.Single,GenMathematics.Vectors.float3@)">
            <summary>
            Computes the logarithm of a value in the specified base for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Sqrt(GenMathematics.Vectors.float3)">
            <summary>
            Computes the square-root for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Sqrt(GenMathematics.Vectors.float3@,GenMathematics.Vectors.float3@)">
            <summary>
            Computes the square-root for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.RSqrt(GenMathematics.Vectors.float3)">
            <summary>
            Computes the reciprocal square-root for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.RSqrt(GenMathematics.Vectors.float3@,GenMathematics.Vectors.float3@)">
            <summary>
            Computes the reciprocal square-root for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Cbrt(GenMathematics.Vectors.float3)">
            <summary>
            Computes the cube-root for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Cbrt(GenMathematics.Vectors.float3@,GenMathematics.Vectors.float3@)">
            <summary>
            Computes the cube-root for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Lerp(GenMathematics.Vectors.float3,GenMathematics.Vectors.float3,System.Single)">
            <summary>
            Linear interpolation between vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Lerp(GenMathematics.Vectors.float3@,GenMathematics.Vectors.float3@,System.Single,GenMathematics.Vectors.float3@)">
            <summary>
            Linear interpolation between vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.SLerp(GenMathematics.Vectors.float3,GenMathematics.Vectors.float3,System.Single)">
            <summary>
            Spherical linear interpolation between normals
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.SLerp(GenMathematics.Vectors.float3@,GenMathematics.Vectors.float3@,System.Single,GenMathematics.Vectors.float3@)">
            <summary>
            Spherical linear interpolation between normals
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Normalize(GenMathematics.Vectors.float3)">
            <summary>
            Normalizes the vector
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Normalize(GenMathematics.Vectors.float3@,GenMathematics.Vectors.float3@)">
            <summary>
            Normalizes the vector
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.NormalizeSafe(GenMathematics.Vectors.float3,GenMathematics.Vectors.float3)">
            <summary>
            Normalizes the vector. Returns the specified fallback if the operation fails.
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.NormalizeSafe(GenMathematics.Vectors.float3@,GenMathematics.Vectors.float3@,GenMathematics.Vectors.float3@)">
            <summary>
            Normalizes the vector. Returns the specified fallback if the operation fails.
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Project(GenMathematics.Vectors.float3,GenMathematics.Vectors.float3)">
            <summary>
            Projects a value onto a vector, returning a point on the vector
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Project(GenMathematics.Vectors.float3@,GenMathematics.Vectors.float3@,GenMathematics.Vectors.float3@)">
            <summary>
            Projects a value onto a vector, returning a point on the vector
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Project(GenMathematics.Vectors.float3,GenMathematics.Vectors.float3,GenMathematics.Vectors.float3)">
            <summary>
            Projects a value onto a line, returning a point on the line
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Project(GenMathematics.Vectors.float3@,GenMathematics.Vectors.float3@,GenMathematics.Vectors.float3@,GenMathematics.Vectors.float3@)">
            <summary>
            Projects a value onto a line, returning a point on the line
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.ScalarProject(GenMathematics.Vectors.float3,GenMathematics.Vectors.float3)">
            <summary>
            Projects a value onto a vector, returning a scalar of the vector's length
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.ScalarProjectRef(GenMathematics.Vectors.float3@,GenMathematics.Vectors.float3@)">
            <summary>
            Projects a value onto a vector, returning a scalar of the vector's length
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.ScalarProject(GenMathematics.Vectors.float3,GenMathematics.Vectors.float3,GenMathematics.Vectors.float3)">
            <summary>
            Projects a value onto a line, returning a direction scalar
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.ScalarProjectRef(GenMathematics.Vectors.float3@,GenMathematics.Vectors.float3@,GenMathematics.Vectors.float3@)">
            <summary>
            Projects a value onto a line, returning a direction scalar
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Intersect(GenMathematics.Vectors.float3,GenMathematics.Vectors.float3,GenMathematics.Vectors.float3,GenMathematics.Vectors.float3,System.Single@,System.Single@)">
            <summary>
            Calculates the closest point between lines, returning scalars of the lines' directions. Returns true if successful, and false if the lines are parallel.
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.IntersectRef(GenMathematics.Vectors.float3@,GenMathematics.Vectors.float3@,GenMathematics.Vectors.float3@,GenMathematics.Vectors.float3@,System.Single@,System.Single@)">
            <summary>
            Calculates the closest point between lines, returning scalars of the lines' directions. Returns true if successful, and false if the lines are parallel.
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.ClampLength(GenMathematics.Vectors.float3,System.Single,System.Single)">
            <summary>
            Limits the vector length between min and max
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.ClampLength(GenMathematics.Vectors.float3@,System.Single,System.Single,GenMathematics.Vectors.float3@)">
            <summary>
            Limits the vector length between min and max
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Reflect(GenMathematics.Vectors.float3,GenMathematics.Vectors.float3)">
            <summary>
            Returns the vector reflected from the plane with a given normal
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Reflect(GenMathematics.Vectors.float3@,GenMathematics.Vectors.float3@,GenMathematics.Vectors.float3@)">
            <summary>
            Returns the vector reflected from the plane with a given normal
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Refract(GenMathematics.Vectors.float3,GenMathematics.Vectors.float3,System.Single)">
            <summary>
            Returns a vector refracted by a plane surface with a given refraction index
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Refract(GenMathematics.Vectors.float3@,GenMathematics.Vectors.float3@,System.Single,GenMathematics.Vectors.float3@)">
            <summary>
            Returns a vector refracted by a plane surface with a given refraction index
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Abs(GenMathematics.Vectors.float3)">
            <summary>
            Computes the absolute for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Abs(GenMathematics.Vectors.float3@,GenMathematics.Vectors.float3@)">
            <summary>
            Computes the absolute for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Sign(GenMathematics.Vectors.float3)">
            <summary>
            Returns the sign of each component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Sign(GenMathematics.Vectors.float3@,GenMathematics.Vectors.int3@)">
            <summary>
            Returns the sign of each component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.BitSign(GenMathematics.Vectors.float3)">
            <summary>
            Sets a bit for a component if it is less than zero
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.BitSignRef(GenMathematics.Vectors.float3@)">
            <summary>
            Sets a bit for a component if it is less than zero
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.BoolSign(GenMathematics.Vectors.float3)">
            <summary>
            Returns true for a component if it is less than zero
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.BoolSignRef(GenMathematics.Vectors.float3@)">
            <summary>
            Returns true for a component if it is less than zero
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.LengthSq(GenMathematics.Vectors.float4)">
            <summary>
            Returns the square of the vector length
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.LengthSqRef(GenMathematics.Vectors.float4@)">
            <summary>
            Returns the square of the vector length
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Manhattan(GenMathematics.Vectors.float4)">
            <summary>
            Returns the Manhattan length of the vector
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.ManhattanRef(GenMathematics.Vectors.float4@)">
            <summary>
            Returns the Manhattan length of the vector
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Manhattan(GenMathematics.Vectors.float4,GenMathematics.Vectors.float4)">
            <summary>
            Returns the Manhattan distance between vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.ManhattanRef(GenMathematics.Vectors.float4@,GenMathematics.Vectors.float4@)">
            <summary>
            Returns the Manhattan distance between vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Dot(GenMathematics.Vectors.float4,GenMathematics.Vectors.float4)">
            <summary>
            Returns the scalar product of vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.DotRef(GenMathematics.Vectors.float4@,GenMathematics.Vectors.float4@)">
            <summary>
            Returns the scalar product of vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.DistanceSq(GenMathematics.Vectors.float4,GenMathematics.Vectors.float4)">
            <summary>
            Returns the square of the distance between vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.DistanceSqRef(GenMathematics.Vectors.float4@,GenMathematics.Vectors.float4@)">
            <summary>
            Returns the square of the distance between vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Square(GenMathematics.Vectors.float4)">
            <summary>
            Squares each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Square(GenMathematics.Vectors.float4@,GenMathematics.Vectors.float4@)">
            <summary>
            Squares each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.AbsDiff(GenMathematics.Vectors.float4,GenMathematics.Vectors.float4)">
            <summary>
            Calculates the absolute difference between the components of two vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.AbsDiff(GenMathematics.Vectors.float4@,GenMathematics.Vectors.float4@,GenMathematics.Vectors.float4@)">
            <summary>
            Calculates the absolute difference between the components of two vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Shift(GenMathematics.Vectors.float4,System.Int32)">
            <summary>
            Shifts components in a loop in a positive or negative direction
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Shift(GenMathematics.Vectors.float4,System.Int32,GenMathematics.Vectors.float4@)">
            <summary>
            Shifts components in a loop in a positive or negative direction
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Select(GenMathematics.Vectors.float4,GenMathematics.Vectors.float4,GenMathematics.Vectors.bool4)">
            <summary>
            Selects components from two vectors according to conditions
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Select(GenMathematics.Vectors.float4@,GenMathematics.Vectors.float4@,GenMathematics.Vectors.bool4,GenMathematics.Vectors.float4@)">
            <summary>
            Selects components from two vectors according to conditions
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Select(GenMathematics.Vectors.float4,GenMathematics.Vectors.float4,System.Boolean)">
            <summary>
            Selects components from two vectors according to condition
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Select(GenMathematics.Vectors.float4@,GenMathematics.Vectors.float4@,System.Boolean,GenMathematics.Vectors.float4@)">
            <summary>
            Selects components from two vectors according to condition
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CompressLeft(GenMathematics.Vectors.float4,GenMathematics.Vectors.bool4)">
            <summary>
            Leaves the components specified in the condition and shifts them to the left
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CompressLeft(GenMathematics.Vectors.float4@,GenMathematics.Vectors.bool4,GenMathematics.Vectors.float4@)">
            <summary>
            Leaves the components specified in the condition and shifts them to the left
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CompressLeft(GenMathematics.Vectors.float4,System.Int32)">
            <summary>
            Leaves the components specified in the mask and shifts them to the left
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CompressLeft(GenMathematics.Vectors.float4@,System.Int32,GenMathematics.Vectors.float4@)">
            <summary>
            Leaves the components specified in the mask and shifts them to the left
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CompressRight(GenMathematics.Vectors.float4,GenMathematics.Vectors.bool4)">
            <summary>
            Leaves the components specified in the condition and shifts them to the right
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CompressRight(GenMathematics.Vectors.float4@,GenMathematics.Vectors.bool4,GenMathematics.Vectors.float4@)">
            <summary>
            Leaves the components specified in the condition and shifts them to the right
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CompressRight(GenMathematics.Vectors.float4,System.Int32)">
            <summary>
            Leaves the components specified in the mask and shifts them to the right
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CompressRight(GenMathematics.Vectors.float4@,System.Int32,GenMathematics.Vectors.float4@)">
            <summary>
            Leaves the components specified in the mask and shifts them to the right
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.UnionMin(GenMathematics.Vectors.float4)">
            <summary>
            Returns the minimum vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.UnionMinRef(GenMathematics.Vectors.float4@)">
            <summary>
            Returns the minimum vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.UnionMax(GenMathematics.Vectors.float4)">
            <summary>
            Returns the maximum vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.UnionMaxRef(GenMathematics.Vectors.float4@)">
            <summary>
            Returns the maximum vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.UnionSum(GenMathematics.Vectors.float4)">
            <summary>
            Returns the sum of the vector components
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.UnionSumRef(GenMathematics.Vectors.float4@)">
            <summary>
            Returns the sum of the vector components
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Min(GenMathematics.Vectors.float4,GenMathematics.Vectors.float4)">
            <summary>
            Computes the smallest value of two for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Min(GenMathematics.Vectors.float4@,GenMathematics.Vectors.float4@,GenMathematics.Vectors.float4@)">
            <summary>
            Computes the smallest value of two for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Max(GenMathematics.Vectors.float4,GenMathematics.Vectors.float4)">
            <summary>
            Computes the largest value of two for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Max(GenMathematics.Vectors.float4@,GenMathematics.Vectors.float4@,GenMathematics.Vectors.float4@)">
            <summary>
            Computes the largest value of two for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Clamp(GenMathematics.Vectors.float4,GenMathematics.Vectors.float4,GenMathematics.Vectors.float4)">
            <summary>
            Clamps each vector component between min and max
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Clamp(GenMathematics.Vectors.float4@,GenMathematics.Vectors.float4@,GenMathematics.Vectors.float4@,GenMathematics.Vectors.float4@)">
            <summary>
            Clamps each vector component between min and max
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Clamp(GenMathematics.Vectors.float4,System.Single,System.Single)">
            <summary>
            Clamps each vector component between min and max
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Clamp(GenMathematics.Vectors.float4@,System.Single,System.Single,GenMathematics.Vectors.float4@)">
            <summary>
            Clamps each vector component between min and max
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.IsZero(GenMathematics.Vectors.float4)">
            <summary>
            Returns true if all components are zero
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.IsZeroRef(GenMathematics.Vectors.float4@)">
            <summary>
            Returns true if all components are zero
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.AnyZero(GenMathematics.Vectors.float4)">
            <summary>
            Returns true if at least one of the components is zero
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.AnyZeroRef(GenMathematics.Vectors.float4@)">
            <summary>
            Returns true if at least one of the components is zero
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Length(GenMathematics.Vectors.float4)">
            <summary>
            Returns the vector length
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.LengthRef(GenMathematics.Vectors.float4@)">
            <summary>
            Returns the vector length
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Distance(GenMathematics.Vectors.float4,GenMathematics.Vectors.float4)">
            <summary>
            Returns the distance between vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.DistanceRef(GenMathematics.Vectors.float4@,GenMathematics.Vectors.float4@)">
            <summary>
            Returns the distance between vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Angle(GenMathematics.Vectors.float4,GenMathematics.Vectors.float4)">
            <summary>
            Returns the unsigned angle between normals
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.AngleRef(GenMathematics.Vectors.float4@,GenMathematics.Vectors.float4@)">
            <summary>
            Returns the unsigned angle between normals
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.AngleNorm(GenMathematics.Vectors.float4,GenMathematics.Vectors.float4)">
            <summary>
            Returns the unsigned angle between vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.AngleNormRef(GenMathematics.Vectors.float4@,GenMathematics.Vectors.float4@)">
            <summary>
            Returns the unsigned angle between vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Floor(GenMathematics.Vectors.float4)">
            <summary>
            Computes the floor for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Floor(GenMathematics.Vectors.float4@,GenMathematics.Vectors.float4@)">
            <summary>
            Computes the floor for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Ceil(GenMathematics.Vectors.float4)">
            <summary>
            Computes the ceiling for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Ceil(GenMathematics.Vectors.float4@,GenMathematics.Vectors.float4@)">
            <summary>
            Computes the ceiling for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Round(GenMathematics.Vectors.float4)">
            <summary>
            Rounds each vector component to the nearest integer
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Round(GenMathematics.Vectors.float4@,GenMathematics.Vectors.float4@)">
            <summary>
            Rounds each vector component to the nearest integer
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Tan(GenMathematics.Vectors.float4)">
            <summary>
            Computes the tangent for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Tan(GenMathematics.Vectors.float4@,GenMathematics.Vectors.float4@)">
            <summary>
            Computes the tangent for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Tanh(GenMathematics.Vectors.float4)">
            <summary>
            Computes the hyperbolic tangent for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Tanh(GenMathematics.Vectors.float4@,GenMathematics.Vectors.float4@)">
            <summary>
            Computes the hyperbolic tangent for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Atan(GenMathematics.Vectors.float4)">
            <summary>
            Computes the arc-tangent for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Atan(GenMathematics.Vectors.float4@,GenMathematics.Vectors.float4@)">
            <summary>
            Computes the arc-tangent for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Atanh(GenMathematics.Vectors.float4)">
            <summary>
            Computes the hyperbolic arc-tangent for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Atanh(GenMathematics.Vectors.float4@,GenMathematics.Vectors.float4@)">
            <summary>
            Computes the hyperbolic arc-tangent for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Atan2(GenMathematics.Vectors.float4,GenMathematics.Vectors.float4)">
            <summary>
            Computes the arc-tangent for the quotient of two vectors for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Atan2(GenMathematics.Vectors.float4@,GenMathematics.Vectors.float4@,GenMathematics.Vectors.float4@)">
            <summary>
            Computes the arc-tangent for the quotient of two vectors for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Sin(GenMathematics.Vectors.float4)">
            <summary>
            Computes the sine for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Sin(GenMathematics.Vectors.float4@,GenMathematics.Vectors.float4@)">
            <summary>
            Computes the sine for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Sinh(GenMathematics.Vectors.float4)">
            <summary>
            Computes the hyperbolic sine for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Sinh(GenMathematics.Vectors.float4@,GenMathematics.Vectors.float4@)">
            <summary>
            Computes the hyperbolic sine for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Asin(GenMathematics.Vectors.float4)">
            <summary>
            Computes the arc-sine for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Asin(GenMathematics.Vectors.float4@,GenMathematics.Vectors.float4@)">
            <summary>
            Computes the arc-sine for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Asinh(GenMathematics.Vectors.float4)">
            <summary>
            Computes the hyperbolic arc-sine for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Asinh(GenMathematics.Vectors.float4@,GenMathematics.Vectors.float4@)">
            <summary>
            Computes the hyperbolic arc-sine for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Cos(GenMathematics.Vectors.float4)">
            <summary>
            Computes the cosine for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Cos(GenMathematics.Vectors.float4@,GenMathematics.Vectors.float4@)">
            <summary>
            Computes the cosine for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Cosh(GenMathematics.Vectors.float4)">
            <summary>
            Computes the hyperbolic cosine for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Cosh(GenMathematics.Vectors.float4@,GenMathematics.Vectors.float4@)">
            <summary>
            Computes the hyperbolic cosine for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Acos(GenMathematics.Vectors.float4)">
            <summary>
            Computes the arc-cosine for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Acos(GenMathematics.Vectors.float4@,GenMathematics.Vectors.float4@)">
            <summary>
            Computes the arc-cosine for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Acosh(GenMathematics.Vectors.float4)">
            <summary>
            Computes the hyperbolic arc-cosine for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Acosh(GenMathematics.Vectors.float4@,GenMathematics.Vectors.float4@)">
            <summary>
            Computes the hyperbolic arc-cosine for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Truncate(GenMathematics.Vectors.float4)">
            <summary>
            Truncates each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Truncate(GenMathematics.Vectors.float4@,GenMathematics.Vectors.float4@)">
            <summary>
            Truncates each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Frac(GenMathematics.Vectors.float4)">
            <summary>
            Computes the fractional part for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Frac(GenMathematics.Vectors.float4@,GenMathematics.Vectors.float4@)">
            <summary>
            Computes the fractional part for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Reciprocal(GenMathematics.Vectors.float4)">
            <summary>
            Computes the reciprocal for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Reciprocal(GenMathematics.Vectors.float4@,GenMathematics.Vectors.float4@)">
            <summary>
            Computes the reciprocal for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Pow(GenMathematics.Vectors.float4,GenMathematics.Vectors.float4)">
            <summary>
            Raises each vector component to a given power
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Pow(GenMathematics.Vectors.float4@,GenMathematics.Vectors.float4@,GenMathematics.Vectors.float4@)">
            <summary>
            Raises each vector component to a given power
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Pow(GenMathematics.Vectors.float4,System.Single)">
            <summary>
            Raises each vector component to a given power
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Pow(GenMathematics.Vectors.float4@,System.Single,GenMathematics.Vectors.float4@)">
            <summary>
            Raises each vector component to a given power
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Exp(GenMathematics.Vectors.float4)">
            <summary>
            Raises E to a given power
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Exp(GenMathematics.Vectors.float4@,GenMathematics.Vectors.float4@)">
            <summary>
            Raises E to a given power
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Log(GenMathematics.Vectors.float4)">
            <summary>
            Computes the natural (<c>base-E</c>) logarithm for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Log(GenMathematics.Vectors.float4@,GenMathematics.Vectors.float4@)">
            <summary>
            Computes the natural (<c>base-E</c>) logarithm for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Log2(GenMathematics.Vectors.float4)">
            <summary>
            Computes the <c>base-2</c> logarithm for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Log2(GenMathematics.Vectors.float4@,GenMathematics.Vectors.float4@)">
            <summary>
            Computes the <c>base-2</c> logarithm for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Log10(GenMathematics.Vectors.float4)">
            <summary>
            Computes the <c>base-10</c>) logarithm for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Log10(GenMathematics.Vectors.float4@,GenMathematics.Vectors.float4@)">
            <summary>
            Computes the <c>base-10</c>) logarithm for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Log(GenMathematics.Vectors.float4,GenMathematics.Vectors.float4)">
            <summary>
            Computes the logarithm of a value in the specified base for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Log(GenMathematics.Vectors.float4@,GenMathematics.Vectors.float4@,GenMathematics.Vectors.float4@)">
            <summary>
            Computes the logarithm of a value in the specified base for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Log(GenMathematics.Vectors.float4,System.Single)">
            <summary>
            Computes the logarithm of a value in the specified base for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Log(GenMathematics.Vectors.float4@,System.Single,GenMathematics.Vectors.float4@)">
            <summary>
            Computes the logarithm of a value in the specified base for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Sqrt(GenMathematics.Vectors.float4)">
            <summary>
            Computes the square-root for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Sqrt(GenMathematics.Vectors.float4@,GenMathematics.Vectors.float4@)">
            <summary>
            Computes the square-root for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.RSqrt(GenMathematics.Vectors.float4)">
            <summary>
            Computes the reciprocal square-root for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.RSqrt(GenMathematics.Vectors.float4@,GenMathematics.Vectors.float4@)">
            <summary>
            Computes the reciprocal square-root for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Cbrt(GenMathematics.Vectors.float4)">
            <summary>
            Computes the cube-root for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Cbrt(GenMathematics.Vectors.float4@,GenMathematics.Vectors.float4@)">
            <summary>
            Computes the cube-root for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Lerp(GenMathematics.Vectors.float4,GenMathematics.Vectors.float4,System.Single)">
            <summary>
            Linear interpolation between vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Lerp(GenMathematics.Vectors.float4@,GenMathematics.Vectors.float4@,System.Single,GenMathematics.Vectors.float4@)">
            <summary>
            Linear interpolation between vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.SLerp(GenMathematics.Vectors.float4,GenMathematics.Vectors.float4,System.Single)">
            <summary>
            Spherical linear interpolation between normals
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.SLerp(GenMathematics.Vectors.float4@,GenMathematics.Vectors.float4@,System.Single,GenMathematics.Vectors.float4@)">
            <summary>
            Spherical linear interpolation between normals
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Normalize(GenMathematics.Vectors.float4)">
            <summary>
            Normalizes the vector
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Normalize(GenMathematics.Vectors.float4@,GenMathematics.Vectors.float4@)">
            <summary>
            Normalizes the vector
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.NormalizeSafe(GenMathematics.Vectors.float4,GenMathematics.Vectors.float4)">
            <summary>
            Normalizes the vector. Returns the specified fallback if the operation fails.
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.NormalizeSafe(GenMathematics.Vectors.float4@,GenMathematics.Vectors.float4@,GenMathematics.Vectors.float4@)">
            <summary>
            Normalizes the vector. Returns the specified fallback if the operation fails.
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Project(GenMathematics.Vectors.float4,GenMathematics.Vectors.float4)">
            <summary>
            Projects a value onto a vector, returning a point on the vector
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Project(GenMathematics.Vectors.float4@,GenMathematics.Vectors.float4@,GenMathematics.Vectors.float4@)">
            <summary>
            Projects a value onto a vector, returning a point on the vector
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Project(GenMathematics.Vectors.float4,GenMathematics.Vectors.float4,GenMathematics.Vectors.float4)">
            <summary>
            Projects a value onto a line, returning a point on the line
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Project(GenMathematics.Vectors.float4@,GenMathematics.Vectors.float4@,GenMathematics.Vectors.float4@,GenMathematics.Vectors.float4@)">
            <summary>
            Projects a value onto a line, returning a point on the line
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.ScalarProject(GenMathematics.Vectors.float4,GenMathematics.Vectors.float4)">
            <summary>
            Projects a value onto a vector, returning a scalar of the vector's length
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.ScalarProjectRef(GenMathematics.Vectors.float4@,GenMathematics.Vectors.float4@)">
            <summary>
            Projects a value onto a vector, returning a scalar of the vector's length
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.ScalarProject(GenMathematics.Vectors.float4,GenMathematics.Vectors.float4,GenMathematics.Vectors.float4)">
            <summary>
            Projects a value onto a line, returning a direction scalar
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.ScalarProjectRef(GenMathematics.Vectors.float4@,GenMathematics.Vectors.float4@,GenMathematics.Vectors.float4@)">
            <summary>
            Projects a value onto a line, returning a direction scalar
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Intersect(GenMathematics.Vectors.float4,GenMathematics.Vectors.float4,GenMathematics.Vectors.float4,GenMathematics.Vectors.float4,System.Single@,System.Single@)">
            <summary>
            Calculates the closest point between lines, returning scalars of the lines' directions. Returns true if successful, and false if the lines are parallel.
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.IntersectRef(GenMathematics.Vectors.float4@,GenMathematics.Vectors.float4@,GenMathematics.Vectors.float4@,GenMathematics.Vectors.float4@,System.Single@,System.Single@)">
            <summary>
            Calculates the closest point between lines, returning scalars of the lines' directions. Returns true if successful, and false if the lines are parallel.
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.ClampLength(GenMathematics.Vectors.float4,System.Single,System.Single)">
            <summary>
            Limits the vector length between min and max
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.ClampLength(GenMathematics.Vectors.float4@,System.Single,System.Single,GenMathematics.Vectors.float4@)">
            <summary>
            Limits the vector length between min and max
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Reflect(GenMathematics.Vectors.float4,GenMathematics.Vectors.float4)">
            <summary>
            Returns the vector reflected from the plane with a given normal
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Reflect(GenMathematics.Vectors.float4@,GenMathematics.Vectors.float4@,GenMathematics.Vectors.float4@)">
            <summary>
            Returns the vector reflected from the plane with a given normal
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Refract(GenMathematics.Vectors.float4,GenMathematics.Vectors.float4,System.Single)">
            <summary>
            Returns a vector refracted by a plane surface with a given refraction index
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Refract(GenMathematics.Vectors.float4@,GenMathematics.Vectors.float4@,System.Single,GenMathematics.Vectors.float4@)">
            <summary>
            Returns a vector refracted by a plane surface with a given refraction index
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Abs(GenMathematics.Vectors.float4)">
            <summary>
            Computes the absolute for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Abs(GenMathematics.Vectors.float4@,GenMathematics.Vectors.float4@)">
            <summary>
            Computes the absolute for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Sign(GenMathematics.Vectors.float4)">
            <summary>
            Returns the sign of each component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Sign(GenMathematics.Vectors.float4@,GenMathematics.Vectors.int4@)">
            <summary>
            Returns the sign of each component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.BitSign(GenMathematics.Vectors.float4)">
            <summary>
            Sets a bit for a component if it is less than zero
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.BitSignRef(GenMathematics.Vectors.float4@)">
            <summary>
            Sets a bit for a component if it is less than zero
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.BoolSign(GenMathematics.Vectors.float4)">
            <summary>
            Returns true for a component if it is less than zero
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.BoolSignRef(GenMathematics.Vectors.float4@)">
            <summary>
            Returns true for a component if it is less than zero
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.LengthSq(GenMathematics.Vectors.double2)">
            <summary>
            Returns the square of the vector length
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.LengthSqRef(GenMathematics.Vectors.double2@)">
            <summary>
            Returns the square of the vector length
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Manhattan(GenMathematics.Vectors.double2)">
            <summary>
            Returns the Manhattan length of the vector
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.ManhattanRef(GenMathematics.Vectors.double2@)">
            <summary>
            Returns the Manhattan length of the vector
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Manhattan(GenMathematics.Vectors.double2,GenMathematics.Vectors.double2)">
            <summary>
            Returns the Manhattan distance between vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.ManhattanRef(GenMathematics.Vectors.double2@,GenMathematics.Vectors.double2@)">
            <summary>
            Returns the Manhattan distance between vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Dot(GenMathematics.Vectors.double2,GenMathematics.Vectors.double2)">
            <summary>
            Returns the scalar product of vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.DotRef(GenMathematics.Vectors.double2@,GenMathematics.Vectors.double2@)">
            <summary>
            Returns the scalar product of vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.PerpDot(GenMathematics.Vectors.double2,GenMathematics.Vectors.double2)">
            <summary>
            Returns the perpendicular dot product of vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.PerpDotRef(GenMathematics.Vectors.double2@,GenMathematics.Vectors.double2@)">
            <summary>
            Returns the perpendicular dot product of vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.DistanceSq(GenMathematics.Vectors.double2,GenMathematics.Vectors.double2)">
            <summary>
            Returns the square of the distance between vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.DistanceSqRef(GenMathematics.Vectors.double2@,GenMathematics.Vectors.double2@)">
            <summary>
            Returns the square of the distance between vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Square(GenMathematics.Vectors.double2)">
            <summary>
            Squares each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Square(GenMathematics.Vectors.double2@,GenMathematics.Vectors.double2@)">
            <summary>
            Squares each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.AbsDiff(GenMathematics.Vectors.double2,GenMathematics.Vectors.double2)">
            <summary>
            Calculates the absolute difference between the components of two vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.AbsDiff(GenMathematics.Vectors.double2@,GenMathematics.Vectors.double2@,GenMathematics.Vectors.double2@)">
            <summary>
            Calculates the absolute difference between the components of two vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Shift(GenMathematics.Vectors.double2,System.Int32)">
            <summary>
            Shifts components in a loop in a positive or negative direction
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Shift(GenMathematics.Vectors.double2,System.Int32,GenMathematics.Vectors.double2@)">
            <summary>
            Shifts components in a loop in a positive or negative direction
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Select(GenMathematics.Vectors.double2,GenMathematics.Vectors.double2,GenMathematics.Vectors.bool2)">
            <summary>
            Selects components from two vectors according to conditions
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Select(GenMathematics.Vectors.double2@,GenMathematics.Vectors.double2@,GenMathematics.Vectors.bool2,GenMathematics.Vectors.double2@)">
            <summary>
            Selects components from two vectors according to conditions
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Select(GenMathematics.Vectors.double2,GenMathematics.Vectors.double2,System.Boolean)">
            <summary>
            Selects components from two vectors according to condition
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Select(GenMathematics.Vectors.double2@,GenMathematics.Vectors.double2@,System.Boolean,GenMathematics.Vectors.double2@)">
            <summary>
            Selects components from two vectors according to condition
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CompressLeft(GenMathematics.Vectors.double2,GenMathematics.Vectors.bool2)">
            <summary>
            Leaves the components specified in the condition and shifts them to the left
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CompressLeft(GenMathematics.Vectors.double2@,GenMathematics.Vectors.bool2,GenMathematics.Vectors.double2@)">
            <summary>
            Leaves the components specified in the condition and shifts them to the left
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CompressLeft(GenMathematics.Vectors.double2,System.Int32)">
            <summary>
            Leaves the components specified in the mask and shifts them to the left
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CompressLeft(GenMathematics.Vectors.double2@,System.Int32,GenMathematics.Vectors.double2@)">
            <summary>
            Leaves the components specified in the mask and shifts them to the left
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CompressRight(GenMathematics.Vectors.double2,GenMathematics.Vectors.bool2)">
            <summary>
            Leaves the components specified in the condition and shifts them to the right
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CompressRight(GenMathematics.Vectors.double2@,GenMathematics.Vectors.bool2,GenMathematics.Vectors.double2@)">
            <summary>
            Leaves the components specified in the condition and shifts them to the right
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CompressRight(GenMathematics.Vectors.double2,System.Int32)">
            <summary>
            Leaves the components specified in the mask and shifts them to the right
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CompressRight(GenMathematics.Vectors.double2@,System.Int32,GenMathematics.Vectors.double2@)">
            <summary>
            Leaves the components specified in the mask and shifts them to the right
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.UnionMin(GenMathematics.Vectors.double2)">
            <summary>
            Returns the minimum vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.UnionMinRef(GenMathematics.Vectors.double2@)">
            <summary>
            Returns the minimum vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.UnionMax(GenMathematics.Vectors.double2)">
            <summary>
            Returns the maximum vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.UnionMaxRef(GenMathematics.Vectors.double2@)">
            <summary>
            Returns the maximum vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.UnionSum(GenMathematics.Vectors.double2)">
            <summary>
            Returns the sum of the vector components
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.UnionSumRef(GenMathematics.Vectors.double2@)">
            <summary>
            Returns the sum of the vector components
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Min(GenMathematics.Vectors.double2,GenMathematics.Vectors.double2)">
            <summary>
            Computes the smallest value of two for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Min(GenMathematics.Vectors.double2@,GenMathematics.Vectors.double2@,GenMathematics.Vectors.double2@)">
            <summary>
            Computes the smallest value of two for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Max(GenMathematics.Vectors.double2,GenMathematics.Vectors.double2)">
            <summary>
            Computes the largest value of two for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Max(GenMathematics.Vectors.double2@,GenMathematics.Vectors.double2@,GenMathematics.Vectors.double2@)">
            <summary>
            Computes the largest value of two for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Clamp(GenMathematics.Vectors.double2,GenMathematics.Vectors.double2,GenMathematics.Vectors.double2)">
            <summary>
            Clamps each vector component between min and max
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Clamp(GenMathematics.Vectors.double2@,GenMathematics.Vectors.double2@,GenMathematics.Vectors.double2@,GenMathematics.Vectors.double2@)">
            <summary>
            Clamps each vector component between min and max
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Clamp(GenMathematics.Vectors.double2,System.Double,System.Double)">
            <summary>
            Clamps each vector component between min and max
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Clamp(GenMathematics.Vectors.double2@,System.Double,System.Double,GenMathematics.Vectors.double2@)">
            <summary>
            Clamps each vector component between min and max
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.IsZero(GenMathematics.Vectors.double2)">
            <summary>
            Returns true if all components are zero
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.IsZeroRef(GenMathematics.Vectors.double2@)">
            <summary>
            Returns true if all components are zero
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.AnyZero(GenMathematics.Vectors.double2)">
            <summary>
            Returns true if at least one of the components is zero
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.AnyZeroRef(GenMathematics.Vectors.double2@)">
            <summary>
            Returns true if at least one of the components is zero
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Length(GenMathematics.Vectors.double2)">
            <summary>
            Returns the vector length
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.LengthRef(GenMathematics.Vectors.double2@)">
            <summary>
            Returns the vector length
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Distance(GenMathematics.Vectors.double2,GenMathematics.Vectors.double2)">
            <summary>
            Returns the distance between vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.DistanceRef(GenMathematics.Vectors.double2@,GenMathematics.Vectors.double2@)">
            <summary>
            Returns the distance between vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Angle(GenMathematics.Vectors.double2,GenMathematics.Vectors.double2)">
            <summary>
            Returns the unsigned angle between normals
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.AngleRef(GenMathematics.Vectors.double2@,GenMathematics.Vectors.double2@)">
            <summary>
            Returns the unsigned angle between normals
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.AngleNorm(GenMathematics.Vectors.double2,GenMathematics.Vectors.double2)">
            <summary>
            Returns the unsigned angle between vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.AngleNormRef(GenMathematics.Vectors.double2@,GenMathematics.Vectors.double2@)">
            <summary>
            Returns the unsigned angle between vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.SignedAngle(GenMathematics.Vectors.double2,GenMathematics.Vectors.double2)">
            <summary>
            Returns the clockwise angle between vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.SignedAngleRef(GenMathematics.Vectors.double2@,GenMathematics.Vectors.double2@)">
            <summary>
            Returns the clockwise angle between vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Floor(GenMathematics.Vectors.double2)">
            <summary>
            Computes the floor for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Floor(GenMathematics.Vectors.double2@,GenMathematics.Vectors.double2@)">
            <summary>
            Computes the floor for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Ceil(GenMathematics.Vectors.double2)">
            <summary>
            Computes the ceiling for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Ceil(GenMathematics.Vectors.double2@,GenMathematics.Vectors.double2@)">
            <summary>
            Computes the ceiling for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Round(GenMathematics.Vectors.double2)">
            <summary>
            Rounds each vector component to the nearest integer
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Round(GenMathematics.Vectors.double2@,GenMathematics.Vectors.double2@)">
            <summary>
            Rounds each vector component to the nearest integer
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Tan(GenMathematics.Vectors.double2)">
            <summary>
            Computes the tangent for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Tan(GenMathematics.Vectors.double2@,GenMathematics.Vectors.double2@)">
            <summary>
            Computes the tangent for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Tanh(GenMathematics.Vectors.double2)">
            <summary>
            Computes the hyperbolic tangent for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Tanh(GenMathematics.Vectors.double2@,GenMathematics.Vectors.double2@)">
            <summary>
            Computes the hyperbolic tangent for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Atan(GenMathematics.Vectors.double2)">
            <summary>
            Computes the arc-tangent for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Atan(GenMathematics.Vectors.double2@,GenMathematics.Vectors.double2@)">
            <summary>
            Computes the arc-tangent for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Atanh(GenMathematics.Vectors.double2)">
            <summary>
            Computes the hyperbolic arc-tangent for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Atanh(GenMathematics.Vectors.double2@,GenMathematics.Vectors.double2@)">
            <summary>
            Computes the hyperbolic arc-tangent for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Atan2(GenMathematics.Vectors.double2,GenMathematics.Vectors.double2)">
            <summary>
            Computes the arc-tangent for the quotient of two vectors for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Atan2(GenMathematics.Vectors.double2@,GenMathematics.Vectors.double2@,GenMathematics.Vectors.double2@)">
            <summary>
            Computes the arc-tangent for the quotient of two vectors for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Sin(GenMathematics.Vectors.double2)">
            <summary>
            Computes the sine for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Sin(GenMathematics.Vectors.double2@,GenMathematics.Vectors.double2@)">
            <summary>
            Computes the sine for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Sinh(GenMathematics.Vectors.double2)">
            <summary>
            Computes the hyperbolic sine for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Sinh(GenMathematics.Vectors.double2@,GenMathematics.Vectors.double2@)">
            <summary>
            Computes the hyperbolic sine for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Asin(GenMathematics.Vectors.double2)">
            <summary>
            Computes the arc-sine for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Asin(GenMathematics.Vectors.double2@,GenMathematics.Vectors.double2@)">
            <summary>
            Computes the arc-sine for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Asinh(GenMathematics.Vectors.double2)">
            <summary>
            Computes the hyperbolic arc-sine for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Asinh(GenMathematics.Vectors.double2@,GenMathematics.Vectors.double2@)">
            <summary>
            Computes the hyperbolic arc-sine for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Cos(GenMathematics.Vectors.double2)">
            <summary>
            Computes the cosine for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Cos(GenMathematics.Vectors.double2@,GenMathematics.Vectors.double2@)">
            <summary>
            Computes the cosine for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Cosh(GenMathematics.Vectors.double2)">
            <summary>
            Computes the hyperbolic cosine for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Cosh(GenMathematics.Vectors.double2@,GenMathematics.Vectors.double2@)">
            <summary>
            Computes the hyperbolic cosine for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Acos(GenMathematics.Vectors.double2)">
            <summary>
            Computes the arc-cosine for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Acos(GenMathematics.Vectors.double2@,GenMathematics.Vectors.double2@)">
            <summary>
            Computes the arc-cosine for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Acosh(GenMathematics.Vectors.double2)">
            <summary>
            Computes the hyperbolic arc-cosine for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Acosh(GenMathematics.Vectors.double2@,GenMathematics.Vectors.double2@)">
            <summary>
            Computes the hyperbolic arc-cosine for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Truncate(GenMathematics.Vectors.double2)">
            <summary>
            Truncates each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Truncate(GenMathematics.Vectors.double2@,GenMathematics.Vectors.double2@)">
            <summary>
            Truncates each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Frac(GenMathematics.Vectors.double2)">
            <summary>
            Computes the fractional part for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Frac(GenMathematics.Vectors.double2@,GenMathematics.Vectors.double2@)">
            <summary>
            Computes the fractional part for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Reciprocal(GenMathematics.Vectors.double2)">
            <summary>
            Computes the reciprocal for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Reciprocal(GenMathematics.Vectors.double2@,GenMathematics.Vectors.double2@)">
            <summary>
            Computes the reciprocal for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Pow(GenMathematics.Vectors.double2,GenMathematics.Vectors.double2)">
            <summary>
            Raises each vector component to a given power
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Pow(GenMathematics.Vectors.double2@,GenMathematics.Vectors.double2@,GenMathematics.Vectors.double2@)">
            <summary>
            Raises each vector component to a given power
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Pow(GenMathematics.Vectors.double2,System.Double)">
            <summary>
            Raises each vector component to a given power
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Pow(GenMathematics.Vectors.double2@,System.Double,GenMathematics.Vectors.double2@)">
            <summary>
            Raises each vector component to a given power
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Exp(GenMathematics.Vectors.double2)">
            <summary>
            Raises E to a given power
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Exp(GenMathematics.Vectors.double2@,GenMathematics.Vectors.double2@)">
            <summary>
            Raises E to a given power
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Log(GenMathematics.Vectors.double2)">
            <summary>
            Computes the natural (<c>base-E</c>) logarithm for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Log(GenMathematics.Vectors.double2@,GenMathematics.Vectors.double2@)">
            <summary>
            Computes the natural (<c>base-E</c>) logarithm for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Log2(GenMathematics.Vectors.double2)">
            <summary>
            Computes the <c>base-2</c> logarithm for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Log2(GenMathematics.Vectors.double2@,GenMathematics.Vectors.double2@)">
            <summary>
            Computes the <c>base-2</c> logarithm for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Log10(GenMathematics.Vectors.double2)">
            <summary>
            Computes the <c>base-10</c>) logarithm for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Log10(GenMathematics.Vectors.double2@,GenMathematics.Vectors.double2@)">
            <summary>
            Computes the <c>base-10</c>) logarithm for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Log(GenMathematics.Vectors.double2,GenMathematics.Vectors.double2)">
            <summary>
            Computes the logarithm of a value in the specified base for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Log(GenMathematics.Vectors.double2@,GenMathematics.Vectors.double2@,GenMathematics.Vectors.double2@)">
            <summary>
            Computes the logarithm of a value in the specified base for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Log(GenMathematics.Vectors.double2,System.Double)">
            <summary>
            Computes the logarithm of a value in the specified base for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Log(GenMathematics.Vectors.double2@,System.Double,GenMathematics.Vectors.double2@)">
            <summary>
            Computes the logarithm of a value in the specified base for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Sqrt(GenMathematics.Vectors.double2)">
            <summary>
            Computes the square-root for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Sqrt(GenMathematics.Vectors.double2@,GenMathematics.Vectors.double2@)">
            <summary>
            Computes the square-root for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.RSqrt(GenMathematics.Vectors.double2)">
            <summary>
            Computes the reciprocal square-root for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.RSqrt(GenMathematics.Vectors.double2@,GenMathematics.Vectors.double2@)">
            <summary>
            Computes the reciprocal square-root for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Cbrt(GenMathematics.Vectors.double2)">
            <summary>
            Computes the cube-root for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Cbrt(GenMathematics.Vectors.double2@,GenMathematics.Vectors.double2@)">
            <summary>
            Computes the cube-root for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Lerp(GenMathematics.Vectors.double2,GenMathematics.Vectors.double2,System.Double)">
            <summary>
            Linear interpolation between vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Lerp(GenMathematics.Vectors.double2@,GenMathematics.Vectors.double2@,System.Double,GenMathematics.Vectors.double2@)">
            <summary>
            Linear interpolation between vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.SLerp(GenMathematics.Vectors.double2,GenMathematics.Vectors.double2,System.Double)">
            <summary>
            Spherical linear interpolation between normals
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.SLerp(GenMathematics.Vectors.double2@,GenMathematics.Vectors.double2@,System.Double,GenMathematics.Vectors.double2@)">
            <summary>
            Spherical linear interpolation between normals
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Normalize(GenMathematics.Vectors.double2)">
            <summary>
            Normalizes the vector
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Normalize(GenMathematics.Vectors.double2@,GenMathematics.Vectors.double2@)">
            <summary>
            Normalizes the vector
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.NormalizeSafe(GenMathematics.Vectors.double2,GenMathematics.Vectors.double2)">
            <summary>
            Normalizes the vector. Returns the specified fallback if the operation fails.
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.NormalizeSafe(GenMathematics.Vectors.double2@,GenMathematics.Vectors.double2@,GenMathematics.Vectors.double2@)">
            <summary>
            Normalizes the vector. Returns the specified fallback if the operation fails.
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Project(GenMathematics.Vectors.double2,GenMathematics.Vectors.double2)">
            <summary>
            Projects a value onto a vector, returning a point on the vector
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Project(GenMathematics.Vectors.double2@,GenMathematics.Vectors.double2@,GenMathematics.Vectors.double2@)">
            <summary>
            Projects a value onto a vector, returning a point on the vector
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Project(GenMathematics.Vectors.double2,GenMathematics.Vectors.double2,GenMathematics.Vectors.double2)">
            <summary>
            Projects a value onto a line, returning a point on the line
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Project(GenMathematics.Vectors.double2@,GenMathematics.Vectors.double2@,GenMathematics.Vectors.double2@,GenMathematics.Vectors.double2@)">
            <summary>
            Projects a value onto a line, returning a point on the line
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.ScalarProject(GenMathematics.Vectors.double2,GenMathematics.Vectors.double2)">
            <summary>
            Projects a value onto a vector, returning a scalar of the vector's length
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.ScalarProjectRef(GenMathematics.Vectors.double2@,GenMathematics.Vectors.double2@)">
            <summary>
            Projects a value onto a vector, returning a scalar of the vector's length
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.ScalarProject(GenMathematics.Vectors.double2,GenMathematics.Vectors.double2,GenMathematics.Vectors.double2)">
            <summary>
            Projects a value onto a line, returning a direction scalar
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.ScalarProjectRef(GenMathematics.Vectors.double2@,GenMathematics.Vectors.double2@,GenMathematics.Vectors.double2@)">
            <summary>
            Projects a value onto a line, returning a direction scalar
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Intersect(GenMathematics.Vectors.double2,GenMathematics.Vectors.double2,GenMathematics.Vectors.double2,GenMathematics.Vectors.double2,System.Double@,System.Double@)">
            <summary>
            Calculates the closest point between lines, returning scalars of the lines' directions. Returns true if successful, and false if the lines are parallel.
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.IntersectRef(GenMathematics.Vectors.double2@,GenMathematics.Vectors.double2@,GenMathematics.Vectors.double2@,GenMathematics.Vectors.double2@,System.Double@,System.Double@)">
            <summary>
            Calculates the closest point between lines, returning scalars of the lines' directions. Returns true if successful, and false if the lines are parallel.
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.ClampLength(GenMathematics.Vectors.double2,System.Double,System.Double)">
            <summary>
            Limits the vector length between min and max
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.ClampLength(GenMathematics.Vectors.double2@,System.Double,System.Double,GenMathematics.Vectors.double2@)">
            <summary>
            Limits the vector length between min and max
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Reflect(GenMathematics.Vectors.double2,GenMathematics.Vectors.double2)">
            <summary>
            Returns the vector reflected from the plane with a given normal
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Reflect(GenMathematics.Vectors.double2@,GenMathematics.Vectors.double2@,GenMathematics.Vectors.double2@)">
            <summary>
            Returns the vector reflected from the plane with a given normal
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Refract(GenMathematics.Vectors.double2,GenMathematics.Vectors.double2,System.Double)">
            <summary>
            Returns a vector refracted by a plane surface with a given refraction index
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Refract(GenMathematics.Vectors.double2@,GenMathematics.Vectors.double2@,System.Double,GenMathematics.Vectors.double2@)">
            <summary>
            Returns a vector refracted by a plane surface with a given refraction index
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Abs(GenMathematics.Vectors.double2)">
            <summary>
            Computes the absolute for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Abs(GenMathematics.Vectors.double2@,GenMathematics.Vectors.double2@)">
            <summary>
            Computes the absolute for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Sign(GenMathematics.Vectors.double2)">
            <summary>
            Returns the sign of each component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Sign(GenMathematics.Vectors.double2@,GenMathematics.Vectors.int2@)">
            <summary>
            Returns the sign of each component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.BitSign(GenMathematics.Vectors.double2)">
            <summary>
            Sets a bit for a component if it is less than zero
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.BitSignRef(GenMathematics.Vectors.double2@)">
            <summary>
            Sets a bit for a component if it is less than zero
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.BoolSign(GenMathematics.Vectors.double2)">
            <summary>
            Returns true for a component if it is less than zero
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.BoolSignRef(GenMathematics.Vectors.double2@)">
            <summary>
            Returns true for a component if it is less than zero
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.LengthSq(GenMathematics.Vectors.double3)">
            <summary>
            Returns the square of the vector length
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.LengthSqRef(GenMathematics.Vectors.double3@)">
            <summary>
            Returns the square of the vector length
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Manhattan(GenMathematics.Vectors.double3)">
            <summary>
            Returns the Manhattan length of the vector
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.ManhattanRef(GenMathematics.Vectors.double3@)">
            <summary>
            Returns the Manhattan length of the vector
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Manhattan(GenMathematics.Vectors.double3,GenMathematics.Vectors.double3)">
            <summary>
            Returns the Manhattan distance between vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.ManhattanRef(GenMathematics.Vectors.double3@,GenMathematics.Vectors.double3@)">
            <summary>
            Returns the Manhattan distance between vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Dot(GenMathematics.Vectors.double3,GenMathematics.Vectors.double3)">
            <summary>
            Returns the scalar product of vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.DotRef(GenMathematics.Vectors.double3@,GenMathematics.Vectors.double3@)">
            <summary>
            Returns the scalar product of vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.PerpDot(GenMathematics.Vectors.double3,GenMathematics.Vectors.double3)">
            <summary>
            Returns the perpendicular dot product of vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.PerpDotRef(GenMathematics.Vectors.double3@,GenMathematics.Vectors.double3@)">
            <summary>
            Returns the perpendicular dot product of vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.DistanceSq(GenMathematics.Vectors.double3,GenMathematics.Vectors.double3)">
            <summary>
            Returns the square of the distance between vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.DistanceSqRef(GenMathematics.Vectors.double3@,GenMathematics.Vectors.double3@)">
            <summary>
            Returns the square of the distance between vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Square(GenMathematics.Vectors.double3)">
            <summary>
            Squares each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Square(GenMathematics.Vectors.double3@,GenMathematics.Vectors.double3@)">
            <summary>
            Squares each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.AbsDiff(GenMathematics.Vectors.double3,GenMathematics.Vectors.double3)">
            <summary>
            Calculates the absolute difference between the components of two vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.AbsDiff(GenMathematics.Vectors.double3@,GenMathematics.Vectors.double3@,GenMathematics.Vectors.double3@)">
            <summary>
            Calculates the absolute difference between the components of two vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Cross(GenMathematics.Vectors.double3,GenMathematics.Vectors.double3)">
            <summary>
            Returns the vector product of vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Cross(GenMathematics.Vectors.double3@,GenMathematics.Vectors.double3@,GenMathematics.Vectors.double3@)">
            <summary>
            Returns the vector product of vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Shift(GenMathematics.Vectors.double3,System.Int32)">
            <summary>
            Shifts components in a loop in a positive or negative direction
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Shift(GenMathematics.Vectors.double3,System.Int32,GenMathematics.Vectors.double3@)">
            <summary>
            Shifts components in a loop in a positive or negative direction
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Select(GenMathematics.Vectors.double3,GenMathematics.Vectors.double3,GenMathematics.Vectors.bool3)">
            <summary>
            Selects components from two vectors according to conditions
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Select(GenMathematics.Vectors.double3@,GenMathematics.Vectors.double3@,GenMathematics.Vectors.bool3,GenMathematics.Vectors.double3@)">
            <summary>
            Selects components from two vectors according to conditions
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Select(GenMathematics.Vectors.double3,GenMathematics.Vectors.double3,System.Boolean)">
            <summary>
            Selects components from two vectors according to condition
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Select(GenMathematics.Vectors.double3@,GenMathematics.Vectors.double3@,System.Boolean,GenMathematics.Vectors.double3@)">
            <summary>
            Selects components from two vectors according to condition
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CompressLeft(GenMathematics.Vectors.double3,GenMathematics.Vectors.bool3)">
            <summary>
            Leaves the components specified in the condition and shifts them to the left
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CompressLeft(GenMathematics.Vectors.double3@,GenMathematics.Vectors.bool3,GenMathematics.Vectors.double3@)">
            <summary>
            Leaves the components specified in the condition and shifts them to the left
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CompressLeft(GenMathematics.Vectors.double3,System.Int32)">
            <summary>
            Leaves the components specified in the mask and shifts them to the left
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CompressLeft(GenMathematics.Vectors.double3@,System.Int32,GenMathematics.Vectors.double3@)">
            <summary>
            Leaves the components specified in the mask and shifts them to the left
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CompressRight(GenMathematics.Vectors.double3,GenMathematics.Vectors.bool3)">
            <summary>
            Leaves the components specified in the condition and shifts them to the right
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CompressRight(GenMathematics.Vectors.double3@,GenMathematics.Vectors.bool3,GenMathematics.Vectors.double3@)">
            <summary>
            Leaves the components specified in the condition and shifts them to the right
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CompressRight(GenMathematics.Vectors.double3,System.Int32)">
            <summary>
            Leaves the components specified in the mask and shifts them to the right
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CompressRight(GenMathematics.Vectors.double3@,System.Int32,GenMathematics.Vectors.double3@)">
            <summary>
            Leaves the components specified in the mask and shifts them to the right
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.UnionMin(GenMathematics.Vectors.double3)">
            <summary>
            Returns the minimum vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.UnionMinRef(GenMathematics.Vectors.double3@)">
            <summary>
            Returns the minimum vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.UnionMax(GenMathematics.Vectors.double3)">
            <summary>
            Returns the maximum vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.UnionMaxRef(GenMathematics.Vectors.double3@)">
            <summary>
            Returns the maximum vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.UnionSum(GenMathematics.Vectors.double3)">
            <summary>
            Returns the sum of the vector components
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.UnionSumRef(GenMathematics.Vectors.double3@)">
            <summary>
            Returns the sum of the vector components
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Min(GenMathematics.Vectors.double3,GenMathematics.Vectors.double3)">
            <summary>
            Computes the smallest value of two for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Min(GenMathematics.Vectors.double3@,GenMathematics.Vectors.double3@,GenMathematics.Vectors.double3@)">
            <summary>
            Computes the smallest value of two for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Max(GenMathematics.Vectors.double3,GenMathematics.Vectors.double3)">
            <summary>
            Computes the largest value of two for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Max(GenMathematics.Vectors.double3@,GenMathematics.Vectors.double3@,GenMathematics.Vectors.double3@)">
            <summary>
            Computes the largest value of two for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Clamp(GenMathematics.Vectors.double3,GenMathematics.Vectors.double3,GenMathematics.Vectors.double3)">
            <summary>
            Clamps each vector component between min and max
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Clamp(GenMathematics.Vectors.double3@,GenMathematics.Vectors.double3@,GenMathematics.Vectors.double3@,GenMathematics.Vectors.double3@)">
            <summary>
            Clamps each vector component between min and max
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Clamp(GenMathematics.Vectors.double3,System.Double,System.Double)">
            <summary>
            Clamps each vector component between min and max
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Clamp(GenMathematics.Vectors.double3@,System.Double,System.Double,GenMathematics.Vectors.double3@)">
            <summary>
            Clamps each vector component between min and max
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.IsZero(GenMathematics.Vectors.double3)">
            <summary>
            Returns true if all components are zero
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.IsZeroRef(GenMathematics.Vectors.double3@)">
            <summary>
            Returns true if all components are zero
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.AnyZero(GenMathematics.Vectors.double3)">
            <summary>
            Returns true if at least one of the components is zero
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.AnyZeroRef(GenMathematics.Vectors.double3@)">
            <summary>
            Returns true if at least one of the components is zero
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Length(GenMathematics.Vectors.double3)">
            <summary>
            Returns the vector length
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.LengthRef(GenMathematics.Vectors.double3@)">
            <summary>
            Returns the vector length
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Distance(GenMathematics.Vectors.double3,GenMathematics.Vectors.double3)">
            <summary>
            Returns the distance between vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.DistanceRef(GenMathematics.Vectors.double3@,GenMathematics.Vectors.double3@)">
            <summary>
            Returns the distance between vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Angle(GenMathematics.Vectors.double3,GenMathematics.Vectors.double3)">
            <summary>
            Returns the unsigned angle between normals
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.AngleRef(GenMathematics.Vectors.double3@,GenMathematics.Vectors.double3@)">
            <summary>
            Returns the unsigned angle between normals
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.AngleNorm(GenMathematics.Vectors.double3,GenMathematics.Vectors.double3)">
            <summary>
            Returns the unsigned angle between vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.AngleNormRef(GenMathematics.Vectors.double3@,GenMathematics.Vectors.double3@)">
            <summary>
            Returns the unsigned angle between vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.SignedAngle(GenMathematics.Vectors.double3,GenMathematics.Vectors.double3,GenMathematics.Vectors.double3)">
            <summary>
            Returns the clockwise angle between vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.SignedAngleRef(GenMathematics.Vectors.double3@,GenMathematics.Vectors.double3@,GenMathematics.Vectors.double3@)">
            <summary>
            Returns the clockwise angle between vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.SignedAngleInv(GenMathematics.Vectors.double3,GenMathematics.Vectors.double3,GenMathematics.Vectors.double3)">
            <summary>
            Returns the counterclockwise angle between vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.SignedAngleInvRef(GenMathematics.Vectors.double3@,GenMathematics.Vectors.double3@,GenMathematics.Vectors.double3@)">
            <summary>
            Returns the counterclockwise angle between vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Floor(GenMathematics.Vectors.double3)">
            <summary>
            Computes the floor for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Floor(GenMathematics.Vectors.double3@,GenMathematics.Vectors.double3@)">
            <summary>
            Computes the floor for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Ceil(GenMathematics.Vectors.double3)">
            <summary>
            Computes the ceiling for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Ceil(GenMathematics.Vectors.double3@,GenMathematics.Vectors.double3@)">
            <summary>
            Computes the ceiling for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Round(GenMathematics.Vectors.double3)">
            <summary>
            Rounds each vector component to the nearest integer
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Round(GenMathematics.Vectors.double3@,GenMathematics.Vectors.double3@)">
            <summary>
            Rounds each vector component to the nearest integer
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Tan(GenMathematics.Vectors.double3)">
            <summary>
            Computes the tangent for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Tan(GenMathematics.Vectors.double3@,GenMathematics.Vectors.double3@)">
            <summary>
            Computes the tangent for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Tanh(GenMathematics.Vectors.double3)">
            <summary>
            Computes the hyperbolic tangent for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Tanh(GenMathematics.Vectors.double3@,GenMathematics.Vectors.double3@)">
            <summary>
            Computes the hyperbolic tangent for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Atan(GenMathematics.Vectors.double3)">
            <summary>
            Computes the arc-tangent for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Atan(GenMathematics.Vectors.double3@,GenMathematics.Vectors.double3@)">
            <summary>
            Computes the arc-tangent for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Atanh(GenMathematics.Vectors.double3)">
            <summary>
            Computes the hyperbolic arc-tangent for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Atanh(GenMathematics.Vectors.double3@,GenMathematics.Vectors.double3@)">
            <summary>
            Computes the hyperbolic arc-tangent for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Atan2(GenMathematics.Vectors.double3,GenMathematics.Vectors.double3)">
            <summary>
            Computes the arc-tangent for the quotient of two vectors for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Atan2(GenMathematics.Vectors.double3@,GenMathematics.Vectors.double3@,GenMathematics.Vectors.double3@)">
            <summary>
            Computes the arc-tangent for the quotient of two vectors for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Sin(GenMathematics.Vectors.double3)">
            <summary>
            Computes the sine for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Sin(GenMathematics.Vectors.double3@,GenMathematics.Vectors.double3@)">
            <summary>
            Computes the sine for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Sinh(GenMathematics.Vectors.double3)">
            <summary>
            Computes the hyperbolic sine for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Sinh(GenMathematics.Vectors.double3@,GenMathematics.Vectors.double3@)">
            <summary>
            Computes the hyperbolic sine for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Asin(GenMathematics.Vectors.double3)">
            <summary>
            Computes the arc-sine for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Asin(GenMathematics.Vectors.double3@,GenMathematics.Vectors.double3@)">
            <summary>
            Computes the arc-sine for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Asinh(GenMathematics.Vectors.double3)">
            <summary>
            Computes the hyperbolic arc-sine for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Asinh(GenMathematics.Vectors.double3@,GenMathematics.Vectors.double3@)">
            <summary>
            Computes the hyperbolic arc-sine for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Cos(GenMathematics.Vectors.double3)">
            <summary>
            Computes the cosine for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Cos(GenMathematics.Vectors.double3@,GenMathematics.Vectors.double3@)">
            <summary>
            Computes the cosine for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Cosh(GenMathematics.Vectors.double3)">
            <summary>
            Computes the hyperbolic cosine for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Cosh(GenMathematics.Vectors.double3@,GenMathematics.Vectors.double3@)">
            <summary>
            Computes the hyperbolic cosine for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Acos(GenMathematics.Vectors.double3)">
            <summary>
            Computes the arc-cosine for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Acos(GenMathematics.Vectors.double3@,GenMathematics.Vectors.double3@)">
            <summary>
            Computes the arc-cosine for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Acosh(GenMathematics.Vectors.double3)">
            <summary>
            Computes the hyperbolic arc-cosine for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Acosh(GenMathematics.Vectors.double3@,GenMathematics.Vectors.double3@)">
            <summary>
            Computes the hyperbolic arc-cosine for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Truncate(GenMathematics.Vectors.double3)">
            <summary>
            Truncates each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Truncate(GenMathematics.Vectors.double3@,GenMathematics.Vectors.double3@)">
            <summary>
            Truncates each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Frac(GenMathematics.Vectors.double3)">
            <summary>
            Computes the fractional part for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Frac(GenMathematics.Vectors.double3@,GenMathematics.Vectors.double3@)">
            <summary>
            Computes the fractional part for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Reciprocal(GenMathematics.Vectors.double3)">
            <summary>
            Computes the reciprocal for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Reciprocal(GenMathematics.Vectors.double3@,GenMathematics.Vectors.double3@)">
            <summary>
            Computes the reciprocal for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Pow(GenMathematics.Vectors.double3,GenMathematics.Vectors.double3)">
            <summary>
            Raises each vector component to a given power
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Pow(GenMathematics.Vectors.double3@,GenMathematics.Vectors.double3@,GenMathematics.Vectors.double3@)">
            <summary>
            Raises each vector component to a given power
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Pow(GenMathematics.Vectors.double3,System.Double)">
            <summary>
            Raises each vector component to a given power
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Pow(GenMathematics.Vectors.double3@,System.Double,GenMathematics.Vectors.double3@)">
            <summary>
            Raises each vector component to a given power
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Exp(GenMathematics.Vectors.double3)">
            <summary>
            Raises E to a given power
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Exp(GenMathematics.Vectors.double3@,GenMathematics.Vectors.double3@)">
            <summary>
            Raises E to a given power
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Log(GenMathematics.Vectors.double3)">
            <summary>
            Computes the natural (<c>base-E</c>) logarithm for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Log(GenMathematics.Vectors.double3@,GenMathematics.Vectors.double3@)">
            <summary>
            Computes the natural (<c>base-E</c>) logarithm for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Log2(GenMathematics.Vectors.double3)">
            <summary>
            Computes the <c>base-2</c> logarithm for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Log2(GenMathematics.Vectors.double3@,GenMathematics.Vectors.double3@)">
            <summary>
            Computes the <c>base-2</c> logarithm for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Log10(GenMathematics.Vectors.double3)">
            <summary>
            Computes the <c>base-10</c>) logarithm for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Log10(GenMathematics.Vectors.double3@,GenMathematics.Vectors.double3@)">
            <summary>
            Computes the <c>base-10</c>) logarithm for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Log(GenMathematics.Vectors.double3,GenMathematics.Vectors.double3)">
            <summary>
            Computes the logarithm of a value in the specified base for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Log(GenMathematics.Vectors.double3@,GenMathematics.Vectors.double3@,GenMathematics.Vectors.double3@)">
            <summary>
            Computes the logarithm of a value in the specified base for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Log(GenMathematics.Vectors.double3,System.Double)">
            <summary>
            Computes the logarithm of a value in the specified base for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Log(GenMathematics.Vectors.double3@,System.Double,GenMathematics.Vectors.double3@)">
            <summary>
            Computes the logarithm of a value in the specified base for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Sqrt(GenMathematics.Vectors.double3)">
            <summary>
            Computes the square-root for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Sqrt(GenMathematics.Vectors.double3@,GenMathematics.Vectors.double3@)">
            <summary>
            Computes the square-root for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.RSqrt(GenMathematics.Vectors.double3)">
            <summary>
            Computes the reciprocal square-root for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.RSqrt(GenMathematics.Vectors.double3@,GenMathematics.Vectors.double3@)">
            <summary>
            Computes the reciprocal square-root for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Cbrt(GenMathematics.Vectors.double3)">
            <summary>
            Computes the cube-root for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Cbrt(GenMathematics.Vectors.double3@,GenMathematics.Vectors.double3@)">
            <summary>
            Computes the cube-root for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Lerp(GenMathematics.Vectors.double3,GenMathematics.Vectors.double3,System.Double)">
            <summary>
            Linear interpolation between vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Lerp(GenMathematics.Vectors.double3@,GenMathematics.Vectors.double3@,System.Double,GenMathematics.Vectors.double3@)">
            <summary>
            Linear interpolation between vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.SLerp(GenMathematics.Vectors.double3,GenMathematics.Vectors.double3,System.Double)">
            <summary>
            Spherical linear interpolation between normals
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.SLerp(GenMathematics.Vectors.double3@,GenMathematics.Vectors.double3@,System.Double,GenMathematics.Vectors.double3@)">
            <summary>
            Spherical linear interpolation between normals
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Normalize(GenMathematics.Vectors.double3)">
            <summary>
            Normalizes the vector
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Normalize(GenMathematics.Vectors.double3@,GenMathematics.Vectors.double3@)">
            <summary>
            Normalizes the vector
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.NormalizeSafe(GenMathematics.Vectors.double3,GenMathematics.Vectors.double3)">
            <summary>
            Normalizes the vector. Returns the specified fallback if the operation fails.
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.NormalizeSafe(GenMathematics.Vectors.double3@,GenMathematics.Vectors.double3@,GenMathematics.Vectors.double3@)">
            <summary>
            Normalizes the vector. Returns the specified fallback if the operation fails.
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Project(GenMathematics.Vectors.double3,GenMathematics.Vectors.double3)">
            <summary>
            Projects a value onto a vector, returning a point on the vector
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Project(GenMathematics.Vectors.double3@,GenMathematics.Vectors.double3@,GenMathematics.Vectors.double3@)">
            <summary>
            Projects a value onto a vector, returning a point on the vector
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Project(GenMathematics.Vectors.double3,GenMathematics.Vectors.double3,GenMathematics.Vectors.double3)">
            <summary>
            Projects a value onto a line, returning a point on the line
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Project(GenMathematics.Vectors.double3@,GenMathematics.Vectors.double3@,GenMathematics.Vectors.double3@,GenMathematics.Vectors.double3@)">
            <summary>
            Projects a value onto a line, returning a point on the line
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.ScalarProject(GenMathematics.Vectors.double3,GenMathematics.Vectors.double3)">
            <summary>
            Projects a value onto a vector, returning a scalar of the vector's length
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.ScalarProjectRef(GenMathematics.Vectors.double3@,GenMathematics.Vectors.double3@)">
            <summary>
            Projects a value onto a vector, returning a scalar of the vector's length
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.ScalarProject(GenMathematics.Vectors.double3,GenMathematics.Vectors.double3,GenMathematics.Vectors.double3)">
            <summary>
            Projects a value onto a line, returning a direction scalar
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.ScalarProjectRef(GenMathematics.Vectors.double3@,GenMathematics.Vectors.double3@,GenMathematics.Vectors.double3@)">
            <summary>
            Projects a value onto a line, returning a direction scalar
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Intersect(GenMathematics.Vectors.double3,GenMathematics.Vectors.double3,GenMathematics.Vectors.double3,GenMathematics.Vectors.double3,System.Double@,System.Double@)">
            <summary>
            Calculates the closest point between lines, returning scalars of the lines' directions. Returns true if successful, and false if the lines are parallel.
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.IntersectRef(GenMathematics.Vectors.double3@,GenMathematics.Vectors.double3@,GenMathematics.Vectors.double3@,GenMathematics.Vectors.double3@,System.Double@,System.Double@)">
            <summary>
            Calculates the closest point between lines, returning scalars of the lines' directions. Returns true if successful, and false if the lines are parallel.
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.ClampLength(GenMathematics.Vectors.double3,System.Double,System.Double)">
            <summary>
            Limits the vector length between min and max
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.ClampLength(GenMathematics.Vectors.double3@,System.Double,System.Double,GenMathematics.Vectors.double3@)">
            <summary>
            Limits the vector length between min and max
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Reflect(GenMathematics.Vectors.double3,GenMathematics.Vectors.double3)">
            <summary>
            Returns the vector reflected from the plane with a given normal
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Reflect(GenMathematics.Vectors.double3@,GenMathematics.Vectors.double3@,GenMathematics.Vectors.double3@)">
            <summary>
            Returns the vector reflected from the plane with a given normal
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Refract(GenMathematics.Vectors.double3,GenMathematics.Vectors.double3,System.Double)">
            <summary>
            Returns a vector refracted by a plane surface with a given refraction index
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Refract(GenMathematics.Vectors.double3@,GenMathematics.Vectors.double3@,System.Double,GenMathematics.Vectors.double3@)">
            <summary>
            Returns a vector refracted by a plane surface with a given refraction index
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Abs(GenMathematics.Vectors.double3)">
            <summary>
            Computes the absolute for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Abs(GenMathematics.Vectors.double3@,GenMathematics.Vectors.double3@)">
            <summary>
            Computes the absolute for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Sign(GenMathematics.Vectors.double3)">
            <summary>
            Returns the sign of each component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Sign(GenMathematics.Vectors.double3@,GenMathematics.Vectors.int3@)">
            <summary>
            Returns the sign of each component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.BitSign(GenMathematics.Vectors.double3)">
            <summary>
            Sets a bit for a component if it is less than zero
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.BitSignRef(GenMathematics.Vectors.double3@)">
            <summary>
            Sets a bit for a component if it is less than zero
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.BoolSign(GenMathematics.Vectors.double3)">
            <summary>
            Returns true for a component if it is less than zero
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.BoolSignRef(GenMathematics.Vectors.double3@)">
            <summary>
            Returns true for a component if it is less than zero
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.LengthSq(GenMathematics.Vectors.double4)">
            <summary>
            Returns the square of the vector length
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.LengthSqRef(GenMathematics.Vectors.double4@)">
            <summary>
            Returns the square of the vector length
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Manhattan(GenMathematics.Vectors.double4)">
            <summary>
            Returns the Manhattan length of the vector
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.ManhattanRef(GenMathematics.Vectors.double4@)">
            <summary>
            Returns the Manhattan length of the vector
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Manhattan(GenMathematics.Vectors.double4,GenMathematics.Vectors.double4)">
            <summary>
            Returns the Manhattan distance between vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.ManhattanRef(GenMathematics.Vectors.double4@,GenMathematics.Vectors.double4@)">
            <summary>
            Returns the Manhattan distance between vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Dot(GenMathematics.Vectors.double4,GenMathematics.Vectors.double4)">
            <summary>
            Returns the scalar product of vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.DotRef(GenMathematics.Vectors.double4@,GenMathematics.Vectors.double4@)">
            <summary>
            Returns the scalar product of vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.DistanceSq(GenMathematics.Vectors.double4,GenMathematics.Vectors.double4)">
            <summary>
            Returns the square of the distance between vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.DistanceSqRef(GenMathematics.Vectors.double4@,GenMathematics.Vectors.double4@)">
            <summary>
            Returns the square of the distance between vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Square(GenMathematics.Vectors.double4)">
            <summary>
            Squares each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Square(GenMathematics.Vectors.double4@,GenMathematics.Vectors.double4@)">
            <summary>
            Squares each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.AbsDiff(GenMathematics.Vectors.double4,GenMathematics.Vectors.double4)">
            <summary>
            Calculates the absolute difference between the components of two vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.AbsDiff(GenMathematics.Vectors.double4@,GenMathematics.Vectors.double4@,GenMathematics.Vectors.double4@)">
            <summary>
            Calculates the absolute difference between the components of two vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Shift(GenMathematics.Vectors.double4,System.Int32)">
            <summary>
            Shifts components in a loop in a positive or negative direction
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Shift(GenMathematics.Vectors.double4,System.Int32,GenMathematics.Vectors.double4@)">
            <summary>
            Shifts components in a loop in a positive or negative direction
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Select(GenMathematics.Vectors.double4,GenMathematics.Vectors.double4,GenMathematics.Vectors.bool4)">
            <summary>
            Selects components from two vectors according to conditions
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Select(GenMathematics.Vectors.double4@,GenMathematics.Vectors.double4@,GenMathematics.Vectors.bool4,GenMathematics.Vectors.double4@)">
            <summary>
            Selects components from two vectors according to conditions
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Select(GenMathematics.Vectors.double4,GenMathematics.Vectors.double4,System.Boolean)">
            <summary>
            Selects components from two vectors according to condition
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Select(GenMathematics.Vectors.double4@,GenMathematics.Vectors.double4@,System.Boolean,GenMathematics.Vectors.double4@)">
            <summary>
            Selects components from two vectors according to condition
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CompressLeft(GenMathematics.Vectors.double4,GenMathematics.Vectors.bool4)">
            <summary>
            Leaves the components specified in the condition and shifts them to the left
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CompressLeft(GenMathematics.Vectors.double4@,GenMathematics.Vectors.bool4,GenMathematics.Vectors.double4@)">
            <summary>
            Leaves the components specified in the condition and shifts them to the left
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CompressLeft(GenMathematics.Vectors.double4,System.Int32)">
            <summary>
            Leaves the components specified in the mask and shifts them to the left
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CompressLeft(GenMathematics.Vectors.double4@,System.Int32,GenMathematics.Vectors.double4@)">
            <summary>
            Leaves the components specified in the mask and shifts them to the left
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CompressRight(GenMathematics.Vectors.double4,GenMathematics.Vectors.bool4)">
            <summary>
            Leaves the components specified in the condition and shifts them to the right
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CompressRight(GenMathematics.Vectors.double4@,GenMathematics.Vectors.bool4,GenMathematics.Vectors.double4@)">
            <summary>
            Leaves the components specified in the condition and shifts them to the right
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CompressRight(GenMathematics.Vectors.double4,System.Int32)">
            <summary>
            Leaves the components specified in the mask and shifts them to the right
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.CompressRight(GenMathematics.Vectors.double4@,System.Int32,GenMathematics.Vectors.double4@)">
            <summary>
            Leaves the components specified in the mask and shifts them to the right
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.UnionMin(GenMathematics.Vectors.double4)">
            <summary>
            Returns the minimum vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.UnionMinRef(GenMathematics.Vectors.double4@)">
            <summary>
            Returns the minimum vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.UnionMax(GenMathematics.Vectors.double4)">
            <summary>
            Returns the maximum vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.UnionMaxRef(GenMathematics.Vectors.double4@)">
            <summary>
            Returns the maximum vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.UnionSum(GenMathematics.Vectors.double4)">
            <summary>
            Returns the sum of the vector components
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.UnionSumRef(GenMathematics.Vectors.double4@)">
            <summary>
            Returns the sum of the vector components
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Min(GenMathematics.Vectors.double4,GenMathematics.Vectors.double4)">
            <summary>
            Computes the smallest value of two for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Min(GenMathematics.Vectors.double4@,GenMathematics.Vectors.double4@,GenMathematics.Vectors.double4@)">
            <summary>
            Computes the smallest value of two for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Max(GenMathematics.Vectors.double4,GenMathematics.Vectors.double4)">
            <summary>
            Computes the largest value of two for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Max(GenMathematics.Vectors.double4@,GenMathematics.Vectors.double4@,GenMathematics.Vectors.double4@)">
            <summary>
            Computes the largest value of two for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Clamp(GenMathematics.Vectors.double4,GenMathematics.Vectors.double4,GenMathematics.Vectors.double4)">
            <summary>
            Clamps each vector component between min and max
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Clamp(GenMathematics.Vectors.double4@,GenMathematics.Vectors.double4@,GenMathematics.Vectors.double4@,GenMathematics.Vectors.double4@)">
            <summary>
            Clamps each vector component between min and max
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Clamp(GenMathematics.Vectors.double4,System.Double,System.Double)">
            <summary>
            Clamps each vector component between min and max
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Clamp(GenMathematics.Vectors.double4@,System.Double,System.Double,GenMathematics.Vectors.double4@)">
            <summary>
            Clamps each vector component between min and max
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.IsZero(GenMathematics.Vectors.double4)">
            <summary>
            Returns true if all components are zero
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.IsZeroRef(GenMathematics.Vectors.double4@)">
            <summary>
            Returns true if all components are zero
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.AnyZero(GenMathematics.Vectors.double4)">
            <summary>
            Returns true if at least one of the components is zero
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.AnyZeroRef(GenMathematics.Vectors.double4@)">
            <summary>
            Returns true if at least one of the components is zero
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Length(GenMathematics.Vectors.double4)">
            <summary>
            Returns the vector length
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.LengthRef(GenMathematics.Vectors.double4@)">
            <summary>
            Returns the vector length
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Distance(GenMathematics.Vectors.double4,GenMathematics.Vectors.double4)">
            <summary>
            Returns the distance between vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.DistanceRef(GenMathematics.Vectors.double4@,GenMathematics.Vectors.double4@)">
            <summary>
            Returns the distance between vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Angle(GenMathematics.Vectors.double4,GenMathematics.Vectors.double4)">
            <summary>
            Returns the unsigned angle between normals
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.AngleRef(GenMathematics.Vectors.double4@,GenMathematics.Vectors.double4@)">
            <summary>
            Returns the unsigned angle between normals
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.AngleNorm(GenMathematics.Vectors.double4,GenMathematics.Vectors.double4)">
            <summary>
            Returns the unsigned angle between vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.AngleNormRef(GenMathematics.Vectors.double4@,GenMathematics.Vectors.double4@)">
            <summary>
            Returns the unsigned angle between vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Floor(GenMathematics.Vectors.double4)">
            <summary>
            Computes the floor for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Floor(GenMathematics.Vectors.double4@,GenMathematics.Vectors.double4@)">
            <summary>
            Computes the floor for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Ceil(GenMathematics.Vectors.double4)">
            <summary>
            Computes the ceiling for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Ceil(GenMathematics.Vectors.double4@,GenMathematics.Vectors.double4@)">
            <summary>
            Computes the ceiling for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Round(GenMathematics.Vectors.double4)">
            <summary>
            Rounds each vector component to the nearest integer
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Round(GenMathematics.Vectors.double4@,GenMathematics.Vectors.double4@)">
            <summary>
            Rounds each vector component to the nearest integer
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Tan(GenMathematics.Vectors.double4)">
            <summary>
            Computes the tangent for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Tan(GenMathematics.Vectors.double4@,GenMathematics.Vectors.double4@)">
            <summary>
            Computes the tangent for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Tanh(GenMathematics.Vectors.double4)">
            <summary>
            Computes the hyperbolic tangent for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Tanh(GenMathematics.Vectors.double4@,GenMathematics.Vectors.double4@)">
            <summary>
            Computes the hyperbolic tangent for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Atan(GenMathematics.Vectors.double4)">
            <summary>
            Computes the arc-tangent for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Atan(GenMathematics.Vectors.double4@,GenMathematics.Vectors.double4@)">
            <summary>
            Computes the arc-tangent for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Atanh(GenMathematics.Vectors.double4)">
            <summary>
            Computes the hyperbolic arc-tangent for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Atanh(GenMathematics.Vectors.double4@,GenMathematics.Vectors.double4@)">
            <summary>
            Computes the hyperbolic arc-tangent for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Atan2(GenMathematics.Vectors.double4,GenMathematics.Vectors.double4)">
            <summary>
            Computes the arc-tangent for the quotient of two vectors for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Atan2(GenMathematics.Vectors.double4@,GenMathematics.Vectors.double4@,GenMathematics.Vectors.double4@)">
            <summary>
            Computes the arc-tangent for the quotient of two vectors for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Sin(GenMathematics.Vectors.double4)">
            <summary>
            Computes the sine for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Sin(GenMathematics.Vectors.double4@,GenMathematics.Vectors.double4@)">
            <summary>
            Computes the sine for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Sinh(GenMathematics.Vectors.double4)">
            <summary>
            Computes the hyperbolic sine for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Sinh(GenMathematics.Vectors.double4@,GenMathematics.Vectors.double4@)">
            <summary>
            Computes the hyperbolic sine for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Asin(GenMathematics.Vectors.double4)">
            <summary>
            Computes the arc-sine for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Asin(GenMathematics.Vectors.double4@,GenMathematics.Vectors.double4@)">
            <summary>
            Computes the arc-sine for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Asinh(GenMathematics.Vectors.double4)">
            <summary>
            Computes the hyperbolic arc-sine for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Asinh(GenMathematics.Vectors.double4@,GenMathematics.Vectors.double4@)">
            <summary>
            Computes the hyperbolic arc-sine for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Cos(GenMathematics.Vectors.double4)">
            <summary>
            Computes the cosine for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Cos(GenMathematics.Vectors.double4@,GenMathematics.Vectors.double4@)">
            <summary>
            Computes the cosine for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Cosh(GenMathematics.Vectors.double4)">
            <summary>
            Computes the hyperbolic cosine for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Cosh(GenMathematics.Vectors.double4@,GenMathematics.Vectors.double4@)">
            <summary>
            Computes the hyperbolic cosine for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Acos(GenMathematics.Vectors.double4)">
            <summary>
            Computes the arc-cosine for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Acos(GenMathematics.Vectors.double4@,GenMathematics.Vectors.double4@)">
            <summary>
            Computes the arc-cosine for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Acosh(GenMathematics.Vectors.double4)">
            <summary>
            Computes the hyperbolic arc-cosine for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Acosh(GenMathematics.Vectors.double4@,GenMathematics.Vectors.double4@)">
            <summary>
            Computes the hyperbolic arc-cosine for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Truncate(GenMathematics.Vectors.double4)">
            <summary>
            Truncates each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Truncate(GenMathematics.Vectors.double4@,GenMathematics.Vectors.double4@)">
            <summary>
            Truncates each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Frac(GenMathematics.Vectors.double4)">
            <summary>
            Computes the fractional part for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Frac(GenMathematics.Vectors.double4@,GenMathematics.Vectors.double4@)">
            <summary>
            Computes the fractional part for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Reciprocal(GenMathematics.Vectors.double4)">
            <summary>
            Computes the reciprocal for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Reciprocal(GenMathematics.Vectors.double4@,GenMathematics.Vectors.double4@)">
            <summary>
            Computes the reciprocal for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Pow(GenMathematics.Vectors.double4,GenMathematics.Vectors.double4)">
            <summary>
            Raises each vector component to a given power
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Pow(GenMathematics.Vectors.double4@,GenMathematics.Vectors.double4@,GenMathematics.Vectors.double4@)">
            <summary>
            Raises each vector component to a given power
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Pow(GenMathematics.Vectors.double4,System.Double)">
            <summary>
            Raises each vector component to a given power
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Pow(GenMathematics.Vectors.double4@,System.Double,GenMathematics.Vectors.double4@)">
            <summary>
            Raises each vector component to a given power
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Exp(GenMathematics.Vectors.double4)">
            <summary>
            Raises E to a given power
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Exp(GenMathematics.Vectors.double4@,GenMathematics.Vectors.double4@)">
            <summary>
            Raises E to a given power
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Log(GenMathematics.Vectors.double4)">
            <summary>
            Computes the natural (<c>base-E</c>) logarithm for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Log(GenMathematics.Vectors.double4@,GenMathematics.Vectors.double4@)">
            <summary>
            Computes the natural (<c>base-E</c>) logarithm for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Log2(GenMathematics.Vectors.double4)">
            <summary>
            Computes the <c>base-2</c> logarithm for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Log2(GenMathematics.Vectors.double4@,GenMathematics.Vectors.double4@)">
            <summary>
            Computes the <c>base-2</c> logarithm for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Log10(GenMathematics.Vectors.double4)">
            <summary>
            Computes the <c>base-10</c>) logarithm for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Log10(GenMathematics.Vectors.double4@,GenMathematics.Vectors.double4@)">
            <summary>
            Computes the <c>base-10</c>) logarithm for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Log(GenMathematics.Vectors.double4,GenMathematics.Vectors.double4)">
            <summary>
            Computes the logarithm of a value in the specified base for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Log(GenMathematics.Vectors.double4@,GenMathematics.Vectors.double4@,GenMathematics.Vectors.double4@)">
            <summary>
            Computes the logarithm of a value in the specified base for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Log(GenMathematics.Vectors.double4,System.Double)">
            <summary>
            Computes the logarithm of a value in the specified base for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Log(GenMathematics.Vectors.double4@,System.Double,GenMathematics.Vectors.double4@)">
            <summary>
            Computes the logarithm of a value in the specified base for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Sqrt(GenMathematics.Vectors.double4)">
            <summary>
            Computes the square-root for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Sqrt(GenMathematics.Vectors.double4@,GenMathematics.Vectors.double4@)">
            <summary>
            Computes the square-root for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.RSqrt(GenMathematics.Vectors.double4)">
            <summary>
            Computes the reciprocal square-root for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.RSqrt(GenMathematics.Vectors.double4@,GenMathematics.Vectors.double4@)">
            <summary>
            Computes the reciprocal square-root for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Cbrt(GenMathematics.Vectors.double4)">
            <summary>
            Computes the cube-root for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Cbrt(GenMathematics.Vectors.double4@,GenMathematics.Vectors.double4@)">
            <summary>
            Computes the cube-root for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Lerp(GenMathematics.Vectors.double4,GenMathematics.Vectors.double4,System.Double)">
            <summary>
            Linear interpolation between vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Lerp(GenMathematics.Vectors.double4@,GenMathematics.Vectors.double4@,System.Double,GenMathematics.Vectors.double4@)">
            <summary>
            Linear interpolation between vectors
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.SLerp(GenMathematics.Vectors.double4,GenMathematics.Vectors.double4,System.Double)">
            <summary>
            Spherical linear interpolation between normals
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.SLerp(GenMathematics.Vectors.double4@,GenMathematics.Vectors.double4@,System.Double,GenMathematics.Vectors.double4@)">
            <summary>
            Spherical linear interpolation between normals
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Normalize(GenMathematics.Vectors.double4)">
            <summary>
            Normalizes the vector
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Normalize(GenMathematics.Vectors.double4@,GenMathematics.Vectors.double4@)">
            <summary>
            Normalizes the vector
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.NormalizeSafe(GenMathematics.Vectors.double4,GenMathematics.Vectors.double4)">
            <summary>
            Normalizes the vector. Returns the specified fallback if the operation fails.
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.NormalizeSafe(GenMathematics.Vectors.double4@,GenMathematics.Vectors.double4@,GenMathematics.Vectors.double4@)">
            <summary>
            Normalizes the vector. Returns the specified fallback if the operation fails.
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Project(GenMathematics.Vectors.double4,GenMathematics.Vectors.double4)">
            <summary>
            Projects a value onto a vector, returning a point on the vector
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Project(GenMathematics.Vectors.double4@,GenMathematics.Vectors.double4@,GenMathematics.Vectors.double4@)">
            <summary>
            Projects a value onto a vector, returning a point on the vector
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Project(GenMathematics.Vectors.double4,GenMathematics.Vectors.double4,GenMathematics.Vectors.double4)">
            <summary>
            Projects a value onto a line, returning a point on the line
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Project(GenMathematics.Vectors.double4@,GenMathematics.Vectors.double4@,GenMathematics.Vectors.double4@,GenMathematics.Vectors.double4@)">
            <summary>
            Projects a value onto a line, returning a point on the line
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.ScalarProject(GenMathematics.Vectors.double4,GenMathematics.Vectors.double4)">
            <summary>
            Projects a value onto a vector, returning a scalar of the vector's length
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.ScalarProjectRef(GenMathematics.Vectors.double4@,GenMathematics.Vectors.double4@)">
            <summary>
            Projects a value onto a vector, returning a scalar of the vector's length
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.ScalarProject(GenMathematics.Vectors.double4,GenMathematics.Vectors.double4,GenMathematics.Vectors.double4)">
            <summary>
            Projects a value onto a line, returning a direction scalar
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.ScalarProjectRef(GenMathematics.Vectors.double4@,GenMathematics.Vectors.double4@,GenMathematics.Vectors.double4@)">
            <summary>
            Projects a value onto a line, returning a direction scalar
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Intersect(GenMathematics.Vectors.double4,GenMathematics.Vectors.double4,GenMathematics.Vectors.double4,GenMathematics.Vectors.double4,System.Double@,System.Double@)">
            <summary>
            Calculates the closest point between lines, returning scalars of the lines' directions. Returns true if successful, and false if the lines are parallel.
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.IntersectRef(GenMathematics.Vectors.double4@,GenMathematics.Vectors.double4@,GenMathematics.Vectors.double4@,GenMathematics.Vectors.double4@,System.Double@,System.Double@)">
            <summary>
            Calculates the closest point between lines, returning scalars of the lines' directions. Returns true if successful, and false if the lines are parallel.
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.ClampLength(GenMathematics.Vectors.double4,System.Double,System.Double)">
            <summary>
            Limits the vector length between min and max
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.ClampLength(GenMathematics.Vectors.double4@,System.Double,System.Double,GenMathematics.Vectors.double4@)">
            <summary>
            Limits the vector length between min and max
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Reflect(GenMathematics.Vectors.double4,GenMathematics.Vectors.double4)">
            <summary>
            Returns the vector reflected from the plane with a given normal
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Reflect(GenMathematics.Vectors.double4@,GenMathematics.Vectors.double4@,GenMathematics.Vectors.double4@)">
            <summary>
            Returns the vector reflected from the plane with a given normal
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Refract(GenMathematics.Vectors.double4,GenMathematics.Vectors.double4,System.Double)">
            <summary>
            Returns a vector refracted by a plane surface with a given refraction index
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Refract(GenMathematics.Vectors.double4@,GenMathematics.Vectors.double4@,System.Double,GenMathematics.Vectors.double4@)">
            <summary>
            Returns a vector refracted by a plane surface with a given refraction index
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Abs(GenMathematics.Vectors.double4)">
            <summary>
            Computes the absolute for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Abs(GenMathematics.Vectors.double4@,GenMathematics.Vectors.double4@)">
            <summary>
            Computes the absolute for each vector component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Sign(GenMathematics.Vectors.double4)">
            <summary>
            Returns the sign of each component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Sign(GenMathematics.Vectors.double4@,GenMathematics.Vectors.int4@)">
            <summary>
            Returns the sign of each component
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.BitSign(GenMathematics.Vectors.double4)">
            <summary>
            Sets a bit for a component if it is less than zero
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.BitSignRef(GenMathematics.Vectors.double4@)">
            <summary>
            Sets a bit for a component if it is less than zero
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.BoolSign(GenMathematics.Vectors.double4)">
            <summary>
            Returns true for a component if it is less than zero
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.BoolSignRef(GenMathematics.Vectors.double4@)">
            <summary>
            Returns true for a component if it is less than zero
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Swap``1(``0@,``0@)">
            <summary>
            Swaps two values
            </summary>
        </member>
        <member name="M:GenMathematics.GenMath.Invert(GenMathematics.Matrices.float4x4@,GenMathematics.Matrices.float4x4@)">
            <summary>
            Inverts a matrix
            </summary>
        </member>
        <member name="T:GenMathematics.QuaternionMath">
            <summary>
            Provides operations for working with quaternions
            </summary>
        </member>
        <member name="M:GenMathematics.QuaternionMath.FromAxisAngle(GenMathematics.Vectors.half3,System.Half)">
            <summary>
            Creates a quaternion from an axis angle representation of rotation
            </summary>
            <param name="axis">Rotation axis</param>
            <param name="angle">Rotation angle in radians</param>
            <returns>The result of the operation</returns>
        </member>
        <member name="M:GenMathematics.QuaternionMath.FromAxisAngle(GenMathematics.Vectors.half4)">
            <summary>
            Creates a quaternion from an axis angle representation of rotation
            </summary>
            <param name="axisAngle">The 'xyz' components represent the axis and the 'w' component represents the rotation angle</param>
            <returns>The result of the operation</returns>
        </member>
        <member name="M:GenMathematics.QuaternionMath.ToAxisAngle(GenMathematics.Vectors.half4)">
            <summary>
            Converts a quaternion to an axis angle representation of rotation
            </summary>
            <param name="quaternion">Normalized quaternion</param>
            <returns>The 'xyz' components represent the axis and the 'w' component represents the rotation angle</returns>
        </member>
        <member name="M:GenMathematics.QuaternionMath.ToAxisAngle(GenMathematics.Vectors.half4,GenMathematics.Vectors.half3@,System.Half@)">
            <summary>
            Converts a quaternion to an axis angle representation of rotation
            </summary>
            <param name="quaternion">Normalized quaternion</param>
            <param name="axis">Rotation axis</param>
            <param name="angle">Rotation angle in radians</param>
        </member>
        <member name="M:GenMathematics.QuaternionMath.FromMatrixRef(GenMathematics.Matrices.half3x3@)">
            <summary>
            Creates a quaternion from the rotation matrix
            </summary>
            <param name="matrix">A rotation matrix (without scale)</param>
            <returns>The result of the operation</returns>
        </member>
        <member name="M:GenMathematics.QuaternionMath.FromMatrix(GenMathematics.Matrices.half3x3)">
            <summary>
            Creates a quaternion from the rotation matrix
            </summary>
            <param name="matrix">A rotation matrix (without scale)</param>
            <returns>The result of the operation</returns>
        </member>
        <member name="M:GenMathematics.QuaternionMath.FromMatrixRef(GenMathematics.Matrices.half3x4@)">
            <summary>
            Creates a quaternion from the rotation matrix
            </summary>
            <param name="matrix">A rotation matrix (without scale)</param>
            <returns>The result of the operation</returns>
        </member>
        <member name="M:GenMathematics.QuaternionMath.FromMatrix(GenMathematics.Matrices.half3x4)">
            <summary>
            Creates a quaternion from the rotation matrix
            </summary>
            <param name="matrix">A rotation matrix (without scale)</param>
            <returns>The result of the operation</returns>
        </member>
        <member name="M:GenMathematics.QuaternionMath.FromMatrixRef(GenMathematics.Matrices.half4x3@)">
            <summary>
            Creates a quaternion from the rotation matrix
            </summary>
            <param name="matrix">A rotation matrix (without scale)</param>
            <returns>The result of the operation</returns>
        </member>
        <member name="M:GenMathematics.QuaternionMath.FromMatrix(GenMathematics.Matrices.half4x3)">
            <summary>
            Creates a quaternion from the rotation matrix
            </summary>
            <param name="matrix">A rotation matrix (without scale)</param>
            <returns>The result of the operation</returns>
        </member>
        <member name="M:GenMathematics.QuaternionMath.FromMatrixRef(GenMathematics.Matrices.half4x4@)">
            <summary>
            Creates a quaternion from the rotation matrix
            </summary>
            <param name="matrix">A rotation matrix (without scale)</param>
            <returns>The result of the operation</returns>
        </member>
        <member name="M:GenMathematics.QuaternionMath.FromMatrix(GenMathematics.Matrices.half4x4)">
            <summary>
            Creates a quaternion from the rotation matrix
            </summary>
            <param name="matrix">A rotation matrix (without scale)</param>
            <returns>The result of the operation</returns>
        </member>
        <member name="M:GenMathematics.QuaternionMath.FromDirection(GenMathematics.Vectors.half3,GenMathematics.Vectors.half3)">
            <summary>
            Creates a rotation quaternion in the direction
            </summary>
            <param name="direction">Normalized direction vector</param>
            <param name="up">Normalized up vector</param>
            <returns>The result of the operation</returns>
        </member>
        <member name="M:GenMathematics.QuaternionMath.FromDirectionSafe(GenMathematics.Vectors.half3,GenMathematics.Vectors.half3)">
            <summary>
            Creates a rotation quaternion in the direction
            </summary>
            <param name="direction">Normalized direction vector</param>
            <param name="up">Normalized up vector</param>
            <returns>The result of the operation</returns>
        </member>
        <member name="M:GenMathematics.QuaternionMath.FromTo(GenMathematics.Vectors.half3,GenMathematics.Vectors.half3)">
            <summary>
            Creates a rotation quaternion from one direction to another
            </summary>
            <param name="from">Normalized direction vector from which the rotation is performed</param>
            <param name="to">Normalized vector in the direction of which the rotation is performed</param>
            <returns>The result of the operation</returns>
        </member>
        <member name="M:GenMathematics.QuaternionMath.FromEuler(GenMathematics.Vectors.half3)">
            <summary>
            Converts Euler angles to quaternion. The rotations will get applied in following order: 1. X axis, 2. Y axis, 3. Z axis.
            </summary>
            <param name="eulerAngles">Euler angles in radians: pitch (X axis), yaw (Y axis), roll (Z axis)</param>
            <returns>The result of the operation</returns>
        </member>
        <member name="M:GenMathematics.QuaternionMath.ToEuler(GenMathematics.Vectors.half4)">
            <summary>
            Converts quaternion to Euler angles
            </summary>
            <param name="quaternion">Quaternion to convert to Euler angles</param>
            <returns>Euler angles in radians: pitch (X axis), yaw (Y axis), roll (Z axis)</returns>
        </member>
        <member name="M:GenMathematics.QuaternionMath.Conjugate(GenMathematics.Vectors.half4)">
            <summary>
            Conjugates a quaternion
            </summary>
            <param name="value">Quaternion to conjugate</param>
            <returns>The result of the operation</returns>
        </member>
        <member name="M:GenMathematics.QuaternionMath.Invert(GenMathematics.Vectors.half4)">
            <summary>
            Conjugates and normalizes a quaternion
            </summary>
            <param name="value">Quaternion to invert</param>
            <returns>The result of the operation</returns>
        </member>
        <member name="M:GenMathematics.QuaternionMath.SLerp(GenMathematics.Vectors.half4,GenMathematics.Vectors.half4,System.Half)">
            <summary>
            Performs spherical interpolation
            </summary>
            <param name="from">Normalized quaternion</param>
            <param name="to">Normalized quaternion</param>
            <param name="t">The blend factor</param>
            <returns>The result of the operation</returns>
        </member>
        <member name="M:GenMathematics.QuaternionMath.Multiply(GenMathematics.Vectors.half4,GenMathematics.Vectors.half4)">
            <summary>
            Rotates quaternion <paramref name="second"/> by quaternion <paramref name="first"/>
            </summary>
            <param name="first">Quaternion to rotate the second by</param>
            <param name="second">Quaternion to transform</param>
            <returns>The result of the operation</returns>
        </member>
        <member name="M:GenMathematics.QuaternionMath.Transform(GenMathematics.Vectors.half4,GenMathematics.Vectors.half3)">
            <summary>
            Rotates vector <paramref name="value"/> by quaternion <paramref name="quaternion"/>
            </summary>
            <param name="quaternion">Normalized quaternion to rotate a vector by</param>
            <param name="value">Vector to transform</param>
            <returns>The result of the operation</returns>
        </member>
        <member name="M:GenMathematics.QuaternionMath.Transform(GenMathematics.Vectors.half4,GenMathematics.Vectors.half4)">
            <summary>
            Rotates vector <paramref name="value"/> by quaternion <paramref name="quaternion"/>
            </summary>
            <param name="quaternion">Normalized quaternion to rotate a vector by</param>
            <param name="value">Vector to transform</param>
            <returns>The result of the operation</returns>
        </member>
        <member name="M:GenMathematics.QuaternionMath.SetRotation(GenMathematics.Vectors.half4,GenMathematics.Matrices.half3x3@)">
            <summary>
            Inserts a 3x3 rotation matrix
            </summary>
            <param name="rotation">Normalized quaternion</param>
            <param name="matrix">The result of the operation</param>
        </member>
        <member name="M:GenMathematics.QuaternionMath.SetRotationScale(GenMathematics.Vectors.half4,System.Half,GenMathematics.Matrices.half3x3@)">
            <summary>
            Inserts a 3x3 rotation and scale matrix
            </summary>
            <param name="rotation">Normalized quaternion</param>
            <param name="scale">Scale applied to matrix</param>
            <param name="matrix">The result of the operation</param>
        </member>
        <member name="M:GenMathematics.QuaternionMath.SetRotationScale(GenMathematics.Vectors.half4,GenMathematics.Vectors.half3,GenMathematics.Matrices.half3x3@)">
            <summary>
            Inserts a 3x3 rotation and scale matrix
            </summary>
            <param name="rotation">Normalized quaternion</param>
            <param name="scale">Scale applied to matrix</param>
            <param name="matrix">The result of the operation</param>
        </member>
        <member name="M:GenMathematics.QuaternionMath.DecomposeMatrix(GenMathematics.Matrices.half3x3@,GenMathematics.Vectors.half4@,GenMathematics.Vectors.half3@)">
            <summary>
            Decomposes a transformation matrix into its components
            </summary>
            <param name="matrix">Transformation matrix</param>
            <param name="rotation">Normalized quaternion, the rotation part of the matrix</param>
            <param name="scale">The scale part of the matrix</param>
        </member>
        <member name="M:GenMathematics.QuaternionMath.SetRotation(GenMathematics.Vectors.half4,GenMathematics.Matrices.half3x4@)">
            <summary>
            Inserts a 3x3 rotation matrix without changing other values
            </summary>
            <param name="rotation">Normalized quaternion</param>
            <param name="matrix">The result of the operation</param>
        </member>
        <member name="M:GenMathematics.QuaternionMath.SetRotationScale(GenMathematics.Vectors.half4,System.Half,GenMathematics.Matrices.half3x4@)">
            <summary>
            Inserts a 3x3 rotation and scale matrix without changing other values
            </summary>
            <param name="rotation">Normalized quaternion</param>
            <param name="scale">Scale applied to matrix</param>
            <param name="matrix">The result of the operation</param>
        </member>
        <member name="M:GenMathematics.QuaternionMath.SetRotationScale(GenMathematics.Vectors.half4,GenMathematics.Vectors.half3,GenMathematics.Matrices.half3x4@)">
            <summary>
            Inserts a 3x3 rotation and scale matrix without changing other values
            </summary>
            <param name="rotation">Normalized quaternion</param>
            <param name="scale">Scale applied to matrix</param>
            <param name="matrix">The result of the operation</param>
        </member>
        <member name="M:GenMathematics.QuaternionMath.DecomposeMatrix(GenMathematics.Matrices.half3x4@,GenMathematics.Vectors.half4@,GenMathematics.Vectors.half3@,GenMathematics.Vectors.half3@)">
            <summary>
            Decomposes a transformation matrix into its components
            </summary>
            <param name="matrix">Transformation matrix</param>
            <param name="rotation">Normalized quaternion, the rotation part of the matrix</param>
            <param name="scale">The scale part of the matrix</param>
            <param name="translation">The translation part of the matrix</param>
        </member>
        <member name="M:GenMathematics.QuaternionMath.SetRotation(GenMathematics.Vectors.half4,GenMathematics.Matrices.half4x3@)">
            <summary>
            Inserts a 3x3 rotation matrix without changing other values
            </summary>
            <param name="rotation">Normalized quaternion</param>
            <param name="matrix">The result of the operation</param>
        </member>
        <member name="M:GenMathematics.QuaternionMath.SetRotationScale(GenMathematics.Vectors.half4,System.Half,GenMathematics.Matrices.half4x3@)">
            <summary>
            Inserts a 3x3 rotation and scale matrix without changing other values
            </summary>
            <param name="rotation">Normalized quaternion</param>
            <param name="scale">Scale applied to matrix</param>
            <param name="matrix">The result of the operation</param>
        </member>
        <member name="M:GenMathematics.QuaternionMath.SetRotationScale(GenMathematics.Vectors.half4,GenMathematics.Vectors.half3,GenMathematics.Matrices.half4x3@)">
            <summary>
            Inserts a 3x3 rotation and scale matrix without changing other values
            </summary>
            <param name="rotation">Normalized quaternion</param>
            <param name="scale">Scale applied to matrix</param>
            <param name="matrix">The result of the operation</param>
        </member>
        <member name="M:GenMathematics.QuaternionMath.DecomposeMatrix(GenMathematics.Matrices.half4x3@,GenMathematics.Vectors.half4@,GenMathematics.Vectors.half3@)">
            <summary>
            Decomposes a transformation matrix into its components
            </summary>
            <param name="matrix">Transformation matrix</param>
            <param name="rotation">Normalized quaternion, the rotation part of the matrix</param>
            <param name="scale">The scale part of the matrix</param>
        </member>
        <member name="M:GenMathematics.QuaternionMath.SetRotation(GenMathematics.Vectors.half4,GenMathematics.Matrices.half4x4@)">
            <summary>
            Inserts a 3x3 rotation matrix without changing other values
            </summary>
            <param name="rotation">Normalized quaternion</param>
            <param name="matrix">The result of the operation</param>
        </member>
        <member name="M:GenMathematics.QuaternionMath.SetRotationScale(GenMathematics.Vectors.half4,System.Half,GenMathematics.Matrices.half4x4@)">
            <summary>
            Inserts a 3x3 rotation and scale matrix without changing other values
            </summary>
            <param name="rotation">Normalized quaternion</param>
            <param name="scale">Scale applied to matrix</param>
            <param name="matrix">The result of the operation</param>
        </member>
        <member name="M:GenMathematics.QuaternionMath.SetRotationScale(GenMathematics.Vectors.half4,GenMathematics.Vectors.half3,GenMathematics.Matrices.half4x4@)">
            <summary>
            Inserts a 3x3 rotation and scale matrix without changing other values
            </summary>
            <param name="rotation">Normalized quaternion</param>
            <param name="scale">Scale applied to matrix</param>
            <param name="matrix">The result of the operation</param>
        </member>
        <member name="M:GenMathematics.QuaternionMath.DecomposeMatrix(GenMathematics.Matrices.half4x4@,GenMathematics.Vectors.half4@,GenMathematics.Vectors.half3@,GenMathematics.Vectors.half3@)">
            <summary>
            Decomposes a transformation matrix into its components
            </summary>
            <param name="matrix">Transformation matrix</param>
            <param name="rotation">Normalized quaternion, the rotation part of the matrix</param>
            <param name="scale">The scale part of the matrix</param>
            <param name="translation">The translation part of the matrix</param>
        </member>
        <member name="M:GenMathematics.QuaternionMath.FromAxisAngle(GenMathematics.Vectors.float3,System.Single)">
            <summary>
            Creates a quaternion from an axis angle representation of rotation
            </summary>
            <param name="axis">Rotation axis</param>
            <param name="angle">Rotation angle in radians</param>
            <returns>The result of the operation</returns>
        </member>
        <member name="M:GenMathematics.QuaternionMath.FromAxisAngle(GenMathematics.Vectors.float4)">
            <summary>
            Creates a quaternion from an axis angle representation of rotation
            </summary>
            <param name="axisAngle">The 'xyz' components represent the axis and the 'w' component represents the rotation angle</param>
            <returns>The result of the operation</returns>
        </member>
        <member name="M:GenMathematics.QuaternionMath.ToAxisAngle(GenMathematics.Vectors.float4)">
            <summary>
            Converts a quaternion to an axis angle representation of rotation
            </summary>
            <param name="quaternion">Normalized quaternion</param>
            <returns>The 'xyz' components represent the axis and the 'w' component represents the rotation angle</returns>
        </member>
        <member name="M:GenMathematics.QuaternionMath.ToAxisAngle(GenMathematics.Vectors.float4,GenMathematics.Vectors.float3@,System.Single@)">
            <summary>
            Converts a quaternion to an axis angle representation of rotation
            </summary>
            <param name="quaternion">Normalized quaternion</param>
            <param name="axis">Rotation axis</param>
            <param name="angle">Rotation angle in radians</param>
        </member>
        <member name="M:GenMathematics.QuaternionMath.FromMatrix(GenMathematics.Matrices.float3x3@,GenMathematics.Vectors.float4@)">
            <summary>
            Creates a quaternion from the rotation matrix
            </summary>
            <param name="matrix">A rotation matrix (without scale)</param>
            <param name="quaternion">The result of the operation</param>
        </member>
        <member name="M:GenMathematics.QuaternionMath.FromMatrix(GenMathematics.Matrices.float3x3)">
            <summary>
            Creates a quaternion from the rotation matrix
            </summary>
            <param name="matrix">A rotation matrix (without scale)</param>
            <returns>The result of the operation</returns>
        </member>
        <member name="M:GenMathematics.QuaternionMath.FromMatrix(GenMathematics.Matrices.float3x4@,GenMathematics.Vectors.float4@)">
            <summary>
            Creates a quaternion from the rotation matrix
            </summary>
            <param name="matrix">A rotation matrix (without scale)</param>
            <param name="quaternion">The result of the operation</param>
        </member>
        <member name="M:GenMathematics.QuaternionMath.FromMatrix(GenMathematics.Matrices.float3x4)">
            <summary>
            Creates a quaternion from the rotation matrix
            </summary>
            <param name="matrix">A rotation matrix (without scale)</param>
            <returns>The result of the operation</returns>
        </member>
        <member name="M:GenMathematics.QuaternionMath.FromMatrix(GenMathematics.Matrices.float4x3@,GenMathematics.Vectors.float4@)">
            <summary>
            Creates a quaternion from the rotation matrix
            </summary>
            <param name="matrix">A rotation matrix (without scale)</param>
            <param name="quaternion">The result of the operation</param>
        </member>
        <member name="M:GenMathematics.QuaternionMath.FromMatrix(GenMathematics.Matrices.float4x3)">
            <summary>
            Creates a quaternion from the rotation matrix
            </summary>
            <param name="matrix">A rotation matrix (without scale)</param>
            <returns>The result of the operation</returns>
        </member>
        <member name="M:GenMathematics.QuaternionMath.FromMatrix(GenMathematics.Matrices.float4x4@,GenMathematics.Vectors.float4@)">
            <summary>
            Creates a quaternion from the rotation matrix
            </summary>
            <param name="matrix">A rotation matrix (without scale)</param>
            <param name="quaternion">The result of the operation</param>
        </member>
        <member name="M:GenMathematics.QuaternionMath.FromMatrix(GenMathematics.Matrices.float4x4)">
            <summary>
            Creates a quaternion from the rotation matrix
            </summary>
            <param name="matrix">A rotation matrix (without scale)</param>
            <returns>The result of the operation</returns>
        </member>
        <member name="M:GenMathematics.QuaternionMath.FromDirection(GenMathematics.Vectors.float3,GenMathematics.Vectors.float3)">
            <summary>
            Creates a rotation quaternion in the direction
            </summary>
            <param name="direction">Normalized direction vector</param>
            <param name="up">Normalized up vector</param>
            <returns>The result of the operation</returns>
        </member>
        <member name="M:GenMathematics.QuaternionMath.FromDirectionSafe(GenMathematics.Vectors.float3,GenMathematics.Vectors.float3)">
            <summary>
            Creates a rotation quaternion in the direction
            </summary>
            <param name="direction">Normalized direction vector</param>
            <param name="up">Normalized up vector</param>
            <returns>The result of the operation</returns>
        </member>
        <member name="M:GenMathematics.QuaternionMath.FromTo(GenMathematics.Vectors.float3,GenMathematics.Vectors.float3)">
            <summary>
            Creates a rotation quaternion from one direction to another
            </summary>
            <param name="from">Normalized direction vector from which the rotation is performed</param>
            <param name="to">Normalized vector in the direction of which the rotation is performed</param>
            <returns>The result of the operation</returns>
        </member>
        <member name="M:GenMathematics.QuaternionMath.FromEuler(GenMathematics.Vectors.float3)">
            <summary>
            Converts Euler angles to quaternion. The rotations will get applied in following order: 1. X axis, 2. Y axis, 3. Z axis.
            </summary>
            <param name="eulerAngles">Euler angles in radians: pitch (X axis), yaw (Y axis), roll (Z axis)</param>
            <returns>The result of the operation</returns>
        </member>
        <member name="M:GenMathematics.QuaternionMath.ToEuler(GenMathematics.Vectors.float4)">
            <summary>
            Converts quaternion to Euler angles
            </summary>
            <param name="quaternion">Quaternion to convert to Euler angles</param>
            <returns>Euler angles in radians: pitch (X axis), yaw (Y axis), roll (Z axis)</returns>
        </member>
        <member name="M:GenMathematics.QuaternionMath.Conjugate(GenMathematics.Vectors.float4)">
            <summary>
            Conjugates a quaternion
            </summary>
            <param name="value">Quaternion to conjugate</param>
            <returns>The result of the operation</returns>
        </member>
        <member name="M:GenMathematics.QuaternionMath.Invert(GenMathematics.Vectors.float4)">
            <summary>
            Conjugates and normalizes a quaternion
            </summary>
            <param name="value">Quaternion to invert</param>
            <returns>The result of the operation</returns>
        </member>
        <member name="M:GenMathematics.QuaternionMath.SLerp(GenMathematics.Vectors.float4,GenMathematics.Vectors.float4,System.Single)">
            <summary>
            Performs spherical interpolation
            </summary>
            <param name="from">Normalized quaternion</param>
            <param name="to">Normalized quaternion</param>
            <param name="t">The blend factor</param>
            <returns>The result of the operation</returns>
        </member>
        <member name="M:GenMathematics.QuaternionMath.Multiply(GenMathematics.Vectors.float4,GenMathematics.Vectors.float4)">
            <summary>
            Rotates quaternion <paramref name="second"/> by quaternion <paramref name="first"/>
            </summary>
            <param name="first">Quaternion to rotate the second by</param>
            <param name="second">Quaternion to transform</param>
            <returns>The result of the operation</returns>
        </member>
        <member name="M:GenMathematics.QuaternionMath.Transform(GenMathematics.Vectors.float4,GenMathematics.Vectors.float3)">
            <summary>
            Rotates vector <paramref name="value"/> by quaternion <paramref name="quaternion"/>
            </summary>
            <param name="quaternion">Normalized quaternion to rotate a vector by</param>
            <param name="value">Vector to transform</param>
            <returns>The result of the operation</returns>
        </member>
        <member name="M:GenMathematics.QuaternionMath.Transform(GenMathematics.Vectors.float4,GenMathematics.Vectors.float4)">
            <summary>
            Rotates vector <paramref name="value"/> by quaternion <paramref name="quaternion"/>
            </summary>
            <param name="quaternion">Normalized quaternion to rotate a vector by</param>
            <param name="value">Vector to transform</param>
            <returns>The result of the operation</returns>
        </member>
        <member name="M:GenMathematics.QuaternionMath.SetRotation(GenMathematics.Vectors.float4@,GenMathematics.Matrices.float3x3@)">
            <summary>
            Inserts a 3x3 rotation matrix
            </summary>
            <param name="rotation">Normalized quaternion</param>
            <param name="matrix">The result of the operation</param>
        </member>
        <member name="M:GenMathematics.QuaternionMath.SetRotationScale(GenMathematics.Vectors.float4@,System.Single,GenMathematics.Matrices.float3x3@)">
            <summary>
            Inserts a 3x3 rotation and scale matrix
            </summary>
            <param name="rotation">Normalized quaternion</param>
            <param name="scale">Scale applied to matrix</param>
            <param name="matrix">The result of the operation</param>
        </member>
        <member name="M:GenMathematics.QuaternionMath.SetRotationScale(GenMathematics.Vectors.float4@,GenMathematics.Vectors.float3@,GenMathematics.Matrices.float3x3@)">
            <summary>
            Inserts a 3x3 rotation and scale matrix
            </summary>
            <param name="rotation">Normalized quaternion</param>
            <param name="scale">Scale applied to matrix</param>
            <param name="matrix">The result of the operation</param>
        </member>
        <member name="M:GenMathematics.QuaternionMath.DecomposeMatrix(GenMathematics.Matrices.float3x3@,GenMathematics.Vectors.float4@,GenMathematics.Vectors.float3@)">
            <summary>
            Decomposes a transformation matrix into its components
            </summary>
            <param name="matrix">Transformation matrix</param>
            <param name="rotation">Normalized quaternion, the rotation part of the matrix</param>
            <param name="scale">The scale part of the matrix</param>
        </member>
        <member name="M:GenMathematics.QuaternionMath.SetRotation(GenMathematics.Vectors.float4@,GenMathematics.Matrices.float3x4@)">
            <summary>
            Inserts a 3x3 rotation matrix without changing other values
            </summary>
            <param name="rotation">Normalized quaternion</param>
            <param name="matrix">The result of the operation</param>
        </member>
        <member name="M:GenMathematics.QuaternionMath.SetRotationScale(GenMathematics.Vectors.float4@,System.Single,GenMathematics.Matrices.float3x4@)">
            <summary>
            Inserts a 3x3 rotation and scale matrix without changing other values
            </summary>
            <param name="rotation">Normalized quaternion</param>
            <param name="scale">Scale applied to matrix</param>
            <param name="matrix">The result of the operation</param>
        </member>
        <member name="M:GenMathematics.QuaternionMath.SetRotationScale(GenMathematics.Vectors.float4@,GenMathematics.Vectors.float3@,GenMathematics.Matrices.float3x4@)">
            <summary>
            Inserts a 3x3 rotation and scale matrix without changing other values
            </summary>
            <param name="rotation">Normalized quaternion</param>
            <param name="scale">Scale applied to matrix</param>
            <param name="matrix">The result of the operation</param>
        </member>
        <member name="M:GenMathematics.QuaternionMath.DecomposeMatrix(GenMathematics.Matrices.float3x4@,GenMathematics.Vectors.float4@,GenMathematics.Vectors.float3@,GenMathematics.Vectors.float3@)">
            <summary>
            Decomposes a transformation matrix into its components
            </summary>
            <param name="matrix">Transformation matrix</param>
            <param name="rotation">Normalized quaternion, the rotation part of the matrix</param>
            <param name="scale">The scale part of the matrix</param>
            <param name="translation">The translation part of the matrix</param>
        </member>
        <member name="M:GenMathematics.QuaternionMath.SetRotation(GenMathematics.Vectors.float4@,GenMathematics.Matrices.float4x3@)">
            <summary>
            Inserts a 3x3 rotation matrix without changing other values
            </summary>
            <param name="rotation">Normalized quaternion</param>
            <param name="matrix">The result of the operation</param>
        </member>
        <member name="M:GenMathematics.QuaternionMath.SetRotationScale(GenMathematics.Vectors.float4@,System.Single,GenMathematics.Matrices.float4x3@)">
            <summary>
            Inserts a 3x3 rotation and scale matrix without changing other values
            </summary>
            <param name="rotation">Normalized quaternion</param>
            <param name="scale">Scale applied to matrix</param>
            <param name="matrix">The result of the operation</param>
        </member>
        <member name="M:GenMathematics.QuaternionMath.SetRotationScale(GenMathematics.Vectors.float4@,GenMathematics.Vectors.float3@,GenMathematics.Matrices.float4x3@)">
            <summary>
            Inserts a 3x3 rotation and scale matrix without changing other values
            </summary>
            <param name="rotation">Normalized quaternion</param>
            <param name="scale">Scale applied to matrix</param>
            <param name="matrix">The result of the operation</param>
        </member>
        <member name="M:GenMathematics.QuaternionMath.DecomposeMatrix(GenMathematics.Matrices.float4x3@,GenMathematics.Vectors.float4@,GenMathematics.Vectors.float3@)">
            <summary>
            Decomposes a transformation matrix into its components
            </summary>
            <param name="matrix">Transformation matrix</param>
            <param name="rotation">Normalized quaternion, the rotation part of the matrix</param>
            <param name="scale">The scale part of the matrix</param>
        </member>
        <member name="M:GenMathematics.QuaternionMath.SetRotation(GenMathematics.Vectors.float4@,GenMathematics.Matrices.float4x4@)">
            <summary>
            Inserts a 3x3 rotation matrix without changing other values
            </summary>
            <param name="rotation">Normalized quaternion</param>
            <param name="matrix">The result of the operation</param>
        </member>
        <member name="M:GenMathematics.QuaternionMath.SetRotationScale(GenMathematics.Vectors.float4@,System.Single,GenMathematics.Matrices.float4x4@)">
            <summary>
            Inserts a 3x3 rotation and scale matrix without changing other values
            </summary>
            <param name="rotation">Normalized quaternion</param>
            <param name="scale">Scale applied to matrix</param>
            <param name="matrix">The result of the operation</param>
        </member>
        <member name="M:GenMathematics.QuaternionMath.SetRotationScale(GenMathematics.Vectors.float4@,GenMathematics.Vectors.float3@,GenMathematics.Matrices.float4x4@)">
            <summary>
            Inserts a 3x3 rotation and scale matrix without changing other values
            </summary>
            <param name="rotation">Normalized quaternion</param>
            <param name="scale">Scale applied to matrix</param>
            <param name="matrix">The result of the operation</param>
        </member>
        <member name="M:GenMathematics.QuaternionMath.DecomposeMatrix(GenMathematics.Matrices.float4x4@,GenMathematics.Vectors.float4@,GenMathematics.Vectors.float3@,GenMathematics.Vectors.float3@)">
            <summary>
            Decomposes a transformation matrix into its components
            </summary>
            <param name="matrix">Transformation matrix</param>
            <param name="rotation">Normalized quaternion, the rotation part of the matrix</param>
            <param name="scale">The scale part of the matrix</param>
            <param name="translation">The translation part of the matrix</param>
        </member>
        <member name="M:GenMathematics.QuaternionMath.FromAxisAngle(GenMathematics.Vectors.float3@,System.Single,GenMathematics.Vectors.float4@)">
            <summary>
            Creates a quaternion from an axis angle representation of rotation
            </summary>
            <param name="axis">Rotation axis</param>
            <param name="angle">Rotation angle in radians</param>
            <param name="quaternion">The result of the operation</param>
        </member>
        <member name="M:GenMathematics.QuaternionMath.FromAxisAngle(GenMathematics.Vectors.float4@,GenMathematics.Vectors.float4@)">
            <summary>
            Creates a quaternion from an axis angle representation of rotation
            </summary>
            <param name="axisAngle">The 'xyz' components represent the axis and the 'w' component represents the rotation angle</param>
            <param name="quaternion">The result of the operation</param>
        </member>
        <member name="M:GenMathematics.QuaternionMath.ToAxisAngle(GenMathematics.Vectors.float4@,GenMathematics.Vectors.float4@)">
            <summary>
            Converts a quaternion to an axis angle representation of rotation
            </summary>
            <param name="quaternion">Normalized quaternion</param>
            <param name="axisAngle">The 'xyz' components represent the axis and the 'w' component represents the rotation angle</param>
        </member>
        <member name="M:GenMathematics.QuaternionMath.ToAxisAngleRef(GenMathematics.Vectors.float4@,GenMathematics.Vectors.float3@,System.Single@)">
            <summary>
            Converts a quaternion to an axis angle representation of rotation
            </summary>
            <param name="quaternion">Normalized quaternion</param>
            <param name="axis">Rotation axis</param>
            <param name="angle">Rotation angle in radians</param>
        </member>
        <member name="M:GenMathematics.QuaternionMath.FromDirection(GenMathematics.Vectors.float3,GenMathematics.Vectors.float3@,GenMathematics.Vectors.float4@)">
            <summary>
            Creates a rotation quaternion in the direction
            </summary>
            <param name="direction">Normalized direction vector</param>
            <param name="up">Normalized up vector</param>
            <param name="quaternion">The result of the operation</param>
        </member>
        <member name="M:GenMathematics.QuaternionMath.FromDirectionSafe(GenMathematics.Vectors.float3,GenMathematics.Vectors.float3@,GenMathematics.Vectors.float4@)">
            <summary>
            Creates a rotation quaternion in the direction
            </summary>
            <param name="direction">Normalized direction vector</param>
            <param name="up">Normalized up vector</param>
            <param name="quaternion">The result of the operation</param>
        </member>
        <member name="M:GenMathematics.QuaternionMath.FromTo(GenMathematics.Vectors.float3@,GenMathematics.Vectors.float3@,GenMathematics.Vectors.float4@)">
            <summary>
            Creates a rotation quaternion from one direction to another
            </summary>
            <param name="from">Normalized direction vector from which the rotation is performed</param>
            <param name="to">Normalized vector in the direction of which the rotation is performed</param>
            <param name="quaternion">The result of the operation</param>
        </member>
        <member name="M:GenMathematics.QuaternionMath.FromEuler(GenMathematics.Vectors.float3@,GenMathematics.Vectors.float4@)">
            <summary>
            Converts Euler angles to quaternion. The rotations will get applied in following order: 1. X axis, 2. Y axis, 3. Z axis.
            </summary>
            <param name="eulerAngles">Euler angles in radians: pitch (X axis), yaw (Y axis), roll (Z axis)</param>
            <param name="quaternion">The result of the operation</param>
        </member>
        <member name="M:GenMathematics.QuaternionMath.ToEuler(GenMathematics.Vectors.float4@,GenMathematics.Vectors.float3@)">
            <summary>
            Converts quaternion to Euler angles
            </summary>
            <param name="quaternion">Quaternion to convert to Euler angles</param>
            <param name="eulerAngles">Euler angles in radians: pitch (X axis), yaw (Y axis), roll (Z axis)</param>
        </member>
        <member name="M:GenMathematics.QuaternionMath.Conjugate(GenMathematics.Vectors.float4@,GenMathematics.Vectors.float4@)">
            <summary>
            Conjugates a quaternion
            </summary>
            <param name="value">Quaternion to conjugate</param>
            <param name="result">The result of the operation</param>
        </member>
        <member name="M:GenMathematics.QuaternionMath.Invert(GenMathematics.Vectors.float4@,GenMathematics.Vectors.float4@)">
            <summary>
            Conjugates and normalizes a quaternion
            </summary>
            <param name="value">Quaternion to invert</param>
            <param name="result">The result of the operation</param>
        </member>
        <member name="M:GenMathematics.QuaternionMath.SLerp(GenMathematics.Vectors.float4@,GenMathematics.Vectors.float4@,System.Single,GenMathematics.Vectors.float4@)">
            <summary>
            Performs spherical interpolation
            </summary>
            <param name="from">Normalized quaternion</param>
            <param name="to">Normalized quaternion</param>
            <param name="t">The blend factor</param>
            <param name="result">The result of the operation</param>
        </member>
        <member name="M:GenMathematics.QuaternionMath.Multiply(GenMathematics.Vectors.float4@,GenMathematics.Vectors.float4@,GenMathematics.Vectors.float4@)">
            <summary>
            Rotates quaternion <paramref name="second"/> by quaternion <paramref name="first"/>
            </summary>
            <param name="first">Quaternion to rotate the second by</param>
            <param name="second">Quaternion to transform</param>
            <param name="result">The result of the operation. Must have a reference other than <paramref name="first"/> and <paramref name="second"/></param>
        </member>
        <member name="M:GenMathematics.QuaternionMath.Transform(GenMathematics.Vectors.float4@,GenMathematics.Vectors.float3@,GenMathematics.Vectors.float3@)">
            <summary>
            Rotates vector <paramref name="value"/> by quaternion <paramref name="quaternion"/>
            </summary>
            <param name="quaternion">Normalized quaternion to rotate a vector by</param>
            <param name="value">Vector to transform</param>
            <param name="result">The result of the operation</param>
        </member>
        <member name="M:GenMathematics.QuaternionMath.Transform(GenMathematics.Vectors.float4@,GenMathematics.Vectors.float4@,GenMathematics.Vectors.float4@)">
            <summary>
            Rotates vector <paramref name="value"/> by quaternion <paramref name="quaternion"/>
            </summary>
            <param name="quaternion">Normalized quaternion to rotate a vector by</param>
            <param name="value">Vector to transform</param>
            <param name="result">The result of the operation</param>
        </member>
        <member name="M:GenMathematics.QuaternionMath.FromAxisAngle(GenMathematics.Vectors.double3,System.Double)">
            <summary>
            Creates a quaternion from an axis angle representation of rotation
            </summary>
            <param name="axis">Rotation axis</param>
            <param name="angle">Rotation angle in radians</param>
            <returns>The result of the operation</returns>
        </member>
        <member name="M:GenMathematics.QuaternionMath.FromAxisAngle(GenMathematics.Vectors.double4)">
            <summary>
            Creates a quaternion from an axis angle representation of rotation
            </summary>
            <param name="axisAngle">The 'xyz' components represent the axis and the 'w' component represents the rotation angle</param>
            <returns>The result of the operation</returns>
        </member>
        <member name="M:GenMathematics.QuaternionMath.ToAxisAngle(GenMathematics.Vectors.double4)">
            <summary>
            Converts a quaternion to an axis angle representation of rotation
            </summary>
            <param name="quaternion">Normalized quaternion</param>
            <returns>The 'xyz' components represent the axis and the 'w' component represents the rotation angle</returns>
        </member>
        <member name="M:GenMathematics.QuaternionMath.ToAxisAngle(GenMathematics.Vectors.double4,GenMathematics.Vectors.double3@,System.Double@)">
            <summary>
            Converts a quaternion to an axis angle representation of rotation
            </summary>
            <param name="quaternion">Normalized quaternion</param>
            <param name="axis">Rotation axis</param>
            <param name="angle">Rotation angle in radians</param>
        </member>
        <member name="M:GenMathematics.QuaternionMath.FromMatrix(GenMathematics.Matrices.double3x3@,GenMathematics.Vectors.double4@)">
            <summary>
            Creates a quaternion from the rotation matrix
            </summary>
            <param name="matrix">A rotation matrix (without scale)</param>
            <param name="quaternion">The result of the operation</param>
        </member>
        <member name="M:GenMathematics.QuaternionMath.FromMatrix(GenMathematics.Matrices.double3x3)">
            <summary>
            Creates a quaternion from the rotation matrix
            </summary>
            <param name="matrix">A rotation matrix (without scale)</param>
            <returns>The result of the operation</returns>
        </member>
        <member name="M:GenMathematics.QuaternionMath.FromMatrix(GenMathematics.Matrices.double3x4@,GenMathematics.Vectors.double4@)">
            <summary>
            Creates a quaternion from the rotation matrix
            </summary>
            <param name="matrix">A rotation matrix (without scale)</param>
            <param name="quaternion">The result of the operation</param>
        </member>
        <member name="M:GenMathematics.QuaternionMath.FromMatrix(GenMathematics.Matrices.double3x4)">
            <summary>
            Creates a quaternion from the rotation matrix
            </summary>
            <param name="matrix">A rotation matrix (without scale)</param>
            <returns>The result of the operation</returns>
        </member>
        <member name="M:GenMathematics.QuaternionMath.FromMatrix(GenMathematics.Matrices.double4x3@,GenMathematics.Vectors.double4@)">
            <summary>
            Creates a quaternion from the rotation matrix
            </summary>
            <param name="matrix">A rotation matrix (without scale)</param>
            <param name="quaternion">The result of the operation</param>
        </member>
        <member name="M:GenMathematics.QuaternionMath.FromMatrix(GenMathematics.Matrices.double4x3)">
            <summary>
            Creates a quaternion from the rotation matrix
            </summary>
            <param name="matrix">A rotation matrix (without scale)</param>
            <returns>The result of the operation</returns>
        </member>
        <member name="M:GenMathematics.QuaternionMath.FromMatrix(GenMathematics.Matrices.double4x4@,GenMathematics.Vectors.double4@)">
            <summary>
            Creates a quaternion from the rotation matrix
            </summary>
            <param name="matrix">A rotation matrix (without scale)</param>
            <param name="quaternion">The result of the operation</param>
        </member>
        <member name="M:GenMathematics.QuaternionMath.FromMatrix(GenMathematics.Matrices.double4x4)">
            <summary>
            Creates a quaternion from the rotation matrix
            </summary>
            <param name="matrix">A rotation matrix (without scale)</param>
            <returns>The result of the operation</returns>
        </member>
        <member name="M:GenMathematics.QuaternionMath.FromDirection(GenMathematics.Vectors.double3,GenMathematics.Vectors.double3)">
            <summary>
            Creates a rotation quaternion in the direction
            </summary>
            <param name="direction">Normalized direction vector</param>
            <param name="up">Normalized up vector</param>
            <returns>The result of the operation</returns>
        </member>
        <member name="M:GenMathematics.QuaternionMath.FromDirectionSafe(GenMathematics.Vectors.double3,GenMathematics.Vectors.double3)">
            <summary>
            Creates a rotation quaternion in the direction
            </summary>
            <param name="direction">Normalized direction vector</param>
            <param name="up">Normalized up vector</param>
            <returns>The result of the operation</returns>
        </member>
        <member name="M:GenMathematics.QuaternionMath.FromTo(GenMathematics.Vectors.double3,GenMathematics.Vectors.double3)">
            <summary>
            Creates a rotation quaternion from one direction to another
            </summary>
            <param name="from">Normalized direction vector from which the rotation is performed</param>
            <param name="to">Normalized vector in the direction of which the rotation is performed</param>
            <returns>The result of the operation</returns>
        </member>
        <member name="M:GenMathematics.QuaternionMath.FromEuler(GenMathematics.Vectors.double3)">
            <summary>
            Converts Euler angles to quaternion. The rotations will get applied in following order: 1. X axis, 2. Y axis, 3. Z axis.
            </summary>
            <param name="eulerAngles">Euler angles in radians: pitch (X axis), yaw (Y axis), roll (Z axis)</param>
            <returns>The result of the operation</returns>
        </member>
        <member name="M:GenMathematics.QuaternionMath.ToEuler(GenMathematics.Vectors.double4)">
            <summary>
            Converts quaternion to Euler angles
            </summary>
            <param name="quaternion">Quaternion to convert to Euler angles</param>
            <returns>Euler angles in radians: pitch (X axis), yaw (Y axis), roll (Z axis)</returns>
        </member>
        <member name="M:GenMathematics.QuaternionMath.Conjugate(GenMathematics.Vectors.double4)">
            <summary>
            Conjugates a quaternion
            </summary>
            <param name="value">Quaternion to conjugate</param>
            <returns>The result of the operation</returns>
        </member>
        <member name="M:GenMathematics.QuaternionMath.Invert(GenMathematics.Vectors.double4)">
            <summary>
            Conjugates and normalizes a quaternion
            </summary>
            <param name="value">Quaternion to invert</param>
            <returns>The result of the operation</returns>
        </member>
        <member name="M:GenMathematics.QuaternionMath.SLerp(GenMathematics.Vectors.double4,GenMathematics.Vectors.double4,System.Double)">
            <summary>
            Performs spherical interpolation
            </summary>
            <param name="from">Normalized quaternion</param>
            <param name="to">Normalized quaternion</param>
            <param name="t">The blend factor</param>
            <returns>The result of the operation</returns>
        </member>
        <member name="M:GenMathematics.QuaternionMath.Multiply(GenMathematics.Vectors.double4,GenMathematics.Vectors.double4)">
            <summary>
            Rotates quaternion <paramref name="second"/> by quaternion <paramref name="first"/>
            </summary>
            <param name="first">Quaternion to rotate the second by</param>
            <param name="second">Quaternion to transform</param>
            <returns>The result of the operation</returns>
        </member>
        <member name="M:GenMathematics.QuaternionMath.Transform(GenMathematics.Vectors.double4,GenMathematics.Vectors.double3)">
            <summary>
            Rotates vector <paramref name="value"/> by quaternion <paramref name="quaternion"/>
            </summary>
            <param name="quaternion">Normalized quaternion to rotate a vector by</param>
            <param name="value">Vector to transform</param>
            <returns>The result of the operation</returns>
        </member>
        <member name="M:GenMathematics.QuaternionMath.Transform(GenMathematics.Vectors.double4,GenMathematics.Vectors.double4)">
            <summary>
            Rotates vector <paramref name="value"/> by quaternion <paramref name="quaternion"/>
            </summary>
            <param name="quaternion">Normalized quaternion to rotate a vector by</param>
            <param name="value">Vector to transform</param>
            <returns>The result of the operation</returns>
        </member>
        <member name="M:GenMathematics.QuaternionMath.SetRotation(GenMathematics.Vectors.double4@,GenMathematics.Matrices.double3x3@)">
            <summary>
            Inserts a 3x3 rotation matrix
            </summary>
            <param name="rotation">Normalized quaternion</param>
            <param name="matrix">The result of the operation</param>
        </member>
        <member name="M:GenMathematics.QuaternionMath.SetRotationScale(GenMathematics.Vectors.double4@,System.Double,GenMathematics.Matrices.double3x3@)">
            <summary>
            Inserts a 3x3 rotation and scale matrix
            </summary>
            <param name="rotation">Normalized quaternion</param>
            <param name="scale">Scale applied to matrix</param>
            <param name="matrix">The result of the operation</param>
        </member>
        <member name="M:GenMathematics.QuaternionMath.SetRotationScale(GenMathematics.Vectors.double4@,GenMathematics.Vectors.double3@,GenMathematics.Matrices.double3x3@)">
            <summary>
            Inserts a 3x3 rotation and scale matrix
            </summary>
            <param name="rotation">Normalized quaternion</param>
            <param name="scale">Scale applied to matrix</param>
            <param name="matrix">The result of the operation</param>
        </member>
        <member name="M:GenMathematics.QuaternionMath.DecomposeMatrix(GenMathematics.Matrices.double3x3@,GenMathematics.Vectors.double4@,GenMathematics.Vectors.double3@)">
            <summary>
            Decomposes a transformation matrix into its components
            </summary>
            <param name="matrix">Transformation matrix</param>
            <param name="rotation">Normalized quaternion, the rotation part of the matrix</param>
            <param name="scale">The scale part of the matrix</param>
        </member>
        <member name="M:GenMathematics.QuaternionMath.SetRotation(GenMathematics.Vectors.double4@,GenMathematics.Matrices.double3x4@)">
            <summary>
            Inserts a 3x3 rotation matrix without changing other values
            </summary>
            <param name="rotation">Normalized quaternion</param>
            <param name="matrix">The result of the operation</param>
        </member>
        <member name="M:GenMathematics.QuaternionMath.SetRotationScale(GenMathematics.Vectors.double4@,System.Double,GenMathematics.Matrices.double3x4@)">
            <summary>
            Inserts a 3x3 rotation and scale matrix without changing other values
            </summary>
            <param name="rotation">Normalized quaternion</param>
            <param name="scale">Scale applied to matrix</param>
            <param name="matrix">The result of the operation</param>
        </member>
        <member name="M:GenMathematics.QuaternionMath.SetRotationScale(GenMathematics.Vectors.double4@,GenMathematics.Vectors.double3@,GenMathematics.Matrices.double3x4@)">
            <summary>
            Inserts a 3x3 rotation and scale matrix without changing other values
            </summary>
            <param name="rotation">Normalized quaternion</param>
            <param name="scale">Scale applied to matrix</param>
            <param name="matrix">The result of the operation</param>
        </member>
        <member name="M:GenMathematics.QuaternionMath.DecomposeMatrix(GenMathematics.Matrices.double3x4@,GenMathematics.Vectors.double4@,GenMathematics.Vectors.double3@,GenMathematics.Vectors.double3@)">
            <summary>
            Decomposes a transformation matrix into its components
            </summary>
            <param name="matrix">Transformation matrix</param>
            <param name="rotation">Normalized quaternion, the rotation part of the matrix</param>
            <param name="scale">The scale part of the matrix</param>
            <param name="translation">The translation part of the matrix</param>
        </member>
        <member name="M:GenMathematics.QuaternionMath.SetRotation(GenMathematics.Vectors.double4@,GenMathematics.Matrices.double4x3@)">
            <summary>
            Inserts a 3x3 rotation matrix without changing other values
            </summary>
            <param name="rotation">Normalized quaternion</param>
            <param name="matrix">The result of the operation</param>
        </member>
        <member name="M:GenMathematics.QuaternionMath.SetRotationScale(GenMathematics.Vectors.double4@,System.Double,GenMathematics.Matrices.double4x3@)">
            <summary>
            Inserts a 3x3 rotation and scale matrix without changing other values
            </summary>
            <param name="rotation">Normalized quaternion</param>
            <param name="scale">Scale applied to matrix</param>
            <param name="matrix">The result of the operation</param>
        </member>
        <member name="M:GenMathematics.QuaternionMath.SetRotationScale(GenMathematics.Vectors.double4@,GenMathematics.Vectors.double3@,GenMathematics.Matrices.double4x3@)">
            <summary>
            Inserts a 3x3 rotation and scale matrix without changing other values
            </summary>
            <param name="rotation">Normalized quaternion</param>
            <param name="scale">Scale applied to matrix</param>
            <param name="matrix">The result of the operation</param>
        </member>
        <member name="M:GenMathematics.QuaternionMath.DecomposeMatrix(GenMathematics.Matrices.double4x3@,GenMathematics.Vectors.double4@,GenMathematics.Vectors.double3@)">
            <summary>
            Decomposes a transformation matrix into its components
            </summary>
            <param name="matrix">Transformation matrix</param>
            <param name="rotation">Normalized quaternion, the rotation part of the matrix</param>
            <param name="scale">The scale part of the matrix</param>
        </member>
        <member name="M:GenMathematics.QuaternionMath.SetRotation(GenMathematics.Vectors.double4@,GenMathematics.Matrices.double4x4@)">
            <summary>
            Inserts a 3x3 rotation matrix without changing other values
            </summary>
            <param name="rotation">Normalized quaternion</param>
            <param name="matrix">The result of the operation</param>
        </member>
        <member name="M:GenMathematics.QuaternionMath.SetRotationScale(GenMathematics.Vectors.double4@,System.Double,GenMathematics.Matrices.double4x4@)">
            <summary>
            Inserts a 3x3 rotation and scale matrix without changing other values
            </summary>
            <param name="rotation">Normalized quaternion</param>
            <param name="scale">Scale applied to matrix</param>
            <param name="matrix">The result of the operation</param>
        </member>
        <member name="M:GenMathematics.QuaternionMath.SetRotationScale(GenMathematics.Vectors.double4@,GenMathematics.Vectors.double3@,GenMathematics.Matrices.double4x4@)">
            <summary>
            Inserts a 3x3 rotation and scale matrix without changing other values
            </summary>
            <param name="rotation">Normalized quaternion</param>
            <param name="scale">Scale applied to matrix</param>
            <param name="matrix">The result of the operation</param>
        </member>
        <member name="M:GenMathematics.QuaternionMath.DecomposeMatrix(GenMathematics.Matrices.double4x4@,GenMathematics.Vectors.double4@,GenMathematics.Vectors.double3@,GenMathematics.Vectors.double3@)">
            <summary>
            Decomposes a transformation matrix into its components
            </summary>
            <param name="matrix">Transformation matrix</param>
            <param name="rotation">Normalized quaternion, the rotation part of the matrix</param>
            <param name="scale">The scale part of the matrix</param>
            <param name="translation">The translation part of the matrix</param>
        </member>
        <member name="M:GenMathematics.QuaternionMath.FromAxisAngle(GenMathematics.Vectors.double3@,System.Double,GenMathematics.Vectors.double4@)">
            <summary>
            Creates a quaternion from an axis angle representation of rotation
            </summary>
            <param name="axis">Rotation axis</param>
            <param name="angle">Rotation angle in radians</param>
            <param name="quaternion">The result of the operation</param>
        </member>
        <member name="M:GenMathematics.QuaternionMath.FromAxisAngle(GenMathematics.Vectors.double4@,GenMathematics.Vectors.double4@)">
            <summary>
            Creates a quaternion from an axis angle representation of rotation
            </summary>
            <param name="axisAngle">The 'xyz' components represent the axis and the 'w' component represents the rotation angle</param>
            <param name="quaternion">The result of the operation</param>
        </member>
        <member name="M:GenMathematics.QuaternionMath.ToAxisAngle(GenMathematics.Vectors.double4@,GenMathematics.Vectors.double4@)">
            <summary>
            Converts a quaternion to an axis angle representation of rotation
            </summary>
            <param name="quaternion">Normalized quaternion</param>
            <param name="axisAngle">The 'xyz' components represent the axis and the 'w' component represents the rotation angle</param>
        </member>
        <member name="M:GenMathematics.QuaternionMath.ToAxisAngleRef(GenMathematics.Vectors.double4@,GenMathematics.Vectors.double3@,System.Double@)">
            <summary>
            Converts a quaternion to an axis angle representation of rotation
            </summary>
            <param name="quaternion">Normalized quaternion</param>
            <param name="axis">Rotation axis</param>
            <param name="angle">Rotation angle in radians</param>
        </member>
        <member name="M:GenMathematics.QuaternionMath.FromDirection(GenMathematics.Vectors.double3,GenMathematics.Vectors.double3@,GenMathematics.Vectors.double4@)">
            <summary>
            Creates a rotation quaternion in the direction
            </summary>
            <param name="direction">Normalized direction vector</param>
            <param name="up">Normalized up vector</param>
            <param name="quaternion">The result of the operation</param>
        </member>
        <member name="M:GenMathematics.QuaternionMath.FromDirectionSafe(GenMathematics.Vectors.double3,GenMathematics.Vectors.double3@,GenMathematics.Vectors.double4@)">
            <summary>
            Creates a rotation quaternion in the direction
            </summary>
            <param name="direction">Normalized direction vector</param>
            <param name="up">Normalized up vector</param>
            <param name="quaternion">The result of the operation</param>
        </member>
        <member name="M:GenMathematics.QuaternionMath.FromTo(GenMathematics.Vectors.double3@,GenMathematics.Vectors.double3@,GenMathematics.Vectors.double4@)">
            <summary>
            Creates a rotation quaternion from one direction to another
            </summary>
            <param name="from">Normalized direction vector from which the rotation is performed</param>
            <param name="to">Normalized vector in the direction of which the rotation is performed</param>
            <param name="quaternion">The result of the operation</param>
        </member>
        <member name="M:GenMathematics.QuaternionMath.FromEuler(GenMathematics.Vectors.double3@,GenMathematics.Vectors.double4@)">
            <summary>
            Converts Euler angles to quaternion. The rotations will get applied in following order: 1. X axis, 2. Y axis, 3. Z axis.
            </summary>
            <param name="eulerAngles">Euler angles in radians: pitch (X axis), yaw (Y axis), roll (Z axis)</param>
            <param name="quaternion">The result of the operation</param>
        </member>
        <member name="M:GenMathematics.QuaternionMath.ToEuler(GenMathematics.Vectors.double4@,GenMathematics.Vectors.double3@)">
            <summary>
            Converts quaternion to Euler angles
            </summary>
            <param name="quaternion">Quaternion to convert to Euler angles</param>
            <param name="eulerAngles">Euler angles in radians: pitch (X axis), yaw (Y axis), roll (Z axis)</param>
        </member>
        <member name="M:GenMathematics.QuaternionMath.Conjugate(GenMathematics.Vectors.double4@,GenMathematics.Vectors.double4@)">
            <summary>
            Conjugates a quaternion
            </summary>
            <param name="value">Quaternion to conjugate</param>
            <param name="result">The result of the operation</param>
        </member>
        <member name="M:GenMathematics.QuaternionMath.Invert(GenMathematics.Vectors.double4@,GenMathematics.Vectors.double4@)">
            <summary>
            Conjugates and normalizes a quaternion
            </summary>
            <param name="value">Quaternion to invert</param>
            <param name="result">The result of the operation</param>
        </member>
        <member name="M:GenMathematics.QuaternionMath.SLerp(GenMathematics.Vectors.double4@,GenMathematics.Vectors.double4@,System.Double,GenMathematics.Vectors.double4@)">
            <summary>
            Performs spherical interpolation
            </summary>
            <param name="from">Normalized quaternion</param>
            <param name="to">Normalized quaternion</param>
            <param name="t">The blend factor</param>
            <param name="result">The result of the operation</param>
        </member>
        <member name="M:GenMathematics.QuaternionMath.Multiply(GenMathematics.Vectors.double4@,GenMathematics.Vectors.double4@,GenMathematics.Vectors.double4@)">
            <summary>
            Rotates quaternion <paramref name="second"/> by quaternion <paramref name="first"/>
            </summary>
            <param name="first">Quaternion to rotate the second by</param>
            <param name="second">Quaternion to transform</param>
            <param name="result">The result of the operation. Must have a reference other than <paramref name="first"/> and <paramref name="second"/></param>
        </member>
        <member name="M:GenMathematics.QuaternionMath.Transform(GenMathematics.Vectors.double4@,GenMathematics.Vectors.double3@,GenMathematics.Vectors.double3@)">
            <summary>
            Rotates vector <paramref name="value"/> by quaternion <paramref name="quaternion"/>
            </summary>
            <param name="quaternion">Normalized quaternion to rotate a vector by</param>
            <param name="value">Vector to transform</param>
            <param name="result">The result of the operation</param>
        </member>
        <member name="M:GenMathematics.QuaternionMath.Transform(GenMathematics.Vectors.double4@,GenMathematics.Vectors.double4@,GenMathematics.Vectors.double4@)">
            <summary>
            Rotates vector <paramref name="value"/> by quaternion <paramref name="quaternion"/>
            </summary>
            <param name="quaternion">Normalized quaternion to rotate a vector by</param>
            <param name="value">Vector to transform</param>
            <param name="result">The result of the operation</param>
        </member>
        <member name="T:GenMathematics.Matrices.bool2x2">
            <summary>
            Matrix of type bool with 2 rows and 2 columns using the column-major order
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.bool2x2.Column0">
            <summary>
            Matrix column with index 0
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.bool2x2.Column1">
            <summary>
            Matrix column with index 1
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.bool2x2.Row0">
            <summary>
            Matrix row with index 0
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.bool2x2.Row1">
            <summary>
            Matrix row with index 1
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.bool2x2.#ctor(GenMathematics.Vectors.bool2,GenMathematics.Vectors.bool2)">
            <summary>
            Creates a matrix from column values
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.bool2x2.#ctor(System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Creates a matrix from the values of rows and columns
            </summary>
            <param name="r0c0">The value to assign to row 0 and column 0 of the matrix</param>
            <param name="r0c1">The value to assign to row 0 and column 1 of the matrix</param>
            <param name="r1c0">The value to assign to row 1 and column 0 of the matrix</param>
            <param name="r1c1">The value to assign to row 1 and column 1 of the matrix</param>
        </member>
        <member name="P:GenMathematics.Matrices.bool2x2.Item(System.Int32)">
            <summary>
            To access via the reference use `Unsafe.Add(ref matrix.Column0, index)` instead
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.bool2x2.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.bool2x2.Equals(GenMathematics.Matrices.bool2x2)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.bool2x2.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.bool2x2.CompareTo(GenMathematics.Matrices.bool2x2)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.bool2x2.ToString">
            <summary>
            Returns the object's state information as a string
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.bool2x2.Extract(GenMathematics.Matrices.bool2x2@,System.Int32,System.Int32,GenMathematics.Matrices.bool2x2@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="T:GenMathematics.Matrices.bool2x3">
            <summary>
            Matrix of type bool with 2 rows and 3 columns using the column-major order
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.bool2x3.Column0">
            <summary>
            Matrix column with index 0
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.bool2x3.Column1">
            <summary>
            Matrix column with index 1
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.bool2x3.Column2">
            <summary>
            Matrix column with index 2
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.bool2x3.Row0">
            <summary>
            Matrix row with index 0
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.bool2x3.Row1">
            <summary>
            Matrix row with index 1
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.bool2x3.#ctor(GenMathematics.Vectors.bool2,GenMathematics.Vectors.bool2,GenMathematics.Vectors.bool2)">
            <summary>
            Creates a matrix from column values
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.bool2x3.#ctor(System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Creates a matrix from the values of rows and columns
            </summary>
            <param name="r0c0">The value to assign to row 0 and column 0 of the matrix</param>
            <param name="r0c1">The value to assign to row 0 and column 1 of the matrix</param>
            <param name="r0c2">The value to assign to row 0 and column 2 of the matrix</param>
            <param name="r1c0">The value to assign to row 1 and column 0 of the matrix</param>
            <param name="r1c1">The value to assign to row 1 and column 1 of the matrix</param>
            <param name="r1c2">The value to assign to row 1 and column 2 of the matrix</param>
        </member>
        <member name="P:GenMathematics.Matrices.bool2x3.Item(System.Int32)">
            <summary>
            To access via the reference use `Unsafe.Add(ref matrix.Column0, index)` instead
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.bool2x3.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.bool2x3.Equals(GenMathematics.Matrices.bool2x3)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.bool2x3.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.bool2x3.CompareTo(GenMathematics.Matrices.bool2x3)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.bool2x3.ToString">
            <summary>
            Returns the object's state information as a string
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.bool2x3.Extract(GenMathematics.Matrices.bool2x3@,System.Int32,System.Int32,GenMathematics.Matrices.bool2x3@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.bool2x3.Extract(GenMathematics.Matrices.bool2x3@,System.Int32,System.Int32,GenMathematics.Matrices.bool2x2@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="T:GenMathematics.Matrices.bool2x4">
            <summary>
            Matrix of type bool with 2 rows and 4 columns using the column-major order
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.bool2x4.Column0">
            <summary>
            Matrix column with index 0
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.bool2x4.Column1">
            <summary>
            Matrix column with index 1
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.bool2x4.Column2">
            <summary>
            Matrix column with index 2
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.bool2x4.Column3">
            <summary>
            Matrix column with index 3
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.bool2x4.Row0">
            <summary>
            Matrix row with index 0
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.bool2x4.Row1">
            <summary>
            Matrix row with index 1
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.bool2x4.#ctor(GenMathematics.Vectors.bool2,GenMathematics.Vectors.bool2,GenMathematics.Vectors.bool2,GenMathematics.Vectors.bool2)">
            <summary>
            Creates a matrix from column values
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.bool2x4.#ctor(System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Creates a matrix from the values of rows and columns
            </summary>
            <param name="r0c0">The value to assign to row 0 and column 0 of the matrix</param>
            <param name="r0c1">The value to assign to row 0 and column 1 of the matrix</param>
            <param name="r0c2">The value to assign to row 0 and column 2 of the matrix</param>
            <param name="r0c3">The value to assign to row 0 and column 3 of the matrix</param>
            <param name="r1c0">The value to assign to row 1 and column 0 of the matrix</param>
            <param name="r1c1">The value to assign to row 1 and column 1 of the matrix</param>
            <param name="r1c2">The value to assign to row 1 and column 2 of the matrix</param>
            <param name="r1c3">The value to assign to row 1 and column 3 of the matrix</param>
        </member>
        <member name="P:GenMathematics.Matrices.bool2x4.Item(System.Int32)">
            <summary>
            To access via the reference use `Unsafe.Add(ref matrix.Column0, index)` instead
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.bool2x4.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.bool2x4.Equals(GenMathematics.Matrices.bool2x4)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.bool2x4.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.bool2x4.CompareTo(GenMathematics.Matrices.bool2x4)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.bool2x4.ToString">
            <summary>
            Returns the object's state information as a string
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.bool2x4.Extract(GenMathematics.Matrices.bool2x4@,System.Int32,System.Int32,GenMathematics.Matrices.bool2x4@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.bool2x4.Extract(GenMathematics.Matrices.bool2x4@,System.Int32,System.Int32,GenMathematics.Matrices.bool2x3@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.bool2x4.Extract(GenMathematics.Matrices.bool2x4@,System.Int32,System.Int32,GenMathematics.Matrices.bool2x2@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="T:GenMathematics.Matrices.bool3x2">
            <summary>
            Matrix of type bool with 3 rows and 2 columns using the column-major order
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.bool3x2.Column0">
            <summary>
            Matrix column with index 0
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.bool3x2.Column1">
            <summary>
            Matrix column with index 1
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.bool3x2.Row0">
            <summary>
            Matrix row with index 0
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.bool3x2.Row1">
            <summary>
            Matrix row with index 1
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.bool3x2.Row2">
            <summary>
            Matrix row with index 2
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.bool3x2.#ctor(GenMathematics.Vectors.bool3,GenMathematics.Vectors.bool3)">
            <summary>
            Creates a matrix from column values
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.bool3x2.#ctor(System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Creates a matrix from the values of rows and columns
            </summary>
            <param name="r0c0">The value to assign to row 0 and column 0 of the matrix</param>
            <param name="r0c1">The value to assign to row 0 and column 1 of the matrix</param>
            <param name="r1c0">The value to assign to row 1 and column 0 of the matrix</param>
            <param name="r1c1">The value to assign to row 1 and column 1 of the matrix</param>
            <param name="r2c0">The value to assign to row 2 and column 0 of the matrix</param>
            <param name="r2c1">The value to assign to row 2 and column 1 of the matrix</param>
        </member>
        <member name="P:GenMathematics.Matrices.bool3x2.Item(System.Int32)">
            <summary>
            To access via the reference use `Unsafe.Add(ref matrix.Column0, index)` instead
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.bool3x2.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.bool3x2.Equals(GenMathematics.Matrices.bool3x2)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.bool3x2.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.bool3x2.CompareTo(GenMathematics.Matrices.bool3x2)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.bool3x2.ToString">
            <summary>
            Returns the object's state information as a string
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.bool3x2.Extract(GenMathematics.Matrices.bool3x2@,System.Int32,System.Int32,GenMathematics.Matrices.bool3x2@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.bool3x2.Extract(GenMathematics.Matrices.bool3x2@,System.Int32,System.Int32,GenMathematics.Matrices.bool2x2@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="T:GenMathematics.Matrices.bool3x3">
            <summary>
            Matrix of type bool with 3 rows and 3 columns using the column-major order
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.bool3x3.Column0">
            <summary>
            Matrix column with index 0
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.bool3x3.Column1">
            <summary>
            Matrix column with index 1
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.bool3x3.Column2">
            <summary>
            Matrix column with index 2
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.bool3x3.Row0">
            <summary>
            Matrix row with index 0
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.bool3x3.Row1">
            <summary>
            Matrix row with index 1
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.bool3x3.Row2">
            <summary>
            Matrix row with index 2
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.bool3x3.#ctor(GenMathematics.Vectors.bool3,GenMathematics.Vectors.bool3,GenMathematics.Vectors.bool3)">
            <summary>
            Creates a matrix from column values
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.bool3x3.#ctor(System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Creates a matrix from the values of rows and columns
            </summary>
            <param name="r0c0">The value to assign to row 0 and column 0 of the matrix</param>
            <param name="r0c1">The value to assign to row 0 and column 1 of the matrix</param>
            <param name="r0c2">The value to assign to row 0 and column 2 of the matrix</param>
            <param name="r1c0">The value to assign to row 1 and column 0 of the matrix</param>
            <param name="r1c1">The value to assign to row 1 and column 1 of the matrix</param>
            <param name="r1c2">The value to assign to row 1 and column 2 of the matrix</param>
            <param name="r2c0">The value to assign to row 2 and column 0 of the matrix</param>
            <param name="r2c1">The value to assign to row 2 and column 1 of the matrix</param>
            <param name="r2c2">The value to assign to row 2 and column 2 of the matrix</param>
        </member>
        <member name="P:GenMathematics.Matrices.bool3x3.Item(System.Int32)">
            <summary>
            To access via the reference use `Unsafe.Add(ref matrix.Column0, index)` instead
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.bool3x3.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.bool3x3.Equals(GenMathematics.Matrices.bool3x3)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.bool3x3.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.bool3x3.CompareTo(GenMathematics.Matrices.bool3x3)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.bool3x3.ToString">
            <summary>
            Returns the object's state information as a string
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.bool3x3.Extract(GenMathematics.Matrices.bool3x3@,System.Int32,System.Int32,GenMathematics.Matrices.bool3x3@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.bool3x3.Extract(GenMathematics.Matrices.bool3x3@,System.Int32,System.Int32,GenMathematics.Matrices.bool2x3@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.bool3x3.Extract(GenMathematics.Matrices.bool3x3@,System.Int32,System.Int32,GenMathematics.Matrices.bool3x2@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.bool3x3.Extract(GenMathematics.Matrices.bool3x3@,System.Int32,System.Int32,GenMathematics.Matrices.bool2x2@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="T:GenMathematics.Matrices.bool3x4">
            <summary>
            Matrix of type bool with 3 rows and 4 columns using the column-major order
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.bool3x4.Column0">
            <summary>
            Matrix column with index 0
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.bool3x4.Column1">
            <summary>
            Matrix column with index 1
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.bool3x4.Column2">
            <summary>
            Matrix column with index 2
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.bool3x4.Column3">
            <summary>
            Matrix column with index 3
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.bool3x4.Row0">
            <summary>
            Matrix row with index 0
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.bool3x4.Row1">
            <summary>
            Matrix row with index 1
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.bool3x4.Row2">
            <summary>
            Matrix row with index 2
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.bool3x4.#ctor(GenMathematics.Vectors.bool3,GenMathematics.Vectors.bool3,GenMathematics.Vectors.bool3,GenMathematics.Vectors.bool3)">
            <summary>
            Creates a matrix from column values
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.bool3x4.#ctor(System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Creates a matrix from the values of rows and columns
            </summary>
            <param name="r0c0">The value to assign to row 0 and column 0 of the matrix</param>
            <param name="r0c1">The value to assign to row 0 and column 1 of the matrix</param>
            <param name="r0c2">The value to assign to row 0 and column 2 of the matrix</param>
            <param name="r0c3">The value to assign to row 0 and column 3 of the matrix</param>
            <param name="r1c0">The value to assign to row 1 and column 0 of the matrix</param>
            <param name="r1c1">The value to assign to row 1 and column 1 of the matrix</param>
            <param name="r1c2">The value to assign to row 1 and column 2 of the matrix</param>
            <param name="r1c3">The value to assign to row 1 and column 3 of the matrix</param>
            <param name="r2c0">The value to assign to row 2 and column 0 of the matrix</param>
            <param name="r2c1">The value to assign to row 2 and column 1 of the matrix</param>
            <param name="r2c2">The value to assign to row 2 and column 2 of the matrix</param>
            <param name="r2c3">The value to assign to row 2 and column 3 of the matrix</param>
        </member>
        <member name="P:GenMathematics.Matrices.bool3x4.Item(System.Int32)">
            <summary>
            To access via the reference use `Unsafe.Add(ref matrix.Column0, index)` instead
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.bool3x4.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.bool3x4.Equals(GenMathematics.Matrices.bool3x4)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.bool3x4.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.bool3x4.CompareTo(GenMathematics.Matrices.bool3x4)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.bool3x4.ToString">
            <summary>
            Returns the object's state information as a string
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.bool3x4.Extract(GenMathematics.Matrices.bool3x4@,System.Int32,System.Int32,GenMathematics.Matrices.bool3x4@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.bool3x4.Extract(GenMathematics.Matrices.bool3x4@,System.Int32,System.Int32,GenMathematics.Matrices.bool2x4@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.bool3x4.Extract(GenMathematics.Matrices.bool3x4@,System.Int32,System.Int32,GenMathematics.Matrices.bool3x3@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.bool3x4.Extract(GenMathematics.Matrices.bool3x4@,System.Int32,System.Int32,GenMathematics.Matrices.bool2x3@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.bool3x4.Extract(GenMathematics.Matrices.bool3x4@,System.Int32,System.Int32,GenMathematics.Matrices.bool3x2@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.bool3x4.Extract(GenMathematics.Matrices.bool3x4@,System.Int32,System.Int32,GenMathematics.Matrices.bool2x2@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="T:GenMathematics.Matrices.bool4x2">
            <summary>
            Matrix of type bool with 4 rows and 2 columns using the column-major order
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.bool4x2.Column0">
            <summary>
            Matrix column with index 0
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.bool4x2.Column1">
            <summary>
            Matrix column with index 1
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.bool4x2.Row0">
            <summary>
            Matrix row with index 0
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.bool4x2.Row1">
            <summary>
            Matrix row with index 1
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.bool4x2.Row2">
            <summary>
            Matrix row with index 2
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.bool4x2.Row3">
            <summary>
            Matrix row with index 3
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.bool4x2.#ctor(GenMathematics.Vectors.bool4,GenMathematics.Vectors.bool4)">
            <summary>
            Creates a matrix from column values
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.bool4x2.#ctor(System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Creates a matrix from the values of rows and columns
            </summary>
            <param name="r0c0">The value to assign to row 0 and column 0 of the matrix</param>
            <param name="r0c1">The value to assign to row 0 and column 1 of the matrix</param>
            <param name="r1c0">The value to assign to row 1 and column 0 of the matrix</param>
            <param name="r1c1">The value to assign to row 1 and column 1 of the matrix</param>
            <param name="r2c0">The value to assign to row 2 and column 0 of the matrix</param>
            <param name="r2c1">The value to assign to row 2 and column 1 of the matrix</param>
            <param name="r3c0">The value to assign to row 3 and column 0 of the matrix</param>
            <param name="r3c1">The value to assign to row 3 and column 1 of the matrix</param>
        </member>
        <member name="P:GenMathematics.Matrices.bool4x2.Item(System.Int32)">
            <summary>
            To access via the reference use `Unsafe.Add(ref matrix.Column0, index)` instead
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.bool4x2.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.bool4x2.Equals(GenMathematics.Matrices.bool4x2)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.bool4x2.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.bool4x2.CompareTo(GenMathematics.Matrices.bool4x2)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.bool4x2.ToString">
            <summary>
            Returns the object's state information as a string
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.bool4x2.Extract(GenMathematics.Matrices.bool4x2@,System.Int32,System.Int32,GenMathematics.Matrices.bool4x2@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.bool4x2.Extract(GenMathematics.Matrices.bool4x2@,System.Int32,System.Int32,GenMathematics.Matrices.bool3x2@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.bool4x2.Extract(GenMathematics.Matrices.bool4x2@,System.Int32,System.Int32,GenMathematics.Matrices.bool2x2@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="T:GenMathematics.Matrices.bool4x3">
            <summary>
            Matrix of type bool with 4 rows and 3 columns using the column-major order
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.bool4x3.Column0">
            <summary>
            Matrix column with index 0
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.bool4x3.Column1">
            <summary>
            Matrix column with index 1
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.bool4x3.Column2">
            <summary>
            Matrix column with index 2
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.bool4x3.Row0">
            <summary>
            Matrix row with index 0
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.bool4x3.Row1">
            <summary>
            Matrix row with index 1
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.bool4x3.Row2">
            <summary>
            Matrix row with index 2
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.bool4x3.Row3">
            <summary>
            Matrix row with index 3
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.bool4x3.#ctor(GenMathematics.Vectors.bool4,GenMathematics.Vectors.bool4,GenMathematics.Vectors.bool4)">
            <summary>
            Creates a matrix from column values
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.bool4x3.#ctor(System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Creates a matrix from the values of rows and columns
            </summary>
            <param name="r0c0">The value to assign to row 0 and column 0 of the matrix</param>
            <param name="r0c1">The value to assign to row 0 and column 1 of the matrix</param>
            <param name="r0c2">The value to assign to row 0 and column 2 of the matrix</param>
            <param name="r1c0">The value to assign to row 1 and column 0 of the matrix</param>
            <param name="r1c1">The value to assign to row 1 and column 1 of the matrix</param>
            <param name="r1c2">The value to assign to row 1 and column 2 of the matrix</param>
            <param name="r2c0">The value to assign to row 2 and column 0 of the matrix</param>
            <param name="r2c1">The value to assign to row 2 and column 1 of the matrix</param>
            <param name="r2c2">The value to assign to row 2 and column 2 of the matrix</param>
            <param name="r3c0">The value to assign to row 3 and column 0 of the matrix</param>
            <param name="r3c1">The value to assign to row 3 and column 1 of the matrix</param>
            <param name="r3c2">The value to assign to row 3 and column 2 of the matrix</param>
        </member>
        <member name="P:GenMathematics.Matrices.bool4x3.Item(System.Int32)">
            <summary>
            To access via the reference use `Unsafe.Add(ref matrix.Column0, index)` instead
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.bool4x3.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.bool4x3.Equals(GenMathematics.Matrices.bool4x3)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.bool4x3.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.bool4x3.CompareTo(GenMathematics.Matrices.bool4x3)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.bool4x3.ToString">
            <summary>
            Returns the object's state information as a string
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.bool4x3.Extract(GenMathematics.Matrices.bool4x3@,System.Int32,System.Int32,GenMathematics.Matrices.bool4x3@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.bool4x3.Extract(GenMathematics.Matrices.bool4x3@,System.Int32,System.Int32,GenMathematics.Matrices.bool3x3@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.bool4x3.Extract(GenMathematics.Matrices.bool4x3@,System.Int32,System.Int32,GenMathematics.Matrices.bool2x3@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.bool4x3.Extract(GenMathematics.Matrices.bool4x3@,System.Int32,System.Int32,GenMathematics.Matrices.bool4x2@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.bool4x3.Extract(GenMathematics.Matrices.bool4x3@,System.Int32,System.Int32,GenMathematics.Matrices.bool3x2@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.bool4x3.Extract(GenMathematics.Matrices.bool4x3@,System.Int32,System.Int32,GenMathematics.Matrices.bool2x2@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="T:GenMathematics.Matrices.bool4x4">
            <summary>
            Matrix of type bool with 4 rows and 4 columns using the column-major order
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.bool4x4.Column0">
            <summary>
            Matrix column with index 0
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.bool4x4.Column1">
            <summary>
            Matrix column with index 1
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.bool4x4.Column2">
            <summary>
            Matrix column with index 2
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.bool4x4.Column3">
            <summary>
            Matrix column with index 3
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.bool4x4.Row0">
            <summary>
            Matrix row with index 0
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.bool4x4.Row1">
            <summary>
            Matrix row with index 1
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.bool4x4.Row2">
            <summary>
            Matrix row with index 2
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.bool4x4.Row3">
            <summary>
            Matrix row with index 3
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.bool4x4.#ctor(GenMathematics.Vectors.bool4,GenMathematics.Vectors.bool4,GenMathematics.Vectors.bool4,GenMathematics.Vectors.bool4)">
            <summary>
            Creates a matrix from column values
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.bool4x4.#ctor(System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Creates a matrix from the values of rows and columns
            </summary>
            <param name="r0c0">The value to assign to row 0 and column 0 of the matrix</param>
            <param name="r0c1">The value to assign to row 0 and column 1 of the matrix</param>
            <param name="r0c2">The value to assign to row 0 and column 2 of the matrix</param>
            <param name="r0c3">The value to assign to row 0 and column 3 of the matrix</param>
            <param name="r1c0">The value to assign to row 1 and column 0 of the matrix</param>
            <param name="r1c1">The value to assign to row 1 and column 1 of the matrix</param>
            <param name="r1c2">The value to assign to row 1 and column 2 of the matrix</param>
            <param name="r1c3">The value to assign to row 1 and column 3 of the matrix</param>
            <param name="r2c0">The value to assign to row 2 and column 0 of the matrix</param>
            <param name="r2c1">The value to assign to row 2 and column 1 of the matrix</param>
            <param name="r2c2">The value to assign to row 2 and column 2 of the matrix</param>
            <param name="r2c3">The value to assign to row 2 and column 3 of the matrix</param>
            <param name="r3c0">The value to assign to row 3 and column 0 of the matrix</param>
            <param name="r3c1">The value to assign to row 3 and column 1 of the matrix</param>
            <param name="r3c2">The value to assign to row 3 and column 2 of the matrix</param>
            <param name="r3c3">The value to assign to row 3 and column 3 of the matrix</param>
        </member>
        <member name="P:GenMathematics.Matrices.bool4x4.Item(System.Int32)">
            <summary>
            To access via the reference use `Unsafe.Add(ref matrix.Column0, index)` instead
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.bool4x4.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.bool4x4.Equals(GenMathematics.Matrices.bool4x4)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.bool4x4.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.bool4x4.CompareTo(GenMathematics.Matrices.bool4x4)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.bool4x4.ToString">
            <summary>
            Returns the object's state information as a string
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.bool4x4.Extract(GenMathematics.Matrices.bool4x4@,System.Int32,System.Int32,GenMathematics.Matrices.bool4x4@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.bool4x4.Extract(GenMathematics.Matrices.bool4x4@,System.Int32,System.Int32,GenMathematics.Matrices.bool3x4@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.bool4x4.Extract(GenMathematics.Matrices.bool4x4@,System.Int32,System.Int32,GenMathematics.Matrices.bool2x4@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.bool4x4.Extract(GenMathematics.Matrices.bool4x4@,System.Int32,System.Int32,GenMathematics.Matrices.bool4x3@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.bool4x4.Extract(GenMathematics.Matrices.bool4x4@,System.Int32,System.Int32,GenMathematics.Matrices.bool3x3@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.bool4x4.Extract(GenMathematics.Matrices.bool4x4@,System.Int32,System.Int32,GenMathematics.Matrices.bool2x3@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.bool4x4.Extract(GenMathematics.Matrices.bool4x4@,System.Int32,System.Int32,GenMathematics.Matrices.bool4x2@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.bool4x4.Extract(GenMathematics.Matrices.bool4x4@,System.Int32,System.Int32,GenMathematics.Matrices.bool3x2@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.bool4x4.Extract(GenMathematics.Matrices.bool4x4@,System.Int32,System.Int32,GenMathematics.Matrices.bool2x2@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="T:GenMathematics.Matrices.byte2x2">
            <summary>
            Matrix of type byte with 2 rows and 2 columns using the column-major order
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.byte2x2.Column0">
            <summary>
            Matrix column with index 0
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.byte2x2.Column1">
            <summary>
            Matrix column with index 1
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.byte2x2.Row0">
            <summary>
            Matrix row with index 0
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.byte2x2.Row1">
            <summary>
            Matrix row with index 1
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.byte2x2.#ctor(GenMathematics.Vectors.byte2,GenMathematics.Vectors.byte2)">
            <summary>
            Creates a matrix from column values
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.byte2x2.#ctor(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Creates a matrix from the values of rows and columns
            </summary>
            <param name="r0c0">The value to assign to row 0 and column 0 of the matrix</param>
            <param name="r0c1">The value to assign to row 0 and column 1 of the matrix</param>
            <param name="r1c0">The value to assign to row 1 and column 0 of the matrix</param>
            <param name="r1c1">The value to assign to row 1 and column 1 of the matrix</param>
        </member>
        <member name="P:GenMathematics.Matrices.byte2x2.Item(System.Int32)">
            <summary>
            To access via the reference use `Unsafe.Add(ref matrix.Column0, index)` instead
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.byte2x2.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.byte2x2.Equals(GenMathematics.Matrices.byte2x2)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.byte2x2.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.byte2x2.CompareTo(GenMathematics.Matrices.byte2x2)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.byte2x2.ToString">
            <summary>
            Returns the object's state information as a string
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.byte2x2.Extract(GenMathematics.Matrices.byte2x2,System.Int32,System.Int32,GenMathematics.Matrices.byte2x2@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.byte2x2.op_Explicit(GenMathematics.Matrices.sbyte2x2)~GenMathematics.Matrices.byte2x2">
            <summary>
            Converts sbyte2x2 to byte2x2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.byte2x2.op_Explicit(GenMathematics.Matrices.short2x2)~GenMathematics.Matrices.byte2x2">
            <summary>
            Converts short2x2 to byte2x2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.byte2x2.op_Explicit(GenMathematics.Matrices.ushort2x2)~GenMathematics.Matrices.byte2x2">
            <summary>
            Converts ushort2x2 to byte2x2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.byte2x2.op_Explicit(GenMathematics.Matrices.int2x2)~GenMathematics.Matrices.byte2x2">
            <summary>
            Converts int2x2 to byte2x2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.byte2x2.op_Explicit(GenMathematics.Matrices.uint2x2)~GenMathematics.Matrices.byte2x2">
            <summary>
            Converts uint2x2 to byte2x2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.byte2x2.op_Explicit(GenMathematics.Matrices.long2x2)~GenMathematics.Matrices.byte2x2">
            <summary>
            Converts long2x2 to byte2x2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.byte2x2.op_Explicit(GenMathematics.Matrices.ulong2x2)~GenMathematics.Matrices.byte2x2">
            <summary>
            Converts ulong2x2 to byte2x2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.byte2x2.op_Explicit(GenMathematics.Matrices.half2x2)~GenMathematics.Matrices.byte2x2">
            <summary>
            Converts half2x2 to byte2x2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.byte2x2.op_Explicit(GenMathematics.Matrices.float2x2)~GenMathematics.Matrices.byte2x2">
            <summary>
            Converts float2x2 to byte2x2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.byte2x2.op_Explicit(GenMathematics.Matrices.double2x2)~GenMathematics.Matrices.byte2x2">
            <summary>
            Converts double2x2 to byte2x2 with possible loss of information
            </summary>
        </member>
        <member name="T:GenMathematics.Matrices.byte2x3">
            <summary>
            Matrix of type byte with 2 rows and 3 columns using the column-major order
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.byte2x3.Column0">
            <summary>
            Matrix column with index 0
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.byte2x3.Column1">
            <summary>
            Matrix column with index 1
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.byte2x3.Column2">
            <summary>
            Matrix column with index 2
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.byte2x3.Row0">
            <summary>
            Matrix row with index 0
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.byte2x3.Row1">
            <summary>
            Matrix row with index 1
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.byte2x3.#ctor(GenMathematics.Vectors.byte2,GenMathematics.Vectors.byte2,GenMathematics.Vectors.byte2)">
            <summary>
            Creates a matrix from column values
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.byte2x3.#ctor(System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Creates a matrix from the values of rows and columns
            </summary>
            <param name="r0c0">The value to assign to row 0 and column 0 of the matrix</param>
            <param name="r0c1">The value to assign to row 0 and column 1 of the matrix</param>
            <param name="r0c2">The value to assign to row 0 and column 2 of the matrix</param>
            <param name="r1c0">The value to assign to row 1 and column 0 of the matrix</param>
            <param name="r1c1">The value to assign to row 1 and column 1 of the matrix</param>
            <param name="r1c2">The value to assign to row 1 and column 2 of the matrix</param>
        </member>
        <member name="P:GenMathematics.Matrices.byte2x3.Item(System.Int32)">
            <summary>
            To access via the reference use `Unsafe.Add(ref matrix.Column0, index)` instead
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.byte2x3.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.byte2x3.Equals(GenMathematics.Matrices.byte2x3)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.byte2x3.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.byte2x3.CompareTo(GenMathematics.Matrices.byte2x3)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.byte2x3.ToString">
            <summary>
            Returns the object's state information as a string
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.byte2x3.Extract(GenMathematics.Matrices.byte2x3,System.Int32,System.Int32,GenMathematics.Matrices.byte2x3@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.byte2x3.Extract(GenMathematics.Matrices.byte2x3,System.Int32,System.Int32,GenMathematics.Matrices.byte2x2@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.byte2x3.op_Explicit(GenMathematics.Matrices.sbyte2x3)~GenMathematics.Matrices.byte2x3">
            <summary>
            Converts sbyte2x3 to byte2x3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.byte2x3.op_Explicit(GenMathematics.Matrices.short2x3)~GenMathematics.Matrices.byte2x3">
            <summary>
            Converts short2x3 to byte2x3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.byte2x3.op_Explicit(GenMathematics.Matrices.ushort2x3)~GenMathematics.Matrices.byte2x3">
            <summary>
            Converts ushort2x3 to byte2x3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.byte2x3.op_Explicit(GenMathematics.Matrices.int2x3)~GenMathematics.Matrices.byte2x3">
            <summary>
            Converts int2x3 to byte2x3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.byte2x3.op_Explicit(GenMathematics.Matrices.uint2x3)~GenMathematics.Matrices.byte2x3">
            <summary>
            Converts uint2x3 to byte2x3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.byte2x3.op_Explicit(GenMathematics.Matrices.long2x3)~GenMathematics.Matrices.byte2x3">
            <summary>
            Converts long2x3 to byte2x3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.byte2x3.op_Explicit(GenMathematics.Matrices.ulong2x3)~GenMathematics.Matrices.byte2x3">
            <summary>
            Converts ulong2x3 to byte2x3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.byte2x3.op_Explicit(GenMathematics.Matrices.half2x3)~GenMathematics.Matrices.byte2x3">
            <summary>
            Converts half2x3 to byte2x3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.byte2x3.op_Explicit(GenMathematics.Matrices.float2x3)~GenMathematics.Matrices.byte2x3">
            <summary>
            Converts float2x3 to byte2x3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.byte2x3.op_Explicit(GenMathematics.Matrices.double2x3)~GenMathematics.Matrices.byte2x3">
            <summary>
            Converts double2x3 to byte2x3 with possible loss of information
            </summary>
        </member>
        <member name="T:GenMathematics.Matrices.byte2x4">
            <summary>
            Matrix of type byte with 2 rows and 4 columns using the column-major order
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.byte2x4.Column0">
            <summary>
            Matrix column with index 0
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.byte2x4.Column1">
            <summary>
            Matrix column with index 1
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.byte2x4.Column2">
            <summary>
            Matrix column with index 2
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.byte2x4.Column3">
            <summary>
            Matrix column with index 3
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.byte2x4.Row0">
            <summary>
            Matrix row with index 0
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.byte2x4.Row1">
            <summary>
            Matrix row with index 1
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.byte2x4.#ctor(GenMathematics.Vectors.byte2,GenMathematics.Vectors.byte2,GenMathematics.Vectors.byte2,GenMathematics.Vectors.byte2)">
            <summary>
            Creates a matrix from column values
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.byte2x4.#ctor(System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Creates a matrix from the values of rows and columns
            </summary>
            <param name="r0c0">The value to assign to row 0 and column 0 of the matrix</param>
            <param name="r0c1">The value to assign to row 0 and column 1 of the matrix</param>
            <param name="r0c2">The value to assign to row 0 and column 2 of the matrix</param>
            <param name="r0c3">The value to assign to row 0 and column 3 of the matrix</param>
            <param name="r1c0">The value to assign to row 1 and column 0 of the matrix</param>
            <param name="r1c1">The value to assign to row 1 and column 1 of the matrix</param>
            <param name="r1c2">The value to assign to row 1 and column 2 of the matrix</param>
            <param name="r1c3">The value to assign to row 1 and column 3 of the matrix</param>
        </member>
        <member name="P:GenMathematics.Matrices.byte2x4.Item(System.Int32)">
            <summary>
            To access via the reference use `Unsafe.Add(ref matrix.Column0, index)` instead
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.byte2x4.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.byte2x4.Equals(GenMathematics.Matrices.byte2x4)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.byte2x4.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.byte2x4.CompareTo(GenMathematics.Matrices.byte2x4)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.byte2x4.ToString">
            <summary>
            Returns the object's state information as a string
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.byte2x4.Extract(GenMathematics.Matrices.byte2x4,System.Int32,System.Int32,GenMathematics.Matrices.byte2x4@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.byte2x4.Extract(GenMathematics.Matrices.byte2x4,System.Int32,System.Int32,GenMathematics.Matrices.byte2x3@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.byte2x4.Extract(GenMathematics.Matrices.byte2x4,System.Int32,System.Int32,GenMathematics.Matrices.byte2x2@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.byte2x4.op_Explicit(GenMathematics.Matrices.sbyte2x4)~GenMathematics.Matrices.byte2x4">
            <summary>
            Converts sbyte2x4 to byte2x4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.byte2x4.op_Explicit(GenMathematics.Matrices.short2x4)~GenMathematics.Matrices.byte2x4">
            <summary>
            Converts short2x4 to byte2x4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.byte2x4.op_Explicit(GenMathematics.Matrices.ushort2x4)~GenMathematics.Matrices.byte2x4">
            <summary>
            Converts ushort2x4 to byte2x4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.byte2x4.op_Explicit(GenMathematics.Matrices.int2x4)~GenMathematics.Matrices.byte2x4">
            <summary>
            Converts int2x4 to byte2x4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.byte2x4.op_Explicit(GenMathematics.Matrices.uint2x4)~GenMathematics.Matrices.byte2x4">
            <summary>
            Converts uint2x4 to byte2x4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.byte2x4.op_Explicit(GenMathematics.Matrices.long2x4)~GenMathematics.Matrices.byte2x4">
            <summary>
            Converts long2x4 to byte2x4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.byte2x4.op_Explicit(GenMathematics.Matrices.ulong2x4)~GenMathematics.Matrices.byte2x4">
            <summary>
            Converts ulong2x4 to byte2x4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.byte2x4.op_Explicit(GenMathematics.Matrices.half2x4)~GenMathematics.Matrices.byte2x4">
            <summary>
            Converts half2x4 to byte2x4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.byte2x4.op_Explicit(GenMathematics.Matrices.float2x4)~GenMathematics.Matrices.byte2x4">
            <summary>
            Converts float2x4 to byte2x4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.byte2x4.op_Explicit(GenMathematics.Matrices.double2x4)~GenMathematics.Matrices.byte2x4">
            <summary>
            Converts double2x4 to byte2x4 with possible loss of information
            </summary>
        </member>
        <member name="T:GenMathematics.Matrices.byte3x2">
            <summary>
            Matrix of type byte with 3 rows and 2 columns using the column-major order
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.byte3x2.Column0">
            <summary>
            Matrix column with index 0
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.byte3x2.Column1">
            <summary>
            Matrix column with index 1
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.byte3x2.Row0">
            <summary>
            Matrix row with index 0
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.byte3x2.Row1">
            <summary>
            Matrix row with index 1
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.byte3x2.Row2">
            <summary>
            Matrix row with index 2
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.byte3x2.#ctor(GenMathematics.Vectors.byte3,GenMathematics.Vectors.byte3)">
            <summary>
            Creates a matrix from column values
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.byte3x2.#ctor(System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Creates a matrix from the values of rows and columns
            </summary>
            <param name="r0c0">The value to assign to row 0 and column 0 of the matrix</param>
            <param name="r0c1">The value to assign to row 0 and column 1 of the matrix</param>
            <param name="r1c0">The value to assign to row 1 and column 0 of the matrix</param>
            <param name="r1c1">The value to assign to row 1 and column 1 of the matrix</param>
            <param name="r2c0">The value to assign to row 2 and column 0 of the matrix</param>
            <param name="r2c1">The value to assign to row 2 and column 1 of the matrix</param>
        </member>
        <member name="P:GenMathematics.Matrices.byte3x2.Item(System.Int32)">
            <summary>
            To access via the reference use `Unsafe.Add(ref matrix.Column0, index)` instead
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.byte3x2.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.byte3x2.Equals(GenMathematics.Matrices.byte3x2)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.byte3x2.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.byte3x2.CompareTo(GenMathematics.Matrices.byte3x2)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.byte3x2.ToString">
            <summary>
            Returns the object's state information as a string
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.byte3x2.Extract(GenMathematics.Matrices.byte3x2,System.Int32,System.Int32,GenMathematics.Matrices.byte3x2@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.byte3x2.Extract(GenMathematics.Matrices.byte3x2,System.Int32,System.Int32,GenMathematics.Matrices.byte2x2@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.byte3x2.op_Explicit(GenMathematics.Matrices.sbyte3x2)~GenMathematics.Matrices.byte3x2">
            <summary>
            Converts sbyte3x2 to byte3x2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.byte3x2.op_Explicit(GenMathematics.Matrices.short3x2)~GenMathematics.Matrices.byte3x2">
            <summary>
            Converts short3x2 to byte3x2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.byte3x2.op_Explicit(GenMathematics.Matrices.ushort3x2)~GenMathematics.Matrices.byte3x2">
            <summary>
            Converts ushort3x2 to byte3x2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.byte3x2.op_Explicit(GenMathematics.Matrices.int3x2)~GenMathematics.Matrices.byte3x2">
            <summary>
            Converts int3x2 to byte3x2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.byte3x2.op_Explicit(GenMathematics.Matrices.uint3x2)~GenMathematics.Matrices.byte3x2">
            <summary>
            Converts uint3x2 to byte3x2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.byte3x2.op_Explicit(GenMathematics.Matrices.long3x2)~GenMathematics.Matrices.byte3x2">
            <summary>
            Converts long3x2 to byte3x2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.byte3x2.op_Explicit(GenMathematics.Matrices.ulong3x2)~GenMathematics.Matrices.byte3x2">
            <summary>
            Converts ulong3x2 to byte3x2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.byte3x2.op_Explicit(GenMathematics.Matrices.half3x2)~GenMathematics.Matrices.byte3x2">
            <summary>
            Converts half3x2 to byte3x2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.byte3x2.op_Explicit(GenMathematics.Matrices.float3x2)~GenMathematics.Matrices.byte3x2">
            <summary>
            Converts float3x2 to byte3x2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.byte3x2.op_Explicit(GenMathematics.Matrices.double3x2)~GenMathematics.Matrices.byte3x2">
            <summary>
            Converts double3x2 to byte3x2 with possible loss of information
            </summary>
        </member>
        <member name="T:GenMathematics.Matrices.byte3x3">
            <summary>
            Matrix of type byte with 3 rows and 3 columns using the column-major order
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.byte3x3.Column0">
            <summary>
            Matrix column with index 0
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.byte3x3.Column1">
            <summary>
            Matrix column with index 1
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.byte3x3.Column2">
            <summary>
            Matrix column with index 2
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.byte3x3.Row0">
            <summary>
            Matrix row with index 0
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.byte3x3.Row1">
            <summary>
            Matrix row with index 1
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.byte3x3.Row2">
            <summary>
            Matrix row with index 2
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.byte3x3.#ctor(GenMathematics.Vectors.byte3,GenMathematics.Vectors.byte3,GenMathematics.Vectors.byte3)">
            <summary>
            Creates a matrix from column values
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.byte3x3.#ctor(System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Creates a matrix from the values of rows and columns
            </summary>
            <param name="r0c0">The value to assign to row 0 and column 0 of the matrix</param>
            <param name="r0c1">The value to assign to row 0 and column 1 of the matrix</param>
            <param name="r0c2">The value to assign to row 0 and column 2 of the matrix</param>
            <param name="r1c0">The value to assign to row 1 and column 0 of the matrix</param>
            <param name="r1c1">The value to assign to row 1 and column 1 of the matrix</param>
            <param name="r1c2">The value to assign to row 1 and column 2 of the matrix</param>
            <param name="r2c0">The value to assign to row 2 and column 0 of the matrix</param>
            <param name="r2c1">The value to assign to row 2 and column 1 of the matrix</param>
            <param name="r2c2">The value to assign to row 2 and column 2 of the matrix</param>
        </member>
        <member name="P:GenMathematics.Matrices.byte3x3.Item(System.Int32)">
            <summary>
            To access via the reference use `Unsafe.Add(ref matrix.Column0, index)` instead
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.byte3x3.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.byte3x3.Equals(GenMathematics.Matrices.byte3x3)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.byte3x3.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.byte3x3.CompareTo(GenMathematics.Matrices.byte3x3)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.byte3x3.ToString">
            <summary>
            Returns the object's state information as a string
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.byte3x3.Extract(GenMathematics.Matrices.byte3x3@,System.Int32,System.Int32,GenMathematics.Matrices.byte3x3@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.byte3x3.Extract(GenMathematics.Matrices.byte3x3@,System.Int32,System.Int32,GenMathematics.Matrices.byte2x3@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.byte3x3.Extract(GenMathematics.Matrices.byte3x3@,System.Int32,System.Int32,GenMathematics.Matrices.byte3x2@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.byte3x3.Extract(GenMathematics.Matrices.byte3x3@,System.Int32,System.Int32,GenMathematics.Matrices.byte2x2@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.byte3x3.op_Explicit(GenMathematics.Matrices.sbyte3x3)~GenMathematics.Matrices.byte3x3">
            <summary>
            Converts sbyte3x3 to byte3x3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.byte3x3.op_Explicit(GenMathematics.Matrices.short3x3)~GenMathematics.Matrices.byte3x3">
            <summary>
            Converts short3x3 to byte3x3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.byte3x3.op_Explicit(GenMathematics.Matrices.ushort3x3)~GenMathematics.Matrices.byte3x3">
            <summary>
            Converts ushort3x3 to byte3x3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.byte3x3.op_Explicit(GenMathematics.Matrices.int3x3)~GenMathematics.Matrices.byte3x3">
            <summary>
            Converts int3x3 to byte3x3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.byte3x3.op_Explicit(GenMathematics.Matrices.uint3x3)~GenMathematics.Matrices.byte3x3">
            <summary>
            Converts uint3x3 to byte3x3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.byte3x3.op_Explicit(GenMathematics.Matrices.long3x3)~GenMathematics.Matrices.byte3x3">
            <summary>
            Converts long3x3 to byte3x3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.byte3x3.op_Explicit(GenMathematics.Matrices.ulong3x3)~GenMathematics.Matrices.byte3x3">
            <summary>
            Converts ulong3x3 to byte3x3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.byte3x3.op_Explicit(GenMathematics.Matrices.half3x3)~GenMathematics.Matrices.byte3x3">
            <summary>
            Converts half3x3 to byte3x3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.byte3x3.op_Explicit(GenMathematics.Matrices.float3x3)~GenMathematics.Matrices.byte3x3">
            <summary>
            Converts float3x3 to byte3x3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.byte3x3.op_Explicit(GenMathematics.Matrices.double3x3)~GenMathematics.Matrices.byte3x3">
            <summary>
            Converts double3x3 to byte3x3 with possible loss of information
            </summary>
        </member>
        <member name="T:GenMathematics.Matrices.byte3x4">
            <summary>
            Matrix of type byte with 3 rows and 4 columns using the column-major order
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.byte3x4.Column0">
            <summary>
            Matrix column with index 0
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.byte3x4.Column1">
            <summary>
            Matrix column with index 1
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.byte3x4.Column2">
            <summary>
            Matrix column with index 2
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.byte3x4.Column3">
            <summary>
            Matrix column with index 3
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.byte3x4.Row0">
            <summary>
            Matrix row with index 0
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.byte3x4.Row1">
            <summary>
            Matrix row with index 1
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.byte3x4.Row2">
            <summary>
            Matrix row with index 2
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.byte3x4.#ctor(GenMathematics.Vectors.byte3,GenMathematics.Vectors.byte3,GenMathematics.Vectors.byte3,GenMathematics.Vectors.byte3)">
            <summary>
            Creates a matrix from column values
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.byte3x4.#ctor(System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Creates a matrix from the values of rows and columns
            </summary>
            <param name="r0c0">The value to assign to row 0 and column 0 of the matrix</param>
            <param name="r0c1">The value to assign to row 0 and column 1 of the matrix</param>
            <param name="r0c2">The value to assign to row 0 and column 2 of the matrix</param>
            <param name="r0c3">The value to assign to row 0 and column 3 of the matrix</param>
            <param name="r1c0">The value to assign to row 1 and column 0 of the matrix</param>
            <param name="r1c1">The value to assign to row 1 and column 1 of the matrix</param>
            <param name="r1c2">The value to assign to row 1 and column 2 of the matrix</param>
            <param name="r1c3">The value to assign to row 1 and column 3 of the matrix</param>
            <param name="r2c0">The value to assign to row 2 and column 0 of the matrix</param>
            <param name="r2c1">The value to assign to row 2 and column 1 of the matrix</param>
            <param name="r2c2">The value to assign to row 2 and column 2 of the matrix</param>
            <param name="r2c3">The value to assign to row 2 and column 3 of the matrix</param>
        </member>
        <member name="P:GenMathematics.Matrices.byte3x4.Item(System.Int32)">
            <summary>
            To access via the reference use `Unsafe.Add(ref matrix.Column0, index)` instead
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.byte3x4.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.byte3x4.Equals(GenMathematics.Matrices.byte3x4)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.byte3x4.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.byte3x4.CompareTo(GenMathematics.Matrices.byte3x4)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.byte3x4.ToString">
            <summary>
            Returns the object's state information as a string
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.byte3x4.Extract(GenMathematics.Matrices.byte3x4@,System.Int32,System.Int32,GenMathematics.Matrices.byte3x4@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.byte3x4.Extract(GenMathematics.Matrices.byte3x4@,System.Int32,System.Int32,GenMathematics.Matrices.byte2x4@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.byte3x4.Extract(GenMathematics.Matrices.byte3x4@,System.Int32,System.Int32,GenMathematics.Matrices.byte3x3@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.byte3x4.Extract(GenMathematics.Matrices.byte3x4@,System.Int32,System.Int32,GenMathematics.Matrices.byte2x3@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.byte3x4.Extract(GenMathematics.Matrices.byte3x4@,System.Int32,System.Int32,GenMathematics.Matrices.byte3x2@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.byte3x4.Extract(GenMathematics.Matrices.byte3x4@,System.Int32,System.Int32,GenMathematics.Matrices.byte2x2@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.byte3x4.op_Explicit(GenMathematics.Matrices.sbyte3x4)~GenMathematics.Matrices.byte3x4">
            <summary>
            Converts sbyte3x4 to byte3x4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.byte3x4.op_Explicit(GenMathematics.Matrices.short3x4)~GenMathematics.Matrices.byte3x4">
            <summary>
            Converts short3x4 to byte3x4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.byte3x4.op_Explicit(GenMathematics.Matrices.ushort3x4)~GenMathematics.Matrices.byte3x4">
            <summary>
            Converts ushort3x4 to byte3x4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.byte3x4.op_Explicit(GenMathematics.Matrices.int3x4)~GenMathematics.Matrices.byte3x4">
            <summary>
            Converts int3x4 to byte3x4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.byte3x4.op_Explicit(GenMathematics.Matrices.uint3x4)~GenMathematics.Matrices.byte3x4">
            <summary>
            Converts uint3x4 to byte3x4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.byte3x4.op_Explicit(GenMathematics.Matrices.long3x4)~GenMathematics.Matrices.byte3x4">
            <summary>
            Converts long3x4 to byte3x4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.byte3x4.op_Explicit(GenMathematics.Matrices.ulong3x4)~GenMathematics.Matrices.byte3x4">
            <summary>
            Converts ulong3x4 to byte3x4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.byte3x4.op_Explicit(GenMathematics.Matrices.half3x4)~GenMathematics.Matrices.byte3x4">
            <summary>
            Converts half3x4 to byte3x4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.byte3x4.op_Explicit(GenMathematics.Matrices.float3x4)~GenMathematics.Matrices.byte3x4">
            <summary>
            Converts float3x4 to byte3x4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.byte3x4.op_Explicit(GenMathematics.Matrices.double3x4)~GenMathematics.Matrices.byte3x4">
            <summary>
            Converts double3x4 to byte3x4 with possible loss of information
            </summary>
        </member>
        <member name="T:GenMathematics.Matrices.byte4x2">
            <summary>
            Matrix of type byte with 4 rows and 2 columns using the column-major order
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.byte4x2.Column0">
            <summary>
            Matrix column with index 0
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.byte4x2.Column1">
            <summary>
            Matrix column with index 1
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.byte4x2.Row0">
            <summary>
            Matrix row with index 0
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.byte4x2.Row1">
            <summary>
            Matrix row with index 1
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.byte4x2.Row2">
            <summary>
            Matrix row with index 2
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.byte4x2.Row3">
            <summary>
            Matrix row with index 3
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.byte4x2.#ctor(GenMathematics.Vectors.byte4,GenMathematics.Vectors.byte4)">
            <summary>
            Creates a matrix from column values
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.byte4x2.#ctor(System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Creates a matrix from the values of rows and columns
            </summary>
            <param name="r0c0">The value to assign to row 0 and column 0 of the matrix</param>
            <param name="r0c1">The value to assign to row 0 and column 1 of the matrix</param>
            <param name="r1c0">The value to assign to row 1 and column 0 of the matrix</param>
            <param name="r1c1">The value to assign to row 1 and column 1 of the matrix</param>
            <param name="r2c0">The value to assign to row 2 and column 0 of the matrix</param>
            <param name="r2c1">The value to assign to row 2 and column 1 of the matrix</param>
            <param name="r3c0">The value to assign to row 3 and column 0 of the matrix</param>
            <param name="r3c1">The value to assign to row 3 and column 1 of the matrix</param>
        </member>
        <member name="P:GenMathematics.Matrices.byte4x2.Item(System.Int32)">
            <summary>
            To access via the reference use `Unsafe.Add(ref matrix.Column0, index)` instead
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.byte4x2.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.byte4x2.Equals(GenMathematics.Matrices.byte4x2)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.byte4x2.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.byte4x2.CompareTo(GenMathematics.Matrices.byte4x2)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.byte4x2.ToString">
            <summary>
            Returns the object's state information as a string
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.byte4x2.Extract(GenMathematics.Matrices.byte4x2,System.Int32,System.Int32,GenMathematics.Matrices.byte4x2@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.byte4x2.Extract(GenMathematics.Matrices.byte4x2,System.Int32,System.Int32,GenMathematics.Matrices.byte3x2@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.byte4x2.Extract(GenMathematics.Matrices.byte4x2,System.Int32,System.Int32,GenMathematics.Matrices.byte2x2@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.byte4x2.op_Explicit(GenMathematics.Matrices.sbyte4x2)~GenMathematics.Matrices.byte4x2">
            <summary>
            Converts sbyte4x2 to byte4x2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.byte4x2.op_Explicit(GenMathematics.Matrices.short4x2)~GenMathematics.Matrices.byte4x2">
            <summary>
            Converts short4x2 to byte4x2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.byte4x2.op_Explicit(GenMathematics.Matrices.ushort4x2)~GenMathematics.Matrices.byte4x2">
            <summary>
            Converts ushort4x2 to byte4x2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.byte4x2.op_Explicit(GenMathematics.Matrices.int4x2)~GenMathematics.Matrices.byte4x2">
            <summary>
            Converts int4x2 to byte4x2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.byte4x2.op_Explicit(GenMathematics.Matrices.uint4x2)~GenMathematics.Matrices.byte4x2">
            <summary>
            Converts uint4x2 to byte4x2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.byte4x2.op_Explicit(GenMathematics.Matrices.long4x2)~GenMathematics.Matrices.byte4x2">
            <summary>
            Converts long4x2 to byte4x2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.byte4x2.op_Explicit(GenMathematics.Matrices.ulong4x2)~GenMathematics.Matrices.byte4x2">
            <summary>
            Converts ulong4x2 to byte4x2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.byte4x2.op_Explicit(GenMathematics.Matrices.half4x2)~GenMathematics.Matrices.byte4x2">
            <summary>
            Converts half4x2 to byte4x2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.byte4x2.op_Explicit(GenMathematics.Matrices.float4x2)~GenMathematics.Matrices.byte4x2">
            <summary>
            Converts float4x2 to byte4x2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.byte4x2.op_Explicit(GenMathematics.Matrices.double4x2)~GenMathematics.Matrices.byte4x2">
            <summary>
            Converts double4x2 to byte4x2 with possible loss of information
            </summary>
        </member>
        <member name="T:GenMathematics.Matrices.byte4x3">
            <summary>
            Matrix of type byte with 4 rows and 3 columns using the column-major order
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.byte4x3.Column0">
            <summary>
            Matrix column with index 0
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.byte4x3.Column1">
            <summary>
            Matrix column with index 1
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.byte4x3.Column2">
            <summary>
            Matrix column with index 2
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.byte4x3.Row0">
            <summary>
            Matrix row with index 0
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.byte4x3.Row1">
            <summary>
            Matrix row with index 1
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.byte4x3.Row2">
            <summary>
            Matrix row with index 2
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.byte4x3.Row3">
            <summary>
            Matrix row with index 3
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.byte4x3.#ctor(GenMathematics.Vectors.byte4,GenMathematics.Vectors.byte4,GenMathematics.Vectors.byte4)">
            <summary>
            Creates a matrix from column values
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.byte4x3.#ctor(System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Creates a matrix from the values of rows and columns
            </summary>
            <param name="r0c0">The value to assign to row 0 and column 0 of the matrix</param>
            <param name="r0c1">The value to assign to row 0 and column 1 of the matrix</param>
            <param name="r0c2">The value to assign to row 0 and column 2 of the matrix</param>
            <param name="r1c0">The value to assign to row 1 and column 0 of the matrix</param>
            <param name="r1c1">The value to assign to row 1 and column 1 of the matrix</param>
            <param name="r1c2">The value to assign to row 1 and column 2 of the matrix</param>
            <param name="r2c0">The value to assign to row 2 and column 0 of the matrix</param>
            <param name="r2c1">The value to assign to row 2 and column 1 of the matrix</param>
            <param name="r2c2">The value to assign to row 2 and column 2 of the matrix</param>
            <param name="r3c0">The value to assign to row 3 and column 0 of the matrix</param>
            <param name="r3c1">The value to assign to row 3 and column 1 of the matrix</param>
            <param name="r3c2">The value to assign to row 3 and column 2 of the matrix</param>
        </member>
        <member name="P:GenMathematics.Matrices.byte4x3.Item(System.Int32)">
            <summary>
            To access via the reference use `Unsafe.Add(ref matrix.Column0, index)` instead
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.byte4x3.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.byte4x3.Equals(GenMathematics.Matrices.byte4x3)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.byte4x3.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.byte4x3.CompareTo(GenMathematics.Matrices.byte4x3)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.byte4x3.ToString">
            <summary>
            Returns the object's state information as a string
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.byte4x3.Extract(GenMathematics.Matrices.byte4x3@,System.Int32,System.Int32,GenMathematics.Matrices.byte4x3@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.byte4x3.Extract(GenMathematics.Matrices.byte4x3@,System.Int32,System.Int32,GenMathematics.Matrices.byte3x3@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.byte4x3.Extract(GenMathematics.Matrices.byte4x3@,System.Int32,System.Int32,GenMathematics.Matrices.byte2x3@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.byte4x3.Extract(GenMathematics.Matrices.byte4x3@,System.Int32,System.Int32,GenMathematics.Matrices.byte4x2@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.byte4x3.Extract(GenMathematics.Matrices.byte4x3@,System.Int32,System.Int32,GenMathematics.Matrices.byte3x2@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.byte4x3.Extract(GenMathematics.Matrices.byte4x3@,System.Int32,System.Int32,GenMathematics.Matrices.byte2x2@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.byte4x3.op_Explicit(GenMathematics.Matrices.sbyte4x3)~GenMathematics.Matrices.byte4x3">
            <summary>
            Converts sbyte4x3 to byte4x3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.byte4x3.op_Explicit(GenMathematics.Matrices.short4x3)~GenMathematics.Matrices.byte4x3">
            <summary>
            Converts short4x3 to byte4x3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.byte4x3.op_Explicit(GenMathematics.Matrices.ushort4x3)~GenMathematics.Matrices.byte4x3">
            <summary>
            Converts ushort4x3 to byte4x3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.byte4x3.op_Explicit(GenMathematics.Matrices.int4x3)~GenMathematics.Matrices.byte4x3">
            <summary>
            Converts int4x3 to byte4x3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.byte4x3.op_Explicit(GenMathematics.Matrices.uint4x3)~GenMathematics.Matrices.byte4x3">
            <summary>
            Converts uint4x3 to byte4x3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.byte4x3.op_Explicit(GenMathematics.Matrices.long4x3)~GenMathematics.Matrices.byte4x3">
            <summary>
            Converts long4x3 to byte4x3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.byte4x3.op_Explicit(GenMathematics.Matrices.ulong4x3)~GenMathematics.Matrices.byte4x3">
            <summary>
            Converts ulong4x3 to byte4x3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.byte4x3.op_Explicit(GenMathematics.Matrices.half4x3)~GenMathematics.Matrices.byte4x3">
            <summary>
            Converts half4x3 to byte4x3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.byte4x3.op_Explicit(GenMathematics.Matrices.float4x3)~GenMathematics.Matrices.byte4x3">
            <summary>
            Converts float4x3 to byte4x3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.byte4x3.op_Explicit(GenMathematics.Matrices.double4x3)~GenMathematics.Matrices.byte4x3">
            <summary>
            Converts double4x3 to byte4x3 with possible loss of information
            </summary>
        </member>
        <member name="T:GenMathematics.Matrices.byte4x4">
            <summary>
            Matrix of type byte with 4 rows and 4 columns using the column-major order
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.byte4x4.Column0">
            <summary>
            Matrix column with index 0
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.byte4x4.Column1">
            <summary>
            Matrix column with index 1
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.byte4x4.Column2">
            <summary>
            Matrix column with index 2
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.byte4x4.Column3">
            <summary>
            Matrix column with index 3
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.byte4x4.Row0">
            <summary>
            Matrix row with index 0
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.byte4x4.Row1">
            <summary>
            Matrix row with index 1
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.byte4x4.Row2">
            <summary>
            Matrix row with index 2
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.byte4x4.Row3">
            <summary>
            Matrix row with index 3
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.byte4x4.#ctor(GenMathematics.Vectors.byte4,GenMathematics.Vectors.byte4,GenMathematics.Vectors.byte4,GenMathematics.Vectors.byte4)">
            <summary>
            Creates a matrix from column values
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.byte4x4.#ctor(System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Creates a matrix from the values of rows and columns
            </summary>
            <param name="r0c0">The value to assign to row 0 and column 0 of the matrix</param>
            <param name="r0c1">The value to assign to row 0 and column 1 of the matrix</param>
            <param name="r0c2">The value to assign to row 0 and column 2 of the matrix</param>
            <param name="r0c3">The value to assign to row 0 and column 3 of the matrix</param>
            <param name="r1c0">The value to assign to row 1 and column 0 of the matrix</param>
            <param name="r1c1">The value to assign to row 1 and column 1 of the matrix</param>
            <param name="r1c2">The value to assign to row 1 and column 2 of the matrix</param>
            <param name="r1c3">The value to assign to row 1 and column 3 of the matrix</param>
            <param name="r2c0">The value to assign to row 2 and column 0 of the matrix</param>
            <param name="r2c1">The value to assign to row 2 and column 1 of the matrix</param>
            <param name="r2c2">The value to assign to row 2 and column 2 of the matrix</param>
            <param name="r2c3">The value to assign to row 2 and column 3 of the matrix</param>
            <param name="r3c0">The value to assign to row 3 and column 0 of the matrix</param>
            <param name="r3c1">The value to assign to row 3 and column 1 of the matrix</param>
            <param name="r3c2">The value to assign to row 3 and column 2 of the matrix</param>
            <param name="r3c3">The value to assign to row 3 and column 3 of the matrix</param>
        </member>
        <member name="P:GenMathematics.Matrices.byte4x4.Item(System.Int32)">
            <summary>
            To access via the reference use `Unsafe.Add(ref matrix.Column0, index)` instead
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.byte4x4.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.byte4x4.Equals(GenMathematics.Matrices.byte4x4)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.byte4x4.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.byte4x4.CompareTo(GenMathematics.Matrices.byte4x4)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.byte4x4.ToString">
            <summary>
            Returns the object's state information as a string
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.byte4x4.Extract(GenMathematics.Matrices.byte4x4@,System.Int32,System.Int32,GenMathematics.Matrices.byte4x4@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.byte4x4.Extract(GenMathematics.Matrices.byte4x4@,System.Int32,System.Int32,GenMathematics.Matrices.byte3x4@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.byte4x4.Extract(GenMathematics.Matrices.byte4x4@,System.Int32,System.Int32,GenMathematics.Matrices.byte2x4@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.byte4x4.Extract(GenMathematics.Matrices.byte4x4@,System.Int32,System.Int32,GenMathematics.Matrices.byte4x3@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.byte4x4.Extract(GenMathematics.Matrices.byte4x4@,System.Int32,System.Int32,GenMathematics.Matrices.byte3x3@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.byte4x4.Extract(GenMathematics.Matrices.byte4x4@,System.Int32,System.Int32,GenMathematics.Matrices.byte2x3@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.byte4x4.Extract(GenMathematics.Matrices.byte4x4@,System.Int32,System.Int32,GenMathematics.Matrices.byte4x2@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.byte4x4.Extract(GenMathematics.Matrices.byte4x4@,System.Int32,System.Int32,GenMathematics.Matrices.byte3x2@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.byte4x4.Extract(GenMathematics.Matrices.byte4x4@,System.Int32,System.Int32,GenMathematics.Matrices.byte2x2@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.byte4x4.op_Explicit(GenMathematics.Matrices.sbyte4x4)~GenMathematics.Matrices.byte4x4">
            <summary>
            Converts sbyte4x4 to byte4x4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.byte4x4.op_Explicit(GenMathematics.Matrices.short4x4)~GenMathematics.Matrices.byte4x4">
            <summary>
            Converts short4x4 to byte4x4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.byte4x4.op_Explicit(GenMathematics.Matrices.ushort4x4)~GenMathematics.Matrices.byte4x4">
            <summary>
            Converts ushort4x4 to byte4x4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.byte4x4.op_Explicit(GenMathematics.Matrices.int4x4)~GenMathematics.Matrices.byte4x4">
            <summary>
            Converts int4x4 to byte4x4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.byte4x4.op_Explicit(GenMathematics.Matrices.uint4x4)~GenMathematics.Matrices.byte4x4">
            <summary>
            Converts uint4x4 to byte4x4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.byte4x4.op_Explicit(GenMathematics.Matrices.long4x4)~GenMathematics.Matrices.byte4x4">
            <summary>
            Converts long4x4 to byte4x4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.byte4x4.op_Explicit(GenMathematics.Matrices.ulong4x4)~GenMathematics.Matrices.byte4x4">
            <summary>
            Converts ulong4x4 to byte4x4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.byte4x4.op_Explicit(GenMathematics.Matrices.half4x4)~GenMathematics.Matrices.byte4x4">
            <summary>
            Converts half4x4 to byte4x4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.byte4x4.op_Explicit(GenMathematics.Matrices.float4x4)~GenMathematics.Matrices.byte4x4">
            <summary>
            Converts float4x4 to byte4x4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.byte4x4.op_Explicit(GenMathematics.Matrices.double4x4)~GenMathematics.Matrices.byte4x4">
            <summary>
            Converts double4x4 to byte4x4 with possible loss of information
            </summary>
        </member>
        <member name="T:GenMathematics.Matrices.double2x2">
            <summary>
            Matrix of type double with 2 rows and 2 columns using the column-major order
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.double2x2.Column0">
            <summary>
            Matrix column with index 0
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.double2x2.Column1">
            <summary>
            Matrix column with index 1
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.double2x2.Row0">
            <summary>
            Matrix row with index 0
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.double2x2.Row1">
            <summary>
            Matrix row with index 1
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double2x2.#ctor(GenMathematics.Vectors.double2,GenMathematics.Vectors.double2)">
            <summary>
            Creates a matrix from column values
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double2x2.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Creates a matrix from the values of rows and columns
            </summary>
            <param name="r0c0">The value to assign to row 0 and column 0 of the matrix</param>
            <param name="r0c1">The value to assign to row 0 and column 1 of the matrix</param>
            <param name="r1c0">The value to assign to row 1 and column 0 of the matrix</param>
            <param name="r1c1">The value to assign to row 1 and column 1 of the matrix</param>
        </member>
        <member name="P:GenMathematics.Matrices.double2x2.Item(System.Int32)">
            <summary>
            To access via the reference use `Unsafe.Add(ref matrix.Column0, index)` instead
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double2x2.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.double2x2.Equals(GenMathematics.Matrices.double2x2)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.double2x2.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.double2x2.CompareTo(GenMathematics.Matrices.double2x2)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.double2x2.ToString">
            <summary>
            Returns the object's state information as a string
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double2x2.Extract(GenMathematics.Matrices.double2x2@,System.Int32,System.Int32,GenMathematics.Matrices.double2x2@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double2x2.Multiply(GenMathematics.Matrices.double2x2,System.Double)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double2x2.Multiply(System.Double,GenMathematics.Matrices.double2x2)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double2x2.Multiply(GenMathematics.Matrices.double2x2@,System.Double,GenMathematics.Matrices.double2x2@)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double2x2.Multiply(System.Double,GenMathematics.Matrices.double2x2@,GenMathematics.Matrices.double2x2@)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double2x2.Divide(GenMathematics.Matrices.double2x2,System.Double)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double2x2.Divide(System.Double,GenMathematics.Matrices.double2x2)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double2x2.Divide(GenMathematics.Matrices.double2x2@,System.Double,GenMathematics.Matrices.double2x2@)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double2x2.Divide(System.Double,GenMathematics.Matrices.double2x2@,GenMathematics.Matrices.double2x2@)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double2x2.op_Multiply(GenMathematics.Matrices.double2x2,System.Double)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double2x2.op_Multiply(System.Double,GenMathematics.Matrices.double2x2)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double2x2.op_Division(GenMathematics.Matrices.double2x2,System.Double)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double2x2.op_Division(System.Double,GenMathematics.Matrices.double2x2)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double2x2.op_Implicit(GenMathematics.Matrices.byte2x2)~GenMathematics.Matrices.double2x2">
            <summary>
            Converts byte2x2 to double2x2
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double2x2.op_Implicit(GenMathematics.Matrices.sbyte2x2)~GenMathematics.Matrices.double2x2">
            <summary>
            Converts sbyte2x2 to double2x2
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double2x2.op_Implicit(GenMathematics.Matrices.short2x2)~GenMathematics.Matrices.double2x2">
            <summary>
            Converts short2x2 to double2x2
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double2x2.op_Implicit(GenMathematics.Matrices.ushort2x2)~GenMathematics.Matrices.double2x2">
            <summary>
            Converts ushort2x2 to double2x2
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double2x2.op_Implicit(GenMathematics.Matrices.int2x2)~GenMathematics.Matrices.double2x2">
            <summary>
            Converts int2x2 to double2x2
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double2x2.op_Implicit(GenMathematics.Matrices.uint2x2)~GenMathematics.Matrices.double2x2">
            <summary>
            Converts uint2x2 to double2x2
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double2x2.op_Implicit(GenMathematics.Matrices.long2x2)~GenMathematics.Matrices.double2x2">
            <summary>
            Converts long2x2 to double2x2
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double2x2.op_Implicit(GenMathematics.Matrices.ulong2x2)~GenMathematics.Matrices.double2x2">
            <summary>
            Converts ulong2x2 to double2x2
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double2x2.op_Implicit(GenMathematics.Matrices.half2x2)~GenMathematics.Matrices.double2x2">
            <summary>
            Converts half2x2 to double2x2
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double2x2.op_Implicit(GenMathematics.Matrices.float2x2)~GenMathematics.Matrices.double2x2">
            <summary>
            Converts float2x2 to double2x2
            </summary>
        </member>
        <member name="T:GenMathematics.Matrices.double2x3">
            <summary>
            Matrix of type double with 2 rows and 3 columns using the column-major order
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.double2x3.Column0">
            <summary>
            Matrix column with index 0
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.double2x3.Column1">
            <summary>
            Matrix column with index 1
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.double2x3.Column2">
            <summary>
            Matrix column with index 2
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.double2x3.Row0">
            <summary>
            Matrix row with index 0
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.double2x3.Row1">
            <summary>
            Matrix row with index 1
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double2x3.#ctor(GenMathematics.Vectors.double2,GenMathematics.Vectors.double2,GenMathematics.Vectors.double2)">
            <summary>
            Creates a matrix from column values
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double2x3.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Creates a matrix from the values of rows and columns
            </summary>
            <param name="r0c0">The value to assign to row 0 and column 0 of the matrix</param>
            <param name="r0c1">The value to assign to row 0 and column 1 of the matrix</param>
            <param name="r0c2">The value to assign to row 0 and column 2 of the matrix</param>
            <param name="r1c0">The value to assign to row 1 and column 0 of the matrix</param>
            <param name="r1c1">The value to assign to row 1 and column 1 of the matrix</param>
            <param name="r1c2">The value to assign to row 1 and column 2 of the matrix</param>
        </member>
        <member name="P:GenMathematics.Matrices.double2x3.Item(System.Int32)">
            <summary>
            To access via the reference use `Unsafe.Add(ref matrix.Column0, index)` instead
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double2x3.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.double2x3.Equals(GenMathematics.Matrices.double2x3)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.double2x3.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.double2x3.CompareTo(GenMathematics.Matrices.double2x3)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.double2x3.ToString">
            <summary>
            Returns the object's state information as a string
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double2x3.Extract(GenMathematics.Matrices.double2x3@,System.Int32,System.Int32,GenMathematics.Matrices.double2x3@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double2x3.Extract(GenMathematics.Matrices.double2x3@,System.Int32,System.Int32,GenMathematics.Matrices.double2x2@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double2x3.Multiply(GenMathematics.Matrices.double2x3,System.Double)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double2x3.Multiply(System.Double,GenMathematics.Matrices.double2x3)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double2x3.Multiply(GenMathematics.Matrices.double2x3@,System.Double,GenMathematics.Matrices.double2x3@)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double2x3.Multiply(System.Double,GenMathematics.Matrices.double2x3@,GenMathematics.Matrices.double2x3@)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double2x3.Divide(GenMathematics.Matrices.double2x3,System.Double)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double2x3.Divide(System.Double,GenMathematics.Matrices.double2x3)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double2x3.Divide(GenMathematics.Matrices.double2x3@,System.Double,GenMathematics.Matrices.double2x3@)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double2x3.Divide(System.Double,GenMathematics.Matrices.double2x3@,GenMathematics.Matrices.double2x3@)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double2x3.op_Multiply(GenMathematics.Matrices.double2x3,System.Double)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double2x3.op_Multiply(System.Double,GenMathematics.Matrices.double2x3)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double2x3.op_Division(GenMathematics.Matrices.double2x3,System.Double)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double2x3.op_Division(System.Double,GenMathematics.Matrices.double2x3)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double2x3.op_Implicit(GenMathematics.Matrices.byte2x3)~GenMathematics.Matrices.double2x3">
            <summary>
            Converts byte2x3 to double2x3
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double2x3.op_Implicit(GenMathematics.Matrices.sbyte2x3)~GenMathematics.Matrices.double2x3">
            <summary>
            Converts sbyte2x3 to double2x3
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double2x3.op_Implicit(GenMathematics.Matrices.short2x3)~GenMathematics.Matrices.double2x3">
            <summary>
            Converts short2x3 to double2x3
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double2x3.op_Implicit(GenMathematics.Matrices.ushort2x3)~GenMathematics.Matrices.double2x3">
            <summary>
            Converts ushort2x3 to double2x3
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double2x3.op_Implicit(GenMathematics.Matrices.int2x3)~GenMathematics.Matrices.double2x3">
            <summary>
            Converts int2x3 to double2x3
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double2x3.op_Implicit(GenMathematics.Matrices.uint2x3)~GenMathematics.Matrices.double2x3">
            <summary>
            Converts uint2x3 to double2x3
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double2x3.op_Implicit(GenMathematics.Matrices.long2x3)~GenMathematics.Matrices.double2x3">
            <summary>
            Converts long2x3 to double2x3
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double2x3.op_Implicit(GenMathematics.Matrices.ulong2x3)~GenMathematics.Matrices.double2x3">
            <summary>
            Converts ulong2x3 to double2x3
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double2x3.op_Implicit(GenMathematics.Matrices.half2x3)~GenMathematics.Matrices.double2x3">
            <summary>
            Converts half2x3 to double2x3
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double2x3.op_Implicit(GenMathematics.Matrices.float2x3)~GenMathematics.Matrices.double2x3">
            <summary>
            Converts float2x3 to double2x3
            </summary>
        </member>
        <member name="T:GenMathematics.Matrices.double2x4">
            <summary>
            Matrix of type double with 2 rows and 4 columns using the column-major order
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.double2x4.Column0">
            <summary>
            Matrix column with index 0
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.double2x4.Column1">
            <summary>
            Matrix column with index 1
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.double2x4.Column2">
            <summary>
            Matrix column with index 2
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.double2x4.Column3">
            <summary>
            Matrix column with index 3
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.double2x4.Row0">
            <summary>
            Matrix row with index 0
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.double2x4.Row1">
            <summary>
            Matrix row with index 1
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double2x4.#ctor(GenMathematics.Vectors.double2,GenMathematics.Vectors.double2,GenMathematics.Vectors.double2,GenMathematics.Vectors.double2)">
            <summary>
            Creates a matrix from column values
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double2x4.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Creates a matrix from the values of rows and columns
            </summary>
            <param name="r0c0">The value to assign to row 0 and column 0 of the matrix</param>
            <param name="r0c1">The value to assign to row 0 and column 1 of the matrix</param>
            <param name="r0c2">The value to assign to row 0 and column 2 of the matrix</param>
            <param name="r0c3">The value to assign to row 0 and column 3 of the matrix</param>
            <param name="r1c0">The value to assign to row 1 and column 0 of the matrix</param>
            <param name="r1c1">The value to assign to row 1 and column 1 of the matrix</param>
            <param name="r1c2">The value to assign to row 1 and column 2 of the matrix</param>
            <param name="r1c3">The value to assign to row 1 and column 3 of the matrix</param>
        </member>
        <member name="P:GenMathematics.Matrices.double2x4.Item(System.Int32)">
            <summary>
            To access via the reference use `Unsafe.Add(ref matrix.Column0, index)` instead
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double2x4.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.double2x4.Equals(GenMathematics.Matrices.double2x4)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.double2x4.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.double2x4.CompareTo(GenMathematics.Matrices.double2x4)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.double2x4.ToString">
            <summary>
            Returns the object's state information as a string
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double2x4.Extract(GenMathematics.Matrices.double2x4@,System.Int32,System.Int32,GenMathematics.Matrices.double2x4@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double2x4.Extract(GenMathematics.Matrices.double2x4@,System.Int32,System.Int32,GenMathematics.Matrices.double2x3@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double2x4.Extract(GenMathematics.Matrices.double2x4@,System.Int32,System.Int32,GenMathematics.Matrices.double2x2@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double2x4.Multiply(GenMathematics.Matrices.double2x4,System.Double)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double2x4.Multiply(System.Double,GenMathematics.Matrices.double2x4)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double2x4.Multiply(GenMathematics.Matrices.double2x4@,System.Double,GenMathematics.Matrices.double2x4@)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double2x4.Multiply(System.Double,GenMathematics.Matrices.double2x4@,GenMathematics.Matrices.double2x4@)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double2x4.Divide(GenMathematics.Matrices.double2x4,System.Double)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double2x4.Divide(System.Double,GenMathematics.Matrices.double2x4)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double2x4.Divide(GenMathematics.Matrices.double2x4@,System.Double,GenMathematics.Matrices.double2x4@)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double2x4.Divide(System.Double,GenMathematics.Matrices.double2x4@,GenMathematics.Matrices.double2x4@)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double2x4.op_Multiply(GenMathematics.Matrices.double2x4,System.Double)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double2x4.op_Multiply(System.Double,GenMathematics.Matrices.double2x4)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double2x4.op_Division(GenMathematics.Matrices.double2x4,System.Double)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double2x4.op_Division(System.Double,GenMathematics.Matrices.double2x4)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double2x4.op_Implicit(GenMathematics.Matrices.byte2x4)~GenMathematics.Matrices.double2x4">
            <summary>
            Converts byte2x4 to double2x4
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double2x4.op_Implicit(GenMathematics.Matrices.sbyte2x4)~GenMathematics.Matrices.double2x4">
            <summary>
            Converts sbyte2x4 to double2x4
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double2x4.op_Implicit(GenMathematics.Matrices.short2x4)~GenMathematics.Matrices.double2x4">
            <summary>
            Converts short2x4 to double2x4
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double2x4.op_Implicit(GenMathematics.Matrices.ushort2x4)~GenMathematics.Matrices.double2x4">
            <summary>
            Converts ushort2x4 to double2x4
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double2x4.op_Implicit(GenMathematics.Matrices.int2x4)~GenMathematics.Matrices.double2x4">
            <summary>
            Converts int2x4 to double2x4
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double2x4.op_Implicit(GenMathematics.Matrices.uint2x4)~GenMathematics.Matrices.double2x4">
            <summary>
            Converts uint2x4 to double2x4
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double2x4.op_Implicit(GenMathematics.Matrices.long2x4)~GenMathematics.Matrices.double2x4">
            <summary>
            Converts long2x4 to double2x4
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double2x4.op_Implicit(GenMathematics.Matrices.ulong2x4)~GenMathematics.Matrices.double2x4">
            <summary>
            Converts ulong2x4 to double2x4
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double2x4.op_Implicit(GenMathematics.Matrices.half2x4)~GenMathematics.Matrices.double2x4">
            <summary>
            Converts half2x4 to double2x4
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double2x4.op_Implicit(GenMathematics.Matrices.float2x4)~GenMathematics.Matrices.double2x4">
            <summary>
            Converts float2x4 to double2x4
            </summary>
        </member>
        <member name="T:GenMathematics.Matrices.double3x2">
            <summary>
            Matrix of type double with 3 rows and 2 columns using the column-major order
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.double3x2.Column0">
            <summary>
            Matrix column with index 0
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.double3x2.Column1">
            <summary>
            Matrix column with index 1
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.double3x2.Row0">
            <summary>
            Matrix row with index 0
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.double3x2.Row1">
            <summary>
            Matrix row with index 1
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.double3x2.Row2">
            <summary>
            Matrix row with index 2
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double3x2.#ctor(GenMathematics.Vectors.double3,GenMathematics.Vectors.double3)">
            <summary>
            Creates a matrix from column values
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double3x2.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Creates a matrix from the values of rows and columns
            </summary>
            <param name="r0c0">The value to assign to row 0 and column 0 of the matrix</param>
            <param name="r0c1">The value to assign to row 0 and column 1 of the matrix</param>
            <param name="r1c0">The value to assign to row 1 and column 0 of the matrix</param>
            <param name="r1c1">The value to assign to row 1 and column 1 of the matrix</param>
            <param name="r2c0">The value to assign to row 2 and column 0 of the matrix</param>
            <param name="r2c1">The value to assign to row 2 and column 1 of the matrix</param>
        </member>
        <member name="P:GenMathematics.Matrices.double3x2.Item(System.Int32)">
            <summary>
            To access via the reference use `Unsafe.Add(ref matrix.Column0, index)` instead
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double3x2.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.double3x2.Equals(GenMathematics.Matrices.double3x2)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.double3x2.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.double3x2.CompareTo(GenMathematics.Matrices.double3x2)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.double3x2.ToString">
            <summary>
            Returns the object's state information as a string
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double3x2.Extract(GenMathematics.Matrices.double3x2@,System.Int32,System.Int32,GenMathematics.Matrices.double3x2@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double3x2.Extract(GenMathematics.Matrices.double3x2@,System.Int32,System.Int32,GenMathematics.Matrices.double2x2@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double3x2.Multiply(GenMathematics.Matrices.double3x2,System.Double)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double3x2.Multiply(System.Double,GenMathematics.Matrices.double3x2)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double3x2.Multiply(GenMathematics.Matrices.double3x2@,System.Double,GenMathematics.Matrices.double3x2@)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double3x2.Multiply(System.Double,GenMathematics.Matrices.double3x2@,GenMathematics.Matrices.double3x2@)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double3x2.Divide(GenMathematics.Matrices.double3x2,System.Double)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double3x2.Divide(System.Double,GenMathematics.Matrices.double3x2)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double3x2.Divide(GenMathematics.Matrices.double3x2@,System.Double,GenMathematics.Matrices.double3x2@)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double3x2.Divide(System.Double,GenMathematics.Matrices.double3x2@,GenMathematics.Matrices.double3x2@)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double3x2.op_Multiply(GenMathematics.Matrices.double3x2,System.Double)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double3x2.op_Multiply(System.Double,GenMathematics.Matrices.double3x2)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double3x2.op_Division(GenMathematics.Matrices.double3x2,System.Double)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double3x2.op_Division(System.Double,GenMathematics.Matrices.double3x2)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double3x2.op_Implicit(GenMathematics.Matrices.byte3x2)~GenMathematics.Matrices.double3x2">
            <summary>
            Converts byte3x2 to double3x2
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double3x2.op_Implicit(GenMathematics.Matrices.sbyte3x2)~GenMathematics.Matrices.double3x2">
            <summary>
            Converts sbyte3x2 to double3x2
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double3x2.op_Implicit(GenMathematics.Matrices.short3x2)~GenMathematics.Matrices.double3x2">
            <summary>
            Converts short3x2 to double3x2
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double3x2.op_Implicit(GenMathematics.Matrices.ushort3x2)~GenMathematics.Matrices.double3x2">
            <summary>
            Converts ushort3x2 to double3x2
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double3x2.op_Implicit(GenMathematics.Matrices.int3x2)~GenMathematics.Matrices.double3x2">
            <summary>
            Converts int3x2 to double3x2
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double3x2.op_Implicit(GenMathematics.Matrices.uint3x2)~GenMathematics.Matrices.double3x2">
            <summary>
            Converts uint3x2 to double3x2
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double3x2.op_Implicit(GenMathematics.Matrices.long3x2)~GenMathematics.Matrices.double3x2">
            <summary>
            Converts long3x2 to double3x2
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double3x2.op_Implicit(GenMathematics.Matrices.ulong3x2)~GenMathematics.Matrices.double3x2">
            <summary>
            Converts ulong3x2 to double3x2
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double3x2.op_Implicit(GenMathematics.Matrices.half3x2)~GenMathematics.Matrices.double3x2">
            <summary>
            Converts half3x2 to double3x2
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double3x2.op_Implicit(GenMathematics.Matrices.float3x2)~GenMathematics.Matrices.double3x2">
            <summary>
            Converts float3x2 to double3x2
            </summary>
        </member>
        <member name="T:GenMathematics.Matrices.double3x3">
            <summary>
            Matrix of type double with 3 rows and 3 columns using the column-major order
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.double3x3.Column0">
            <summary>
            Matrix column with index 0
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.double3x3.Column1">
            <summary>
            Matrix column with index 1
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.double3x3.Column2">
            <summary>
            Matrix column with index 2
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.double3x3.Row0">
            <summary>
            Matrix row with index 0
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.double3x3.Row1">
            <summary>
            Matrix row with index 1
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.double3x3.Row2">
            <summary>
            Matrix row with index 2
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double3x3.#ctor(GenMathematics.Vectors.double3,GenMathematics.Vectors.double3,GenMathematics.Vectors.double3)">
            <summary>
            Creates a matrix from column values
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double3x3.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Creates a matrix from the values of rows and columns
            </summary>
            <param name="r0c0">The value to assign to row 0 and column 0 of the matrix</param>
            <param name="r0c1">The value to assign to row 0 and column 1 of the matrix</param>
            <param name="r0c2">The value to assign to row 0 and column 2 of the matrix</param>
            <param name="r1c0">The value to assign to row 1 and column 0 of the matrix</param>
            <param name="r1c1">The value to assign to row 1 and column 1 of the matrix</param>
            <param name="r1c2">The value to assign to row 1 and column 2 of the matrix</param>
            <param name="r2c0">The value to assign to row 2 and column 0 of the matrix</param>
            <param name="r2c1">The value to assign to row 2 and column 1 of the matrix</param>
            <param name="r2c2">The value to assign to row 2 and column 2 of the matrix</param>
        </member>
        <member name="P:GenMathematics.Matrices.double3x3.Item(System.Int32)">
            <summary>
            To access via the reference use `Unsafe.Add(ref matrix.Column0, index)` instead
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double3x3.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.double3x3.Equals(GenMathematics.Matrices.double3x3)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.double3x3.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.double3x3.CompareTo(GenMathematics.Matrices.double3x3)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.double3x3.ToString">
            <summary>
            Returns the object's state information as a string
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double3x3.Extract(GenMathematics.Matrices.double3x3@,System.Int32,System.Int32,GenMathematics.Matrices.double3x3@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double3x3.Extract(GenMathematics.Matrices.double3x3@,System.Int32,System.Int32,GenMathematics.Matrices.double2x3@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double3x3.Extract(GenMathematics.Matrices.double3x3@,System.Int32,System.Int32,GenMathematics.Matrices.double3x2@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double3x3.Extract(GenMathematics.Matrices.double3x3@,System.Int32,System.Int32,GenMathematics.Matrices.double2x2@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double3x3.Multiply(GenMathematics.Matrices.double3x3,System.Double)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double3x3.Multiply(System.Double,GenMathematics.Matrices.double3x3)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double3x3.Multiply(GenMathematics.Matrices.double3x3@,System.Double,GenMathematics.Matrices.double3x3@)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double3x3.Multiply(System.Double,GenMathematics.Matrices.double3x3@,GenMathematics.Matrices.double3x3@)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double3x3.Divide(GenMathematics.Matrices.double3x3,System.Double)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double3x3.Divide(System.Double,GenMathematics.Matrices.double3x3)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double3x3.Divide(GenMathematics.Matrices.double3x3@,System.Double,GenMathematics.Matrices.double3x3@)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double3x3.Divide(System.Double,GenMathematics.Matrices.double3x3@,GenMathematics.Matrices.double3x3@)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double3x3.op_Multiply(GenMathematics.Matrices.double3x3,System.Double)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double3x3.op_Multiply(System.Double,GenMathematics.Matrices.double3x3)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double3x3.op_Division(GenMathematics.Matrices.double3x3,System.Double)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double3x3.op_Division(System.Double,GenMathematics.Matrices.double3x3)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double3x3.op_Implicit(GenMathematics.Matrices.byte3x3)~GenMathematics.Matrices.double3x3">
            <summary>
            Converts byte3x3 to double3x3
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double3x3.op_Implicit(GenMathematics.Matrices.sbyte3x3)~GenMathematics.Matrices.double3x3">
            <summary>
            Converts sbyte3x3 to double3x3
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double3x3.op_Implicit(GenMathematics.Matrices.short3x3)~GenMathematics.Matrices.double3x3">
            <summary>
            Converts short3x3 to double3x3
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double3x3.op_Implicit(GenMathematics.Matrices.ushort3x3)~GenMathematics.Matrices.double3x3">
            <summary>
            Converts ushort3x3 to double3x3
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double3x3.op_Implicit(GenMathematics.Matrices.int3x3)~GenMathematics.Matrices.double3x3">
            <summary>
            Converts int3x3 to double3x3
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double3x3.op_Implicit(GenMathematics.Matrices.uint3x3)~GenMathematics.Matrices.double3x3">
            <summary>
            Converts uint3x3 to double3x3
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double3x3.op_Implicit(GenMathematics.Matrices.long3x3)~GenMathematics.Matrices.double3x3">
            <summary>
            Converts long3x3 to double3x3
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double3x3.op_Implicit(GenMathematics.Matrices.ulong3x3)~GenMathematics.Matrices.double3x3">
            <summary>
            Converts ulong3x3 to double3x3
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double3x3.op_Implicit(GenMathematics.Matrices.half3x3)~GenMathematics.Matrices.double3x3">
            <summary>
            Converts half3x3 to double3x3
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double3x3.op_Implicit(GenMathematics.Matrices.float3x3)~GenMathematics.Matrices.double3x3">
            <summary>
            Converts float3x3 to double3x3
            </summary>
        </member>
        <member name="T:GenMathematics.Matrices.double3x4">
            <summary>
            Matrix of type double with 3 rows and 4 columns using the column-major order
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.double3x4.Column0">
            <summary>
            Matrix column with index 0
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.double3x4.Column1">
            <summary>
            Matrix column with index 1
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.double3x4.Column2">
            <summary>
            Matrix column with index 2
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.double3x4.Column3">
            <summary>
            Matrix column with index 3
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.double3x4.Row0">
            <summary>
            Matrix row with index 0
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.double3x4.Row1">
            <summary>
            Matrix row with index 1
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.double3x4.Row2">
            <summary>
            Matrix row with index 2
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double3x4.#ctor(GenMathematics.Vectors.double3,GenMathematics.Vectors.double3,GenMathematics.Vectors.double3,GenMathematics.Vectors.double3)">
            <summary>
            Creates a matrix from column values
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double3x4.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Creates a matrix from the values of rows and columns
            </summary>
            <param name="r0c0">The value to assign to row 0 and column 0 of the matrix</param>
            <param name="r0c1">The value to assign to row 0 and column 1 of the matrix</param>
            <param name="r0c2">The value to assign to row 0 and column 2 of the matrix</param>
            <param name="r0c3">The value to assign to row 0 and column 3 of the matrix</param>
            <param name="r1c0">The value to assign to row 1 and column 0 of the matrix</param>
            <param name="r1c1">The value to assign to row 1 and column 1 of the matrix</param>
            <param name="r1c2">The value to assign to row 1 and column 2 of the matrix</param>
            <param name="r1c3">The value to assign to row 1 and column 3 of the matrix</param>
            <param name="r2c0">The value to assign to row 2 and column 0 of the matrix</param>
            <param name="r2c1">The value to assign to row 2 and column 1 of the matrix</param>
            <param name="r2c2">The value to assign to row 2 and column 2 of the matrix</param>
            <param name="r2c3">The value to assign to row 2 and column 3 of the matrix</param>
        </member>
        <member name="P:GenMathematics.Matrices.double3x4.Item(System.Int32)">
            <summary>
            To access via the reference use `Unsafe.Add(ref matrix.Column0, index)` instead
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double3x4.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.double3x4.Equals(GenMathematics.Matrices.double3x4)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.double3x4.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.double3x4.CompareTo(GenMathematics.Matrices.double3x4)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.double3x4.ToString">
            <summary>
            Returns the object's state information as a string
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double3x4.Extract(GenMathematics.Matrices.double3x4@,System.Int32,System.Int32,GenMathematics.Matrices.double3x4@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double3x4.Extract(GenMathematics.Matrices.double3x4@,System.Int32,System.Int32,GenMathematics.Matrices.double2x4@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double3x4.Extract(GenMathematics.Matrices.double3x4@,System.Int32,System.Int32,GenMathematics.Matrices.double3x3@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double3x4.Extract(GenMathematics.Matrices.double3x4@,System.Int32,System.Int32,GenMathematics.Matrices.double2x3@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double3x4.Extract(GenMathematics.Matrices.double3x4@,System.Int32,System.Int32,GenMathematics.Matrices.double3x2@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double3x4.Extract(GenMathematics.Matrices.double3x4@,System.Int32,System.Int32,GenMathematics.Matrices.double2x2@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double3x4.Multiply(GenMathematics.Matrices.double3x4,System.Double)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double3x4.Multiply(System.Double,GenMathematics.Matrices.double3x4)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double3x4.Multiply(GenMathematics.Matrices.double3x4@,System.Double,GenMathematics.Matrices.double3x4@)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double3x4.Multiply(System.Double,GenMathematics.Matrices.double3x4@,GenMathematics.Matrices.double3x4@)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double3x4.Divide(GenMathematics.Matrices.double3x4,System.Double)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double3x4.Divide(System.Double,GenMathematics.Matrices.double3x4)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double3x4.Divide(GenMathematics.Matrices.double3x4@,System.Double,GenMathematics.Matrices.double3x4@)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double3x4.Divide(System.Double,GenMathematics.Matrices.double3x4@,GenMathematics.Matrices.double3x4@)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double3x4.op_Multiply(GenMathematics.Matrices.double3x4,System.Double)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double3x4.op_Multiply(System.Double,GenMathematics.Matrices.double3x4)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double3x4.op_Division(GenMathematics.Matrices.double3x4,System.Double)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double3x4.op_Division(System.Double,GenMathematics.Matrices.double3x4)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double3x4.op_Implicit(GenMathematics.Matrices.byte3x4)~GenMathematics.Matrices.double3x4">
            <summary>
            Converts byte3x4 to double3x4
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double3x4.op_Implicit(GenMathematics.Matrices.sbyte3x4)~GenMathematics.Matrices.double3x4">
            <summary>
            Converts sbyte3x4 to double3x4
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double3x4.op_Implicit(GenMathematics.Matrices.short3x4)~GenMathematics.Matrices.double3x4">
            <summary>
            Converts short3x4 to double3x4
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double3x4.op_Implicit(GenMathematics.Matrices.ushort3x4)~GenMathematics.Matrices.double3x4">
            <summary>
            Converts ushort3x4 to double3x4
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double3x4.op_Implicit(GenMathematics.Matrices.int3x4)~GenMathematics.Matrices.double3x4">
            <summary>
            Converts int3x4 to double3x4
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double3x4.op_Implicit(GenMathematics.Matrices.uint3x4)~GenMathematics.Matrices.double3x4">
            <summary>
            Converts uint3x4 to double3x4
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double3x4.op_Implicit(GenMathematics.Matrices.long3x4)~GenMathematics.Matrices.double3x4">
            <summary>
            Converts long3x4 to double3x4
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double3x4.op_Implicit(GenMathematics.Matrices.ulong3x4)~GenMathematics.Matrices.double3x4">
            <summary>
            Converts ulong3x4 to double3x4
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double3x4.op_Implicit(GenMathematics.Matrices.half3x4)~GenMathematics.Matrices.double3x4">
            <summary>
            Converts half3x4 to double3x4
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double3x4.op_Implicit(GenMathematics.Matrices.float3x4)~GenMathematics.Matrices.double3x4">
            <summary>
            Converts float3x4 to double3x4
            </summary>
        </member>
        <member name="T:GenMathematics.Matrices.double4x2">
            <summary>
            Matrix of type double with 4 rows and 2 columns using the column-major order
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.double4x2.Column0">
            <summary>
            Matrix column with index 0
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.double4x2.Column1">
            <summary>
            Matrix column with index 1
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.double4x2.Row0">
            <summary>
            Matrix row with index 0
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.double4x2.Row1">
            <summary>
            Matrix row with index 1
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.double4x2.Row2">
            <summary>
            Matrix row with index 2
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.double4x2.Row3">
            <summary>
            Matrix row with index 3
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double4x2.#ctor(GenMathematics.Vectors.double4,GenMathematics.Vectors.double4)">
            <summary>
            Creates a matrix from column values
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double4x2.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Creates a matrix from the values of rows and columns
            </summary>
            <param name="r0c0">The value to assign to row 0 and column 0 of the matrix</param>
            <param name="r0c1">The value to assign to row 0 and column 1 of the matrix</param>
            <param name="r1c0">The value to assign to row 1 and column 0 of the matrix</param>
            <param name="r1c1">The value to assign to row 1 and column 1 of the matrix</param>
            <param name="r2c0">The value to assign to row 2 and column 0 of the matrix</param>
            <param name="r2c1">The value to assign to row 2 and column 1 of the matrix</param>
            <param name="r3c0">The value to assign to row 3 and column 0 of the matrix</param>
            <param name="r3c1">The value to assign to row 3 and column 1 of the matrix</param>
        </member>
        <member name="P:GenMathematics.Matrices.double4x2.Item(System.Int32)">
            <summary>
            To access via the reference use `Unsafe.Add(ref matrix.Column0, index)` instead
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double4x2.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.double4x2.Equals(GenMathematics.Matrices.double4x2)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.double4x2.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.double4x2.CompareTo(GenMathematics.Matrices.double4x2)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.double4x2.ToString">
            <summary>
            Returns the object's state information as a string
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double4x2.Extract(GenMathematics.Matrices.double4x2@,System.Int32,System.Int32,GenMathematics.Matrices.double4x2@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double4x2.Extract(GenMathematics.Matrices.double4x2@,System.Int32,System.Int32,GenMathematics.Matrices.double3x2@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double4x2.Extract(GenMathematics.Matrices.double4x2@,System.Int32,System.Int32,GenMathematics.Matrices.double2x2@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double4x2.Multiply(GenMathematics.Matrices.double4x2,System.Double)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double4x2.Multiply(System.Double,GenMathematics.Matrices.double4x2)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double4x2.Multiply(GenMathematics.Matrices.double4x2@,System.Double,GenMathematics.Matrices.double4x2@)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double4x2.Multiply(System.Double,GenMathematics.Matrices.double4x2@,GenMathematics.Matrices.double4x2@)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double4x2.Divide(GenMathematics.Matrices.double4x2,System.Double)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double4x2.Divide(System.Double,GenMathematics.Matrices.double4x2)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double4x2.Divide(GenMathematics.Matrices.double4x2@,System.Double,GenMathematics.Matrices.double4x2@)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double4x2.Divide(System.Double,GenMathematics.Matrices.double4x2@,GenMathematics.Matrices.double4x2@)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double4x2.op_Multiply(GenMathematics.Matrices.double4x2,System.Double)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double4x2.op_Multiply(System.Double,GenMathematics.Matrices.double4x2)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double4x2.op_Division(GenMathematics.Matrices.double4x2,System.Double)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double4x2.op_Division(System.Double,GenMathematics.Matrices.double4x2)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double4x2.op_Implicit(GenMathematics.Matrices.byte4x2)~GenMathematics.Matrices.double4x2">
            <summary>
            Converts byte4x2 to double4x2
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double4x2.op_Implicit(GenMathematics.Matrices.sbyte4x2)~GenMathematics.Matrices.double4x2">
            <summary>
            Converts sbyte4x2 to double4x2
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double4x2.op_Implicit(GenMathematics.Matrices.short4x2)~GenMathematics.Matrices.double4x2">
            <summary>
            Converts short4x2 to double4x2
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double4x2.op_Implicit(GenMathematics.Matrices.ushort4x2)~GenMathematics.Matrices.double4x2">
            <summary>
            Converts ushort4x2 to double4x2
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double4x2.op_Implicit(GenMathematics.Matrices.int4x2)~GenMathematics.Matrices.double4x2">
            <summary>
            Converts int4x2 to double4x2
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double4x2.op_Implicit(GenMathematics.Matrices.uint4x2)~GenMathematics.Matrices.double4x2">
            <summary>
            Converts uint4x2 to double4x2
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double4x2.op_Implicit(GenMathematics.Matrices.long4x2)~GenMathematics.Matrices.double4x2">
            <summary>
            Converts long4x2 to double4x2
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double4x2.op_Implicit(GenMathematics.Matrices.ulong4x2)~GenMathematics.Matrices.double4x2">
            <summary>
            Converts ulong4x2 to double4x2
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double4x2.op_Implicit(GenMathematics.Matrices.half4x2)~GenMathematics.Matrices.double4x2">
            <summary>
            Converts half4x2 to double4x2
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double4x2.op_Implicit(GenMathematics.Matrices.float4x2)~GenMathematics.Matrices.double4x2">
            <summary>
            Converts float4x2 to double4x2
            </summary>
        </member>
        <member name="T:GenMathematics.Matrices.double4x3">
            <summary>
            Matrix of type double with 4 rows and 3 columns using the column-major order
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.double4x3.Column0">
            <summary>
            Matrix column with index 0
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.double4x3.Column1">
            <summary>
            Matrix column with index 1
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.double4x3.Column2">
            <summary>
            Matrix column with index 2
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.double4x3.Row0">
            <summary>
            Matrix row with index 0
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.double4x3.Row1">
            <summary>
            Matrix row with index 1
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.double4x3.Row2">
            <summary>
            Matrix row with index 2
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.double4x3.Row3">
            <summary>
            Matrix row with index 3
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double4x3.#ctor(GenMathematics.Vectors.double4,GenMathematics.Vectors.double4,GenMathematics.Vectors.double4)">
            <summary>
            Creates a matrix from column values
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double4x3.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Creates a matrix from the values of rows and columns
            </summary>
            <param name="r0c0">The value to assign to row 0 and column 0 of the matrix</param>
            <param name="r0c1">The value to assign to row 0 and column 1 of the matrix</param>
            <param name="r0c2">The value to assign to row 0 and column 2 of the matrix</param>
            <param name="r1c0">The value to assign to row 1 and column 0 of the matrix</param>
            <param name="r1c1">The value to assign to row 1 and column 1 of the matrix</param>
            <param name="r1c2">The value to assign to row 1 and column 2 of the matrix</param>
            <param name="r2c0">The value to assign to row 2 and column 0 of the matrix</param>
            <param name="r2c1">The value to assign to row 2 and column 1 of the matrix</param>
            <param name="r2c2">The value to assign to row 2 and column 2 of the matrix</param>
            <param name="r3c0">The value to assign to row 3 and column 0 of the matrix</param>
            <param name="r3c1">The value to assign to row 3 and column 1 of the matrix</param>
            <param name="r3c2">The value to assign to row 3 and column 2 of the matrix</param>
        </member>
        <member name="P:GenMathematics.Matrices.double4x3.Item(System.Int32)">
            <summary>
            To access via the reference use `Unsafe.Add(ref matrix.Column0, index)` instead
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double4x3.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.double4x3.Equals(GenMathematics.Matrices.double4x3)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.double4x3.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.double4x3.CompareTo(GenMathematics.Matrices.double4x3)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.double4x3.ToString">
            <summary>
            Returns the object's state information as a string
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double4x3.Extract(GenMathematics.Matrices.double4x3@,System.Int32,System.Int32,GenMathematics.Matrices.double4x3@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double4x3.Extract(GenMathematics.Matrices.double4x3@,System.Int32,System.Int32,GenMathematics.Matrices.double3x3@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double4x3.Extract(GenMathematics.Matrices.double4x3@,System.Int32,System.Int32,GenMathematics.Matrices.double2x3@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double4x3.Extract(GenMathematics.Matrices.double4x3@,System.Int32,System.Int32,GenMathematics.Matrices.double4x2@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double4x3.Extract(GenMathematics.Matrices.double4x3@,System.Int32,System.Int32,GenMathematics.Matrices.double3x2@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double4x3.Extract(GenMathematics.Matrices.double4x3@,System.Int32,System.Int32,GenMathematics.Matrices.double2x2@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double4x3.Multiply(GenMathematics.Matrices.double4x3,System.Double)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double4x3.Multiply(System.Double,GenMathematics.Matrices.double4x3)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double4x3.Multiply(GenMathematics.Matrices.double4x3@,System.Double,GenMathematics.Matrices.double4x3@)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double4x3.Multiply(System.Double,GenMathematics.Matrices.double4x3@,GenMathematics.Matrices.double4x3@)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double4x3.Divide(GenMathematics.Matrices.double4x3,System.Double)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double4x3.Divide(System.Double,GenMathematics.Matrices.double4x3)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double4x3.Divide(GenMathematics.Matrices.double4x3@,System.Double,GenMathematics.Matrices.double4x3@)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double4x3.Divide(System.Double,GenMathematics.Matrices.double4x3@,GenMathematics.Matrices.double4x3@)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double4x3.op_Multiply(GenMathematics.Matrices.double4x3,System.Double)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double4x3.op_Multiply(System.Double,GenMathematics.Matrices.double4x3)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double4x3.op_Division(GenMathematics.Matrices.double4x3,System.Double)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double4x3.op_Division(System.Double,GenMathematics.Matrices.double4x3)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double4x3.op_Implicit(GenMathematics.Matrices.byte4x3)~GenMathematics.Matrices.double4x3">
            <summary>
            Converts byte4x3 to double4x3
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double4x3.op_Implicit(GenMathematics.Matrices.sbyte4x3)~GenMathematics.Matrices.double4x3">
            <summary>
            Converts sbyte4x3 to double4x3
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double4x3.op_Implicit(GenMathematics.Matrices.short4x3)~GenMathematics.Matrices.double4x3">
            <summary>
            Converts short4x3 to double4x3
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double4x3.op_Implicit(GenMathematics.Matrices.ushort4x3)~GenMathematics.Matrices.double4x3">
            <summary>
            Converts ushort4x3 to double4x3
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double4x3.op_Implicit(GenMathematics.Matrices.int4x3)~GenMathematics.Matrices.double4x3">
            <summary>
            Converts int4x3 to double4x3
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double4x3.op_Implicit(GenMathematics.Matrices.uint4x3)~GenMathematics.Matrices.double4x3">
            <summary>
            Converts uint4x3 to double4x3
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double4x3.op_Implicit(GenMathematics.Matrices.long4x3)~GenMathematics.Matrices.double4x3">
            <summary>
            Converts long4x3 to double4x3
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double4x3.op_Implicit(GenMathematics.Matrices.ulong4x3)~GenMathematics.Matrices.double4x3">
            <summary>
            Converts ulong4x3 to double4x3
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double4x3.op_Implicit(GenMathematics.Matrices.half4x3)~GenMathematics.Matrices.double4x3">
            <summary>
            Converts half4x3 to double4x3
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double4x3.op_Implicit(GenMathematics.Matrices.float4x3)~GenMathematics.Matrices.double4x3">
            <summary>
            Converts float4x3 to double4x3
            </summary>
        </member>
        <member name="T:GenMathematics.Matrices.double4x4">
            <summary>
            Matrix of type double with 4 rows and 4 columns using the column-major order
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.double4x4.Column0">
            <summary>
            Matrix column with index 0
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.double4x4.Column1">
            <summary>
            Matrix column with index 1
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.double4x4.Column2">
            <summary>
            Matrix column with index 2
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.double4x4.Column3">
            <summary>
            Matrix column with index 3
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.double4x4.Row0">
            <summary>
            Matrix row with index 0
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.double4x4.Row1">
            <summary>
            Matrix row with index 1
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.double4x4.Row2">
            <summary>
            Matrix row with index 2
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.double4x4.Row3">
            <summary>
            Matrix row with index 3
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double4x4.#ctor(GenMathematics.Vectors.double4,GenMathematics.Vectors.double4,GenMathematics.Vectors.double4,GenMathematics.Vectors.double4)">
            <summary>
            Creates a matrix from column values
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double4x4.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Creates a matrix from the values of rows and columns
            </summary>
            <param name="r0c0">The value to assign to row 0 and column 0 of the matrix</param>
            <param name="r0c1">The value to assign to row 0 and column 1 of the matrix</param>
            <param name="r0c2">The value to assign to row 0 and column 2 of the matrix</param>
            <param name="r0c3">The value to assign to row 0 and column 3 of the matrix</param>
            <param name="r1c0">The value to assign to row 1 and column 0 of the matrix</param>
            <param name="r1c1">The value to assign to row 1 and column 1 of the matrix</param>
            <param name="r1c2">The value to assign to row 1 and column 2 of the matrix</param>
            <param name="r1c3">The value to assign to row 1 and column 3 of the matrix</param>
            <param name="r2c0">The value to assign to row 2 and column 0 of the matrix</param>
            <param name="r2c1">The value to assign to row 2 and column 1 of the matrix</param>
            <param name="r2c2">The value to assign to row 2 and column 2 of the matrix</param>
            <param name="r2c3">The value to assign to row 2 and column 3 of the matrix</param>
            <param name="r3c0">The value to assign to row 3 and column 0 of the matrix</param>
            <param name="r3c1">The value to assign to row 3 and column 1 of the matrix</param>
            <param name="r3c2">The value to assign to row 3 and column 2 of the matrix</param>
            <param name="r3c3">The value to assign to row 3 and column 3 of the matrix</param>
        </member>
        <member name="P:GenMathematics.Matrices.double4x4.Item(System.Int32)">
            <summary>
            To access via the reference use `Unsafe.Add(ref matrix.Column0, index)` instead
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double4x4.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.double4x4.Equals(GenMathematics.Matrices.double4x4)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.double4x4.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.double4x4.CompareTo(GenMathematics.Matrices.double4x4)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.double4x4.ToString">
            <summary>
            Returns the object's state information as a string
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double4x4.Extract(GenMathematics.Matrices.double4x4@,System.Int32,System.Int32,GenMathematics.Matrices.double4x4@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double4x4.Extract(GenMathematics.Matrices.double4x4@,System.Int32,System.Int32,GenMathematics.Matrices.double3x4@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double4x4.Extract(GenMathematics.Matrices.double4x4@,System.Int32,System.Int32,GenMathematics.Matrices.double2x4@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double4x4.Extract(GenMathematics.Matrices.double4x4@,System.Int32,System.Int32,GenMathematics.Matrices.double4x3@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double4x4.Extract(GenMathematics.Matrices.double4x4@,System.Int32,System.Int32,GenMathematics.Matrices.double3x3@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double4x4.Extract(GenMathematics.Matrices.double4x4@,System.Int32,System.Int32,GenMathematics.Matrices.double2x3@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double4x4.Extract(GenMathematics.Matrices.double4x4@,System.Int32,System.Int32,GenMathematics.Matrices.double4x2@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double4x4.Extract(GenMathematics.Matrices.double4x4@,System.Int32,System.Int32,GenMathematics.Matrices.double3x2@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double4x4.Extract(GenMathematics.Matrices.double4x4@,System.Int32,System.Int32,GenMathematics.Matrices.double2x2@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double4x4.Multiply(GenMathematics.Matrices.double4x4,System.Double)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double4x4.Multiply(System.Double,GenMathematics.Matrices.double4x4)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double4x4.Multiply(GenMathematics.Matrices.double4x4@,System.Double,GenMathematics.Matrices.double4x4@)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double4x4.Multiply(System.Double,GenMathematics.Matrices.double4x4@,GenMathematics.Matrices.double4x4@)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double4x4.Divide(GenMathematics.Matrices.double4x4,System.Double)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double4x4.Divide(System.Double,GenMathematics.Matrices.double4x4)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double4x4.Divide(GenMathematics.Matrices.double4x4@,System.Double,GenMathematics.Matrices.double4x4@)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double4x4.Divide(System.Double,GenMathematics.Matrices.double4x4@,GenMathematics.Matrices.double4x4@)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double4x4.op_Multiply(GenMathematics.Matrices.double4x4,System.Double)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double4x4.op_Multiply(System.Double,GenMathematics.Matrices.double4x4)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double4x4.op_Division(GenMathematics.Matrices.double4x4,System.Double)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double4x4.op_Division(System.Double,GenMathematics.Matrices.double4x4)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double4x4.op_Implicit(GenMathematics.Matrices.byte4x4)~GenMathematics.Matrices.double4x4">
            <summary>
            Converts byte4x4 to double4x4
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double4x4.op_Implicit(GenMathematics.Matrices.sbyte4x4)~GenMathematics.Matrices.double4x4">
            <summary>
            Converts sbyte4x4 to double4x4
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double4x4.op_Implicit(GenMathematics.Matrices.short4x4)~GenMathematics.Matrices.double4x4">
            <summary>
            Converts short4x4 to double4x4
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double4x4.op_Implicit(GenMathematics.Matrices.ushort4x4)~GenMathematics.Matrices.double4x4">
            <summary>
            Converts ushort4x4 to double4x4
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double4x4.op_Implicit(GenMathematics.Matrices.int4x4)~GenMathematics.Matrices.double4x4">
            <summary>
            Converts int4x4 to double4x4
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double4x4.op_Implicit(GenMathematics.Matrices.uint4x4)~GenMathematics.Matrices.double4x4">
            <summary>
            Converts uint4x4 to double4x4
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double4x4.op_Implicit(GenMathematics.Matrices.long4x4)~GenMathematics.Matrices.double4x4">
            <summary>
            Converts long4x4 to double4x4
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double4x4.op_Implicit(GenMathematics.Matrices.ulong4x4)~GenMathematics.Matrices.double4x4">
            <summary>
            Converts ulong4x4 to double4x4
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double4x4.op_Implicit(GenMathematics.Matrices.half4x4)~GenMathematics.Matrices.double4x4">
            <summary>
            Converts half4x4 to double4x4
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.double4x4.op_Implicit(GenMathematics.Matrices.float4x4)~GenMathematics.Matrices.double4x4">
            <summary>
            Converts float4x4 to double4x4
            </summary>
        </member>
        <member name="T:GenMathematics.Matrices.float2x2">
            <summary>
            Matrix of type float with 2 rows and 2 columns using the column-major order
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.float2x2.Column0">
            <summary>
            Matrix column with index 0
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.float2x2.Column1">
            <summary>
            Matrix column with index 1
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.float2x2.Row0">
            <summary>
            Matrix row with index 0
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.float2x2.Row1">
            <summary>
            Matrix row with index 1
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float2x2.#ctor(GenMathematics.Vectors.float2,GenMathematics.Vectors.float2)">
            <summary>
            Creates a matrix from column values
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float2x2.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a matrix from the values of rows and columns
            </summary>
            <param name="r0c0">The value to assign to row 0 and column 0 of the matrix</param>
            <param name="r0c1">The value to assign to row 0 and column 1 of the matrix</param>
            <param name="r1c0">The value to assign to row 1 and column 0 of the matrix</param>
            <param name="r1c1">The value to assign to row 1 and column 1 of the matrix</param>
        </member>
        <member name="P:GenMathematics.Matrices.float2x2.Item(System.Int32)">
            <summary>
            To access via the reference use `Unsafe.Add(ref matrix.Column0, index)` instead
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float2x2.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.float2x2.Equals(GenMathematics.Matrices.float2x2)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.float2x2.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.float2x2.CompareTo(GenMathematics.Matrices.float2x2)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.float2x2.ToString">
            <summary>
            Returns the object's state information as a string
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float2x2.Extract(GenMathematics.Matrices.float2x2@,System.Int32,System.Int32,GenMathematics.Matrices.float2x2@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float2x2.Multiply(GenMathematics.Matrices.float2x2,System.Single)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float2x2.Multiply(System.Single,GenMathematics.Matrices.float2x2)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float2x2.Multiply(GenMathematics.Matrices.float2x2@,System.Single,GenMathematics.Matrices.float2x2@)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float2x2.Multiply(System.Single,GenMathematics.Matrices.float2x2@,GenMathematics.Matrices.float2x2@)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float2x2.Divide(GenMathematics.Matrices.float2x2,System.Single)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float2x2.Divide(System.Single,GenMathematics.Matrices.float2x2)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float2x2.Divide(GenMathematics.Matrices.float2x2@,System.Single,GenMathematics.Matrices.float2x2@)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float2x2.Divide(System.Single,GenMathematics.Matrices.float2x2@,GenMathematics.Matrices.float2x2@)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float2x2.op_Multiply(GenMathematics.Matrices.float2x2,System.Single)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float2x2.op_Multiply(System.Single,GenMathematics.Matrices.float2x2)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float2x2.op_Division(GenMathematics.Matrices.float2x2,System.Single)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float2x2.op_Division(System.Single,GenMathematics.Matrices.float2x2)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float2x2.op_Explicit(GenMathematics.Matrices.double2x2)~GenMathematics.Matrices.float2x2">
            <summary>
            Converts double2x2 to float2x2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float2x2.op_Implicit(GenMathematics.Matrices.byte2x2)~GenMathematics.Matrices.float2x2">
            <summary>
            Converts byte2x2 to float2x2
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float2x2.op_Implicit(GenMathematics.Matrices.sbyte2x2)~GenMathematics.Matrices.float2x2">
            <summary>
            Converts sbyte2x2 to float2x2
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float2x2.op_Implicit(GenMathematics.Matrices.short2x2)~GenMathematics.Matrices.float2x2">
            <summary>
            Converts short2x2 to float2x2
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float2x2.op_Implicit(GenMathematics.Matrices.ushort2x2)~GenMathematics.Matrices.float2x2">
            <summary>
            Converts ushort2x2 to float2x2
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float2x2.op_Implicit(GenMathematics.Matrices.int2x2)~GenMathematics.Matrices.float2x2">
            <summary>
            Converts int2x2 to float2x2
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float2x2.op_Implicit(GenMathematics.Matrices.uint2x2)~GenMathematics.Matrices.float2x2">
            <summary>
            Converts uint2x2 to float2x2
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float2x2.op_Implicit(GenMathematics.Matrices.long2x2)~GenMathematics.Matrices.float2x2">
            <summary>
            Converts long2x2 to float2x2
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float2x2.op_Implicit(GenMathematics.Matrices.ulong2x2)~GenMathematics.Matrices.float2x2">
            <summary>
            Converts ulong2x2 to float2x2
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float2x2.op_Implicit(GenMathematics.Matrices.half2x2)~GenMathematics.Matrices.float2x2">
            <summary>
            Converts half2x2 to float2x2
            </summary>
        </member>
        <member name="T:GenMathematics.Matrices.float2x3">
            <summary>
            Matrix of type float with 2 rows and 3 columns using the column-major order
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.float2x3.Column0">
            <summary>
            Matrix column with index 0
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.float2x3.Column1">
            <summary>
            Matrix column with index 1
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.float2x3.Column2">
            <summary>
            Matrix column with index 2
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.float2x3.Row0">
            <summary>
            Matrix row with index 0
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.float2x3.Row1">
            <summary>
            Matrix row with index 1
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float2x3.#ctor(GenMathematics.Vectors.float2,GenMathematics.Vectors.float2,GenMathematics.Vectors.float2)">
            <summary>
            Creates a matrix from column values
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float2x3.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a matrix from the values of rows and columns
            </summary>
            <param name="r0c0">The value to assign to row 0 and column 0 of the matrix</param>
            <param name="r0c1">The value to assign to row 0 and column 1 of the matrix</param>
            <param name="r0c2">The value to assign to row 0 and column 2 of the matrix</param>
            <param name="r1c0">The value to assign to row 1 and column 0 of the matrix</param>
            <param name="r1c1">The value to assign to row 1 and column 1 of the matrix</param>
            <param name="r1c2">The value to assign to row 1 and column 2 of the matrix</param>
        </member>
        <member name="P:GenMathematics.Matrices.float2x3.Item(System.Int32)">
            <summary>
            To access via the reference use `Unsafe.Add(ref matrix.Column0, index)` instead
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float2x3.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.float2x3.Equals(GenMathematics.Matrices.float2x3)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.float2x3.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.float2x3.CompareTo(GenMathematics.Matrices.float2x3)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.float2x3.ToString">
            <summary>
            Returns the object's state information as a string
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float2x3.Extract(GenMathematics.Matrices.float2x3@,System.Int32,System.Int32,GenMathematics.Matrices.float2x3@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float2x3.Extract(GenMathematics.Matrices.float2x3@,System.Int32,System.Int32,GenMathematics.Matrices.float2x2@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float2x3.Multiply(GenMathematics.Matrices.float2x3,System.Single)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float2x3.Multiply(System.Single,GenMathematics.Matrices.float2x3)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float2x3.Multiply(GenMathematics.Matrices.float2x3@,System.Single,GenMathematics.Matrices.float2x3@)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float2x3.Multiply(System.Single,GenMathematics.Matrices.float2x3@,GenMathematics.Matrices.float2x3@)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float2x3.Divide(GenMathematics.Matrices.float2x3,System.Single)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float2x3.Divide(System.Single,GenMathematics.Matrices.float2x3)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float2x3.Divide(GenMathematics.Matrices.float2x3@,System.Single,GenMathematics.Matrices.float2x3@)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float2x3.Divide(System.Single,GenMathematics.Matrices.float2x3@,GenMathematics.Matrices.float2x3@)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float2x3.op_Multiply(GenMathematics.Matrices.float2x3,System.Single)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float2x3.op_Multiply(System.Single,GenMathematics.Matrices.float2x3)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float2x3.op_Division(GenMathematics.Matrices.float2x3,System.Single)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float2x3.op_Division(System.Single,GenMathematics.Matrices.float2x3)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float2x3.op_Explicit(GenMathematics.Matrices.double2x3)~GenMathematics.Matrices.float2x3">
            <summary>
            Converts double2x3 to float2x3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float2x3.op_Implicit(GenMathematics.Matrices.byte2x3)~GenMathematics.Matrices.float2x3">
            <summary>
            Converts byte2x3 to float2x3
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float2x3.op_Implicit(GenMathematics.Matrices.sbyte2x3)~GenMathematics.Matrices.float2x3">
            <summary>
            Converts sbyte2x3 to float2x3
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float2x3.op_Implicit(GenMathematics.Matrices.short2x3)~GenMathematics.Matrices.float2x3">
            <summary>
            Converts short2x3 to float2x3
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float2x3.op_Implicit(GenMathematics.Matrices.ushort2x3)~GenMathematics.Matrices.float2x3">
            <summary>
            Converts ushort2x3 to float2x3
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float2x3.op_Implicit(GenMathematics.Matrices.int2x3)~GenMathematics.Matrices.float2x3">
            <summary>
            Converts int2x3 to float2x3
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float2x3.op_Implicit(GenMathematics.Matrices.uint2x3)~GenMathematics.Matrices.float2x3">
            <summary>
            Converts uint2x3 to float2x3
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float2x3.op_Implicit(GenMathematics.Matrices.long2x3)~GenMathematics.Matrices.float2x3">
            <summary>
            Converts long2x3 to float2x3
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float2x3.op_Implicit(GenMathematics.Matrices.ulong2x3)~GenMathematics.Matrices.float2x3">
            <summary>
            Converts ulong2x3 to float2x3
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float2x3.op_Implicit(GenMathematics.Matrices.half2x3)~GenMathematics.Matrices.float2x3">
            <summary>
            Converts half2x3 to float2x3
            </summary>
        </member>
        <member name="T:GenMathematics.Matrices.float2x4">
            <summary>
            Matrix of type float with 2 rows and 4 columns using the column-major order
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.float2x4.Column0">
            <summary>
            Matrix column with index 0
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.float2x4.Column1">
            <summary>
            Matrix column with index 1
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.float2x4.Column2">
            <summary>
            Matrix column with index 2
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.float2x4.Column3">
            <summary>
            Matrix column with index 3
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.float2x4.Row0">
            <summary>
            Matrix row with index 0
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.float2x4.Row1">
            <summary>
            Matrix row with index 1
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float2x4.#ctor(GenMathematics.Vectors.float2,GenMathematics.Vectors.float2,GenMathematics.Vectors.float2,GenMathematics.Vectors.float2)">
            <summary>
            Creates a matrix from column values
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float2x4.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a matrix from the values of rows and columns
            </summary>
            <param name="r0c0">The value to assign to row 0 and column 0 of the matrix</param>
            <param name="r0c1">The value to assign to row 0 and column 1 of the matrix</param>
            <param name="r0c2">The value to assign to row 0 and column 2 of the matrix</param>
            <param name="r0c3">The value to assign to row 0 and column 3 of the matrix</param>
            <param name="r1c0">The value to assign to row 1 and column 0 of the matrix</param>
            <param name="r1c1">The value to assign to row 1 and column 1 of the matrix</param>
            <param name="r1c2">The value to assign to row 1 and column 2 of the matrix</param>
            <param name="r1c3">The value to assign to row 1 and column 3 of the matrix</param>
        </member>
        <member name="P:GenMathematics.Matrices.float2x4.Item(System.Int32)">
            <summary>
            To access via the reference use `Unsafe.Add(ref matrix.Column0, index)` instead
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float2x4.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.float2x4.Equals(GenMathematics.Matrices.float2x4)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.float2x4.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.float2x4.CompareTo(GenMathematics.Matrices.float2x4)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.float2x4.ToString">
            <summary>
            Returns the object's state information as a string
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float2x4.Extract(GenMathematics.Matrices.float2x4@,System.Int32,System.Int32,GenMathematics.Matrices.float2x4@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float2x4.Extract(GenMathematics.Matrices.float2x4@,System.Int32,System.Int32,GenMathematics.Matrices.float2x3@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float2x4.Extract(GenMathematics.Matrices.float2x4@,System.Int32,System.Int32,GenMathematics.Matrices.float2x2@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float2x4.Multiply(GenMathematics.Matrices.float2x4,System.Single)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float2x4.Multiply(System.Single,GenMathematics.Matrices.float2x4)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float2x4.Multiply(GenMathematics.Matrices.float2x4@,System.Single,GenMathematics.Matrices.float2x4@)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float2x4.Multiply(System.Single,GenMathematics.Matrices.float2x4@,GenMathematics.Matrices.float2x4@)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float2x4.Divide(GenMathematics.Matrices.float2x4,System.Single)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float2x4.Divide(System.Single,GenMathematics.Matrices.float2x4)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float2x4.Divide(GenMathematics.Matrices.float2x4@,System.Single,GenMathematics.Matrices.float2x4@)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float2x4.Divide(System.Single,GenMathematics.Matrices.float2x4@,GenMathematics.Matrices.float2x4@)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float2x4.op_Multiply(GenMathematics.Matrices.float2x4,System.Single)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float2x4.op_Multiply(System.Single,GenMathematics.Matrices.float2x4)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float2x4.op_Division(GenMathematics.Matrices.float2x4,System.Single)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float2x4.op_Division(System.Single,GenMathematics.Matrices.float2x4)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float2x4.op_Explicit(GenMathematics.Matrices.double2x4)~GenMathematics.Matrices.float2x4">
            <summary>
            Converts double2x4 to float2x4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float2x4.op_Implicit(GenMathematics.Matrices.byte2x4)~GenMathematics.Matrices.float2x4">
            <summary>
            Converts byte2x4 to float2x4
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float2x4.op_Implicit(GenMathematics.Matrices.sbyte2x4)~GenMathematics.Matrices.float2x4">
            <summary>
            Converts sbyte2x4 to float2x4
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float2x4.op_Implicit(GenMathematics.Matrices.short2x4)~GenMathematics.Matrices.float2x4">
            <summary>
            Converts short2x4 to float2x4
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float2x4.op_Implicit(GenMathematics.Matrices.ushort2x4)~GenMathematics.Matrices.float2x4">
            <summary>
            Converts ushort2x4 to float2x4
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float2x4.op_Implicit(GenMathematics.Matrices.int2x4)~GenMathematics.Matrices.float2x4">
            <summary>
            Converts int2x4 to float2x4
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float2x4.op_Implicit(GenMathematics.Matrices.uint2x4)~GenMathematics.Matrices.float2x4">
            <summary>
            Converts uint2x4 to float2x4
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float2x4.op_Implicit(GenMathematics.Matrices.long2x4)~GenMathematics.Matrices.float2x4">
            <summary>
            Converts long2x4 to float2x4
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float2x4.op_Implicit(GenMathematics.Matrices.ulong2x4)~GenMathematics.Matrices.float2x4">
            <summary>
            Converts ulong2x4 to float2x4
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float2x4.op_Implicit(GenMathematics.Matrices.half2x4)~GenMathematics.Matrices.float2x4">
            <summary>
            Converts half2x4 to float2x4
            </summary>
        </member>
        <member name="T:GenMathematics.Matrices.float3x2">
            <summary>
            Matrix of type float with 3 rows and 2 columns using the column-major order
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.float3x2.Column0">
            <summary>
            Matrix column with index 0
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.float3x2.Column1">
            <summary>
            Matrix column with index 1
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.float3x2.Row0">
            <summary>
            Matrix row with index 0
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.float3x2.Row1">
            <summary>
            Matrix row with index 1
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.float3x2.Row2">
            <summary>
            Matrix row with index 2
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float3x2.#ctor(GenMathematics.Vectors.float3,GenMathematics.Vectors.float3)">
            <summary>
            Creates a matrix from column values
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float3x2.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a matrix from the values of rows and columns
            </summary>
            <param name="r0c0">The value to assign to row 0 and column 0 of the matrix</param>
            <param name="r0c1">The value to assign to row 0 and column 1 of the matrix</param>
            <param name="r1c0">The value to assign to row 1 and column 0 of the matrix</param>
            <param name="r1c1">The value to assign to row 1 and column 1 of the matrix</param>
            <param name="r2c0">The value to assign to row 2 and column 0 of the matrix</param>
            <param name="r2c1">The value to assign to row 2 and column 1 of the matrix</param>
        </member>
        <member name="P:GenMathematics.Matrices.float3x2.Item(System.Int32)">
            <summary>
            To access via the reference use `Unsafe.Add(ref matrix.Column0, index)` instead
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float3x2.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.float3x2.Equals(GenMathematics.Matrices.float3x2)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.float3x2.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.float3x2.CompareTo(GenMathematics.Matrices.float3x2)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.float3x2.ToString">
            <summary>
            Returns the object's state information as a string
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float3x2.Extract(GenMathematics.Matrices.float3x2@,System.Int32,System.Int32,GenMathematics.Matrices.float3x2@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float3x2.Extract(GenMathematics.Matrices.float3x2@,System.Int32,System.Int32,GenMathematics.Matrices.float2x2@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float3x2.Multiply(GenMathematics.Matrices.float3x2,System.Single)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float3x2.Multiply(System.Single,GenMathematics.Matrices.float3x2)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float3x2.Multiply(GenMathematics.Matrices.float3x2@,System.Single,GenMathematics.Matrices.float3x2@)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float3x2.Multiply(System.Single,GenMathematics.Matrices.float3x2@,GenMathematics.Matrices.float3x2@)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float3x2.Divide(GenMathematics.Matrices.float3x2,System.Single)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float3x2.Divide(System.Single,GenMathematics.Matrices.float3x2)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float3x2.Divide(GenMathematics.Matrices.float3x2@,System.Single,GenMathematics.Matrices.float3x2@)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float3x2.Divide(System.Single,GenMathematics.Matrices.float3x2@,GenMathematics.Matrices.float3x2@)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float3x2.op_Multiply(GenMathematics.Matrices.float3x2,System.Single)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float3x2.op_Multiply(System.Single,GenMathematics.Matrices.float3x2)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float3x2.op_Division(GenMathematics.Matrices.float3x2,System.Single)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float3x2.op_Division(System.Single,GenMathematics.Matrices.float3x2)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float3x2.op_Explicit(GenMathematics.Matrices.double3x2)~GenMathematics.Matrices.float3x2">
            <summary>
            Converts double3x2 to float3x2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float3x2.op_Implicit(GenMathematics.Matrices.byte3x2)~GenMathematics.Matrices.float3x2">
            <summary>
            Converts byte3x2 to float3x2
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float3x2.op_Implicit(GenMathematics.Matrices.sbyte3x2)~GenMathematics.Matrices.float3x2">
            <summary>
            Converts sbyte3x2 to float3x2
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float3x2.op_Implicit(GenMathematics.Matrices.short3x2)~GenMathematics.Matrices.float3x2">
            <summary>
            Converts short3x2 to float3x2
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float3x2.op_Implicit(GenMathematics.Matrices.ushort3x2)~GenMathematics.Matrices.float3x2">
            <summary>
            Converts ushort3x2 to float3x2
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float3x2.op_Implicit(GenMathematics.Matrices.int3x2)~GenMathematics.Matrices.float3x2">
            <summary>
            Converts int3x2 to float3x2
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float3x2.op_Implicit(GenMathematics.Matrices.uint3x2)~GenMathematics.Matrices.float3x2">
            <summary>
            Converts uint3x2 to float3x2
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float3x2.op_Implicit(GenMathematics.Matrices.long3x2)~GenMathematics.Matrices.float3x2">
            <summary>
            Converts long3x2 to float3x2
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float3x2.op_Implicit(GenMathematics.Matrices.ulong3x2)~GenMathematics.Matrices.float3x2">
            <summary>
            Converts ulong3x2 to float3x2
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float3x2.op_Implicit(GenMathematics.Matrices.half3x2)~GenMathematics.Matrices.float3x2">
            <summary>
            Converts half3x2 to float3x2
            </summary>
        </member>
        <member name="T:GenMathematics.Matrices.float3x3">
            <summary>
            Matrix of type float with 3 rows and 3 columns using the column-major order
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.float3x3.Column0">
            <summary>
            Matrix column with index 0
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.float3x3.Column1">
            <summary>
            Matrix column with index 1
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.float3x3.Column2">
            <summary>
            Matrix column with index 2
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.float3x3.Row0">
            <summary>
            Matrix row with index 0
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.float3x3.Row1">
            <summary>
            Matrix row with index 1
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.float3x3.Row2">
            <summary>
            Matrix row with index 2
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float3x3.#ctor(GenMathematics.Vectors.float3,GenMathematics.Vectors.float3,GenMathematics.Vectors.float3)">
            <summary>
            Creates a matrix from column values
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float3x3.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a matrix from the values of rows and columns
            </summary>
            <param name="r0c0">The value to assign to row 0 and column 0 of the matrix</param>
            <param name="r0c1">The value to assign to row 0 and column 1 of the matrix</param>
            <param name="r0c2">The value to assign to row 0 and column 2 of the matrix</param>
            <param name="r1c0">The value to assign to row 1 and column 0 of the matrix</param>
            <param name="r1c1">The value to assign to row 1 and column 1 of the matrix</param>
            <param name="r1c2">The value to assign to row 1 and column 2 of the matrix</param>
            <param name="r2c0">The value to assign to row 2 and column 0 of the matrix</param>
            <param name="r2c1">The value to assign to row 2 and column 1 of the matrix</param>
            <param name="r2c2">The value to assign to row 2 and column 2 of the matrix</param>
        </member>
        <member name="P:GenMathematics.Matrices.float3x3.Item(System.Int32)">
            <summary>
            To access via the reference use `Unsafe.Add(ref matrix.Column0, index)` instead
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float3x3.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.float3x3.Equals(GenMathematics.Matrices.float3x3)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.float3x3.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.float3x3.CompareTo(GenMathematics.Matrices.float3x3)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.float3x3.ToString">
            <summary>
            Returns the object's state information as a string
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float3x3.Extract(GenMathematics.Matrices.float3x3@,System.Int32,System.Int32,GenMathematics.Matrices.float3x3@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float3x3.Extract(GenMathematics.Matrices.float3x3@,System.Int32,System.Int32,GenMathematics.Matrices.float2x3@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float3x3.Extract(GenMathematics.Matrices.float3x3@,System.Int32,System.Int32,GenMathematics.Matrices.float3x2@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float3x3.Extract(GenMathematics.Matrices.float3x3@,System.Int32,System.Int32,GenMathematics.Matrices.float2x2@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float3x3.Multiply(GenMathematics.Matrices.float3x3,System.Single)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float3x3.Multiply(System.Single,GenMathematics.Matrices.float3x3)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float3x3.Multiply(GenMathematics.Matrices.float3x3@,System.Single,GenMathematics.Matrices.float3x3@)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float3x3.Multiply(System.Single,GenMathematics.Matrices.float3x3@,GenMathematics.Matrices.float3x3@)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float3x3.Divide(GenMathematics.Matrices.float3x3,System.Single)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float3x3.Divide(System.Single,GenMathematics.Matrices.float3x3)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float3x3.Divide(GenMathematics.Matrices.float3x3@,System.Single,GenMathematics.Matrices.float3x3@)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float3x3.Divide(System.Single,GenMathematics.Matrices.float3x3@,GenMathematics.Matrices.float3x3@)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float3x3.op_Multiply(GenMathematics.Matrices.float3x3,System.Single)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float3x3.op_Multiply(System.Single,GenMathematics.Matrices.float3x3)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float3x3.op_Division(GenMathematics.Matrices.float3x3,System.Single)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float3x3.op_Division(System.Single,GenMathematics.Matrices.float3x3)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float3x3.op_Explicit(GenMathematics.Matrices.double3x3)~GenMathematics.Matrices.float3x3">
            <summary>
            Converts double3x3 to float3x3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float3x3.op_Implicit(GenMathematics.Matrices.byte3x3)~GenMathematics.Matrices.float3x3">
            <summary>
            Converts byte3x3 to float3x3
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float3x3.op_Implicit(GenMathematics.Matrices.sbyte3x3)~GenMathematics.Matrices.float3x3">
            <summary>
            Converts sbyte3x3 to float3x3
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float3x3.op_Implicit(GenMathematics.Matrices.short3x3)~GenMathematics.Matrices.float3x3">
            <summary>
            Converts short3x3 to float3x3
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float3x3.op_Implicit(GenMathematics.Matrices.ushort3x3)~GenMathematics.Matrices.float3x3">
            <summary>
            Converts ushort3x3 to float3x3
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float3x3.op_Implicit(GenMathematics.Matrices.int3x3)~GenMathematics.Matrices.float3x3">
            <summary>
            Converts int3x3 to float3x3
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float3x3.op_Implicit(GenMathematics.Matrices.uint3x3)~GenMathematics.Matrices.float3x3">
            <summary>
            Converts uint3x3 to float3x3
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float3x3.op_Implicit(GenMathematics.Matrices.long3x3)~GenMathematics.Matrices.float3x3">
            <summary>
            Converts long3x3 to float3x3
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float3x3.op_Implicit(GenMathematics.Matrices.ulong3x3)~GenMathematics.Matrices.float3x3">
            <summary>
            Converts ulong3x3 to float3x3
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float3x3.op_Implicit(GenMathematics.Matrices.half3x3)~GenMathematics.Matrices.float3x3">
            <summary>
            Converts half3x3 to float3x3
            </summary>
        </member>
        <member name="T:GenMathematics.Matrices.float3x4">
            <summary>
            Matrix of type float with 3 rows and 4 columns using the column-major order
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.float3x4.Column0">
            <summary>
            Matrix column with index 0
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.float3x4.Column1">
            <summary>
            Matrix column with index 1
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.float3x4.Column2">
            <summary>
            Matrix column with index 2
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.float3x4.Column3">
            <summary>
            Matrix column with index 3
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.float3x4.Row0">
            <summary>
            Matrix row with index 0
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.float3x4.Row1">
            <summary>
            Matrix row with index 1
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.float3x4.Row2">
            <summary>
            Matrix row with index 2
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float3x4.#ctor(GenMathematics.Vectors.float3,GenMathematics.Vectors.float3,GenMathematics.Vectors.float3,GenMathematics.Vectors.float3)">
            <summary>
            Creates a matrix from column values
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float3x4.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a matrix from the values of rows and columns
            </summary>
            <param name="r0c0">The value to assign to row 0 and column 0 of the matrix</param>
            <param name="r0c1">The value to assign to row 0 and column 1 of the matrix</param>
            <param name="r0c2">The value to assign to row 0 and column 2 of the matrix</param>
            <param name="r0c3">The value to assign to row 0 and column 3 of the matrix</param>
            <param name="r1c0">The value to assign to row 1 and column 0 of the matrix</param>
            <param name="r1c1">The value to assign to row 1 and column 1 of the matrix</param>
            <param name="r1c2">The value to assign to row 1 and column 2 of the matrix</param>
            <param name="r1c3">The value to assign to row 1 and column 3 of the matrix</param>
            <param name="r2c0">The value to assign to row 2 and column 0 of the matrix</param>
            <param name="r2c1">The value to assign to row 2 and column 1 of the matrix</param>
            <param name="r2c2">The value to assign to row 2 and column 2 of the matrix</param>
            <param name="r2c3">The value to assign to row 2 and column 3 of the matrix</param>
        </member>
        <member name="P:GenMathematics.Matrices.float3x4.Item(System.Int32)">
            <summary>
            To access via the reference use `Unsafe.Add(ref matrix.Column0, index)` instead
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float3x4.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.float3x4.Equals(GenMathematics.Matrices.float3x4)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.float3x4.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.float3x4.CompareTo(GenMathematics.Matrices.float3x4)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.float3x4.ToString">
            <summary>
            Returns the object's state information as a string
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float3x4.Extract(GenMathematics.Matrices.float3x4@,System.Int32,System.Int32,GenMathematics.Matrices.float3x4@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float3x4.Extract(GenMathematics.Matrices.float3x4@,System.Int32,System.Int32,GenMathematics.Matrices.float2x4@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float3x4.Extract(GenMathematics.Matrices.float3x4@,System.Int32,System.Int32,GenMathematics.Matrices.float3x3@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float3x4.Extract(GenMathematics.Matrices.float3x4@,System.Int32,System.Int32,GenMathematics.Matrices.float2x3@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float3x4.Extract(GenMathematics.Matrices.float3x4@,System.Int32,System.Int32,GenMathematics.Matrices.float3x2@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float3x4.Extract(GenMathematics.Matrices.float3x4@,System.Int32,System.Int32,GenMathematics.Matrices.float2x2@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float3x4.Multiply(GenMathematics.Matrices.float3x4,System.Single)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float3x4.Multiply(System.Single,GenMathematics.Matrices.float3x4)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float3x4.Multiply(GenMathematics.Matrices.float3x4@,System.Single,GenMathematics.Matrices.float3x4@)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float3x4.Multiply(System.Single,GenMathematics.Matrices.float3x4@,GenMathematics.Matrices.float3x4@)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float3x4.Divide(GenMathematics.Matrices.float3x4,System.Single)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float3x4.Divide(System.Single,GenMathematics.Matrices.float3x4)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float3x4.Divide(GenMathematics.Matrices.float3x4@,System.Single,GenMathematics.Matrices.float3x4@)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float3x4.Divide(System.Single,GenMathematics.Matrices.float3x4@,GenMathematics.Matrices.float3x4@)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float3x4.op_Multiply(GenMathematics.Matrices.float3x4,System.Single)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float3x4.op_Multiply(System.Single,GenMathematics.Matrices.float3x4)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float3x4.op_Division(GenMathematics.Matrices.float3x4,System.Single)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float3x4.op_Division(System.Single,GenMathematics.Matrices.float3x4)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float3x4.op_Explicit(GenMathematics.Matrices.double3x4)~GenMathematics.Matrices.float3x4">
            <summary>
            Converts double3x4 to float3x4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float3x4.op_Implicit(GenMathematics.Matrices.byte3x4)~GenMathematics.Matrices.float3x4">
            <summary>
            Converts byte3x4 to float3x4
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float3x4.op_Implicit(GenMathematics.Matrices.sbyte3x4)~GenMathematics.Matrices.float3x4">
            <summary>
            Converts sbyte3x4 to float3x4
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float3x4.op_Implicit(GenMathematics.Matrices.short3x4)~GenMathematics.Matrices.float3x4">
            <summary>
            Converts short3x4 to float3x4
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float3x4.op_Implicit(GenMathematics.Matrices.ushort3x4)~GenMathematics.Matrices.float3x4">
            <summary>
            Converts ushort3x4 to float3x4
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float3x4.op_Implicit(GenMathematics.Matrices.int3x4)~GenMathematics.Matrices.float3x4">
            <summary>
            Converts int3x4 to float3x4
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float3x4.op_Implicit(GenMathematics.Matrices.uint3x4)~GenMathematics.Matrices.float3x4">
            <summary>
            Converts uint3x4 to float3x4
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float3x4.op_Implicit(GenMathematics.Matrices.long3x4)~GenMathematics.Matrices.float3x4">
            <summary>
            Converts long3x4 to float3x4
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float3x4.op_Implicit(GenMathematics.Matrices.ulong3x4)~GenMathematics.Matrices.float3x4">
            <summary>
            Converts ulong3x4 to float3x4
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float3x4.op_Implicit(GenMathematics.Matrices.half3x4)~GenMathematics.Matrices.float3x4">
            <summary>
            Converts half3x4 to float3x4
            </summary>
        </member>
        <member name="T:GenMathematics.Matrices.float4x2">
            <summary>
            Matrix of type float with 4 rows and 2 columns using the column-major order
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.float4x2.Column0">
            <summary>
            Matrix column with index 0
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.float4x2.Column1">
            <summary>
            Matrix column with index 1
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.float4x2.Row0">
            <summary>
            Matrix row with index 0
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.float4x2.Row1">
            <summary>
            Matrix row with index 1
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.float4x2.Row2">
            <summary>
            Matrix row with index 2
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.float4x2.Row3">
            <summary>
            Matrix row with index 3
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float4x2.#ctor(GenMathematics.Vectors.float4,GenMathematics.Vectors.float4)">
            <summary>
            Creates a matrix from column values
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float4x2.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a matrix from the values of rows and columns
            </summary>
            <param name="r0c0">The value to assign to row 0 and column 0 of the matrix</param>
            <param name="r0c1">The value to assign to row 0 and column 1 of the matrix</param>
            <param name="r1c0">The value to assign to row 1 and column 0 of the matrix</param>
            <param name="r1c1">The value to assign to row 1 and column 1 of the matrix</param>
            <param name="r2c0">The value to assign to row 2 and column 0 of the matrix</param>
            <param name="r2c1">The value to assign to row 2 and column 1 of the matrix</param>
            <param name="r3c0">The value to assign to row 3 and column 0 of the matrix</param>
            <param name="r3c1">The value to assign to row 3 and column 1 of the matrix</param>
        </member>
        <member name="P:GenMathematics.Matrices.float4x2.Item(System.Int32)">
            <summary>
            To access via the reference use `Unsafe.Add(ref matrix.Column0, index)` instead
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float4x2.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.float4x2.Equals(GenMathematics.Matrices.float4x2)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.float4x2.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.float4x2.CompareTo(GenMathematics.Matrices.float4x2)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.float4x2.ToString">
            <summary>
            Returns the object's state information as a string
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float4x2.Extract(GenMathematics.Matrices.float4x2@,System.Int32,System.Int32,GenMathematics.Matrices.float4x2@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float4x2.Extract(GenMathematics.Matrices.float4x2@,System.Int32,System.Int32,GenMathematics.Matrices.float3x2@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float4x2.Extract(GenMathematics.Matrices.float4x2@,System.Int32,System.Int32,GenMathematics.Matrices.float2x2@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float4x2.Multiply(GenMathematics.Matrices.float4x2,System.Single)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float4x2.Multiply(System.Single,GenMathematics.Matrices.float4x2)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float4x2.Multiply(GenMathematics.Matrices.float4x2@,System.Single,GenMathematics.Matrices.float4x2@)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float4x2.Multiply(System.Single,GenMathematics.Matrices.float4x2@,GenMathematics.Matrices.float4x2@)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float4x2.Divide(GenMathematics.Matrices.float4x2,System.Single)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float4x2.Divide(System.Single,GenMathematics.Matrices.float4x2)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float4x2.Divide(GenMathematics.Matrices.float4x2@,System.Single,GenMathematics.Matrices.float4x2@)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float4x2.Divide(System.Single,GenMathematics.Matrices.float4x2@,GenMathematics.Matrices.float4x2@)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float4x2.op_Multiply(GenMathematics.Matrices.float4x2,System.Single)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float4x2.op_Multiply(System.Single,GenMathematics.Matrices.float4x2)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float4x2.op_Division(GenMathematics.Matrices.float4x2,System.Single)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float4x2.op_Division(System.Single,GenMathematics.Matrices.float4x2)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float4x2.op_Explicit(GenMathematics.Matrices.double4x2)~GenMathematics.Matrices.float4x2">
            <summary>
            Converts double4x2 to float4x2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float4x2.op_Implicit(GenMathematics.Matrices.byte4x2)~GenMathematics.Matrices.float4x2">
            <summary>
            Converts byte4x2 to float4x2
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float4x2.op_Implicit(GenMathematics.Matrices.sbyte4x2)~GenMathematics.Matrices.float4x2">
            <summary>
            Converts sbyte4x2 to float4x2
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float4x2.op_Implicit(GenMathematics.Matrices.short4x2)~GenMathematics.Matrices.float4x2">
            <summary>
            Converts short4x2 to float4x2
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float4x2.op_Implicit(GenMathematics.Matrices.ushort4x2)~GenMathematics.Matrices.float4x2">
            <summary>
            Converts ushort4x2 to float4x2
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float4x2.op_Implicit(GenMathematics.Matrices.int4x2)~GenMathematics.Matrices.float4x2">
            <summary>
            Converts int4x2 to float4x2
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float4x2.op_Implicit(GenMathematics.Matrices.uint4x2)~GenMathematics.Matrices.float4x2">
            <summary>
            Converts uint4x2 to float4x2
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float4x2.op_Implicit(GenMathematics.Matrices.long4x2)~GenMathematics.Matrices.float4x2">
            <summary>
            Converts long4x2 to float4x2
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float4x2.op_Implicit(GenMathematics.Matrices.ulong4x2)~GenMathematics.Matrices.float4x2">
            <summary>
            Converts ulong4x2 to float4x2
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float4x2.op_Implicit(GenMathematics.Matrices.half4x2)~GenMathematics.Matrices.float4x2">
            <summary>
            Converts half4x2 to float4x2
            </summary>
        </member>
        <member name="T:GenMathematics.Matrices.float4x3">
            <summary>
            Matrix of type float with 4 rows and 3 columns using the column-major order
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.float4x3.Column0">
            <summary>
            Matrix column with index 0
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.float4x3.Column1">
            <summary>
            Matrix column with index 1
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.float4x3.Column2">
            <summary>
            Matrix column with index 2
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.float4x3.Row0">
            <summary>
            Matrix row with index 0
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.float4x3.Row1">
            <summary>
            Matrix row with index 1
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.float4x3.Row2">
            <summary>
            Matrix row with index 2
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.float4x3.Row3">
            <summary>
            Matrix row with index 3
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float4x3.#ctor(GenMathematics.Vectors.float4,GenMathematics.Vectors.float4,GenMathematics.Vectors.float4)">
            <summary>
            Creates a matrix from column values
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float4x3.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a matrix from the values of rows and columns
            </summary>
            <param name="r0c0">The value to assign to row 0 and column 0 of the matrix</param>
            <param name="r0c1">The value to assign to row 0 and column 1 of the matrix</param>
            <param name="r0c2">The value to assign to row 0 and column 2 of the matrix</param>
            <param name="r1c0">The value to assign to row 1 and column 0 of the matrix</param>
            <param name="r1c1">The value to assign to row 1 and column 1 of the matrix</param>
            <param name="r1c2">The value to assign to row 1 and column 2 of the matrix</param>
            <param name="r2c0">The value to assign to row 2 and column 0 of the matrix</param>
            <param name="r2c1">The value to assign to row 2 and column 1 of the matrix</param>
            <param name="r2c2">The value to assign to row 2 and column 2 of the matrix</param>
            <param name="r3c0">The value to assign to row 3 and column 0 of the matrix</param>
            <param name="r3c1">The value to assign to row 3 and column 1 of the matrix</param>
            <param name="r3c2">The value to assign to row 3 and column 2 of the matrix</param>
        </member>
        <member name="P:GenMathematics.Matrices.float4x3.Item(System.Int32)">
            <summary>
            To access via the reference use `Unsafe.Add(ref matrix.Column0, index)` instead
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float4x3.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.float4x3.Equals(GenMathematics.Matrices.float4x3)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.float4x3.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.float4x3.CompareTo(GenMathematics.Matrices.float4x3)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.float4x3.ToString">
            <summary>
            Returns the object's state information as a string
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float4x3.Extract(GenMathematics.Matrices.float4x3@,System.Int32,System.Int32,GenMathematics.Matrices.float4x3@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float4x3.Extract(GenMathematics.Matrices.float4x3@,System.Int32,System.Int32,GenMathematics.Matrices.float3x3@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float4x3.Extract(GenMathematics.Matrices.float4x3@,System.Int32,System.Int32,GenMathematics.Matrices.float2x3@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float4x3.Extract(GenMathematics.Matrices.float4x3@,System.Int32,System.Int32,GenMathematics.Matrices.float4x2@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float4x3.Extract(GenMathematics.Matrices.float4x3@,System.Int32,System.Int32,GenMathematics.Matrices.float3x2@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float4x3.Extract(GenMathematics.Matrices.float4x3@,System.Int32,System.Int32,GenMathematics.Matrices.float2x2@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float4x3.Multiply(GenMathematics.Matrices.float4x3,System.Single)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float4x3.Multiply(System.Single,GenMathematics.Matrices.float4x3)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float4x3.Multiply(GenMathematics.Matrices.float4x3@,System.Single,GenMathematics.Matrices.float4x3@)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float4x3.Multiply(System.Single,GenMathematics.Matrices.float4x3@,GenMathematics.Matrices.float4x3@)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float4x3.Divide(GenMathematics.Matrices.float4x3,System.Single)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float4x3.Divide(System.Single,GenMathematics.Matrices.float4x3)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float4x3.Divide(GenMathematics.Matrices.float4x3@,System.Single,GenMathematics.Matrices.float4x3@)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float4x3.Divide(System.Single,GenMathematics.Matrices.float4x3@,GenMathematics.Matrices.float4x3@)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float4x3.op_Multiply(GenMathematics.Matrices.float4x3,System.Single)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float4x3.op_Multiply(System.Single,GenMathematics.Matrices.float4x3)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float4x3.op_Division(GenMathematics.Matrices.float4x3,System.Single)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float4x3.op_Division(System.Single,GenMathematics.Matrices.float4x3)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float4x3.op_Explicit(GenMathematics.Matrices.double4x3)~GenMathematics.Matrices.float4x3">
            <summary>
            Converts double4x3 to float4x3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float4x3.op_Implicit(GenMathematics.Matrices.byte4x3)~GenMathematics.Matrices.float4x3">
            <summary>
            Converts byte4x3 to float4x3
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float4x3.op_Implicit(GenMathematics.Matrices.sbyte4x3)~GenMathematics.Matrices.float4x3">
            <summary>
            Converts sbyte4x3 to float4x3
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float4x3.op_Implicit(GenMathematics.Matrices.short4x3)~GenMathematics.Matrices.float4x3">
            <summary>
            Converts short4x3 to float4x3
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float4x3.op_Implicit(GenMathematics.Matrices.ushort4x3)~GenMathematics.Matrices.float4x3">
            <summary>
            Converts ushort4x3 to float4x3
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float4x3.op_Implicit(GenMathematics.Matrices.int4x3)~GenMathematics.Matrices.float4x3">
            <summary>
            Converts int4x3 to float4x3
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float4x3.op_Implicit(GenMathematics.Matrices.uint4x3)~GenMathematics.Matrices.float4x3">
            <summary>
            Converts uint4x3 to float4x3
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float4x3.op_Implicit(GenMathematics.Matrices.long4x3)~GenMathematics.Matrices.float4x3">
            <summary>
            Converts long4x3 to float4x3
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float4x3.op_Implicit(GenMathematics.Matrices.ulong4x3)~GenMathematics.Matrices.float4x3">
            <summary>
            Converts ulong4x3 to float4x3
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float4x3.op_Implicit(GenMathematics.Matrices.half4x3)~GenMathematics.Matrices.float4x3">
            <summary>
            Converts half4x3 to float4x3
            </summary>
        </member>
        <member name="T:GenMathematics.Matrices.float4x4">
            <summary>
            Matrix of type float with 4 rows and 4 columns using the column-major order
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.float4x4.Column0">
            <summary>
            Matrix column with index 0
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.float4x4.Column1">
            <summary>
            Matrix column with index 1
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.float4x4.Column2">
            <summary>
            Matrix column with index 2
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.float4x4.Column3">
            <summary>
            Matrix column with index 3
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.float4x4.Row0">
            <summary>
            Matrix row with index 0
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.float4x4.Row1">
            <summary>
            Matrix row with index 1
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.float4x4.Row2">
            <summary>
            Matrix row with index 2
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.float4x4.Row3">
            <summary>
            Matrix row with index 3
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float4x4.#ctor(GenMathematics.Vectors.float4,GenMathematics.Vectors.float4,GenMathematics.Vectors.float4,GenMathematics.Vectors.float4)">
            <summary>
            Creates a matrix from column values
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float4x4.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a matrix from the values of rows and columns
            </summary>
            <param name="r0c0">The value to assign to row 0 and column 0 of the matrix</param>
            <param name="r0c1">The value to assign to row 0 and column 1 of the matrix</param>
            <param name="r0c2">The value to assign to row 0 and column 2 of the matrix</param>
            <param name="r0c3">The value to assign to row 0 and column 3 of the matrix</param>
            <param name="r1c0">The value to assign to row 1 and column 0 of the matrix</param>
            <param name="r1c1">The value to assign to row 1 and column 1 of the matrix</param>
            <param name="r1c2">The value to assign to row 1 and column 2 of the matrix</param>
            <param name="r1c3">The value to assign to row 1 and column 3 of the matrix</param>
            <param name="r2c0">The value to assign to row 2 and column 0 of the matrix</param>
            <param name="r2c1">The value to assign to row 2 and column 1 of the matrix</param>
            <param name="r2c2">The value to assign to row 2 and column 2 of the matrix</param>
            <param name="r2c3">The value to assign to row 2 and column 3 of the matrix</param>
            <param name="r3c0">The value to assign to row 3 and column 0 of the matrix</param>
            <param name="r3c1">The value to assign to row 3 and column 1 of the matrix</param>
            <param name="r3c2">The value to assign to row 3 and column 2 of the matrix</param>
            <param name="r3c3">The value to assign to row 3 and column 3 of the matrix</param>
        </member>
        <member name="P:GenMathematics.Matrices.float4x4.Item(System.Int32)">
            <summary>
            To access via the reference use `Unsafe.Add(ref matrix.Column0, index)` instead
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float4x4.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.float4x4.Equals(GenMathematics.Matrices.float4x4)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.float4x4.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.float4x4.CompareTo(GenMathematics.Matrices.float4x4)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.float4x4.ToString">
            <summary>
            Returns the object's state information as a string
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float4x4.Extract(GenMathematics.Matrices.float4x4@,System.Int32,System.Int32,GenMathematics.Matrices.float4x4@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float4x4.Extract(GenMathematics.Matrices.float4x4@,System.Int32,System.Int32,GenMathematics.Matrices.float3x4@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float4x4.Extract(GenMathematics.Matrices.float4x4@,System.Int32,System.Int32,GenMathematics.Matrices.float2x4@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float4x4.Extract(GenMathematics.Matrices.float4x4@,System.Int32,System.Int32,GenMathematics.Matrices.float4x3@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float4x4.Extract(GenMathematics.Matrices.float4x4@,System.Int32,System.Int32,GenMathematics.Matrices.float3x3@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float4x4.Extract(GenMathematics.Matrices.float4x4@,System.Int32,System.Int32,GenMathematics.Matrices.float2x3@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float4x4.Extract(GenMathematics.Matrices.float4x4@,System.Int32,System.Int32,GenMathematics.Matrices.float4x2@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float4x4.Extract(GenMathematics.Matrices.float4x4@,System.Int32,System.Int32,GenMathematics.Matrices.float3x2@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float4x4.Extract(GenMathematics.Matrices.float4x4@,System.Int32,System.Int32,GenMathematics.Matrices.float2x2@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float4x4.Multiply(GenMathematics.Matrices.float4x4,System.Single)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float4x4.Multiply(System.Single,GenMathematics.Matrices.float4x4)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float4x4.Multiply(GenMathematics.Matrices.float4x4@,System.Single,GenMathematics.Matrices.float4x4@)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float4x4.Multiply(System.Single,GenMathematics.Matrices.float4x4@,GenMathematics.Matrices.float4x4@)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float4x4.Divide(GenMathematics.Matrices.float4x4,System.Single)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float4x4.Divide(System.Single,GenMathematics.Matrices.float4x4)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float4x4.Divide(GenMathematics.Matrices.float4x4@,System.Single,GenMathematics.Matrices.float4x4@)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float4x4.Divide(System.Single,GenMathematics.Matrices.float4x4@,GenMathematics.Matrices.float4x4@)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float4x4.op_Multiply(GenMathematics.Matrices.float4x4,System.Single)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float4x4.op_Multiply(System.Single,GenMathematics.Matrices.float4x4)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float4x4.op_Division(GenMathematics.Matrices.float4x4,System.Single)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float4x4.op_Division(System.Single,GenMathematics.Matrices.float4x4)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float4x4.op_Explicit(GenMathematics.Matrices.double4x4)~GenMathematics.Matrices.float4x4">
            <summary>
            Converts double4x4 to float4x4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float4x4.op_Implicit(GenMathematics.Matrices.byte4x4)~GenMathematics.Matrices.float4x4">
            <summary>
            Converts byte4x4 to float4x4
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float4x4.op_Implicit(GenMathematics.Matrices.sbyte4x4)~GenMathematics.Matrices.float4x4">
            <summary>
            Converts sbyte4x4 to float4x4
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float4x4.op_Implicit(GenMathematics.Matrices.short4x4)~GenMathematics.Matrices.float4x4">
            <summary>
            Converts short4x4 to float4x4
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float4x4.op_Implicit(GenMathematics.Matrices.ushort4x4)~GenMathematics.Matrices.float4x4">
            <summary>
            Converts ushort4x4 to float4x4
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float4x4.op_Implicit(GenMathematics.Matrices.int4x4)~GenMathematics.Matrices.float4x4">
            <summary>
            Converts int4x4 to float4x4
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float4x4.op_Implicit(GenMathematics.Matrices.uint4x4)~GenMathematics.Matrices.float4x4">
            <summary>
            Converts uint4x4 to float4x4
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float4x4.op_Implicit(GenMathematics.Matrices.long4x4)~GenMathematics.Matrices.float4x4">
            <summary>
            Converts long4x4 to float4x4
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float4x4.op_Implicit(GenMathematics.Matrices.ulong4x4)~GenMathematics.Matrices.float4x4">
            <summary>
            Converts ulong4x4 to float4x4
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.float4x4.op_Implicit(GenMathematics.Matrices.half4x4)~GenMathematics.Matrices.float4x4">
            <summary>
            Converts half4x4 to float4x4
            </summary>
        </member>
        <member name="T:GenMathematics.Matrices.half2x2">
            <summary>
            Matrix of type Half with 2 rows and 2 columns using the column-major order
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.half2x2.Column0">
            <summary>
            Matrix column with index 0
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.half2x2.Column1">
            <summary>
            Matrix column with index 1
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.half2x2.Row0">
            <summary>
            Matrix row with index 0
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.half2x2.Row1">
            <summary>
            Matrix row with index 1
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half2x2.#ctor(GenMathematics.Vectors.half2,GenMathematics.Vectors.half2)">
            <summary>
            Creates a matrix from column values
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half2x2.#ctor(System.Half,System.Half,System.Half,System.Half)">
            <summary>
            Creates a matrix from the values of rows and columns
            </summary>
            <param name="r0c0">The value to assign to row 0 and column 0 of the matrix</param>
            <param name="r0c1">The value to assign to row 0 and column 1 of the matrix</param>
            <param name="r1c0">The value to assign to row 1 and column 0 of the matrix</param>
            <param name="r1c1">The value to assign to row 1 and column 1 of the matrix</param>
        </member>
        <member name="P:GenMathematics.Matrices.half2x2.Item(System.Int32)">
            <summary>
            To access via the reference use `Unsafe.Add(ref matrix.Column0, index)` instead
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half2x2.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.half2x2.Equals(GenMathematics.Matrices.half2x2)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.half2x2.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.half2x2.CompareTo(GenMathematics.Matrices.half2x2)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.half2x2.ToString">
            <summary>
            Returns the object's state information as a string
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half2x2.Extract(GenMathematics.Matrices.half2x2,System.Int32,System.Int32,GenMathematics.Matrices.half2x2@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half2x2.Multiply(GenMathematics.Matrices.half2x2,System.Half)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half2x2.Multiply(System.Half,GenMathematics.Matrices.half2x2)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half2x2.Divide(GenMathematics.Matrices.half2x2,System.Half)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half2x2.Divide(System.Half,GenMathematics.Matrices.half2x2)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half2x2.op_Multiply(GenMathematics.Matrices.half2x2,System.Half)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half2x2.op_Multiply(System.Half,GenMathematics.Matrices.half2x2)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half2x2.op_Division(GenMathematics.Matrices.half2x2,System.Half)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half2x2.op_Division(System.Half,GenMathematics.Matrices.half2x2)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half2x2.op_Explicit(GenMathematics.Matrices.short2x2)~GenMathematics.Matrices.half2x2">
            <summary>
            Converts short2x2 to half2x2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half2x2.op_Explicit(GenMathematics.Matrices.ushort2x2)~GenMathematics.Matrices.half2x2">
            <summary>
            Converts ushort2x2 to half2x2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half2x2.op_Explicit(GenMathematics.Matrices.int2x2)~GenMathematics.Matrices.half2x2">
            <summary>
            Converts int2x2 to half2x2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half2x2.op_Explicit(GenMathematics.Matrices.uint2x2)~GenMathematics.Matrices.half2x2">
            <summary>
            Converts uint2x2 to half2x2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half2x2.op_Explicit(GenMathematics.Matrices.long2x2)~GenMathematics.Matrices.half2x2">
            <summary>
            Converts long2x2 to half2x2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half2x2.op_Explicit(GenMathematics.Matrices.ulong2x2)~GenMathematics.Matrices.half2x2">
            <summary>
            Converts ulong2x2 to half2x2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half2x2.op_Explicit(GenMathematics.Matrices.float2x2)~GenMathematics.Matrices.half2x2">
            <summary>
            Converts float2x2 to half2x2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half2x2.op_Explicit(GenMathematics.Matrices.double2x2)~GenMathematics.Matrices.half2x2">
            <summary>
            Converts double2x2 to half2x2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half2x2.op_Implicit(GenMathematics.Matrices.byte2x2)~GenMathematics.Matrices.half2x2">
            <summary>
            Converts byte2x2 to half2x2
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half2x2.op_Implicit(GenMathematics.Matrices.sbyte2x2)~GenMathematics.Matrices.half2x2">
            <summary>
            Converts sbyte2x2 to half2x2
            </summary>
        </member>
        <member name="T:GenMathematics.Matrices.half2x3">
            <summary>
            Matrix of type Half with 2 rows and 3 columns using the column-major order
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.half2x3.Column0">
            <summary>
            Matrix column with index 0
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.half2x3.Column1">
            <summary>
            Matrix column with index 1
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.half2x3.Column2">
            <summary>
            Matrix column with index 2
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.half2x3.Row0">
            <summary>
            Matrix row with index 0
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.half2x3.Row1">
            <summary>
            Matrix row with index 1
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half2x3.#ctor(GenMathematics.Vectors.half2,GenMathematics.Vectors.half2,GenMathematics.Vectors.half2)">
            <summary>
            Creates a matrix from column values
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half2x3.#ctor(System.Half,System.Half,System.Half,System.Half,System.Half,System.Half)">
            <summary>
            Creates a matrix from the values of rows and columns
            </summary>
            <param name="r0c0">The value to assign to row 0 and column 0 of the matrix</param>
            <param name="r0c1">The value to assign to row 0 and column 1 of the matrix</param>
            <param name="r0c2">The value to assign to row 0 and column 2 of the matrix</param>
            <param name="r1c0">The value to assign to row 1 and column 0 of the matrix</param>
            <param name="r1c1">The value to assign to row 1 and column 1 of the matrix</param>
            <param name="r1c2">The value to assign to row 1 and column 2 of the matrix</param>
        </member>
        <member name="P:GenMathematics.Matrices.half2x3.Item(System.Int32)">
            <summary>
            To access via the reference use `Unsafe.Add(ref matrix.Column0, index)` instead
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half2x3.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.half2x3.Equals(GenMathematics.Matrices.half2x3)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.half2x3.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.half2x3.CompareTo(GenMathematics.Matrices.half2x3)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.half2x3.ToString">
            <summary>
            Returns the object's state information as a string
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half2x3.Extract(GenMathematics.Matrices.half2x3@,System.Int32,System.Int32,GenMathematics.Matrices.half2x3@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half2x3.Extract(GenMathematics.Matrices.half2x3@,System.Int32,System.Int32,GenMathematics.Matrices.half2x2@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half2x3.Multiply(GenMathematics.Matrices.half2x3,System.Half)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half2x3.Multiply(System.Half,GenMathematics.Matrices.half2x3)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half2x3.Multiply(GenMathematics.Matrices.half2x3@,System.Half,GenMathematics.Matrices.half2x3@)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half2x3.Multiply(System.Half,GenMathematics.Matrices.half2x3@,GenMathematics.Matrices.half2x3@)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half2x3.Divide(GenMathematics.Matrices.half2x3,System.Half)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half2x3.Divide(System.Half,GenMathematics.Matrices.half2x3)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half2x3.Divide(GenMathematics.Matrices.half2x3@,System.Half,GenMathematics.Matrices.half2x3@)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half2x3.Divide(System.Half,GenMathematics.Matrices.half2x3@,GenMathematics.Matrices.half2x3@)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half2x3.op_Multiply(GenMathematics.Matrices.half2x3,System.Half)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half2x3.op_Multiply(System.Half,GenMathematics.Matrices.half2x3)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half2x3.op_Division(GenMathematics.Matrices.half2x3,System.Half)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half2x3.op_Division(System.Half,GenMathematics.Matrices.half2x3)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half2x3.op_Explicit(GenMathematics.Matrices.short2x3)~GenMathematics.Matrices.half2x3">
            <summary>
            Converts short2x3 to half2x3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half2x3.op_Explicit(GenMathematics.Matrices.ushort2x3)~GenMathematics.Matrices.half2x3">
            <summary>
            Converts ushort2x3 to half2x3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half2x3.op_Explicit(GenMathematics.Matrices.int2x3)~GenMathematics.Matrices.half2x3">
            <summary>
            Converts int2x3 to half2x3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half2x3.op_Explicit(GenMathematics.Matrices.uint2x3)~GenMathematics.Matrices.half2x3">
            <summary>
            Converts uint2x3 to half2x3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half2x3.op_Explicit(GenMathematics.Matrices.long2x3)~GenMathematics.Matrices.half2x3">
            <summary>
            Converts long2x3 to half2x3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half2x3.op_Explicit(GenMathematics.Matrices.ulong2x3)~GenMathematics.Matrices.half2x3">
            <summary>
            Converts ulong2x3 to half2x3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half2x3.op_Explicit(GenMathematics.Matrices.float2x3)~GenMathematics.Matrices.half2x3">
            <summary>
            Converts float2x3 to half2x3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half2x3.op_Explicit(GenMathematics.Matrices.double2x3)~GenMathematics.Matrices.half2x3">
            <summary>
            Converts double2x3 to half2x3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half2x3.op_Implicit(GenMathematics.Matrices.byte2x3)~GenMathematics.Matrices.half2x3">
            <summary>
            Converts byte2x3 to half2x3
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half2x3.op_Implicit(GenMathematics.Matrices.sbyte2x3)~GenMathematics.Matrices.half2x3">
            <summary>
            Converts sbyte2x3 to half2x3
            </summary>
        </member>
        <member name="T:GenMathematics.Matrices.half2x4">
            <summary>
            Matrix of type Half with 2 rows and 4 columns using the column-major order
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.half2x4.Column0">
            <summary>
            Matrix column with index 0
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.half2x4.Column1">
            <summary>
            Matrix column with index 1
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.half2x4.Column2">
            <summary>
            Matrix column with index 2
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.half2x4.Column3">
            <summary>
            Matrix column with index 3
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.half2x4.Row0">
            <summary>
            Matrix row with index 0
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.half2x4.Row1">
            <summary>
            Matrix row with index 1
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half2x4.#ctor(GenMathematics.Vectors.half2,GenMathematics.Vectors.half2,GenMathematics.Vectors.half2,GenMathematics.Vectors.half2)">
            <summary>
            Creates a matrix from column values
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half2x4.#ctor(System.Half,System.Half,System.Half,System.Half,System.Half,System.Half,System.Half,System.Half)">
            <summary>
            Creates a matrix from the values of rows and columns
            </summary>
            <param name="r0c0">The value to assign to row 0 and column 0 of the matrix</param>
            <param name="r0c1">The value to assign to row 0 and column 1 of the matrix</param>
            <param name="r0c2">The value to assign to row 0 and column 2 of the matrix</param>
            <param name="r0c3">The value to assign to row 0 and column 3 of the matrix</param>
            <param name="r1c0">The value to assign to row 1 and column 0 of the matrix</param>
            <param name="r1c1">The value to assign to row 1 and column 1 of the matrix</param>
            <param name="r1c2">The value to assign to row 1 and column 2 of the matrix</param>
            <param name="r1c3">The value to assign to row 1 and column 3 of the matrix</param>
        </member>
        <member name="P:GenMathematics.Matrices.half2x4.Item(System.Int32)">
            <summary>
            To access via the reference use `Unsafe.Add(ref matrix.Column0, index)` instead
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half2x4.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.half2x4.Equals(GenMathematics.Matrices.half2x4)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.half2x4.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.half2x4.CompareTo(GenMathematics.Matrices.half2x4)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.half2x4.ToString">
            <summary>
            Returns the object's state information as a string
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half2x4.Extract(GenMathematics.Matrices.half2x4@,System.Int32,System.Int32,GenMathematics.Matrices.half2x4@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half2x4.Extract(GenMathematics.Matrices.half2x4@,System.Int32,System.Int32,GenMathematics.Matrices.half2x3@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half2x4.Extract(GenMathematics.Matrices.half2x4@,System.Int32,System.Int32,GenMathematics.Matrices.half2x2@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half2x4.Multiply(GenMathematics.Matrices.half2x4,System.Half)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half2x4.Multiply(System.Half,GenMathematics.Matrices.half2x4)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half2x4.Multiply(GenMathematics.Matrices.half2x4@,System.Half,GenMathematics.Matrices.half2x4@)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half2x4.Multiply(System.Half,GenMathematics.Matrices.half2x4@,GenMathematics.Matrices.half2x4@)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half2x4.Divide(GenMathematics.Matrices.half2x4,System.Half)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half2x4.Divide(System.Half,GenMathematics.Matrices.half2x4)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half2x4.Divide(GenMathematics.Matrices.half2x4@,System.Half,GenMathematics.Matrices.half2x4@)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half2x4.Divide(System.Half,GenMathematics.Matrices.half2x4@,GenMathematics.Matrices.half2x4@)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half2x4.op_Multiply(GenMathematics.Matrices.half2x4,System.Half)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half2x4.op_Multiply(System.Half,GenMathematics.Matrices.half2x4)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half2x4.op_Division(GenMathematics.Matrices.half2x4,System.Half)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half2x4.op_Division(System.Half,GenMathematics.Matrices.half2x4)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half2x4.op_Explicit(GenMathematics.Matrices.short2x4)~GenMathematics.Matrices.half2x4">
            <summary>
            Converts short2x4 to half2x4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half2x4.op_Explicit(GenMathematics.Matrices.ushort2x4)~GenMathematics.Matrices.half2x4">
            <summary>
            Converts ushort2x4 to half2x4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half2x4.op_Explicit(GenMathematics.Matrices.int2x4)~GenMathematics.Matrices.half2x4">
            <summary>
            Converts int2x4 to half2x4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half2x4.op_Explicit(GenMathematics.Matrices.uint2x4)~GenMathematics.Matrices.half2x4">
            <summary>
            Converts uint2x4 to half2x4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half2x4.op_Explicit(GenMathematics.Matrices.long2x4)~GenMathematics.Matrices.half2x4">
            <summary>
            Converts long2x4 to half2x4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half2x4.op_Explicit(GenMathematics.Matrices.ulong2x4)~GenMathematics.Matrices.half2x4">
            <summary>
            Converts ulong2x4 to half2x4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half2x4.op_Explicit(GenMathematics.Matrices.float2x4)~GenMathematics.Matrices.half2x4">
            <summary>
            Converts float2x4 to half2x4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half2x4.op_Explicit(GenMathematics.Matrices.double2x4)~GenMathematics.Matrices.half2x4">
            <summary>
            Converts double2x4 to half2x4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half2x4.op_Implicit(GenMathematics.Matrices.byte2x4)~GenMathematics.Matrices.half2x4">
            <summary>
            Converts byte2x4 to half2x4
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half2x4.op_Implicit(GenMathematics.Matrices.sbyte2x4)~GenMathematics.Matrices.half2x4">
            <summary>
            Converts sbyte2x4 to half2x4
            </summary>
        </member>
        <member name="T:GenMathematics.Matrices.half3x2">
            <summary>
            Matrix of type Half with 3 rows and 2 columns using the column-major order
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.half3x2.Column0">
            <summary>
            Matrix column with index 0
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.half3x2.Column1">
            <summary>
            Matrix column with index 1
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.half3x2.Row0">
            <summary>
            Matrix row with index 0
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.half3x2.Row1">
            <summary>
            Matrix row with index 1
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.half3x2.Row2">
            <summary>
            Matrix row with index 2
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half3x2.#ctor(GenMathematics.Vectors.half3,GenMathematics.Vectors.half3)">
            <summary>
            Creates a matrix from column values
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half3x2.#ctor(System.Half,System.Half,System.Half,System.Half,System.Half,System.Half)">
            <summary>
            Creates a matrix from the values of rows and columns
            </summary>
            <param name="r0c0">The value to assign to row 0 and column 0 of the matrix</param>
            <param name="r0c1">The value to assign to row 0 and column 1 of the matrix</param>
            <param name="r1c0">The value to assign to row 1 and column 0 of the matrix</param>
            <param name="r1c1">The value to assign to row 1 and column 1 of the matrix</param>
            <param name="r2c0">The value to assign to row 2 and column 0 of the matrix</param>
            <param name="r2c1">The value to assign to row 2 and column 1 of the matrix</param>
        </member>
        <member name="P:GenMathematics.Matrices.half3x2.Item(System.Int32)">
            <summary>
            To access via the reference use `Unsafe.Add(ref matrix.Column0, index)` instead
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half3x2.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.half3x2.Equals(GenMathematics.Matrices.half3x2)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.half3x2.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.half3x2.CompareTo(GenMathematics.Matrices.half3x2)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.half3x2.ToString">
            <summary>
            Returns the object's state information as a string
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half3x2.Extract(GenMathematics.Matrices.half3x2@,System.Int32,System.Int32,GenMathematics.Matrices.half3x2@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half3x2.Extract(GenMathematics.Matrices.half3x2@,System.Int32,System.Int32,GenMathematics.Matrices.half2x2@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half3x2.Multiply(GenMathematics.Matrices.half3x2,System.Half)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half3x2.Multiply(System.Half,GenMathematics.Matrices.half3x2)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half3x2.Multiply(GenMathematics.Matrices.half3x2@,System.Half,GenMathematics.Matrices.half3x2@)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half3x2.Multiply(System.Half,GenMathematics.Matrices.half3x2@,GenMathematics.Matrices.half3x2@)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half3x2.Divide(GenMathematics.Matrices.half3x2,System.Half)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half3x2.Divide(System.Half,GenMathematics.Matrices.half3x2)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half3x2.Divide(GenMathematics.Matrices.half3x2@,System.Half,GenMathematics.Matrices.half3x2@)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half3x2.Divide(System.Half,GenMathematics.Matrices.half3x2@,GenMathematics.Matrices.half3x2@)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half3x2.op_Multiply(GenMathematics.Matrices.half3x2,System.Half)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half3x2.op_Multiply(System.Half,GenMathematics.Matrices.half3x2)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half3x2.op_Division(GenMathematics.Matrices.half3x2,System.Half)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half3x2.op_Division(System.Half,GenMathematics.Matrices.half3x2)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half3x2.op_Explicit(GenMathematics.Matrices.short3x2)~GenMathematics.Matrices.half3x2">
            <summary>
            Converts short3x2 to half3x2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half3x2.op_Explicit(GenMathematics.Matrices.ushort3x2)~GenMathematics.Matrices.half3x2">
            <summary>
            Converts ushort3x2 to half3x2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half3x2.op_Explicit(GenMathematics.Matrices.int3x2)~GenMathematics.Matrices.half3x2">
            <summary>
            Converts int3x2 to half3x2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half3x2.op_Explicit(GenMathematics.Matrices.uint3x2)~GenMathematics.Matrices.half3x2">
            <summary>
            Converts uint3x2 to half3x2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half3x2.op_Explicit(GenMathematics.Matrices.long3x2)~GenMathematics.Matrices.half3x2">
            <summary>
            Converts long3x2 to half3x2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half3x2.op_Explicit(GenMathematics.Matrices.ulong3x2)~GenMathematics.Matrices.half3x2">
            <summary>
            Converts ulong3x2 to half3x2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half3x2.op_Explicit(GenMathematics.Matrices.float3x2)~GenMathematics.Matrices.half3x2">
            <summary>
            Converts float3x2 to half3x2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half3x2.op_Explicit(GenMathematics.Matrices.double3x2)~GenMathematics.Matrices.half3x2">
            <summary>
            Converts double3x2 to half3x2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half3x2.op_Implicit(GenMathematics.Matrices.byte3x2)~GenMathematics.Matrices.half3x2">
            <summary>
            Converts byte3x2 to half3x2
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half3x2.op_Implicit(GenMathematics.Matrices.sbyte3x2)~GenMathematics.Matrices.half3x2">
            <summary>
            Converts sbyte3x2 to half3x2
            </summary>
        </member>
        <member name="T:GenMathematics.Matrices.half3x3">
            <summary>
            Matrix of type Half with 3 rows and 3 columns using the column-major order
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.half3x3.Column0">
            <summary>
            Matrix column with index 0
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.half3x3.Column1">
            <summary>
            Matrix column with index 1
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.half3x3.Column2">
            <summary>
            Matrix column with index 2
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.half3x3.Row0">
            <summary>
            Matrix row with index 0
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.half3x3.Row1">
            <summary>
            Matrix row with index 1
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.half3x3.Row2">
            <summary>
            Matrix row with index 2
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half3x3.#ctor(GenMathematics.Vectors.half3,GenMathematics.Vectors.half3,GenMathematics.Vectors.half3)">
            <summary>
            Creates a matrix from column values
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half3x3.#ctor(System.Half,System.Half,System.Half,System.Half,System.Half,System.Half,System.Half,System.Half,System.Half)">
            <summary>
            Creates a matrix from the values of rows and columns
            </summary>
            <param name="r0c0">The value to assign to row 0 and column 0 of the matrix</param>
            <param name="r0c1">The value to assign to row 0 and column 1 of the matrix</param>
            <param name="r0c2">The value to assign to row 0 and column 2 of the matrix</param>
            <param name="r1c0">The value to assign to row 1 and column 0 of the matrix</param>
            <param name="r1c1">The value to assign to row 1 and column 1 of the matrix</param>
            <param name="r1c2">The value to assign to row 1 and column 2 of the matrix</param>
            <param name="r2c0">The value to assign to row 2 and column 0 of the matrix</param>
            <param name="r2c1">The value to assign to row 2 and column 1 of the matrix</param>
            <param name="r2c2">The value to assign to row 2 and column 2 of the matrix</param>
        </member>
        <member name="P:GenMathematics.Matrices.half3x3.Item(System.Int32)">
            <summary>
            To access via the reference use `Unsafe.Add(ref matrix.Column0, index)` instead
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half3x3.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.half3x3.Equals(GenMathematics.Matrices.half3x3)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.half3x3.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.half3x3.CompareTo(GenMathematics.Matrices.half3x3)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.half3x3.ToString">
            <summary>
            Returns the object's state information as a string
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half3x3.Extract(GenMathematics.Matrices.half3x3@,System.Int32,System.Int32,GenMathematics.Matrices.half3x3@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half3x3.Extract(GenMathematics.Matrices.half3x3@,System.Int32,System.Int32,GenMathematics.Matrices.half2x3@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half3x3.Extract(GenMathematics.Matrices.half3x3@,System.Int32,System.Int32,GenMathematics.Matrices.half3x2@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half3x3.Extract(GenMathematics.Matrices.half3x3@,System.Int32,System.Int32,GenMathematics.Matrices.half2x2@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half3x3.Multiply(GenMathematics.Matrices.half3x3,System.Half)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half3x3.Multiply(System.Half,GenMathematics.Matrices.half3x3)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half3x3.Multiply(GenMathematics.Matrices.half3x3@,System.Half,GenMathematics.Matrices.half3x3@)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half3x3.Multiply(System.Half,GenMathematics.Matrices.half3x3@,GenMathematics.Matrices.half3x3@)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half3x3.Divide(GenMathematics.Matrices.half3x3,System.Half)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half3x3.Divide(System.Half,GenMathematics.Matrices.half3x3)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half3x3.Divide(GenMathematics.Matrices.half3x3@,System.Half,GenMathematics.Matrices.half3x3@)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half3x3.Divide(System.Half,GenMathematics.Matrices.half3x3@,GenMathematics.Matrices.half3x3@)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half3x3.op_Multiply(GenMathematics.Matrices.half3x3,System.Half)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half3x3.op_Multiply(System.Half,GenMathematics.Matrices.half3x3)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half3x3.op_Division(GenMathematics.Matrices.half3x3,System.Half)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half3x3.op_Division(System.Half,GenMathematics.Matrices.half3x3)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half3x3.op_Explicit(GenMathematics.Matrices.short3x3)~GenMathematics.Matrices.half3x3">
            <summary>
            Converts short3x3 to half3x3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half3x3.op_Explicit(GenMathematics.Matrices.ushort3x3)~GenMathematics.Matrices.half3x3">
            <summary>
            Converts ushort3x3 to half3x3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half3x3.op_Explicit(GenMathematics.Matrices.int3x3)~GenMathematics.Matrices.half3x3">
            <summary>
            Converts int3x3 to half3x3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half3x3.op_Explicit(GenMathematics.Matrices.uint3x3)~GenMathematics.Matrices.half3x3">
            <summary>
            Converts uint3x3 to half3x3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half3x3.op_Explicit(GenMathematics.Matrices.long3x3)~GenMathematics.Matrices.half3x3">
            <summary>
            Converts long3x3 to half3x3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half3x3.op_Explicit(GenMathematics.Matrices.ulong3x3)~GenMathematics.Matrices.half3x3">
            <summary>
            Converts ulong3x3 to half3x3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half3x3.op_Explicit(GenMathematics.Matrices.float3x3)~GenMathematics.Matrices.half3x3">
            <summary>
            Converts float3x3 to half3x3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half3x3.op_Explicit(GenMathematics.Matrices.double3x3)~GenMathematics.Matrices.half3x3">
            <summary>
            Converts double3x3 to half3x3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half3x3.op_Implicit(GenMathematics.Matrices.byte3x3)~GenMathematics.Matrices.half3x3">
            <summary>
            Converts byte3x3 to half3x3
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half3x3.op_Implicit(GenMathematics.Matrices.sbyte3x3)~GenMathematics.Matrices.half3x3">
            <summary>
            Converts sbyte3x3 to half3x3
            </summary>
        </member>
        <member name="T:GenMathematics.Matrices.half3x4">
            <summary>
            Matrix of type Half with 3 rows and 4 columns using the column-major order
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.half3x4.Column0">
            <summary>
            Matrix column with index 0
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.half3x4.Column1">
            <summary>
            Matrix column with index 1
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.half3x4.Column2">
            <summary>
            Matrix column with index 2
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.half3x4.Column3">
            <summary>
            Matrix column with index 3
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.half3x4.Row0">
            <summary>
            Matrix row with index 0
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.half3x4.Row1">
            <summary>
            Matrix row with index 1
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.half3x4.Row2">
            <summary>
            Matrix row with index 2
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half3x4.#ctor(GenMathematics.Vectors.half3,GenMathematics.Vectors.half3,GenMathematics.Vectors.half3,GenMathematics.Vectors.half3)">
            <summary>
            Creates a matrix from column values
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half3x4.#ctor(System.Half,System.Half,System.Half,System.Half,System.Half,System.Half,System.Half,System.Half,System.Half,System.Half,System.Half,System.Half)">
            <summary>
            Creates a matrix from the values of rows and columns
            </summary>
            <param name="r0c0">The value to assign to row 0 and column 0 of the matrix</param>
            <param name="r0c1">The value to assign to row 0 and column 1 of the matrix</param>
            <param name="r0c2">The value to assign to row 0 and column 2 of the matrix</param>
            <param name="r0c3">The value to assign to row 0 and column 3 of the matrix</param>
            <param name="r1c0">The value to assign to row 1 and column 0 of the matrix</param>
            <param name="r1c1">The value to assign to row 1 and column 1 of the matrix</param>
            <param name="r1c2">The value to assign to row 1 and column 2 of the matrix</param>
            <param name="r1c3">The value to assign to row 1 and column 3 of the matrix</param>
            <param name="r2c0">The value to assign to row 2 and column 0 of the matrix</param>
            <param name="r2c1">The value to assign to row 2 and column 1 of the matrix</param>
            <param name="r2c2">The value to assign to row 2 and column 2 of the matrix</param>
            <param name="r2c3">The value to assign to row 2 and column 3 of the matrix</param>
        </member>
        <member name="P:GenMathematics.Matrices.half3x4.Item(System.Int32)">
            <summary>
            To access via the reference use `Unsafe.Add(ref matrix.Column0, index)` instead
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half3x4.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.half3x4.Equals(GenMathematics.Matrices.half3x4)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.half3x4.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.half3x4.CompareTo(GenMathematics.Matrices.half3x4)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.half3x4.ToString">
            <summary>
            Returns the object's state information as a string
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half3x4.Extract(GenMathematics.Matrices.half3x4@,System.Int32,System.Int32,GenMathematics.Matrices.half3x4@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half3x4.Extract(GenMathematics.Matrices.half3x4@,System.Int32,System.Int32,GenMathematics.Matrices.half2x4@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half3x4.Extract(GenMathematics.Matrices.half3x4@,System.Int32,System.Int32,GenMathematics.Matrices.half3x3@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half3x4.Extract(GenMathematics.Matrices.half3x4@,System.Int32,System.Int32,GenMathematics.Matrices.half2x3@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half3x4.Extract(GenMathematics.Matrices.half3x4@,System.Int32,System.Int32,GenMathematics.Matrices.half3x2@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half3x4.Extract(GenMathematics.Matrices.half3x4@,System.Int32,System.Int32,GenMathematics.Matrices.half2x2@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half3x4.Multiply(GenMathematics.Matrices.half3x4,System.Half)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half3x4.Multiply(System.Half,GenMathematics.Matrices.half3x4)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half3x4.Multiply(GenMathematics.Matrices.half3x4@,System.Half,GenMathematics.Matrices.half3x4@)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half3x4.Multiply(System.Half,GenMathematics.Matrices.half3x4@,GenMathematics.Matrices.half3x4@)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half3x4.Divide(GenMathematics.Matrices.half3x4,System.Half)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half3x4.Divide(System.Half,GenMathematics.Matrices.half3x4)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half3x4.Divide(GenMathematics.Matrices.half3x4@,System.Half,GenMathematics.Matrices.half3x4@)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half3x4.Divide(System.Half,GenMathematics.Matrices.half3x4@,GenMathematics.Matrices.half3x4@)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half3x4.op_Multiply(GenMathematics.Matrices.half3x4,System.Half)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half3x4.op_Multiply(System.Half,GenMathematics.Matrices.half3x4)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half3x4.op_Division(GenMathematics.Matrices.half3x4,System.Half)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half3x4.op_Division(System.Half,GenMathematics.Matrices.half3x4)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half3x4.op_Explicit(GenMathematics.Matrices.short3x4)~GenMathematics.Matrices.half3x4">
            <summary>
            Converts short3x4 to half3x4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half3x4.op_Explicit(GenMathematics.Matrices.ushort3x4)~GenMathematics.Matrices.half3x4">
            <summary>
            Converts ushort3x4 to half3x4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half3x4.op_Explicit(GenMathematics.Matrices.int3x4)~GenMathematics.Matrices.half3x4">
            <summary>
            Converts int3x4 to half3x4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half3x4.op_Explicit(GenMathematics.Matrices.uint3x4)~GenMathematics.Matrices.half3x4">
            <summary>
            Converts uint3x4 to half3x4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half3x4.op_Explicit(GenMathematics.Matrices.long3x4)~GenMathematics.Matrices.half3x4">
            <summary>
            Converts long3x4 to half3x4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half3x4.op_Explicit(GenMathematics.Matrices.ulong3x4)~GenMathematics.Matrices.half3x4">
            <summary>
            Converts ulong3x4 to half3x4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half3x4.op_Explicit(GenMathematics.Matrices.float3x4)~GenMathematics.Matrices.half3x4">
            <summary>
            Converts float3x4 to half3x4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half3x4.op_Explicit(GenMathematics.Matrices.double3x4)~GenMathematics.Matrices.half3x4">
            <summary>
            Converts double3x4 to half3x4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half3x4.op_Implicit(GenMathematics.Matrices.byte3x4)~GenMathematics.Matrices.half3x4">
            <summary>
            Converts byte3x4 to half3x4
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half3x4.op_Implicit(GenMathematics.Matrices.sbyte3x4)~GenMathematics.Matrices.half3x4">
            <summary>
            Converts sbyte3x4 to half3x4
            </summary>
        </member>
        <member name="T:GenMathematics.Matrices.half4x2">
            <summary>
            Matrix of type Half with 4 rows and 2 columns using the column-major order
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.half4x2.Column0">
            <summary>
            Matrix column with index 0
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.half4x2.Column1">
            <summary>
            Matrix column with index 1
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.half4x2.Row0">
            <summary>
            Matrix row with index 0
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.half4x2.Row1">
            <summary>
            Matrix row with index 1
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.half4x2.Row2">
            <summary>
            Matrix row with index 2
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.half4x2.Row3">
            <summary>
            Matrix row with index 3
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half4x2.#ctor(GenMathematics.Vectors.half4,GenMathematics.Vectors.half4)">
            <summary>
            Creates a matrix from column values
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half4x2.#ctor(System.Half,System.Half,System.Half,System.Half,System.Half,System.Half,System.Half,System.Half)">
            <summary>
            Creates a matrix from the values of rows and columns
            </summary>
            <param name="r0c0">The value to assign to row 0 and column 0 of the matrix</param>
            <param name="r0c1">The value to assign to row 0 and column 1 of the matrix</param>
            <param name="r1c0">The value to assign to row 1 and column 0 of the matrix</param>
            <param name="r1c1">The value to assign to row 1 and column 1 of the matrix</param>
            <param name="r2c0">The value to assign to row 2 and column 0 of the matrix</param>
            <param name="r2c1">The value to assign to row 2 and column 1 of the matrix</param>
            <param name="r3c0">The value to assign to row 3 and column 0 of the matrix</param>
            <param name="r3c1">The value to assign to row 3 and column 1 of the matrix</param>
        </member>
        <member name="P:GenMathematics.Matrices.half4x2.Item(System.Int32)">
            <summary>
            To access via the reference use `Unsafe.Add(ref matrix.Column0, index)` instead
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half4x2.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.half4x2.Equals(GenMathematics.Matrices.half4x2)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.half4x2.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.half4x2.CompareTo(GenMathematics.Matrices.half4x2)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.half4x2.ToString">
            <summary>
            Returns the object's state information as a string
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half4x2.Extract(GenMathematics.Matrices.half4x2@,System.Int32,System.Int32,GenMathematics.Matrices.half4x2@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half4x2.Extract(GenMathematics.Matrices.half4x2@,System.Int32,System.Int32,GenMathematics.Matrices.half3x2@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half4x2.Extract(GenMathematics.Matrices.half4x2@,System.Int32,System.Int32,GenMathematics.Matrices.half2x2@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half4x2.Multiply(GenMathematics.Matrices.half4x2,System.Half)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half4x2.Multiply(System.Half,GenMathematics.Matrices.half4x2)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half4x2.Multiply(GenMathematics.Matrices.half4x2@,System.Half,GenMathematics.Matrices.half4x2@)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half4x2.Multiply(System.Half,GenMathematics.Matrices.half4x2@,GenMathematics.Matrices.half4x2@)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half4x2.Divide(GenMathematics.Matrices.half4x2,System.Half)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half4x2.Divide(System.Half,GenMathematics.Matrices.half4x2)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half4x2.Divide(GenMathematics.Matrices.half4x2@,System.Half,GenMathematics.Matrices.half4x2@)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half4x2.Divide(System.Half,GenMathematics.Matrices.half4x2@,GenMathematics.Matrices.half4x2@)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half4x2.op_Multiply(GenMathematics.Matrices.half4x2,System.Half)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half4x2.op_Multiply(System.Half,GenMathematics.Matrices.half4x2)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half4x2.op_Division(GenMathematics.Matrices.half4x2,System.Half)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half4x2.op_Division(System.Half,GenMathematics.Matrices.half4x2)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half4x2.op_Explicit(GenMathematics.Matrices.short4x2)~GenMathematics.Matrices.half4x2">
            <summary>
            Converts short4x2 to half4x2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half4x2.op_Explicit(GenMathematics.Matrices.ushort4x2)~GenMathematics.Matrices.half4x2">
            <summary>
            Converts ushort4x2 to half4x2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half4x2.op_Explicit(GenMathematics.Matrices.int4x2)~GenMathematics.Matrices.half4x2">
            <summary>
            Converts int4x2 to half4x2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half4x2.op_Explicit(GenMathematics.Matrices.uint4x2)~GenMathematics.Matrices.half4x2">
            <summary>
            Converts uint4x2 to half4x2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half4x2.op_Explicit(GenMathematics.Matrices.long4x2)~GenMathematics.Matrices.half4x2">
            <summary>
            Converts long4x2 to half4x2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half4x2.op_Explicit(GenMathematics.Matrices.ulong4x2)~GenMathematics.Matrices.half4x2">
            <summary>
            Converts ulong4x2 to half4x2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half4x2.op_Explicit(GenMathematics.Matrices.float4x2)~GenMathematics.Matrices.half4x2">
            <summary>
            Converts float4x2 to half4x2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half4x2.op_Explicit(GenMathematics.Matrices.double4x2)~GenMathematics.Matrices.half4x2">
            <summary>
            Converts double4x2 to half4x2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half4x2.op_Implicit(GenMathematics.Matrices.byte4x2)~GenMathematics.Matrices.half4x2">
            <summary>
            Converts byte4x2 to half4x2
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half4x2.op_Implicit(GenMathematics.Matrices.sbyte4x2)~GenMathematics.Matrices.half4x2">
            <summary>
            Converts sbyte4x2 to half4x2
            </summary>
        </member>
        <member name="T:GenMathematics.Matrices.half4x3">
            <summary>
            Matrix of type Half with 4 rows and 3 columns using the column-major order
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.half4x3.Column0">
            <summary>
            Matrix column with index 0
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.half4x3.Column1">
            <summary>
            Matrix column with index 1
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.half4x3.Column2">
            <summary>
            Matrix column with index 2
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.half4x3.Row0">
            <summary>
            Matrix row with index 0
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.half4x3.Row1">
            <summary>
            Matrix row with index 1
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.half4x3.Row2">
            <summary>
            Matrix row with index 2
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.half4x3.Row3">
            <summary>
            Matrix row with index 3
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half4x3.#ctor(GenMathematics.Vectors.half4,GenMathematics.Vectors.half4,GenMathematics.Vectors.half4)">
            <summary>
            Creates a matrix from column values
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half4x3.#ctor(System.Half,System.Half,System.Half,System.Half,System.Half,System.Half,System.Half,System.Half,System.Half,System.Half,System.Half,System.Half)">
            <summary>
            Creates a matrix from the values of rows and columns
            </summary>
            <param name="r0c0">The value to assign to row 0 and column 0 of the matrix</param>
            <param name="r0c1">The value to assign to row 0 and column 1 of the matrix</param>
            <param name="r0c2">The value to assign to row 0 and column 2 of the matrix</param>
            <param name="r1c0">The value to assign to row 1 and column 0 of the matrix</param>
            <param name="r1c1">The value to assign to row 1 and column 1 of the matrix</param>
            <param name="r1c2">The value to assign to row 1 and column 2 of the matrix</param>
            <param name="r2c0">The value to assign to row 2 and column 0 of the matrix</param>
            <param name="r2c1">The value to assign to row 2 and column 1 of the matrix</param>
            <param name="r2c2">The value to assign to row 2 and column 2 of the matrix</param>
            <param name="r3c0">The value to assign to row 3 and column 0 of the matrix</param>
            <param name="r3c1">The value to assign to row 3 and column 1 of the matrix</param>
            <param name="r3c2">The value to assign to row 3 and column 2 of the matrix</param>
        </member>
        <member name="P:GenMathematics.Matrices.half4x3.Item(System.Int32)">
            <summary>
            To access via the reference use `Unsafe.Add(ref matrix.Column0, index)` instead
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half4x3.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.half4x3.Equals(GenMathematics.Matrices.half4x3)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.half4x3.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.half4x3.CompareTo(GenMathematics.Matrices.half4x3)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.half4x3.ToString">
            <summary>
            Returns the object's state information as a string
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half4x3.Extract(GenMathematics.Matrices.half4x3@,System.Int32,System.Int32,GenMathematics.Matrices.half4x3@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half4x3.Extract(GenMathematics.Matrices.half4x3@,System.Int32,System.Int32,GenMathematics.Matrices.half3x3@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half4x3.Extract(GenMathematics.Matrices.half4x3@,System.Int32,System.Int32,GenMathematics.Matrices.half2x3@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half4x3.Extract(GenMathematics.Matrices.half4x3@,System.Int32,System.Int32,GenMathematics.Matrices.half4x2@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half4x3.Extract(GenMathematics.Matrices.half4x3@,System.Int32,System.Int32,GenMathematics.Matrices.half3x2@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half4x3.Extract(GenMathematics.Matrices.half4x3@,System.Int32,System.Int32,GenMathematics.Matrices.half2x2@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half4x3.Multiply(GenMathematics.Matrices.half4x3,System.Half)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half4x3.Multiply(System.Half,GenMathematics.Matrices.half4x3)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half4x3.Multiply(GenMathematics.Matrices.half4x3@,System.Half,GenMathematics.Matrices.half4x3@)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half4x3.Multiply(System.Half,GenMathematics.Matrices.half4x3@,GenMathematics.Matrices.half4x3@)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half4x3.Divide(GenMathematics.Matrices.half4x3,System.Half)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half4x3.Divide(System.Half,GenMathematics.Matrices.half4x3)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half4x3.Divide(GenMathematics.Matrices.half4x3@,System.Half,GenMathematics.Matrices.half4x3@)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half4x3.Divide(System.Half,GenMathematics.Matrices.half4x3@,GenMathematics.Matrices.half4x3@)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half4x3.op_Multiply(GenMathematics.Matrices.half4x3,System.Half)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half4x3.op_Multiply(System.Half,GenMathematics.Matrices.half4x3)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half4x3.op_Division(GenMathematics.Matrices.half4x3,System.Half)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half4x3.op_Division(System.Half,GenMathematics.Matrices.half4x3)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half4x3.op_Explicit(GenMathematics.Matrices.short4x3)~GenMathematics.Matrices.half4x3">
            <summary>
            Converts short4x3 to half4x3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half4x3.op_Explicit(GenMathematics.Matrices.ushort4x3)~GenMathematics.Matrices.half4x3">
            <summary>
            Converts ushort4x3 to half4x3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half4x3.op_Explicit(GenMathematics.Matrices.int4x3)~GenMathematics.Matrices.half4x3">
            <summary>
            Converts int4x3 to half4x3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half4x3.op_Explicit(GenMathematics.Matrices.uint4x3)~GenMathematics.Matrices.half4x3">
            <summary>
            Converts uint4x3 to half4x3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half4x3.op_Explicit(GenMathematics.Matrices.long4x3)~GenMathematics.Matrices.half4x3">
            <summary>
            Converts long4x3 to half4x3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half4x3.op_Explicit(GenMathematics.Matrices.ulong4x3)~GenMathematics.Matrices.half4x3">
            <summary>
            Converts ulong4x3 to half4x3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half4x3.op_Explicit(GenMathematics.Matrices.float4x3)~GenMathematics.Matrices.half4x3">
            <summary>
            Converts float4x3 to half4x3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half4x3.op_Explicit(GenMathematics.Matrices.double4x3)~GenMathematics.Matrices.half4x3">
            <summary>
            Converts double4x3 to half4x3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half4x3.op_Implicit(GenMathematics.Matrices.byte4x3)~GenMathematics.Matrices.half4x3">
            <summary>
            Converts byte4x3 to half4x3
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half4x3.op_Implicit(GenMathematics.Matrices.sbyte4x3)~GenMathematics.Matrices.half4x3">
            <summary>
            Converts sbyte4x3 to half4x3
            </summary>
        </member>
        <member name="T:GenMathematics.Matrices.half4x4">
            <summary>
            Matrix of type Half with 4 rows and 4 columns using the column-major order
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.half4x4.Column0">
            <summary>
            Matrix column with index 0
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.half4x4.Column1">
            <summary>
            Matrix column with index 1
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.half4x4.Column2">
            <summary>
            Matrix column with index 2
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.half4x4.Column3">
            <summary>
            Matrix column with index 3
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.half4x4.Row0">
            <summary>
            Matrix row with index 0
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.half4x4.Row1">
            <summary>
            Matrix row with index 1
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.half4x4.Row2">
            <summary>
            Matrix row with index 2
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.half4x4.Row3">
            <summary>
            Matrix row with index 3
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half4x4.#ctor(GenMathematics.Vectors.half4,GenMathematics.Vectors.half4,GenMathematics.Vectors.half4,GenMathematics.Vectors.half4)">
            <summary>
            Creates a matrix from column values
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half4x4.#ctor(System.Half,System.Half,System.Half,System.Half,System.Half,System.Half,System.Half,System.Half,System.Half,System.Half,System.Half,System.Half,System.Half,System.Half,System.Half,System.Half)">
            <summary>
            Creates a matrix from the values of rows and columns
            </summary>
            <param name="r0c0">The value to assign to row 0 and column 0 of the matrix</param>
            <param name="r0c1">The value to assign to row 0 and column 1 of the matrix</param>
            <param name="r0c2">The value to assign to row 0 and column 2 of the matrix</param>
            <param name="r0c3">The value to assign to row 0 and column 3 of the matrix</param>
            <param name="r1c0">The value to assign to row 1 and column 0 of the matrix</param>
            <param name="r1c1">The value to assign to row 1 and column 1 of the matrix</param>
            <param name="r1c2">The value to assign to row 1 and column 2 of the matrix</param>
            <param name="r1c3">The value to assign to row 1 and column 3 of the matrix</param>
            <param name="r2c0">The value to assign to row 2 and column 0 of the matrix</param>
            <param name="r2c1">The value to assign to row 2 and column 1 of the matrix</param>
            <param name="r2c2">The value to assign to row 2 and column 2 of the matrix</param>
            <param name="r2c3">The value to assign to row 2 and column 3 of the matrix</param>
            <param name="r3c0">The value to assign to row 3 and column 0 of the matrix</param>
            <param name="r3c1">The value to assign to row 3 and column 1 of the matrix</param>
            <param name="r3c2">The value to assign to row 3 and column 2 of the matrix</param>
            <param name="r3c3">The value to assign to row 3 and column 3 of the matrix</param>
        </member>
        <member name="P:GenMathematics.Matrices.half4x4.Item(System.Int32)">
            <summary>
            To access via the reference use `Unsafe.Add(ref matrix.Column0, index)` instead
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half4x4.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.half4x4.Equals(GenMathematics.Matrices.half4x4)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.half4x4.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.half4x4.CompareTo(GenMathematics.Matrices.half4x4)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.half4x4.ToString">
            <summary>
            Returns the object's state information as a string
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half4x4.Extract(GenMathematics.Matrices.half4x4@,System.Int32,System.Int32,GenMathematics.Matrices.half4x4@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half4x4.Extract(GenMathematics.Matrices.half4x4@,System.Int32,System.Int32,GenMathematics.Matrices.half3x4@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half4x4.Extract(GenMathematics.Matrices.half4x4@,System.Int32,System.Int32,GenMathematics.Matrices.half2x4@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half4x4.Extract(GenMathematics.Matrices.half4x4@,System.Int32,System.Int32,GenMathematics.Matrices.half4x3@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half4x4.Extract(GenMathematics.Matrices.half4x4@,System.Int32,System.Int32,GenMathematics.Matrices.half3x3@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half4x4.Extract(GenMathematics.Matrices.half4x4@,System.Int32,System.Int32,GenMathematics.Matrices.half2x3@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half4x4.Extract(GenMathematics.Matrices.half4x4@,System.Int32,System.Int32,GenMathematics.Matrices.half4x2@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half4x4.Extract(GenMathematics.Matrices.half4x4@,System.Int32,System.Int32,GenMathematics.Matrices.half3x2@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half4x4.Extract(GenMathematics.Matrices.half4x4@,System.Int32,System.Int32,GenMathematics.Matrices.half2x2@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half4x4.Multiply(GenMathematics.Matrices.half4x4,System.Half)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half4x4.Multiply(System.Half,GenMathematics.Matrices.half4x4)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half4x4.Multiply(GenMathematics.Matrices.half4x4@,System.Half,GenMathematics.Matrices.half4x4@)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half4x4.Multiply(System.Half,GenMathematics.Matrices.half4x4@,GenMathematics.Matrices.half4x4@)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half4x4.Divide(GenMathematics.Matrices.half4x4,System.Half)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half4x4.Divide(System.Half,GenMathematics.Matrices.half4x4)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half4x4.Divide(GenMathematics.Matrices.half4x4@,System.Half,GenMathematics.Matrices.half4x4@)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half4x4.Divide(System.Half,GenMathematics.Matrices.half4x4@,GenMathematics.Matrices.half4x4@)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half4x4.op_Multiply(GenMathematics.Matrices.half4x4,System.Half)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half4x4.op_Multiply(System.Half,GenMathematics.Matrices.half4x4)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half4x4.op_Division(GenMathematics.Matrices.half4x4,System.Half)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half4x4.op_Division(System.Half,GenMathematics.Matrices.half4x4)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half4x4.op_Explicit(GenMathematics.Matrices.short4x4)~GenMathematics.Matrices.half4x4">
            <summary>
            Converts short4x4 to half4x4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half4x4.op_Explicit(GenMathematics.Matrices.ushort4x4)~GenMathematics.Matrices.half4x4">
            <summary>
            Converts ushort4x4 to half4x4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half4x4.op_Explicit(GenMathematics.Matrices.int4x4)~GenMathematics.Matrices.half4x4">
            <summary>
            Converts int4x4 to half4x4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half4x4.op_Explicit(GenMathematics.Matrices.uint4x4)~GenMathematics.Matrices.half4x4">
            <summary>
            Converts uint4x4 to half4x4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half4x4.op_Explicit(GenMathematics.Matrices.long4x4)~GenMathematics.Matrices.half4x4">
            <summary>
            Converts long4x4 to half4x4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half4x4.op_Explicit(GenMathematics.Matrices.ulong4x4)~GenMathematics.Matrices.half4x4">
            <summary>
            Converts ulong4x4 to half4x4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half4x4.op_Explicit(GenMathematics.Matrices.float4x4)~GenMathematics.Matrices.half4x4">
            <summary>
            Converts float4x4 to half4x4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half4x4.op_Explicit(GenMathematics.Matrices.double4x4)~GenMathematics.Matrices.half4x4">
            <summary>
            Converts double4x4 to half4x4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half4x4.op_Implicit(GenMathematics.Matrices.byte4x4)~GenMathematics.Matrices.half4x4">
            <summary>
            Converts byte4x4 to half4x4
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.half4x4.op_Implicit(GenMathematics.Matrices.sbyte4x4)~GenMathematics.Matrices.half4x4">
            <summary>
            Converts sbyte4x4 to half4x4
            </summary>
        </member>
        <member name="T:GenMathematics.Matrices.int2x2">
            <summary>
            Matrix of type int with 2 rows and 2 columns using the column-major order
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.int2x2.Column0">
            <summary>
            Matrix column with index 0
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.int2x2.Column1">
            <summary>
            Matrix column with index 1
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.int2x2.Row0">
            <summary>
            Matrix row with index 0
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.int2x2.Row1">
            <summary>
            Matrix row with index 1
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int2x2.#ctor(GenMathematics.Vectors.int2,GenMathematics.Vectors.int2)">
            <summary>
            Creates a matrix from column values
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int2x2.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a matrix from the values of rows and columns
            </summary>
            <param name="r0c0">The value to assign to row 0 and column 0 of the matrix</param>
            <param name="r0c1">The value to assign to row 0 and column 1 of the matrix</param>
            <param name="r1c0">The value to assign to row 1 and column 0 of the matrix</param>
            <param name="r1c1">The value to assign to row 1 and column 1 of the matrix</param>
        </member>
        <member name="P:GenMathematics.Matrices.int2x2.Item(System.Int32)">
            <summary>
            To access via the reference use `Unsafe.Add(ref matrix.Column0, index)` instead
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int2x2.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.int2x2.Equals(GenMathematics.Matrices.int2x2)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.int2x2.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.int2x2.CompareTo(GenMathematics.Matrices.int2x2)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.int2x2.ToString">
            <summary>
            Returns the object's state information as a string
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int2x2.Extract(GenMathematics.Matrices.int2x2@,System.Int32,System.Int32,GenMathematics.Matrices.int2x2@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int2x2.Multiply(GenMathematics.Matrices.int2x2,System.Int32)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int2x2.Multiply(System.Int32,GenMathematics.Matrices.int2x2)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int2x2.Multiply(GenMathematics.Matrices.int2x2@,System.Int32,GenMathematics.Matrices.int2x2@)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int2x2.Multiply(System.Int32,GenMathematics.Matrices.int2x2@,GenMathematics.Matrices.int2x2@)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int2x2.Divide(GenMathematics.Matrices.int2x2,System.Int32)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int2x2.Divide(System.Int32,GenMathematics.Matrices.int2x2)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int2x2.Divide(GenMathematics.Matrices.int2x2@,System.Int32,GenMathematics.Matrices.int2x2@)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int2x2.Divide(System.Int32,GenMathematics.Matrices.int2x2@,GenMathematics.Matrices.int2x2@)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int2x2.op_Multiply(GenMathematics.Matrices.int2x2,System.Int32)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int2x2.op_Multiply(System.Int32,GenMathematics.Matrices.int2x2)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int2x2.op_Division(GenMathematics.Matrices.int2x2,System.Int32)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int2x2.op_Division(System.Int32,GenMathematics.Matrices.int2x2)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int2x2.op_Explicit(GenMathematics.Matrices.uint2x2)~GenMathematics.Matrices.int2x2">
            <summary>
            Converts uint2x2 to int2x2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int2x2.op_Explicit(GenMathematics.Matrices.long2x2)~GenMathematics.Matrices.int2x2">
            <summary>
            Converts long2x2 to int2x2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int2x2.op_Explicit(GenMathematics.Matrices.ulong2x2)~GenMathematics.Matrices.int2x2">
            <summary>
            Converts ulong2x2 to int2x2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int2x2.op_Explicit(GenMathematics.Matrices.half2x2)~GenMathematics.Matrices.int2x2">
            <summary>
            Converts half2x2 to int2x2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int2x2.op_Explicit(GenMathematics.Matrices.float2x2)~GenMathematics.Matrices.int2x2">
            <summary>
            Converts float2x2 to int2x2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int2x2.op_Explicit(GenMathematics.Matrices.double2x2)~GenMathematics.Matrices.int2x2">
            <summary>
            Converts double2x2 to int2x2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int2x2.op_Implicit(GenMathematics.Matrices.byte2x2)~GenMathematics.Matrices.int2x2">
            <summary>
            Converts byte2x2 to int2x2
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int2x2.op_Implicit(GenMathematics.Matrices.sbyte2x2)~GenMathematics.Matrices.int2x2">
            <summary>
            Converts sbyte2x2 to int2x2
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int2x2.op_Implicit(GenMathematics.Matrices.short2x2)~GenMathematics.Matrices.int2x2">
            <summary>
            Converts short2x2 to int2x2
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int2x2.op_Implicit(GenMathematics.Matrices.ushort2x2)~GenMathematics.Matrices.int2x2">
            <summary>
            Converts ushort2x2 to int2x2
            </summary>
        </member>
        <member name="T:GenMathematics.Matrices.int2x3">
            <summary>
            Matrix of type int with 2 rows and 3 columns using the column-major order
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.int2x3.Column0">
            <summary>
            Matrix column with index 0
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.int2x3.Column1">
            <summary>
            Matrix column with index 1
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.int2x3.Column2">
            <summary>
            Matrix column with index 2
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.int2x3.Row0">
            <summary>
            Matrix row with index 0
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.int2x3.Row1">
            <summary>
            Matrix row with index 1
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int2x3.#ctor(GenMathematics.Vectors.int2,GenMathematics.Vectors.int2,GenMathematics.Vectors.int2)">
            <summary>
            Creates a matrix from column values
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int2x3.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a matrix from the values of rows and columns
            </summary>
            <param name="r0c0">The value to assign to row 0 and column 0 of the matrix</param>
            <param name="r0c1">The value to assign to row 0 and column 1 of the matrix</param>
            <param name="r0c2">The value to assign to row 0 and column 2 of the matrix</param>
            <param name="r1c0">The value to assign to row 1 and column 0 of the matrix</param>
            <param name="r1c1">The value to assign to row 1 and column 1 of the matrix</param>
            <param name="r1c2">The value to assign to row 1 and column 2 of the matrix</param>
        </member>
        <member name="P:GenMathematics.Matrices.int2x3.Item(System.Int32)">
            <summary>
            To access via the reference use `Unsafe.Add(ref matrix.Column0, index)` instead
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int2x3.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.int2x3.Equals(GenMathematics.Matrices.int2x3)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.int2x3.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.int2x3.CompareTo(GenMathematics.Matrices.int2x3)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.int2x3.ToString">
            <summary>
            Returns the object's state information as a string
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int2x3.Extract(GenMathematics.Matrices.int2x3@,System.Int32,System.Int32,GenMathematics.Matrices.int2x3@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int2x3.Extract(GenMathematics.Matrices.int2x3@,System.Int32,System.Int32,GenMathematics.Matrices.int2x2@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int2x3.Multiply(GenMathematics.Matrices.int2x3,System.Int32)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int2x3.Multiply(System.Int32,GenMathematics.Matrices.int2x3)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int2x3.Multiply(GenMathematics.Matrices.int2x3@,System.Int32,GenMathematics.Matrices.int2x3@)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int2x3.Multiply(System.Int32,GenMathematics.Matrices.int2x3@,GenMathematics.Matrices.int2x3@)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int2x3.Divide(GenMathematics.Matrices.int2x3,System.Int32)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int2x3.Divide(System.Int32,GenMathematics.Matrices.int2x3)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int2x3.Divide(GenMathematics.Matrices.int2x3@,System.Int32,GenMathematics.Matrices.int2x3@)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int2x3.Divide(System.Int32,GenMathematics.Matrices.int2x3@,GenMathematics.Matrices.int2x3@)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int2x3.op_Multiply(GenMathematics.Matrices.int2x3,System.Int32)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int2x3.op_Multiply(System.Int32,GenMathematics.Matrices.int2x3)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int2x3.op_Division(GenMathematics.Matrices.int2x3,System.Int32)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int2x3.op_Division(System.Int32,GenMathematics.Matrices.int2x3)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int2x3.op_Explicit(GenMathematics.Matrices.uint2x3)~GenMathematics.Matrices.int2x3">
            <summary>
            Converts uint2x3 to int2x3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int2x3.op_Explicit(GenMathematics.Matrices.long2x3)~GenMathematics.Matrices.int2x3">
            <summary>
            Converts long2x3 to int2x3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int2x3.op_Explicit(GenMathematics.Matrices.ulong2x3)~GenMathematics.Matrices.int2x3">
            <summary>
            Converts ulong2x3 to int2x3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int2x3.op_Explicit(GenMathematics.Matrices.half2x3)~GenMathematics.Matrices.int2x3">
            <summary>
            Converts half2x3 to int2x3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int2x3.op_Explicit(GenMathematics.Matrices.float2x3)~GenMathematics.Matrices.int2x3">
            <summary>
            Converts float2x3 to int2x3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int2x3.op_Explicit(GenMathematics.Matrices.double2x3)~GenMathematics.Matrices.int2x3">
            <summary>
            Converts double2x3 to int2x3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int2x3.op_Implicit(GenMathematics.Matrices.byte2x3)~GenMathematics.Matrices.int2x3">
            <summary>
            Converts byte2x3 to int2x3
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int2x3.op_Implicit(GenMathematics.Matrices.sbyte2x3)~GenMathematics.Matrices.int2x3">
            <summary>
            Converts sbyte2x3 to int2x3
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int2x3.op_Implicit(GenMathematics.Matrices.short2x3)~GenMathematics.Matrices.int2x3">
            <summary>
            Converts short2x3 to int2x3
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int2x3.op_Implicit(GenMathematics.Matrices.ushort2x3)~GenMathematics.Matrices.int2x3">
            <summary>
            Converts ushort2x3 to int2x3
            </summary>
        </member>
        <member name="T:GenMathematics.Matrices.int2x4">
            <summary>
            Matrix of type int with 2 rows and 4 columns using the column-major order
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.int2x4.Column0">
            <summary>
            Matrix column with index 0
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.int2x4.Column1">
            <summary>
            Matrix column with index 1
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.int2x4.Column2">
            <summary>
            Matrix column with index 2
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.int2x4.Column3">
            <summary>
            Matrix column with index 3
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.int2x4.Row0">
            <summary>
            Matrix row with index 0
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.int2x4.Row1">
            <summary>
            Matrix row with index 1
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int2x4.#ctor(GenMathematics.Vectors.int2,GenMathematics.Vectors.int2,GenMathematics.Vectors.int2,GenMathematics.Vectors.int2)">
            <summary>
            Creates a matrix from column values
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int2x4.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a matrix from the values of rows and columns
            </summary>
            <param name="r0c0">The value to assign to row 0 and column 0 of the matrix</param>
            <param name="r0c1">The value to assign to row 0 and column 1 of the matrix</param>
            <param name="r0c2">The value to assign to row 0 and column 2 of the matrix</param>
            <param name="r0c3">The value to assign to row 0 and column 3 of the matrix</param>
            <param name="r1c0">The value to assign to row 1 and column 0 of the matrix</param>
            <param name="r1c1">The value to assign to row 1 and column 1 of the matrix</param>
            <param name="r1c2">The value to assign to row 1 and column 2 of the matrix</param>
            <param name="r1c3">The value to assign to row 1 and column 3 of the matrix</param>
        </member>
        <member name="P:GenMathematics.Matrices.int2x4.Item(System.Int32)">
            <summary>
            To access via the reference use `Unsafe.Add(ref matrix.Column0, index)` instead
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int2x4.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.int2x4.Equals(GenMathematics.Matrices.int2x4)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.int2x4.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.int2x4.CompareTo(GenMathematics.Matrices.int2x4)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.int2x4.ToString">
            <summary>
            Returns the object's state information as a string
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int2x4.Extract(GenMathematics.Matrices.int2x4@,System.Int32,System.Int32,GenMathematics.Matrices.int2x4@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int2x4.Extract(GenMathematics.Matrices.int2x4@,System.Int32,System.Int32,GenMathematics.Matrices.int2x3@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int2x4.Extract(GenMathematics.Matrices.int2x4@,System.Int32,System.Int32,GenMathematics.Matrices.int2x2@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int2x4.Multiply(GenMathematics.Matrices.int2x4,System.Int32)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int2x4.Multiply(System.Int32,GenMathematics.Matrices.int2x4)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int2x4.Multiply(GenMathematics.Matrices.int2x4@,System.Int32,GenMathematics.Matrices.int2x4@)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int2x4.Multiply(System.Int32,GenMathematics.Matrices.int2x4@,GenMathematics.Matrices.int2x4@)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int2x4.Divide(GenMathematics.Matrices.int2x4,System.Int32)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int2x4.Divide(System.Int32,GenMathematics.Matrices.int2x4)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int2x4.Divide(GenMathematics.Matrices.int2x4@,System.Int32,GenMathematics.Matrices.int2x4@)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int2x4.Divide(System.Int32,GenMathematics.Matrices.int2x4@,GenMathematics.Matrices.int2x4@)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int2x4.op_Multiply(GenMathematics.Matrices.int2x4,System.Int32)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int2x4.op_Multiply(System.Int32,GenMathematics.Matrices.int2x4)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int2x4.op_Division(GenMathematics.Matrices.int2x4,System.Int32)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int2x4.op_Division(System.Int32,GenMathematics.Matrices.int2x4)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int2x4.op_Explicit(GenMathematics.Matrices.uint2x4)~GenMathematics.Matrices.int2x4">
            <summary>
            Converts uint2x4 to int2x4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int2x4.op_Explicit(GenMathematics.Matrices.long2x4)~GenMathematics.Matrices.int2x4">
            <summary>
            Converts long2x4 to int2x4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int2x4.op_Explicit(GenMathematics.Matrices.ulong2x4)~GenMathematics.Matrices.int2x4">
            <summary>
            Converts ulong2x4 to int2x4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int2x4.op_Explicit(GenMathematics.Matrices.half2x4)~GenMathematics.Matrices.int2x4">
            <summary>
            Converts half2x4 to int2x4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int2x4.op_Explicit(GenMathematics.Matrices.float2x4)~GenMathematics.Matrices.int2x4">
            <summary>
            Converts float2x4 to int2x4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int2x4.op_Explicit(GenMathematics.Matrices.double2x4)~GenMathematics.Matrices.int2x4">
            <summary>
            Converts double2x4 to int2x4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int2x4.op_Implicit(GenMathematics.Matrices.byte2x4)~GenMathematics.Matrices.int2x4">
            <summary>
            Converts byte2x4 to int2x4
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int2x4.op_Implicit(GenMathematics.Matrices.sbyte2x4)~GenMathematics.Matrices.int2x4">
            <summary>
            Converts sbyte2x4 to int2x4
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int2x4.op_Implicit(GenMathematics.Matrices.short2x4)~GenMathematics.Matrices.int2x4">
            <summary>
            Converts short2x4 to int2x4
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int2x4.op_Implicit(GenMathematics.Matrices.ushort2x4)~GenMathematics.Matrices.int2x4">
            <summary>
            Converts ushort2x4 to int2x4
            </summary>
        </member>
        <member name="T:GenMathematics.Matrices.int3x2">
            <summary>
            Matrix of type int with 3 rows and 2 columns using the column-major order
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.int3x2.Column0">
            <summary>
            Matrix column with index 0
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.int3x2.Column1">
            <summary>
            Matrix column with index 1
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.int3x2.Row0">
            <summary>
            Matrix row with index 0
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.int3x2.Row1">
            <summary>
            Matrix row with index 1
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.int3x2.Row2">
            <summary>
            Matrix row with index 2
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int3x2.#ctor(GenMathematics.Vectors.int3,GenMathematics.Vectors.int3)">
            <summary>
            Creates a matrix from column values
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int3x2.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a matrix from the values of rows and columns
            </summary>
            <param name="r0c0">The value to assign to row 0 and column 0 of the matrix</param>
            <param name="r0c1">The value to assign to row 0 and column 1 of the matrix</param>
            <param name="r1c0">The value to assign to row 1 and column 0 of the matrix</param>
            <param name="r1c1">The value to assign to row 1 and column 1 of the matrix</param>
            <param name="r2c0">The value to assign to row 2 and column 0 of the matrix</param>
            <param name="r2c1">The value to assign to row 2 and column 1 of the matrix</param>
        </member>
        <member name="P:GenMathematics.Matrices.int3x2.Item(System.Int32)">
            <summary>
            To access via the reference use `Unsafe.Add(ref matrix.Column0, index)` instead
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int3x2.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.int3x2.Equals(GenMathematics.Matrices.int3x2)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.int3x2.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.int3x2.CompareTo(GenMathematics.Matrices.int3x2)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.int3x2.ToString">
            <summary>
            Returns the object's state information as a string
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int3x2.Extract(GenMathematics.Matrices.int3x2@,System.Int32,System.Int32,GenMathematics.Matrices.int3x2@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int3x2.Extract(GenMathematics.Matrices.int3x2@,System.Int32,System.Int32,GenMathematics.Matrices.int2x2@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int3x2.Multiply(GenMathematics.Matrices.int3x2,System.Int32)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int3x2.Multiply(System.Int32,GenMathematics.Matrices.int3x2)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int3x2.Multiply(GenMathematics.Matrices.int3x2@,System.Int32,GenMathematics.Matrices.int3x2@)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int3x2.Multiply(System.Int32,GenMathematics.Matrices.int3x2@,GenMathematics.Matrices.int3x2@)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int3x2.Divide(GenMathematics.Matrices.int3x2,System.Int32)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int3x2.Divide(System.Int32,GenMathematics.Matrices.int3x2)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int3x2.Divide(GenMathematics.Matrices.int3x2@,System.Int32,GenMathematics.Matrices.int3x2@)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int3x2.Divide(System.Int32,GenMathematics.Matrices.int3x2@,GenMathematics.Matrices.int3x2@)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int3x2.op_Multiply(GenMathematics.Matrices.int3x2,System.Int32)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int3x2.op_Multiply(System.Int32,GenMathematics.Matrices.int3x2)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int3x2.op_Division(GenMathematics.Matrices.int3x2,System.Int32)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int3x2.op_Division(System.Int32,GenMathematics.Matrices.int3x2)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int3x2.op_Explicit(GenMathematics.Matrices.uint3x2)~GenMathematics.Matrices.int3x2">
            <summary>
            Converts uint3x2 to int3x2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int3x2.op_Explicit(GenMathematics.Matrices.long3x2)~GenMathematics.Matrices.int3x2">
            <summary>
            Converts long3x2 to int3x2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int3x2.op_Explicit(GenMathematics.Matrices.ulong3x2)~GenMathematics.Matrices.int3x2">
            <summary>
            Converts ulong3x2 to int3x2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int3x2.op_Explicit(GenMathematics.Matrices.half3x2)~GenMathematics.Matrices.int3x2">
            <summary>
            Converts half3x2 to int3x2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int3x2.op_Explicit(GenMathematics.Matrices.float3x2)~GenMathematics.Matrices.int3x2">
            <summary>
            Converts float3x2 to int3x2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int3x2.op_Explicit(GenMathematics.Matrices.double3x2)~GenMathematics.Matrices.int3x2">
            <summary>
            Converts double3x2 to int3x2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int3x2.op_Implicit(GenMathematics.Matrices.byte3x2)~GenMathematics.Matrices.int3x2">
            <summary>
            Converts byte3x2 to int3x2
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int3x2.op_Implicit(GenMathematics.Matrices.sbyte3x2)~GenMathematics.Matrices.int3x2">
            <summary>
            Converts sbyte3x2 to int3x2
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int3x2.op_Implicit(GenMathematics.Matrices.short3x2)~GenMathematics.Matrices.int3x2">
            <summary>
            Converts short3x2 to int3x2
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int3x2.op_Implicit(GenMathematics.Matrices.ushort3x2)~GenMathematics.Matrices.int3x2">
            <summary>
            Converts ushort3x2 to int3x2
            </summary>
        </member>
        <member name="T:GenMathematics.Matrices.int3x3">
            <summary>
            Matrix of type int with 3 rows and 3 columns using the column-major order
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.int3x3.Column0">
            <summary>
            Matrix column with index 0
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.int3x3.Column1">
            <summary>
            Matrix column with index 1
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.int3x3.Column2">
            <summary>
            Matrix column with index 2
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.int3x3.Row0">
            <summary>
            Matrix row with index 0
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.int3x3.Row1">
            <summary>
            Matrix row with index 1
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.int3x3.Row2">
            <summary>
            Matrix row with index 2
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int3x3.#ctor(GenMathematics.Vectors.int3,GenMathematics.Vectors.int3,GenMathematics.Vectors.int3)">
            <summary>
            Creates a matrix from column values
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int3x3.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a matrix from the values of rows and columns
            </summary>
            <param name="r0c0">The value to assign to row 0 and column 0 of the matrix</param>
            <param name="r0c1">The value to assign to row 0 and column 1 of the matrix</param>
            <param name="r0c2">The value to assign to row 0 and column 2 of the matrix</param>
            <param name="r1c0">The value to assign to row 1 and column 0 of the matrix</param>
            <param name="r1c1">The value to assign to row 1 and column 1 of the matrix</param>
            <param name="r1c2">The value to assign to row 1 and column 2 of the matrix</param>
            <param name="r2c0">The value to assign to row 2 and column 0 of the matrix</param>
            <param name="r2c1">The value to assign to row 2 and column 1 of the matrix</param>
            <param name="r2c2">The value to assign to row 2 and column 2 of the matrix</param>
        </member>
        <member name="P:GenMathematics.Matrices.int3x3.Item(System.Int32)">
            <summary>
            To access via the reference use `Unsafe.Add(ref matrix.Column0, index)` instead
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int3x3.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.int3x3.Equals(GenMathematics.Matrices.int3x3)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.int3x3.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.int3x3.CompareTo(GenMathematics.Matrices.int3x3)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.int3x3.ToString">
            <summary>
            Returns the object's state information as a string
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int3x3.Extract(GenMathematics.Matrices.int3x3@,System.Int32,System.Int32,GenMathematics.Matrices.int3x3@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int3x3.Extract(GenMathematics.Matrices.int3x3@,System.Int32,System.Int32,GenMathematics.Matrices.int2x3@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int3x3.Extract(GenMathematics.Matrices.int3x3@,System.Int32,System.Int32,GenMathematics.Matrices.int3x2@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int3x3.Extract(GenMathematics.Matrices.int3x3@,System.Int32,System.Int32,GenMathematics.Matrices.int2x2@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int3x3.Multiply(GenMathematics.Matrices.int3x3,System.Int32)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int3x3.Multiply(System.Int32,GenMathematics.Matrices.int3x3)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int3x3.Multiply(GenMathematics.Matrices.int3x3@,System.Int32,GenMathematics.Matrices.int3x3@)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int3x3.Multiply(System.Int32,GenMathematics.Matrices.int3x3@,GenMathematics.Matrices.int3x3@)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int3x3.Divide(GenMathematics.Matrices.int3x3,System.Int32)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int3x3.Divide(System.Int32,GenMathematics.Matrices.int3x3)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int3x3.Divide(GenMathematics.Matrices.int3x3@,System.Int32,GenMathematics.Matrices.int3x3@)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int3x3.Divide(System.Int32,GenMathematics.Matrices.int3x3@,GenMathematics.Matrices.int3x3@)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int3x3.op_Multiply(GenMathematics.Matrices.int3x3,System.Int32)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int3x3.op_Multiply(System.Int32,GenMathematics.Matrices.int3x3)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int3x3.op_Division(GenMathematics.Matrices.int3x3,System.Int32)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int3x3.op_Division(System.Int32,GenMathematics.Matrices.int3x3)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int3x3.op_Explicit(GenMathematics.Matrices.uint3x3)~GenMathematics.Matrices.int3x3">
            <summary>
            Converts uint3x3 to int3x3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int3x3.op_Explicit(GenMathematics.Matrices.long3x3)~GenMathematics.Matrices.int3x3">
            <summary>
            Converts long3x3 to int3x3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int3x3.op_Explicit(GenMathematics.Matrices.ulong3x3)~GenMathematics.Matrices.int3x3">
            <summary>
            Converts ulong3x3 to int3x3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int3x3.op_Explicit(GenMathematics.Matrices.half3x3)~GenMathematics.Matrices.int3x3">
            <summary>
            Converts half3x3 to int3x3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int3x3.op_Explicit(GenMathematics.Matrices.float3x3)~GenMathematics.Matrices.int3x3">
            <summary>
            Converts float3x3 to int3x3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int3x3.op_Explicit(GenMathematics.Matrices.double3x3)~GenMathematics.Matrices.int3x3">
            <summary>
            Converts double3x3 to int3x3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int3x3.op_Implicit(GenMathematics.Matrices.byte3x3)~GenMathematics.Matrices.int3x3">
            <summary>
            Converts byte3x3 to int3x3
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int3x3.op_Implicit(GenMathematics.Matrices.sbyte3x3)~GenMathematics.Matrices.int3x3">
            <summary>
            Converts sbyte3x3 to int3x3
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int3x3.op_Implicit(GenMathematics.Matrices.short3x3)~GenMathematics.Matrices.int3x3">
            <summary>
            Converts short3x3 to int3x3
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int3x3.op_Implicit(GenMathematics.Matrices.ushort3x3)~GenMathematics.Matrices.int3x3">
            <summary>
            Converts ushort3x3 to int3x3
            </summary>
        </member>
        <member name="T:GenMathematics.Matrices.int3x4">
            <summary>
            Matrix of type int with 3 rows and 4 columns using the column-major order
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.int3x4.Column0">
            <summary>
            Matrix column with index 0
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.int3x4.Column1">
            <summary>
            Matrix column with index 1
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.int3x4.Column2">
            <summary>
            Matrix column with index 2
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.int3x4.Column3">
            <summary>
            Matrix column with index 3
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.int3x4.Row0">
            <summary>
            Matrix row with index 0
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.int3x4.Row1">
            <summary>
            Matrix row with index 1
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.int3x4.Row2">
            <summary>
            Matrix row with index 2
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int3x4.#ctor(GenMathematics.Vectors.int3,GenMathematics.Vectors.int3,GenMathematics.Vectors.int3,GenMathematics.Vectors.int3)">
            <summary>
            Creates a matrix from column values
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int3x4.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a matrix from the values of rows and columns
            </summary>
            <param name="r0c0">The value to assign to row 0 and column 0 of the matrix</param>
            <param name="r0c1">The value to assign to row 0 and column 1 of the matrix</param>
            <param name="r0c2">The value to assign to row 0 and column 2 of the matrix</param>
            <param name="r0c3">The value to assign to row 0 and column 3 of the matrix</param>
            <param name="r1c0">The value to assign to row 1 and column 0 of the matrix</param>
            <param name="r1c1">The value to assign to row 1 and column 1 of the matrix</param>
            <param name="r1c2">The value to assign to row 1 and column 2 of the matrix</param>
            <param name="r1c3">The value to assign to row 1 and column 3 of the matrix</param>
            <param name="r2c0">The value to assign to row 2 and column 0 of the matrix</param>
            <param name="r2c1">The value to assign to row 2 and column 1 of the matrix</param>
            <param name="r2c2">The value to assign to row 2 and column 2 of the matrix</param>
            <param name="r2c3">The value to assign to row 2 and column 3 of the matrix</param>
        </member>
        <member name="P:GenMathematics.Matrices.int3x4.Item(System.Int32)">
            <summary>
            To access via the reference use `Unsafe.Add(ref matrix.Column0, index)` instead
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int3x4.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.int3x4.Equals(GenMathematics.Matrices.int3x4)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.int3x4.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.int3x4.CompareTo(GenMathematics.Matrices.int3x4)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.int3x4.ToString">
            <summary>
            Returns the object's state information as a string
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int3x4.Extract(GenMathematics.Matrices.int3x4@,System.Int32,System.Int32,GenMathematics.Matrices.int3x4@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int3x4.Extract(GenMathematics.Matrices.int3x4@,System.Int32,System.Int32,GenMathematics.Matrices.int2x4@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int3x4.Extract(GenMathematics.Matrices.int3x4@,System.Int32,System.Int32,GenMathematics.Matrices.int3x3@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int3x4.Extract(GenMathematics.Matrices.int3x4@,System.Int32,System.Int32,GenMathematics.Matrices.int2x3@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int3x4.Extract(GenMathematics.Matrices.int3x4@,System.Int32,System.Int32,GenMathematics.Matrices.int3x2@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int3x4.Extract(GenMathematics.Matrices.int3x4@,System.Int32,System.Int32,GenMathematics.Matrices.int2x2@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int3x4.Multiply(GenMathematics.Matrices.int3x4,System.Int32)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int3x4.Multiply(System.Int32,GenMathematics.Matrices.int3x4)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int3x4.Multiply(GenMathematics.Matrices.int3x4@,System.Int32,GenMathematics.Matrices.int3x4@)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int3x4.Multiply(System.Int32,GenMathematics.Matrices.int3x4@,GenMathematics.Matrices.int3x4@)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int3x4.Divide(GenMathematics.Matrices.int3x4,System.Int32)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int3x4.Divide(System.Int32,GenMathematics.Matrices.int3x4)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int3x4.Divide(GenMathematics.Matrices.int3x4@,System.Int32,GenMathematics.Matrices.int3x4@)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int3x4.Divide(System.Int32,GenMathematics.Matrices.int3x4@,GenMathematics.Matrices.int3x4@)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int3x4.op_Multiply(GenMathematics.Matrices.int3x4,System.Int32)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int3x4.op_Multiply(System.Int32,GenMathematics.Matrices.int3x4)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int3x4.op_Division(GenMathematics.Matrices.int3x4,System.Int32)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int3x4.op_Division(System.Int32,GenMathematics.Matrices.int3x4)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int3x4.op_Explicit(GenMathematics.Matrices.uint3x4)~GenMathematics.Matrices.int3x4">
            <summary>
            Converts uint3x4 to int3x4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int3x4.op_Explicit(GenMathematics.Matrices.long3x4)~GenMathematics.Matrices.int3x4">
            <summary>
            Converts long3x4 to int3x4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int3x4.op_Explicit(GenMathematics.Matrices.ulong3x4)~GenMathematics.Matrices.int3x4">
            <summary>
            Converts ulong3x4 to int3x4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int3x4.op_Explicit(GenMathematics.Matrices.half3x4)~GenMathematics.Matrices.int3x4">
            <summary>
            Converts half3x4 to int3x4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int3x4.op_Explicit(GenMathematics.Matrices.float3x4)~GenMathematics.Matrices.int3x4">
            <summary>
            Converts float3x4 to int3x4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int3x4.op_Explicit(GenMathematics.Matrices.double3x4)~GenMathematics.Matrices.int3x4">
            <summary>
            Converts double3x4 to int3x4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int3x4.op_Implicit(GenMathematics.Matrices.byte3x4)~GenMathematics.Matrices.int3x4">
            <summary>
            Converts byte3x4 to int3x4
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int3x4.op_Implicit(GenMathematics.Matrices.sbyte3x4)~GenMathematics.Matrices.int3x4">
            <summary>
            Converts sbyte3x4 to int3x4
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int3x4.op_Implicit(GenMathematics.Matrices.short3x4)~GenMathematics.Matrices.int3x4">
            <summary>
            Converts short3x4 to int3x4
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int3x4.op_Implicit(GenMathematics.Matrices.ushort3x4)~GenMathematics.Matrices.int3x4">
            <summary>
            Converts ushort3x4 to int3x4
            </summary>
        </member>
        <member name="T:GenMathematics.Matrices.int4x2">
            <summary>
            Matrix of type int with 4 rows and 2 columns using the column-major order
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.int4x2.Column0">
            <summary>
            Matrix column with index 0
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.int4x2.Column1">
            <summary>
            Matrix column with index 1
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.int4x2.Row0">
            <summary>
            Matrix row with index 0
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.int4x2.Row1">
            <summary>
            Matrix row with index 1
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.int4x2.Row2">
            <summary>
            Matrix row with index 2
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.int4x2.Row3">
            <summary>
            Matrix row with index 3
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int4x2.#ctor(GenMathematics.Vectors.int4,GenMathematics.Vectors.int4)">
            <summary>
            Creates a matrix from column values
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int4x2.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a matrix from the values of rows and columns
            </summary>
            <param name="r0c0">The value to assign to row 0 and column 0 of the matrix</param>
            <param name="r0c1">The value to assign to row 0 and column 1 of the matrix</param>
            <param name="r1c0">The value to assign to row 1 and column 0 of the matrix</param>
            <param name="r1c1">The value to assign to row 1 and column 1 of the matrix</param>
            <param name="r2c0">The value to assign to row 2 and column 0 of the matrix</param>
            <param name="r2c1">The value to assign to row 2 and column 1 of the matrix</param>
            <param name="r3c0">The value to assign to row 3 and column 0 of the matrix</param>
            <param name="r3c1">The value to assign to row 3 and column 1 of the matrix</param>
        </member>
        <member name="P:GenMathematics.Matrices.int4x2.Item(System.Int32)">
            <summary>
            To access via the reference use `Unsafe.Add(ref matrix.Column0, index)` instead
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int4x2.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.int4x2.Equals(GenMathematics.Matrices.int4x2)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.int4x2.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.int4x2.CompareTo(GenMathematics.Matrices.int4x2)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.int4x2.ToString">
            <summary>
            Returns the object's state information as a string
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int4x2.Extract(GenMathematics.Matrices.int4x2@,System.Int32,System.Int32,GenMathematics.Matrices.int4x2@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int4x2.Extract(GenMathematics.Matrices.int4x2@,System.Int32,System.Int32,GenMathematics.Matrices.int3x2@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int4x2.Extract(GenMathematics.Matrices.int4x2@,System.Int32,System.Int32,GenMathematics.Matrices.int2x2@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int4x2.Multiply(GenMathematics.Matrices.int4x2,System.Int32)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int4x2.Multiply(System.Int32,GenMathematics.Matrices.int4x2)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int4x2.Multiply(GenMathematics.Matrices.int4x2@,System.Int32,GenMathematics.Matrices.int4x2@)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int4x2.Multiply(System.Int32,GenMathematics.Matrices.int4x2@,GenMathematics.Matrices.int4x2@)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int4x2.Divide(GenMathematics.Matrices.int4x2,System.Int32)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int4x2.Divide(System.Int32,GenMathematics.Matrices.int4x2)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int4x2.Divide(GenMathematics.Matrices.int4x2@,System.Int32,GenMathematics.Matrices.int4x2@)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int4x2.Divide(System.Int32,GenMathematics.Matrices.int4x2@,GenMathematics.Matrices.int4x2@)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int4x2.op_Multiply(GenMathematics.Matrices.int4x2,System.Int32)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int4x2.op_Multiply(System.Int32,GenMathematics.Matrices.int4x2)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int4x2.op_Division(GenMathematics.Matrices.int4x2,System.Int32)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int4x2.op_Division(System.Int32,GenMathematics.Matrices.int4x2)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int4x2.op_Explicit(GenMathematics.Matrices.uint4x2)~GenMathematics.Matrices.int4x2">
            <summary>
            Converts uint4x2 to int4x2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int4x2.op_Explicit(GenMathematics.Matrices.long4x2)~GenMathematics.Matrices.int4x2">
            <summary>
            Converts long4x2 to int4x2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int4x2.op_Explicit(GenMathematics.Matrices.ulong4x2)~GenMathematics.Matrices.int4x2">
            <summary>
            Converts ulong4x2 to int4x2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int4x2.op_Explicit(GenMathematics.Matrices.half4x2)~GenMathematics.Matrices.int4x2">
            <summary>
            Converts half4x2 to int4x2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int4x2.op_Explicit(GenMathematics.Matrices.float4x2)~GenMathematics.Matrices.int4x2">
            <summary>
            Converts float4x2 to int4x2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int4x2.op_Explicit(GenMathematics.Matrices.double4x2)~GenMathematics.Matrices.int4x2">
            <summary>
            Converts double4x2 to int4x2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int4x2.op_Implicit(GenMathematics.Matrices.byte4x2)~GenMathematics.Matrices.int4x2">
            <summary>
            Converts byte4x2 to int4x2
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int4x2.op_Implicit(GenMathematics.Matrices.sbyte4x2)~GenMathematics.Matrices.int4x2">
            <summary>
            Converts sbyte4x2 to int4x2
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int4x2.op_Implicit(GenMathematics.Matrices.short4x2)~GenMathematics.Matrices.int4x2">
            <summary>
            Converts short4x2 to int4x2
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int4x2.op_Implicit(GenMathematics.Matrices.ushort4x2)~GenMathematics.Matrices.int4x2">
            <summary>
            Converts ushort4x2 to int4x2
            </summary>
        </member>
        <member name="T:GenMathematics.Matrices.int4x3">
            <summary>
            Matrix of type int with 4 rows and 3 columns using the column-major order
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.int4x3.Column0">
            <summary>
            Matrix column with index 0
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.int4x3.Column1">
            <summary>
            Matrix column with index 1
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.int4x3.Column2">
            <summary>
            Matrix column with index 2
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.int4x3.Row0">
            <summary>
            Matrix row with index 0
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.int4x3.Row1">
            <summary>
            Matrix row with index 1
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.int4x3.Row2">
            <summary>
            Matrix row with index 2
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.int4x3.Row3">
            <summary>
            Matrix row with index 3
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int4x3.#ctor(GenMathematics.Vectors.int4,GenMathematics.Vectors.int4,GenMathematics.Vectors.int4)">
            <summary>
            Creates a matrix from column values
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int4x3.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a matrix from the values of rows and columns
            </summary>
            <param name="r0c0">The value to assign to row 0 and column 0 of the matrix</param>
            <param name="r0c1">The value to assign to row 0 and column 1 of the matrix</param>
            <param name="r0c2">The value to assign to row 0 and column 2 of the matrix</param>
            <param name="r1c0">The value to assign to row 1 and column 0 of the matrix</param>
            <param name="r1c1">The value to assign to row 1 and column 1 of the matrix</param>
            <param name="r1c2">The value to assign to row 1 and column 2 of the matrix</param>
            <param name="r2c0">The value to assign to row 2 and column 0 of the matrix</param>
            <param name="r2c1">The value to assign to row 2 and column 1 of the matrix</param>
            <param name="r2c2">The value to assign to row 2 and column 2 of the matrix</param>
            <param name="r3c0">The value to assign to row 3 and column 0 of the matrix</param>
            <param name="r3c1">The value to assign to row 3 and column 1 of the matrix</param>
            <param name="r3c2">The value to assign to row 3 and column 2 of the matrix</param>
        </member>
        <member name="P:GenMathematics.Matrices.int4x3.Item(System.Int32)">
            <summary>
            To access via the reference use `Unsafe.Add(ref matrix.Column0, index)` instead
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int4x3.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.int4x3.Equals(GenMathematics.Matrices.int4x3)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.int4x3.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.int4x3.CompareTo(GenMathematics.Matrices.int4x3)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.int4x3.ToString">
            <summary>
            Returns the object's state information as a string
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int4x3.Extract(GenMathematics.Matrices.int4x3@,System.Int32,System.Int32,GenMathematics.Matrices.int4x3@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int4x3.Extract(GenMathematics.Matrices.int4x3@,System.Int32,System.Int32,GenMathematics.Matrices.int3x3@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int4x3.Extract(GenMathematics.Matrices.int4x3@,System.Int32,System.Int32,GenMathematics.Matrices.int2x3@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int4x3.Extract(GenMathematics.Matrices.int4x3@,System.Int32,System.Int32,GenMathematics.Matrices.int4x2@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int4x3.Extract(GenMathematics.Matrices.int4x3@,System.Int32,System.Int32,GenMathematics.Matrices.int3x2@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int4x3.Extract(GenMathematics.Matrices.int4x3@,System.Int32,System.Int32,GenMathematics.Matrices.int2x2@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int4x3.Multiply(GenMathematics.Matrices.int4x3,System.Int32)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int4x3.Multiply(System.Int32,GenMathematics.Matrices.int4x3)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int4x3.Multiply(GenMathematics.Matrices.int4x3@,System.Int32,GenMathematics.Matrices.int4x3@)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int4x3.Multiply(System.Int32,GenMathematics.Matrices.int4x3@,GenMathematics.Matrices.int4x3@)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int4x3.Divide(GenMathematics.Matrices.int4x3,System.Int32)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int4x3.Divide(System.Int32,GenMathematics.Matrices.int4x3)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int4x3.Divide(GenMathematics.Matrices.int4x3@,System.Int32,GenMathematics.Matrices.int4x3@)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int4x3.Divide(System.Int32,GenMathematics.Matrices.int4x3@,GenMathematics.Matrices.int4x3@)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int4x3.op_Multiply(GenMathematics.Matrices.int4x3,System.Int32)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int4x3.op_Multiply(System.Int32,GenMathematics.Matrices.int4x3)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int4x3.op_Division(GenMathematics.Matrices.int4x3,System.Int32)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int4x3.op_Division(System.Int32,GenMathematics.Matrices.int4x3)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int4x3.op_Explicit(GenMathematics.Matrices.uint4x3)~GenMathematics.Matrices.int4x3">
            <summary>
            Converts uint4x3 to int4x3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int4x3.op_Explicit(GenMathematics.Matrices.long4x3)~GenMathematics.Matrices.int4x3">
            <summary>
            Converts long4x3 to int4x3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int4x3.op_Explicit(GenMathematics.Matrices.ulong4x3)~GenMathematics.Matrices.int4x3">
            <summary>
            Converts ulong4x3 to int4x3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int4x3.op_Explicit(GenMathematics.Matrices.half4x3)~GenMathematics.Matrices.int4x3">
            <summary>
            Converts half4x3 to int4x3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int4x3.op_Explicit(GenMathematics.Matrices.float4x3)~GenMathematics.Matrices.int4x3">
            <summary>
            Converts float4x3 to int4x3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int4x3.op_Explicit(GenMathematics.Matrices.double4x3)~GenMathematics.Matrices.int4x3">
            <summary>
            Converts double4x3 to int4x3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int4x3.op_Implicit(GenMathematics.Matrices.byte4x3)~GenMathematics.Matrices.int4x3">
            <summary>
            Converts byte4x3 to int4x3
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int4x3.op_Implicit(GenMathematics.Matrices.sbyte4x3)~GenMathematics.Matrices.int4x3">
            <summary>
            Converts sbyte4x3 to int4x3
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int4x3.op_Implicit(GenMathematics.Matrices.short4x3)~GenMathematics.Matrices.int4x3">
            <summary>
            Converts short4x3 to int4x3
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int4x3.op_Implicit(GenMathematics.Matrices.ushort4x3)~GenMathematics.Matrices.int4x3">
            <summary>
            Converts ushort4x3 to int4x3
            </summary>
        </member>
        <member name="T:GenMathematics.Matrices.int4x4">
            <summary>
            Matrix of type int with 4 rows and 4 columns using the column-major order
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.int4x4.Column0">
            <summary>
            Matrix column with index 0
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.int4x4.Column1">
            <summary>
            Matrix column with index 1
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.int4x4.Column2">
            <summary>
            Matrix column with index 2
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.int4x4.Column3">
            <summary>
            Matrix column with index 3
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.int4x4.Row0">
            <summary>
            Matrix row with index 0
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.int4x4.Row1">
            <summary>
            Matrix row with index 1
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.int4x4.Row2">
            <summary>
            Matrix row with index 2
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.int4x4.Row3">
            <summary>
            Matrix row with index 3
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int4x4.#ctor(GenMathematics.Vectors.int4,GenMathematics.Vectors.int4,GenMathematics.Vectors.int4,GenMathematics.Vectors.int4)">
            <summary>
            Creates a matrix from column values
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int4x4.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a matrix from the values of rows and columns
            </summary>
            <param name="r0c0">The value to assign to row 0 and column 0 of the matrix</param>
            <param name="r0c1">The value to assign to row 0 and column 1 of the matrix</param>
            <param name="r0c2">The value to assign to row 0 and column 2 of the matrix</param>
            <param name="r0c3">The value to assign to row 0 and column 3 of the matrix</param>
            <param name="r1c0">The value to assign to row 1 and column 0 of the matrix</param>
            <param name="r1c1">The value to assign to row 1 and column 1 of the matrix</param>
            <param name="r1c2">The value to assign to row 1 and column 2 of the matrix</param>
            <param name="r1c3">The value to assign to row 1 and column 3 of the matrix</param>
            <param name="r2c0">The value to assign to row 2 and column 0 of the matrix</param>
            <param name="r2c1">The value to assign to row 2 and column 1 of the matrix</param>
            <param name="r2c2">The value to assign to row 2 and column 2 of the matrix</param>
            <param name="r2c3">The value to assign to row 2 and column 3 of the matrix</param>
            <param name="r3c0">The value to assign to row 3 and column 0 of the matrix</param>
            <param name="r3c1">The value to assign to row 3 and column 1 of the matrix</param>
            <param name="r3c2">The value to assign to row 3 and column 2 of the matrix</param>
            <param name="r3c3">The value to assign to row 3 and column 3 of the matrix</param>
        </member>
        <member name="P:GenMathematics.Matrices.int4x4.Item(System.Int32)">
            <summary>
            To access via the reference use `Unsafe.Add(ref matrix.Column0, index)` instead
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int4x4.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.int4x4.Equals(GenMathematics.Matrices.int4x4)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.int4x4.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.int4x4.CompareTo(GenMathematics.Matrices.int4x4)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.int4x4.ToString">
            <summary>
            Returns the object's state information as a string
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int4x4.Extract(GenMathematics.Matrices.int4x4@,System.Int32,System.Int32,GenMathematics.Matrices.int4x4@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int4x4.Extract(GenMathematics.Matrices.int4x4@,System.Int32,System.Int32,GenMathematics.Matrices.int3x4@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int4x4.Extract(GenMathematics.Matrices.int4x4@,System.Int32,System.Int32,GenMathematics.Matrices.int2x4@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int4x4.Extract(GenMathematics.Matrices.int4x4@,System.Int32,System.Int32,GenMathematics.Matrices.int4x3@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int4x4.Extract(GenMathematics.Matrices.int4x4@,System.Int32,System.Int32,GenMathematics.Matrices.int3x3@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int4x4.Extract(GenMathematics.Matrices.int4x4@,System.Int32,System.Int32,GenMathematics.Matrices.int2x3@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int4x4.Extract(GenMathematics.Matrices.int4x4@,System.Int32,System.Int32,GenMathematics.Matrices.int4x2@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int4x4.Extract(GenMathematics.Matrices.int4x4@,System.Int32,System.Int32,GenMathematics.Matrices.int3x2@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int4x4.Extract(GenMathematics.Matrices.int4x4@,System.Int32,System.Int32,GenMathematics.Matrices.int2x2@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int4x4.Multiply(GenMathematics.Matrices.int4x4,System.Int32)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int4x4.Multiply(System.Int32,GenMathematics.Matrices.int4x4)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int4x4.Multiply(GenMathematics.Matrices.int4x4@,System.Int32,GenMathematics.Matrices.int4x4@)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int4x4.Multiply(System.Int32,GenMathematics.Matrices.int4x4@,GenMathematics.Matrices.int4x4@)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int4x4.Divide(GenMathematics.Matrices.int4x4,System.Int32)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int4x4.Divide(System.Int32,GenMathematics.Matrices.int4x4)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int4x4.Divide(GenMathematics.Matrices.int4x4@,System.Int32,GenMathematics.Matrices.int4x4@)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int4x4.Divide(System.Int32,GenMathematics.Matrices.int4x4@,GenMathematics.Matrices.int4x4@)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int4x4.op_Multiply(GenMathematics.Matrices.int4x4,System.Int32)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int4x4.op_Multiply(System.Int32,GenMathematics.Matrices.int4x4)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int4x4.op_Division(GenMathematics.Matrices.int4x4,System.Int32)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int4x4.op_Division(System.Int32,GenMathematics.Matrices.int4x4)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int4x4.op_Explicit(GenMathematics.Matrices.uint4x4)~GenMathematics.Matrices.int4x4">
            <summary>
            Converts uint4x4 to int4x4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int4x4.op_Explicit(GenMathematics.Matrices.long4x4)~GenMathematics.Matrices.int4x4">
            <summary>
            Converts long4x4 to int4x4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int4x4.op_Explicit(GenMathematics.Matrices.ulong4x4)~GenMathematics.Matrices.int4x4">
            <summary>
            Converts ulong4x4 to int4x4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int4x4.op_Explicit(GenMathematics.Matrices.half4x4)~GenMathematics.Matrices.int4x4">
            <summary>
            Converts half4x4 to int4x4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int4x4.op_Explicit(GenMathematics.Matrices.float4x4)~GenMathematics.Matrices.int4x4">
            <summary>
            Converts float4x4 to int4x4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int4x4.op_Explicit(GenMathematics.Matrices.double4x4)~GenMathematics.Matrices.int4x4">
            <summary>
            Converts double4x4 to int4x4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int4x4.op_Implicit(GenMathematics.Matrices.byte4x4)~GenMathematics.Matrices.int4x4">
            <summary>
            Converts byte4x4 to int4x4
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int4x4.op_Implicit(GenMathematics.Matrices.sbyte4x4)~GenMathematics.Matrices.int4x4">
            <summary>
            Converts sbyte4x4 to int4x4
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int4x4.op_Implicit(GenMathematics.Matrices.short4x4)~GenMathematics.Matrices.int4x4">
            <summary>
            Converts short4x4 to int4x4
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.int4x4.op_Implicit(GenMathematics.Matrices.ushort4x4)~GenMathematics.Matrices.int4x4">
            <summary>
            Converts ushort4x4 to int4x4
            </summary>
        </member>
        <member name="T:GenMathematics.Matrices.long2x2">
            <summary>
            Matrix of type long with 2 rows and 2 columns using the column-major order
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.long2x2.Column0">
            <summary>
            Matrix column with index 0
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.long2x2.Column1">
            <summary>
            Matrix column with index 1
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.long2x2.Row0">
            <summary>
            Matrix row with index 0
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.long2x2.Row1">
            <summary>
            Matrix row with index 1
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long2x2.#ctor(GenMathematics.Vectors.long2,GenMathematics.Vectors.long2)">
            <summary>
            Creates a matrix from column values
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long2x2.#ctor(System.Int64,System.Int64,System.Int64,System.Int64)">
            <summary>
            Creates a matrix from the values of rows and columns
            </summary>
            <param name="r0c0">The value to assign to row 0 and column 0 of the matrix</param>
            <param name="r0c1">The value to assign to row 0 and column 1 of the matrix</param>
            <param name="r1c0">The value to assign to row 1 and column 0 of the matrix</param>
            <param name="r1c1">The value to assign to row 1 and column 1 of the matrix</param>
        </member>
        <member name="P:GenMathematics.Matrices.long2x2.Item(System.Int32)">
            <summary>
            To access via the reference use `Unsafe.Add(ref matrix.Column0, index)` instead
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long2x2.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.long2x2.Equals(GenMathematics.Matrices.long2x2)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.long2x2.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.long2x2.CompareTo(GenMathematics.Matrices.long2x2)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.long2x2.ToString">
            <summary>
            Returns the object's state information as a string
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long2x2.Extract(GenMathematics.Matrices.long2x2@,System.Int32,System.Int32,GenMathematics.Matrices.long2x2@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long2x2.Multiply(GenMathematics.Matrices.long2x2,System.Int64)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long2x2.Multiply(System.Int64,GenMathematics.Matrices.long2x2)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long2x2.Multiply(GenMathematics.Matrices.long2x2@,System.Int64,GenMathematics.Matrices.long2x2@)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long2x2.Multiply(System.Int64,GenMathematics.Matrices.long2x2@,GenMathematics.Matrices.long2x2@)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long2x2.Divide(GenMathematics.Matrices.long2x2,System.Int64)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long2x2.Divide(System.Int64,GenMathematics.Matrices.long2x2)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long2x2.Divide(GenMathematics.Matrices.long2x2@,System.Int64,GenMathematics.Matrices.long2x2@)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long2x2.Divide(System.Int64,GenMathematics.Matrices.long2x2@,GenMathematics.Matrices.long2x2@)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long2x2.op_Multiply(GenMathematics.Matrices.long2x2,System.Int64)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long2x2.op_Multiply(System.Int64,GenMathematics.Matrices.long2x2)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long2x2.op_Division(GenMathematics.Matrices.long2x2,System.Int64)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long2x2.op_Division(System.Int64,GenMathematics.Matrices.long2x2)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long2x2.op_Explicit(GenMathematics.Matrices.ulong2x2)~GenMathematics.Matrices.long2x2">
            <summary>
            Converts ulong2x2 to long2x2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long2x2.op_Explicit(GenMathematics.Matrices.half2x2)~GenMathematics.Matrices.long2x2">
            <summary>
            Converts half2x2 to long2x2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long2x2.op_Explicit(GenMathematics.Matrices.float2x2)~GenMathematics.Matrices.long2x2">
            <summary>
            Converts float2x2 to long2x2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long2x2.op_Explicit(GenMathematics.Matrices.double2x2)~GenMathematics.Matrices.long2x2">
            <summary>
            Converts double2x2 to long2x2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long2x2.op_Implicit(GenMathematics.Matrices.byte2x2)~GenMathematics.Matrices.long2x2">
            <summary>
            Converts byte2x2 to long2x2
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long2x2.op_Implicit(GenMathematics.Matrices.sbyte2x2)~GenMathematics.Matrices.long2x2">
            <summary>
            Converts sbyte2x2 to long2x2
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long2x2.op_Implicit(GenMathematics.Matrices.short2x2)~GenMathematics.Matrices.long2x2">
            <summary>
            Converts short2x2 to long2x2
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long2x2.op_Implicit(GenMathematics.Matrices.ushort2x2)~GenMathematics.Matrices.long2x2">
            <summary>
            Converts ushort2x2 to long2x2
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long2x2.op_Implicit(GenMathematics.Matrices.int2x2)~GenMathematics.Matrices.long2x2">
            <summary>
            Converts int2x2 to long2x2
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long2x2.op_Implicit(GenMathematics.Matrices.uint2x2)~GenMathematics.Matrices.long2x2">
            <summary>
            Converts uint2x2 to long2x2
            </summary>
        </member>
        <member name="T:GenMathematics.Matrices.long2x3">
            <summary>
            Matrix of type long with 2 rows and 3 columns using the column-major order
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.long2x3.Column0">
            <summary>
            Matrix column with index 0
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.long2x3.Column1">
            <summary>
            Matrix column with index 1
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.long2x3.Column2">
            <summary>
            Matrix column with index 2
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.long2x3.Row0">
            <summary>
            Matrix row with index 0
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.long2x3.Row1">
            <summary>
            Matrix row with index 1
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long2x3.#ctor(GenMathematics.Vectors.long2,GenMathematics.Vectors.long2,GenMathematics.Vectors.long2)">
            <summary>
            Creates a matrix from column values
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long2x3.#ctor(System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64)">
            <summary>
            Creates a matrix from the values of rows and columns
            </summary>
            <param name="r0c0">The value to assign to row 0 and column 0 of the matrix</param>
            <param name="r0c1">The value to assign to row 0 and column 1 of the matrix</param>
            <param name="r0c2">The value to assign to row 0 and column 2 of the matrix</param>
            <param name="r1c0">The value to assign to row 1 and column 0 of the matrix</param>
            <param name="r1c1">The value to assign to row 1 and column 1 of the matrix</param>
            <param name="r1c2">The value to assign to row 1 and column 2 of the matrix</param>
        </member>
        <member name="P:GenMathematics.Matrices.long2x3.Item(System.Int32)">
            <summary>
            To access via the reference use `Unsafe.Add(ref matrix.Column0, index)` instead
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long2x3.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.long2x3.Equals(GenMathematics.Matrices.long2x3)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.long2x3.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.long2x3.CompareTo(GenMathematics.Matrices.long2x3)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.long2x3.ToString">
            <summary>
            Returns the object's state information as a string
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long2x3.Extract(GenMathematics.Matrices.long2x3@,System.Int32,System.Int32,GenMathematics.Matrices.long2x3@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long2x3.Extract(GenMathematics.Matrices.long2x3@,System.Int32,System.Int32,GenMathematics.Matrices.long2x2@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long2x3.Multiply(GenMathematics.Matrices.long2x3,System.Int64)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long2x3.Multiply(System.Int64,GenMathematics.Matrices.long2x3)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long2x3.Multiply(GenMathematics.Matrices.long2x3@,System.Int64,GenMathematics.Matrices.long2x3@)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long2x3.Multiply(System.Int64,GenMathematics.Matrices.long2x3@,GenMathematics.Matrices.long2x3@)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long2x3.Divide(GenMathematics.Matrices.long2x3,System.Int64)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long2x3.Divide(System.Int64,GenMathematics.Matrices.long2x3)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long2x3.Divide(GenMathematics.Matrices.long2x3@,System.Int64,GenMathematics.Matrices.long2x3@)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long2x3.Divide(System.Int64,GenMathematics.Matrices.long2x3@,GenMathematics.Matrices.long2x3@)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long2x3.op_Multiply(GenMathematics.Matrices.long2x3,System.Int64)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long2x3.op_Multiply(System.Int64,GenMathematics.Matrices.long2x3)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long2x3.op_Division(GenMathematics.Matrices.long2x3,System.Int64)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long2x3.op_Division(System.Int64,GenMathematics.Matrices.long2x3)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long2x3.op_Explicit(GenMathematics.Matrices.ulong2x3)~GenMathematics.Matrices.long2x3">
            <summary>
            Converts ulong2x3 to long2x3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long2x3.op_Explicit(GenMathematics.Matrices.half2x3)~GenMathematics.Matrices.long2x3">
            <summary>
            Converts half2x3 to long2x3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long2x3.op_Explicit(GenMathematics.Matrices.float2x3)~GenMathematics.Matrices.long2x3">
            <summary>
            Converts float2x3 to long2x3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long2x3.op_Explicit(GenMathematics.Matrices.double2x3)~GenMathematics.Matrices.long2x3">
            <summary>
            Converts double2x3 to long2x3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long2x3.op_Implicit(GenMathematics.Matrices.byte2x3)~GenMathematics.Matrices.long2x3">
            <summary>
            Converts byte2x3 to long2x3
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long2x3.op_Implicit(GenMathematics.Matrices.sbyte2x3)~GenMathematics.Matrices.long2x3">
            <summary>
            Converts sbyte2x3 to long2x3
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long2x3.op_Implicit(GenMathematics.Matrices.short2x3)~GenMathematics.Matrices.long2x3">
            <summary>
            Converts short2x3 to long2x3
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long2x3.op_Implicit(GenMathematics.Matrices.ushort2x3)~GenMathematics.Matrices.long2x3">
            <summary>
            Converts ushort2x3 to long2x3
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long2x3.op_Implicit(GenMathematics.Matrices.int2x3)~GenMathematics.Matrices.long2x3">
            <summary>
            Converts int2x3 to long2x3
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long2x3.op_Implicit(GenMathematics.Matrices.uint2x3)~GenMathematics.Matrices.long2x3">
            <summary>
            Converts uint2x3 to long2x3
            </summary>
        </member>
        <member name="T:GenMathematics.Matrices.long2x4">
            <summary>
            Matrix of type long with 2 rows and 4 columns using the column-major order
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.long2x4.Column0">
            <summary>
            Matrix column with index 0
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.long2x4.Column1">
            <summary>
            Matrix column with index 1
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.long2x4.Column2">
            <summary>
            Matrix column with index 2
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.long2x4.Column3">
            <summary>
            Matrix column with index 3
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.long2x4.Row0">
            <summary>
            Matrix row with index 0
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.long2x4.Row1">
            <summary>
            Matrix row with index 1
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long2x4.#ctor(GenMathematics.Vectors.long2,GenMathematics.Vectors.long2,GenMathematics.Vectors.long2,GenMathematics.Vectors.long2)">
            <summary>
            Creates a matrix from column values
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long2x4.#ctor(System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64)">
            <summary>
            Creates a matrix from the values of rows and columns
            </summary>
            <param name="r0c0">The value to assign to row 0 and column 0 of the matrix</param>
            <param name="r0c1">The value to assign to row 0 and column 1 of the matrix</param>
            <param name="r0c2">The value to assign to row 0 and column 2 of the matrix</param>
            <param name="r0c3">The value to assign to row 0 and column 3 of the matrix</param>
            <param name="r1c0">The value to assign to row 1 and column 0 of the matrix</param>
            <param name="r1c1">The value to assign to row 1 and column 1 of the matrix</param>
            <param name="r1c2">The value to assign to row 1 and column 2 of the matrix</param>
            <param name="r1c3">The value to assign to row 1 and column 3 of the matrix</param>
        </member>
        <member name="P:GenMathematics.Matrices.long2x4.Item(System.Int32)">
            <summary>
            To access via the reference use `Unsafe.Add(ref matrix.Column0, index)` instead
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long2x4.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.long2x4.Equals(GenMathematics.Matrices.long2x4)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.long2x4.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.long2x4.CompareTo(GenMathematics.Matrices.long2x4)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.long2x4.ToString">
            <summary>
            Returns the object's state information as a string
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long2x4.Extract(GenMathematics.Matrices.long2x4@,System.Int32,System.Int32,GenMathematics.Matrices.long2x4@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long2x4.Extract(GenMathematics.Matrices.long2x4@,System.Int32,System.Int32,GenMathematics.Matrices.long2x3@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long2x4.Extract(GenMathematics.Matrices.long2x4@,System.Int32,System.Int32,GenMathematics.Matrices.long2x2@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long2x4.Multiply(GenMathematics.Matrices.long2x4,System.Int64)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long2x4.Multiply(System.Int64,GenMathematics.Matrices.long2x4)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long2x4.Multiply(GenMathematics.Matrices.long2x4@,System.Int64,GenMathematics.Matrices.long2x4@)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long2x4.Multiply(System.Int64,GenMathematics.Matrices.long2x4@,GenMathematics.Matrices.long2x4@)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long2x4.Divide(GenMathematics.Matrices.long2x4,System.Int64)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long2x4.Divide(System.Int64,GenMathematics.Matrices.long2x4)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long2x4.Divide(GenMathematics.Matrices.long2x4@,System.Int64,GenMathematics.Matrices.long2x4@)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long2x4.Divide(System.Int64,GenMathematics.Matrices.long2x4@,GenMathematics.Matrices.long2x4@)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long2x4.op_Multiply(GenMathematics.Matrices.long2x4,System.Int64)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long2x4.op_Multiply(System.Int64,GenMathematics.Matrices.long2x4)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long2x4.op_Division(GenMathematics.Matrices.long2x4,System.Int64)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long2x4.op_Division(System.Int64,GenMathematics.Matrices.long2x4)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long2x4.op_Explicit(GenMathematics.Matrices.ulong2x4)~GenMathematics.Matrices.long2x4">
            <summary>
            Converts ulong2x4 to long2x4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long2x4.op_Explicit(GenMathematics.Matrices.half2x4)~GenMathematics.Matrices.long2x4">
            <summary>
            Converts half2x4 to long2x4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long2x4.op_Explicit(GenMathematics.Matrices.float2x4)~GenMathematics.Matrices.long2x4">
            <summary>
            Converts float2x4 to long2x4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long2x4.op_Explicit(GenMathematics.Matrices.double2x4)~GenMathematics.Matrices.long2x4">
            <summary>
            Converts double2x4 to long2x4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long2x4.op_Implicit(GenMathematics.Matrices.byte2x4)~GenMathematics.Matrices.long2x4">
            <summary>
            Converts byte2x4 to long2x4
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long2x4.op_Implicit(GenMathematics.Matrices.sbyte2x4)~GenMathematics.Matrices.long2x4">
            <summary>
            Converts sbyte2x4 to long2x4
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long2x4.op_Implicit(GenMathematics.Matrices.short2x4)~GenMathematics.Matrices.long2x4">
            <summary>
            Converts short2x4 to long2x4
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long2x4.op_Implicit(GenMathematics.Matrices.ushort2x4)~GenMathematics.Matrices.long2x4">
            <summary>
            Converts ushort2x4 to long2x4
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long2x4.op_Implicit(GenMathematics.Matrices.int2x4)~GenMathematics.Matrices.long2x4">
            <summary>
            Converts int2x4 to long2x4
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long2x4.op_Implicit(GenMathematics.Matrices.uint2x4)~GenMathematics.Matrices.long2x4">
            <summary>
            Converts uint2x4 to long2x4
            </summary>
        </member>
        <member name="T:GenMathematics.Matrices.long3x2">
            <summary>
            Matrix of type long with 3 rows and 2 columns using the column-major order
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.long3x2.Column0">
            <summary>
            Matrix column with index 0
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.long3x2.Column1">
            <summary>
            Matrix column with index 1
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.long3x2.Row0">
            <summary>
            Matrix row with index 0
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.long3x2.Row1">
            <summary>
            Matrix row with index 1
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.long3x2.Row2">
            <summary>
            Matrix row with index 2
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long3x2.#ctor(GenMathematics.Vectors.long3,GenMathematics.Vectors.long3)">
            <summary>
            Creates a matrix from column values
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long3x2.#ctor(System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64)">
            <summary>
            Creates a matrix from the values of rows and columns
            </summary>
            <param name="r0c0">The value to assign to row 0 and column 0 of the matrix</param>
            <param name="r0c1">The value to assign to row 0 and column 1 of the matrix</param>
            <param name="r1c0">The value to assign to row 1 and column 0 of the matrix</param>
            <param name="r1c1">The value to assign to row 1 and column 1 of the matrix</param>
            <param name="r2c0">The value to assign to row 2 and column 0 of the matrix</param>
            <param name="r2c1">The value to assign to row 2 and column 1 of the matrix</param>
        </member>
        <member name="P:GenMathematics.Matrices.long3x2.Item(System.Int32)">
            <summary>
            To access via the reference use `Unsafe.Add(ref matrix.Column0, index)` instead
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long3x2.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.long3x2.Equals(GenMathematics.Matrices.long3x2)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.long3x2.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.long3x2.CompareTo(GenMathematics.Matrices.long3x2)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.long3x2.ToString">
            <summary>
            Returns the object's state information as a string
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long3x2.Extract(GenMathematics.Matrices.long3x2@,System.Int32,System.Int32,GenMathematics.Matrices.long3x2@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long3x2.Extract(GenMathematics.Matrices.long3x2@,System.Int32,System.Int32,GenMathematics.Matrices.long2x2@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long3x2.Multiply(GenMathematics.Matrices.long3x2,System.Int64)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long3x2.Multiply(System.Int64,GenMathematics.Matrices.long3x2)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long3x2.Multiply(GenMathematics.Matrices.long3x2@,System.Int64,GenMathematics.Matrices.long3x2@)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long3x2.Multiply(System.Int64,GenMathematics.Matrices.long3x2@,GenMathematics.Matrices.long3x2@)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long3x2.Divide(GenMathematics.Matrices.long3x2,System.Int64)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long3x2.Divide(System.Int64,GenMathematics.Matrices.long3x2)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long3x2.Divide(GenMathematics.Matrices.long3x2@,System.Int64,GenMathematics.Matrices.long3x2@)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long3x2.Divide(System.Int64,GenMathematics.Matrices.long3x2@,GenMathematics.Matrices.long3x2@)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long3x2.op_Multiply(GenMathematics.Matrices.long3x2,System.Int64)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long3x2.op_Multiply(System.Int64,GenMathematics.Matrices.long3x2)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long3x2.op_Division(GenMathematics.Matrices.long3x2,System.Int64)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long3x2.op_Division(System.Int64,GenMathematics.Matrices.long3x2)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long3x2.op_Explicit(GenMathematics.Matrices.ulong3x2)~GenMathematics.Matrices.long3x2">
            <summary>
            Converts ulong3x2 to long3x2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long3x2.op_Explicit(GenMathematics.Matrices.half3x2)~GenMathematics.Matrices.long3x2">
            <summary>
            Converts half3x2 to long3x2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long3x2.op_Explicit(GenMathematics.Matrices.float3x2)~GenMathematics.Matrices.long3x2">
            <summary>
            Converts float3x2 to long3x2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long3x2.op_Explicit(GenMathematics.Matrices.double3x2)~GenMathematics.Matrices.long3x2">
            <summary>
            Converts double3x2 to long3x2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long3x2.op_Implicit(GenMathematics.Matrices.byte3x2)~GenMathematics.Matrices.long3x2">
            <summary>
            Converts byte3x2 to long3x2
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long3x2.op_Implicit(GenMathematics.Matrices.sbyte3x2)~GenMathematics.Matrices.long3x2">
            <summary>
            Converts sbyte3x2 to long3x2
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long3x2.op_Implicit(GenMathematics.Matrices.short3x2)~GenMathematics.Matrices.long3x2">
            <summary>
            Converts short3x2 to long3x2
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long3x2.op_Implicit(GenMathematics.Matrices.ushort3x2)~GenMathematics.Matrices.long3x2">
            <summary>
            Converts ushort3x2 to long3x2
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long3x2.op_Implicit(GenMathematics.Matrices.int3x2)~GenMathematics.Matrices.long3x2">
            <summary>
            Converts int3x2 to long3x2
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long3x2.op_Implicit(GenMathematics.Matrices.uint3x2)~GenMathematics.Matrices.long3x2">
            <summary>
            Converts uint3x2 to long3x2
            </summary>
        </member>
        <member name="T:GenMathematics.Matrices.long3x3">
            <summary>
            Matrix of type long with 3 rows and 3 columns using the column-major order
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.long3x3.Column0">
            <summary>
            Matrix column with index 0
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.long3x3.Column1">
            <summary>
            Matrix column with index 1
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.long3x3.Column2">
            <summary>
            Matrix column with index 2
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.long3x3.Row0">
            <summary>
            Matrix row with index 0
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.long3x3.Row1">
            <summary>
            Matrix row with index 1
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.long3x3.Row2">
            <summary>
            Matrix row with index 2
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long3x3.#ctor(GenMathematics.Vectors.long3,GenMathematics.Vectors.long3,GenMathematics.Vectors.long3)">
            <summary>
            Creates a matrix from column values
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long3x3.#ctor(System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64)">
            <summary>
            Creates a matrix from the values of rows and columns
            </summary>
            <param name="r0c0">The value to assign to row 0 and column 0 of the matrix</param>
            <param name="r0c1">The value to assign to row 0 and column 1 of the matrix</param>
            <param name="r0c2">The value to assign to row 0 and column 2 of the matrix</param>
            <param name="r1c0">The value to assign to row 1 and column 0 of the matrix</param>
            <param name="r1c1">The value to assign to row 1 and column 1 of the matrix</param>
            <param name="r1c2">The value to assign to row 1 and column 2 of the matrix</param>
            <param name="r2c0">The value to assign to row 2 and column 0 of the matrix</param>
            <param name="r2c1">The value to assign to row 2 and column 1 of the matrix</param>
            <param name="r2c2">The value to assign to row 2 and column 2 of the matrix</param>
        </member>
        <member name="P:GenMathematics.Matrices.long3x3.Item(System.Int32)">
            <summary>
            To access via the reference use `Unsafe.Add(ref matrix.Column0, index)` instead
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long3x3.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.long3x3.Equals(GenMathematics.Matrices.long3x3)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.long3x3.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.long3x3.CompareTo(GenMathematics.Matrices.long3x3)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.long3x3.ToString">
            <summary>
            Returns the object's state information as a string
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long3x3.Extract(GenMathematics.Matrices.long3x3@,System.Int32,System.Int32,GenMathematics.Matrices.long3x3@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long3x3.Extract(GenMathematics.Matrices.long3x3@,System.Int32,System.Int32,GenMathematics.Matrices.long2x3@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long3x3.Extract(GenMathematics.Matrices.long3x3@,System.Int32,System.Int32,GenMathematics.Matrices.long3x2@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long3x3.Extract(GenMathematics.Matrices.long3x3@,System.Int32,System.Int32,GenMathematics.Matrices.long2x2@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long3x3.Multiply(GenMathematics.Matrices.long3x3,System.Int64)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long3x3.Multiply(System.Int64,GenMathematics.Matrices.long3x3)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long3x3.Multiply(GenMathematics.Matrices.long3x3@,System.Int64,GenMathematics.Matrices.long3x3@)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long3x3.Multiply(System.Int64,GenMathematics.Matrices.long3x3@,GenMathematics.Matrices.long3x3@)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long3x3.Divide(GenMathematics.Matrices.long3x3,System.Int64)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long3x3.Divide(System.Int64,GenMathematics.Matrices.long3x3)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long3x3.Divide(GenMathematics.Matrices.long3x3@,System.Int64,GenMathematics.Matrices.long3x3@)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long3x3.Divide(System.Int64,GenMathematics.Matrices.long3x3@,GenMathematics.Matrices.long3x3@)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long3x3.op_Multiply(GenMathematics.Matrices.long3x3,System.Int64)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long3x3.op_Multiply(System.Int64,GenMathematics.Matrices.long3x3)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long3x3.op_Division(GenMathematics.Matrices.long3x3,System.Int64)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long3x3.op_Division(System.Int64,GenMathematics.Matrices.long3x3)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long3x3.op_Explicit(GenMathematics.Matrices.ulong3x3)~GenMathematics.Matrices.long3x3">
            <summary>
            Converts ulong3x3 to long3x3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long3x3.op_Explicit(GenMathematics.Matrices.half3x3)~GenMathematics.Matrices.long3x3">
            <summary>
            Converts half3x3 to long3x3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long3x3.op_Explicit(GenMathematics.Matrices.float3x3)~GenMathematics.Matrices.long3x3">
            <summary>
            Converts float3x3 to long3x3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long3x3.op_Explicit(GenMathematics.Matrices.double3x3)~GenMathematics.Matrices.long3x3">
            <summary>
            Converts double3x3 to long3x3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long3x3.op_Implicit(GenMathematics.Matrices.byte3x3)~GenMathematics.Matrices.long3x3">
            <summary>
            Converts byte3x3 to long3x3
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long3x3.op_Implicit(GenMathematics.Matrices.sbyte3x3)~GenMathematics.Matrices.long3x3">
            <summary>
            Converts sbyte3x3 to long3x3
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long3x3.op_Implicit(GenMathematics.Matrices.short3x3)~GenMathematics.Matrices.long3x3">
            <summary>
            Converts short3x3 to long3x3
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long3x3.op_Implicit(GenMathematics.Matrices.ushort3x3)~GenMathematics.Matrices.long3x3">
            <summary>
            Converts ushort3x3 to long3x3
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long3x3.op_Implicit(GenMathematics.Matrices.int3x3)~GenMathematics.Matrices.long3x3">
            <summary>
            Converts int3x3 to long3x3
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long3x3.op_Implicit(GenMathematics.Matrices.uint3x3)~GenMathematics.Matrices.long3x3">
            <summary>
            Converts uint3x3 to long3x3
            </summary>
        </member>
        <member name="T:GenMathematics.Matrices.long3x4">
            <summary>
            Matrix of type long with 3 rows and 4 columns using the column-major order
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.long3x4.Column0">
            <summary>
            Matrix column with index 0
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.long3x4.Column1">
            <summary>
            Matrix column with index 1
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.long3x4.Column2">
            <summary>
            Matrix column with index 2
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.long3x4.Column3">
            <summary>
            Matrix column with index 3
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.long3x4.Row0">
            <summary>
            Matrix row with index 0
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.long3x4.Row1">
            <summary>
            Matrix row with index 1
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.long3x4.Row2">
            <summary>
            Matrix row with index 2
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long3x4.#ctor(GenMathematics.Vectors.long3,GenMathematics.Vectors.long3,GenMathematics.Vectors.long3,GenMathematics.Vectors.long3)">
            <summary>
            Creates a matrix from column values
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long3x4.#ctor(System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64)">
            <summary>
            Creates a matrix from the values of rows and columns
            </summary>
            <param name="r0c0">The value to assign to row 0 and column 0 of the matrix</param>
            <param name="r0c1">The value to assign to row 0 and column 1 of the matrix</param>
            <param name="r0c2">The value to assign to row 0 and column 2 of the matrix</param>
            <param name="r0c3">The value to assign to row 0 and column 3 of the matrix</param>
            <param name="r1c0">The value to assign to row 1 and column 0 of the matrix</param>
            <param name="r1c1">The value to assign to row 1 and column 1 of the matrix</param>
            <param name="r1c2">The value to assign to row 1 and column 2 of the matrix</param>
            <param name="r1c3">The value to assign to row 1 and column 3 of the matrix</param>
            <param name="r2c0">The value to assign to row 2 and column 0 of the matrix</param>
            <param name="r2c1">The value to assign to row 2 and column 1 of the matrix</param>
            <param name="r2c2">The value to assign to row 2 and column 2 of the matrix</param>
            <param name="r2c3">The value to assign to row 2 and column 3 of the matrix</param>
        </member>
        <member name="P:GenMathematics.Matrices.long3x4.Item(System.Int32)">
            <summary>
            To access via the reference use `Unsafe.Add(ref matrix.Column0, index)` instead
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long3x4.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.long3x4.Equals(GenMathematics.Matrices.long3x4)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.long3x4.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.long3x4.CompareTo(GenMathematics.Matrices.long3x4)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.long3x4.ToString">
            <summary>
            Returns the object's state information as a string
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long3x4.Extract(GenMathematics.Matrices.long3x4@,System.Int32,System.Int32,GenMathematics.Matrices.long3x4@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long3x4.Extract(GenMathematics.Matrices.long3x4@,System.Int32,System.Int32,GenMathematics.Matrices.long2x4@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long3x4.Extract(GenMathematics.Matrices.long3x4@,System.Int32,System.Int32,GenMathematics.Matrices.long3x3@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long3x4.Extract(GenMathematics.Matrices.long3x4@,System.Int32,System.Int32,GenMathematics.Matrices.long2x3@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long3x4.Extract(GenMathematics.Matrices.long3x4@,System.Int32,System.Int32,GenMathematics.Matrices.long3x2@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long3x4.Extract(GenMathematics.Matrices.long3x4@,System.Int32,System.Int32,GenMathematics.Matrices.long2x2@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long3x4.Multiply(GenMathematics.Matrices.long3x4,System.Int64)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long3x4.Multiply(System.Int64,GenMathematics.Matrices.long3x4)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long3x4.Multiply(GenMathematics.Matrices.long3x4@,System.Int64,GenMathematics.Matrices.long3x4@)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long3x4.Multiply(System.Int64,GenMathematics.Matrices.long3x4@,GenMathematics.Matrices.long3x4@)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long3x4.Divide(GenMathematics.Matrices.long3x4,System.Int64)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long3x4.Divide(System.Int64,GenMathematics.Matrices.long3x4)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long3x4.Divide(GenMathematics.Matrices.long3x4@,System.Int64,GenMathematics.Matrices.long3x4@)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long3x4.Divide(System.Int64,GenMathematics.Matrices.long3x4@,GenMathematics.Matrices.long3x4@)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long3x4.op_Multiply(GenMathematics.Matrices.long3x4,System.Int64)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long3x4.op_Multiply(System.Int64,GenMathematics.Matrices.long3x4)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long3x4.op_Division(GenMathematics.Matrices.long3x4,System.Int64)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long3x4.op_Division(System.Int64,GenMathematics.Matrices.long3x4)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long3x4.op_Explicit(GenMathematics.Matrices.ulong3x4)~GenMathematics.Matrices.long3x4">
            <summary>
            Converts ulong3x4 to long3x4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long3x4.op_Explicit(GenMathematics.Matrices.half3x4)~GenMathematics.Matrices.long3x4">
            <summary>
            Converts half3x4 to long3x4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long3x4.op_Explicit(GenMathematics.Matrices.float3x4)~GenMathematics.Matrices.long3x4">
            <summary>
            Converts float3x4 to long3x4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long3x4.op_Explicit(GenMathematics.Matrices.double3x4)~GenMathematics.Matrices.long3x4">
            <summary>
            Converts double3x4 to long3x4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long3x4.op_Implicit(GenMathematics.Matrices.byte3x4)~GenMathematics.Matrices.long3x4">
            <summary>
            Converts byte3x4 to long3x4
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long3x4.op_Implicit(GenMathematics.Matrices.sbyte3x4)~GenMathematics.Matrices.long3x4">
            <summary>
            Converts sbyte3x4 to long3x4
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long3x4.op_Implicit(GenMathematics.Matrices.short3x4)~GenMathematics.Matrices.long3x4">
            <summary>
            Converts short3x4 to long3x4
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long3x4.op_Implicit(GenMathematics.Matrices.ushort3x4)~GenMathematics.Matrices.long3x4">
            <summary>
            Converts ushort3x4 to long3x4
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long3x4.op_Implicit(GenMathematics.Matrices.int3x4)~GenMathematics.Matrices.long3x4">
            <summary>
            Converts int3x4 to long3x4
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long3x4.op_Implicit(GenMathematics.Matrices.uint3x4)~GenMathematics.Matrices.long3x4">
            <summary>
            Converts uint3x4 to long3x4
            </summary>
        </member>
        <member name="T:GenMathematics.Matrices.long4x2">
            <summary>
            Matrix of type long with 4 rows and 2 columns using the column-major order
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.long4x2.Column0">
            <summary>
            Matrix column with index 0
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.long4x2.Column1">
            <summary>
            Matrix column with index 1
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.long4x2.Row0">
            <summary>
            Matrix row with index 0
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.long4x2.Row1">
            <summary>
            Matrix row with index 1
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.long4x2.Row2">
            <summary>
            Matrix row with index 2
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.long4x2.Row3">
            <summary>
            Matrix row with index 3
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long4x2.#ctor(GenMathematics.Vectors.long4,GenMathematics.Vectors.long4)">
            <summary>
            Creates a matrix from column values
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long4x2.#ctor(System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64)">
            <summary>
            Creates a matrix from the values of rows and columns
            </summary>
            <param name="r0c0">The value to assign to row 0 and column 0 of the matrix</param>
            <param name="r0c1">The value to assign to row 0 and column 1 of the matrix</param>
            <param name="r1c0">The value to assign to row 1 and column 0 of the matrix</param>
            <param name="r1c1">The value to assign to row 1 and column 1 of the matrix</param>
            <param name="r2c0">The value to assign to row 2 and column 0 of the matrix</param>
            <param name="r2c1">The value to assign to row 2 and column 1 of the matrix</param>
            <param name="r3c0">The value to assign to row 3 and column 0 of the matrix</param>
            <param name="r3c1">The value to assign to row 3 and column 1 of the matrix</param>
        </member>
        <member name="P:GenMathematics.Matrices.long4x2.Item(System.Int32)">
            <summary>
            To access via the reference use `Unsafe.Add(ref matrix.Column0, index)` instead
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long4x2.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.long4x2.Equals(GenMathematics.Matrices.long4x2)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.long4x2.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.long4x2.CompareTo(GenMathematics.Matrices.long4x2)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.long4x2.ToString">
            <summary>
            Returns the object's state information as a string
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long4x2.Extract(GenMathematics.Matrices.long4x2@,System.Int32,System.Int32,GenMathematics.Matrices.long4x2@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long4x2.Extract(GenMathematics.Matrices.long4x2@,System.Int32,System.Int32,GenMathematics.Matrices.long3x2@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long4x2.Extract(GenMathematics.Matrices.long4x2@,System.Int32,System.Int32,GenMathematics.Matrices.long2x2@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long4x2.Multiply(GenMathematics.Matrices.long4x2,System.Int64)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long4x2.Multiply(System.Int64,GenMathematics.Matrices.long4x2)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long4x2.Multiply(GenMathematics.Matrices.long4x2@,System.Int64,GenMathematics.Matrices.long4x2@)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long4x2.Multiply(System.Int64,GenMathematics.Matrices.long4x2@,GenMathematics.Matrices.long4x2@)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long4x2.Divide(GenMathematics.Matrices.long4x2,System.Int64)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long4x2.Divide(System.Int64,GenMathematics.Matrices.long4x2)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long4x2.Divide(GenMathematics.Matrices.long4x2@,System.Int64,GenMathematics.Matrices.long4x2@)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long4x2.Divide(System.Int64,GenMathematics.Matrices.long4x2@,GenMathematics.Matrices.long4x2@)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long4x2.op_Multiply(GenMathematics.Matrices.long4x2,System.Int64)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long4x2.op_Multiply(System.Int64,GenMathematics.Matrices.long4x2)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long4x2.op_Division(GenMathematics.Matrices.long4x2,System.Int64)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long4x2.op_Division(System.Int64,GenMathematics.Matrices.long4x2)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long4x2.op_Explicit(GenMathematics.Matrices.ulong4x2)~GenMathematics.Matrices.long4x2">
            <summary>
            Converts ulong4x2 to long4x2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long4x2.op_Explicit(GenMathematics.Matrices.half4x2)~GenMathematics.Matrices.long4x2">
            <summary>
            Converts half4x2 to long4x2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long4x2.op_Explicit(GenMathematics.Matrices.float4x2)~GenMathematics.Matrices.long4x2">
            <summary>
            Converts float4x2 to long4x2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long4x2.op_Explicit(GenMathematics.Matrices.double4x2)~GenMathematics.Matrices.long4x2">
            <summary>
            Converts double4x2 to long4x2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long4x2.op_Implicit(GenMathematics.Matrices.byte4x2)~GenMathematics.Matrices.long4x2">
            <summary>
            Converts byte4x2 to long4x2
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long4x2.op_Implicit(GenMathematics.Matrices.sbyte4x2)~GenMathematics.Matrices.long4x2">
            <summary>
            Converts sbyte4x2 to long4x2
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long4x2.op_Implicit(GenMathematics.Matrices.short4x2)~GenMathematics.Matrices.long4x2">
            <summary>
            Converts short4x2 to long4x2
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long4x2.op_Implicit(GenMathematics.Matrices.ushort4x2)~GenMathematics.Matrices.long4x2">
            <summary>
            Converts ushort4x2 to long4x2
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long4x2.op_Implicit(GenMathematics.Matrices.int4x2)~GenMathematics.Matrices.long4x2">
            <summary>
            Converts int4x2 to long4x2
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long4x2.op_Implicit(GenMathematics.Matrices.uint4x2)~GenMathematics.Matrices.long4x2">
            <summary>
            Converts uint4x2 to long4x2
            </summary>
        </member>
        <member name="T:GenMathematics.Matrices.long4x3">
            <summary>
            Matrix of type long with 4 rows and 3 columns using the column-major order
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.long4x3.Column0">
            <summary>
            Matrix column with index 0
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.long4x3.Column1">
            <summary>
            Matrix column with index 1
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.long4x3.Column2">
            <summary>
            Matrix column with index 2
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.long4x3.Row0">
            <summary>
            Matrix row with index 0
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.long4x3.Row1">
            <summary>
            Matrix row with index 1
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.long4x3.Row2">
            <summary>
            Matrix row with index 2
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.long4x3.Row3">
            <summary>
            Matrix row with index 3
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long4x3.#ctor(GenMathematics.Vectors.long4,GenMathematics.Vectors.long4,GenMathematics.Vectors.long4)">
            <summary>
            Creates a matrix from column values
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long4x3.#ctor(System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64)">
            <summary>
            Creates a matrix from the values of rows and columns
            </summary>
            <param name="r0c0">The value to assign to row 0 and column 0 of the matrix</param>
            <param name="r0c1">The value to assign to row 0 and column 1 of the matrix</param>
            <param name="r0c2">The value to assign to row 0 and column 2 of the matrix</param>
            <param name="r1c0">The value to assign to row 1 and column 0 of the matrix</param>
            <param name="r1c1">The value to assign to row 1 and column 1 of the matrix</param>
            <param name="r1c2">The value to assign to row 1 and column 2 of the matrix</param>
            <param name="r2c0">The value to assign to row 2 and column 0 of the matrix</param>
            <param name="r2c1">The value to assign to row 2 and column 1 of the matrix</param>
            <param name="r2c2">The value to assign to row 2 and column 2 of the matrix</param>
            <param name="r3c0">The value to assign to row 3 and column 0 of the matrix</param>
            <param name="r3c1">The value to assign to row 3 and column 1 of the matrix</param>
            <param name="r3c2">The value to assign to row 3 and column 2 of the matrix</param>
        </member>
        <member name="P:GenMathematics.Matrices.long4x3.Item(System.Int32)">
            <summary>
            To access via the reference use `Unsafe.Add(ref matrix.Column0, index)` instead
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long4x3.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.long4x3.Equals(GenMathematics.Matrices.long4x3)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.long4x3.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.long4x3.CompareTo(GenMathematics.Matrices.long4x3)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.long4x3.ToString">
            <summary>
            Returns the object's state information as a string
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long4x3.Extract(GenMathematics.Matrices.long4x3@,System.Int32,System.Int32,GenMathematics.Matrices.long4x3@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long4x3.Extract(GenMathematics.Matrices.long4x3@,System.Int32,System.Int32,GenMathematics.Matrices.long3x3@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long4x3.Extract(GenMathematics.Matrices.long4x3@,System.Int32,System.Int32,GenMathematics.Matrices.long2x3@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long4x3.Extract(GenMathematics.Matrices.long4x3@,System.Int32,System.Int32,GenMathematics.Matrices.long4x2@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long4x3.Extract(GenMathematics.Matrices.long4x3@,System.Int32,System.Int32,GenMathematics.Matrices.long3x2@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long4x3.Extract(GenMathematics.Matrices.long4x3@,System.Int32,System.Int32,GenMathematics.Matrices.long2x2@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long4x3.Multiply(GenMathematics.Matrices.long4x3,System.Int64)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long4x3.Multiply(System.Int64,GenMathematics.Matrices.long4x3)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long4x3.Multiply(GenMathematics.Matrices.long4x3@,System.Int64,GenMathematics.Matrices.long4x3@)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long4x3.Multiply(System.Int64,GenMathematics.Matrices.long4x3@,GenMathematics.Matrices.long4x3@)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long4x3.Divide(GenMathematics.Matrices.long4x3,System.Int64)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long4x3.Divide(System.Int64,GenMathematics.Matrices.long4x3)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long4x3.Divide(GenMathematics.Matrices.long4x3@,System.Int64,GenMathematics.Matrices.long4x3@)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long4x3.Divide(System.Int64,GenMathematics.Matrices.long4x3@,GenMathematics.Matrices.long4x3@)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long4x3.op_Multiply(GenMathematics.Matrices.long4x3,System.Int64)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long4x3.op_Multiply(System.Int64,GenMathematics.Matrices.long4x3)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long4x3.op_Division(GenMathematics.Matrices.long4x3,System.Int64)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long4x3.op_Division(System.Int64,GenMathematics.Matrices.long4x3)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long4x3.op_Explicit(GenMathematics.Matrices.ulong4x3)~GenMathematics.Matrices.long4x3">
            <summary>
            Converts ulong4x3 to long4x3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long4x3.op_Explicit(GenMathematics.Matrices.half4x3)~GenMathematics.Matrices.long4x3">
            <summary>
            Converts half4x3 to long4x3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long4x3.op_Explicit(GenMathematics.Matrices.float4x3)~GenMathematics.Matrices.long4x3">
            <summary>
            Converts float4x3 to long4x3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long4x3.op_Explicit(GenMathematics.Matrices.double4x3)~GenMathematics.Matrices.long4x3">
            <summary>
            Converts double4x3 to long4x3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long4x3.op_Implicit(GenMathematics.Matrices.byte4x3)~GenMathematics.Matrices.long4x3">
            <summary>
            Converts byte4x3 to long4x3
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long4x3.op_Implicit(GenMathematics.Matrices.sbyte4x3)~GenMathematics.Matrices.long4x3">
            <summary>
            Converts sbyte4x3 to long4x3
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long4x3.op_Implicit(GenMathematics.Matrices.short4x3)~GenMathematics.Matrices.long4x3">
            <summary>
            Converts short4x3 to long4x3
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long4x3.op_Implicit(GenMathematics.Matrices.ushort4x3)~GenMathematics.Matrices.long4x3">
            <summary>
            Converts ushort4x3 to long4x3
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long4x3.op_Implicit(GenMathematics.Matrices.int4x3)~GenMathematics.Matrices.long4x3">
            <summary>
            Converts int4x3 to long4x3
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long4x3.op_Implicit(GenMathematics.Matrices.uint4x3)~GenMathematics.Matrices.long4x3">
            <summary>
            Converts uint4x3 to long4x3
            </summary>
        </member>
        <member name="T:GenMathematics.Matrices.long4x4">
            <summary>
            Matrix of type long with 4 rows and 4 columns using the column-major order
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.long4x4.Column0">
            <summary>
            Matrix column with index 0
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.long4x4.Column1">
            <summary>
            Matrix column with index 1
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.long4x4.Column2">
            <summary>
            Matrix column with index 2
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.long4x4.Column3">
            <summary>
            Matrix column with index 3
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.long4x4.Row0">
            <summary>
            Matrix row with index 0
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.long4x4.Row1">
            <summary>
            Matrix row with index 1
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.long4x4.Row2">
            <summary>
            Matrix row with index 2
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.long4x4.Row3">
            <summary>
            Matrix row with index 3
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long4x4.#ctor(GenMathematics.Vectors.long4,GenMathematics.Vectors.long4,GenMathematics.Vectors.long4,GenMathematics.Vectors.long4)">
            <summary>
            Creates a matrix from column values
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long4x4.#ctor(System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64)">
            <summary>
            Creates a matrix from the values of rows and columns
            </summary>
            <param name="r0c0">The value to assign to row 0 and column 0 of the matrix</param>
            <param name="r0c1">The value to assign to row 0 and column 1 of the matrix</param>
            <param name="r0c2">The value to assign to row 0 and column 2 of the matrix</param>
            <param name="r0c3">The value to assign to row 0 and column 3 of the matrix</param>
            <param name="r1c0">The value to assign to row 1 and column 0 of the matrix</param>
            <param name="r1c1">The value to assign to row 1 and column 1 of the matrix</param>
            <param name="r1c2">The value to assign to row 1 and column 2 of the matrix</param>
            <param name="r1c3">The value to assign to row 1 and column 3 of the matrix</param>
            <param name="r2c0">The value to assign to row 2 and column 0 of the matrix</param>
            <param name="r2c1">The value to assign to row 2 and column 1 of the matrix</param>
            <param name="r2c2">The value to assign to row 2 and column 2 of the matrix</param>
            <param name="r2c3">The value to assign to row 2 and column 3 of the matrix</param>
            <param name="r3c0">The value to assign to row 3 and column 0 of the matrix</param>
            <param name="r3c1">The value to assign to row 3 and column 1 of the matrix</param>
            <param name="r3c2">The value to assign to row 3 and column 2 of the matrix</param>
            <param name="r3c3">The value to assign to row 3 and column 3 of the matrix</param>
        </member>
        <member name="P:GenMathematics.Matrices.long4x4.Item(System.Int32)">
            <summary>
            To access via the reference use `Unsafe.Add(ref matrix.Column0, index)` instead
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long4x4.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.long4x4.Equals(GenMathematics.Matrices.long4x4)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.long4x4.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.long4x4.CompareTo(GenMathematics.Matrices.long4x4)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.long4x4.ToString">
            <summary>
            Returns the object's state information as a string
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long4x4.Extract(GenMathematics.Matrices.long4x4@,System.Int32,System.Int32,GenMathematics.Matrices.long4x4@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long4x4.Extract(GenMathematics.Matrices.long4x4@,System.Int32,System.Int32,GenMathematics.Matrices.long3x4@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long4x4.Extract(GenMathematics.Matrices.long4x4@,System.Int32,System.Int32,GenMathematics.Matrices.long2x4@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long4x4.Extract(GenMathematics.Matrices.long4x4@,System.Int32,System.Int32,GenMathematics.Matrices.long4x3@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long4x4.Extract(GenMathematics.Matrices.long4x4@,System.Int32,System.Int32,GenMathematics.Matrices.long3x3@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long4x4.Extract(GenMathematics.Matrices.long4x4@,System.Int32,System.Int32,GenMathematics.Matrices.long2x3@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long4x4.Extract(GenMathematics.Matrices.long4x4@,System.Int32,System.Int32,GenMathematics.Matrices.long4x2@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long4x4.Extract(GenMathematics.Matrices.long4x4@,System.Int32,System.Int32,GenMathematics.Matrices.long3x2@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long4x4.Extract(GenMathematics.Matrices.long4x4@,System.Int32,System.Int32,GenMathematics.Matrices.long2x2@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long4x4.Multiply(GenMathematics.Matrices.long4x4,System.Int64)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long4x4.Multiply(System.Int64,GenMathematics.Matrices.long4x4)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long4x4.Multiply(GenMathematics.Matrices.long4x4@,System.Int64,GenMathematics.Matrices.long4x4@)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long4x4.Multiply(System.Int64,GenMathematics.Matrices.long4x4@,GenMathematics.Matrices.long4x4@)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long4x4.Divide(GenMathematics.Matrices.long4x4,System.Int64)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long4x4.Divide(System.Int64,GenMathematics.Matrices.long4x4)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long4x4.Divide(GenMathematics.Matrices.long4x4@,System.Int64,GenMathematics.Matrices.long4x4@)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long4x4.Divide(System.Int64,GenMathematics.Matrices.long4x4@,GenMathematics.Matrices.long4x4@)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long4x4.op_Multiply(GenMathematics.Matrices.long4x4,System.Int64)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long4x4.op_Multiply(System.Int64,GenMathematics.Matrices.long4x4)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long4x4.op_Division(GenMathematics.Matrices.long4x4,System.Int64)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long4x4.op_Division(System.Int64,GenMathematics.Matrices.long4x4)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long4x4.op_Explicit(GenMathematics.Matrices.ulong4x4)~GenMathematics.Matrices.long4x4">
            <summary>
            Converts ulong4x4 to long4x4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long4x4.op_Explicit(GenMathematics.Matrices.half4x4)~GenMathematics.Matrices.long4x4">
            <summary>
            Converts half4x4 to long4x4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long4x4.op_Explicit(GenMathematics.Matrices.float4x4)~GenMathematics.Matrices.long4x4">
            <summary>
            Converts float4x4 to long4x4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long4x4.op_Explicit(GenMathematics.Matrices.double4x4)~GenMathematics.Matrices.long4x4">
            <summary>
            Converts double4x4 to long4x4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long4x4.op_Implicit(GenMathematics.Matrices.byte4x4)~GenMathematics.Matrices.long4x4">
            <summary>
            Converts byte4x4 to long4x4
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long4x4.op_Implicit(GenMathematics.Matrices.sbyte4x4)~GenMathematics.Matrices.long4x4">
            <summary>
            Converts sbyte4x4 to long4x4
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long4x4.op_Implicit(GenMathematics.Matrices.short4x4)~GenMathematics.Matrices.long4x4">
            <summary>
            Converts short4x4 to long4x4
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long4x4.op_Implicit(GenMathematics.Matrices.ushort4x4)~GenMathematics.Matrices.long4x4">
            <summary>
            Converts ushort4x4 to long4x4
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long4x4.op_Implicit(GenMathematics.Matrices.int4x4)~GenMathematics.Matrices.long4x4">
            <summary>
            Converts int4x4 to long4x4
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.long4x4.op_Implicit(GenMathematics.Matrices.uint4x4)~GenMathematics.Matrices.long4x4">
            <summary>
            Converts uint4x4 to long4x4
            </summary>
        </member>
        <member name="T:GenMathematics.Matrices.sbyte2x2">
            <summary>
            Matrix of type sbyte with 2 rows and 2 columns using the column-major order
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.sbyte2x2.Column0">
            <summary>
            Matrix column with index 0
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.sbyte2x2.Column1">
            <summary>
            Matrix column with index 1
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.sbyte2x2.Row0">
            <summary>
            Matrix row with index 0
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.sbyte2x2.Row1">
            <summary>
            Matrix row with index 1
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.sbyte2x2.#ctor(GenMathematics.Vectors.sbyte2,GenMathematics.Vectors.sbyte2)">
            <summary>
            Creates a matrix from column values
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.sbyte2x2.#ctor(System.SByte,System.SByte,System.SByte,System.SByte)">
            <summary>
            Creates a matrix from the values of rows and columns
            </summary>
            <param name="r0c0">The value to assign to row 0 and column 0 of the matrix</param>
            <param name="r0c1">The value to assign to row 0 and column 1 of the matrix</param>
            <param name="r1c0">The value to assign to row 1 and column 0 of the matrix</param>
            <param name="r1c1">The value to assign to row 1 and column 1 of the matrix</param>
        </member>
        <member name="P:GenMathematics.Matrices.sbyte2x2.Item(System.Int32)">
            <summary>
            To access via the reference use `Unsafe.Add(ref matrix.Column0, index)` instead
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.sbyte2x2.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.sbyte2x2.Equals(GenMathematics.Matrices.sbyte2x2)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.sbyte2x2.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.sbyte2x2.CompareTo(GenMathematics.Matrices.sbyte2x2)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.sbyte2x2.ToString">
            <summary>
            Returns the object's state information as a string
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.sbyte2x2.Extract(GenMathematics.Matrices.sbyte2x2,System.Int32,System.Int32,GenMathematics.Matrices.sbyte2x2@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.sbyte2x2.op_Explicit(GenMathematics.Matrices.byte2x2)~GenMathematics.Matrices.sbyte2x2">
            <summary>
            Converts byte2x2 to sbyte2x2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.sbyte2x2.op_Explicit(GenMathematics.Matrices.short2x2)~GenMathematics.Matrices.sbyte2x2">
            <summary>
            Converts short2x2 to sbyte2x2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.sbyte2x2.op_Explicit(GenMathematics.Matrices.ushort2x2)~GenMathematics.Matrices.sbyte2x2">
            <summary>
            Converts ushort2x2 to sbyte2x2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.sbyte2x2.op_Explicit(GenMathematics.Matrices.int2x2)~GenMathematics.Matrices.sbyte2x2">
            <summary>
            Converts int2x2 to sbyte2x2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.sbyte2x2.op_Explicit(GenMathematics.Matrices.uint2x2)~GenMathematics.Matrices.sbyte2x2">
            <summary>
            Converts uint2x2 to sbyte2x2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.sbyte2x2.op_Explicit(GenMathematics.Matrices.long2x2)~GenMathematics.Matrices.sbyte2x2">
            <summary>
            Converts long2x2 to sbyte2x2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.sbyte2x2.op_Explicit(GenMathematics.Matrices.ulong2x2)~GenMathematics.Matrices.sbyte2x2">
            <summary>
            Converts ulong2x2 to sbyte2x2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.sbyte2x2.op_Explicit(GenMathematics.Matrices.half2x2)~GenMathematics.Matrices.sbyte2x2">
            <summary>
            Converts half2x2 to sbyte2x2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.sbyte2x2.op_Explicit(GenMathematics.Matrices.float2x2)~GenMathematics.Matrices.sbyte2x2">
            <summary>
            Converts float2x2 to sbyte2x2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.sbyte2x2.op_Explicit(GenMathematics.Matrices.double2x2)~GenMathematics.Matrices.sbyte2x2">
            <summary>
            Converts double2x2 to sbyte2x2 with possible loss of information
            </summary>
        </member>
        <member name="T:GenMathematics.Matrices.sbyte2x3">
            <summary>
            Matrix of type sbyte with 2 rows and 3 columns using the column-major order
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.sbyte2x3.Column0">
            <summary>
            Matrix column with index 0
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.sbyte2x3.Column1">
            <summary>
            Matrix column with index 1
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.sbyte2x3.Column2">
            <summary>
            Matrix column with index 2
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.sbyte2x3.Row0">
            <summary>
            Matrix row with index 0
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.sbyte2x3.Row1">
            <summary>
            Matrix row with index 1
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.sbyte2x3.#ctor(GenMathematics.Vectors.sbyte2,GenMathematics.Vectors.sbyte2,GenMathematics.Vectors.sbyte2)">
            <summary>
            Creates a matrix from column values
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.sbyte2x3.#ctor(System.SByte,System.SByte,System.SByte,System.SByte,System.SByte,System.SByte)">
            <summary>
            Creates a matrix from the values of rows and columns
            </summary>
            <param name="r0c0">The value to assign to row 0 and column 0 of the matrix</param>
            <param name="r0c1">The value to assign to row 0 and column 1 of the matrix</param>
            <param name="r0c2">The value to assign to row 0 and column 2 of the matrix</param>
            <param name="r1c0">The value to assign to row 1 and column 0 of the matrix</param>
            <param name="r1c1">The value to assign to row 1 and column 1 of the matrix</param>
            <param name="r1c2">The value to assign to row 1 and column 2 of the matrix</param>
        </member>
        <member name="P:GenMathematics.Matrices.sbyte2x3.Item(System.Int32)">
            <summary>
            To access via the reference use `Unsafe.Add(ref matrix.Column0, index)` instead
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.sbyte2x3.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.sbyte2x3.Equals(GenMathematics.Matrices.sbyte2x3)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.sbyte2x3.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.sbyte2x3.CompareTo(GenMathematics.Matrices.sbyte2x3)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.sbyte2x3.ToString">
            <summary>
            Returns the object's state information as a string
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.sbyte2x3.Extract(GenMathematics.Matrices.sbyte2x3,System.Int32,System.Int32,GenMathematics.Matrices.sbyte2x3@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.sbyte2x3.Extract(GenMathematics.Matrices.sbyte2x3,System.Int32,System.Int32,GenMathematics.Matrices.sbyte2x2@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.sbyte2x3.op_Explicit(GenMathematics.Matrices.byte2x3)~GenMathematics.Matrices.sbyte2x3">
            <summary>
            Converts byte2x3 to sbyte2x3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.sbyte2x3.op_Explicit(GenMathematics.Matrices.short2x3)~GenMathematics.Matrices.sbyte2x3">
            <summary>
            Converts short2x3 to sbyte2x3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.sbyte2x3.op_Explicit(GenMathematics.Matrices.ushort2x3)~GenMathematics.Matrices.sbyte2x3">
            <summary>
            Converts ushort2x3 to sbyte2x3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.sbyte2x3.op_Explicit(GenMathematics.Matrices.int2x3)~GenMathematics.Matrices.sbyte2x3">
            <summary>
            Converts int2x3 to sbyte2x3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.sbyte2x3.op_Explicit(GenMathematics.Matrices.uint2x3)~GenMathematics.Matrices.sbyte2x3">
            <summary>
            Converts uint2x3 to sbyte2x3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.sbyte2x3.op_Explicit(GenMathematics.Matrices.long2x3)~GenMathematics.Matrices.sbyte2x3">
            <summary>
            Converts long2x3 to sbyte2x3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.sbyte2x3.op_Explicit(GenMathematics.Matrices.ulong2x3)~GenMathematics.Matrices.sbyte2x3">
            <summary>
            Converts ulong2x3 to sbyte2x3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.sbyte2x3.op_Explicit(GenMathematics.Matrices.half2x3)~GenMathematics.Matrices.sbyte2x3">
            <summary>
            Converts half2x3 to sbyte2x3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.sbyte2x3.op_Explicit(GenMathematics.Matrices.float2x3)~GenMathematics.Matrices.sbyte2x3">
            <summary>
            Converts float2x3 to sbyte2x3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.sbyte2x3.op_Explicit(GenMathematics.Matrices.double2x3)~GenMathematics.Matrices.sbyte2x3">
            <summary>
            Converts double2x3 to sbyte2x3 with possible loss of information
            </summary>
        </member>
        <member name="T:GenMathematics.Matrices.sbyte2x4">
            <summary>
            Matrix of type sbyte with 2 rows and 4 columns using the column-major order
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.sbyte2x4.Column0">
            <summary>
            Matrix column with index 0
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.sbyte2x4.Column1">
            <summary>
            Matrix column with index 1
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.sbyte2x4.Column2">
            <summary>
            Matrix column with index 2
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.sbyte2x4.Column3">
            <summary>
            Matrix column with index 3
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.sbyte2x4.Row0">
            <summary>
            Matrix row with index 0
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.sbyte2x4.Row1">
            <summary>
            Matrix row with index 1
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.sbyte2x4.#ctor(GenMathematics.Vectors.sbyte2,GenMathematics.Vectors.sbyte2,GenMathematics.Vectors.sbyte2,GenMathematics.Vectors.sbyte2)">
            <summary>
            Creates a matrix from column values
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.sbyte2x4.#ctor(System.SByte,System.SByte,System.SByte,System.SByte,System.SByte,System.SByte,System.SByte,System.SByte)">
            <summary>
            Creates a matrix from the values of rows and columns
            </summary>
            <param name="r0c0">The value to assign to row 0 and column 0 of the matrix</param>
            <param name="r0c1">The value to assign to row 0 and column 1 of the matrix</param>
            <param name="r0c2">The value to assign to row 0 and column 2 of the matrix</param>
            <param name="r0c3">The value to assign to row 0 and column 3 of the matrix</param>
            <param name="r1c0">The value to assign to row 1 and column 0 of the matrix</param>
            <param name="r1c1">The value to assign to row 1 and column 1 of the matrix</param>
            <param name="r1c2">The value to assign to row 1 and column 2 of the matrix</param>
            <param name="r1c3">The value to assign to row 1 and column 3 of the matrix</param>
        </member>
        <member name="P:GenMathematics.Matrices.sbyte2x4.Item(System.Int32)">
            <summary>
            To access via the reference use `Unsafe.Add(ref matrix.Column0, index)` instead
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.sbyte2x4.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.sbyte2x4.Equals(GenMathematics.Matrices.sbyte2x4)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.sbyte2x4.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.sbyte2x4.CompareTo(GenMathematics.Matrices.sbyte2x4)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.sbyte2x4.ToString">
            <summary>
            Returns the object's state information as a string
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.sbyte2x4.Extract(GenMathematics.Matrices.sbyte2x4,System.Int32,System.Int32,GenMathematics.Matrices.sbyte2x4@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.sbyte2x4.Extract(GenMathematics.Matrices.sbyte2x4,System.Int32,System.Int32,GenMathematics.Matrices.sbyte2x3@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.sbyte2x4.Extract(GenMathematics.Matrices.sbyte2x4,System.Int32,System.Int32,GenMathematics.Matrices.sbyte2x2@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.sbyte2x4.op_Explicit(GenMathematics.Matrices.byte2x4)~GenMathematics.Matrices.sbyte2x4">
            <summary>
            Converts byte2x4 to sbyte2x4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.sbyte2x4.op_Explicit(GenMathematics.Matrices.short2x4)~GenMathematics.Matrices.sbyte2x4">
            <summary>
            Converts short2x4 to sbyte2x4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.sbyte2x4.op_Explicit(GenMathematics.Matrices.ushort2x4)~GenMathematics.Matrices.sbyte2x4">
            <summary>
            Converts ushort2x4 to sbyte2x4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.sbyte2x4.op_Explicit(GenMathematics.Matrices.int2x4)~GenMathematics.Matrices.sbyte2x4">
            <summary>
            Converts int2x4 to sbyte2x4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.sbyte2x4.op_Explicit(GenMathematics.Matrices.uint2x4)~GenMathematics.Matrices.sbyte2x4">
            <summary>
            Converts uint2x4 to sbyte2x4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.sbyte2x4.op_Explicit(GenMathematics.Matrices.long2x4)~GenMathematics.Matrices.sbyte2x4">
            <summary>
            Converts long2x4 to sbyte2x4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.sbyte2x4.op_Explicit(GenMathematics.Matrices.ulong2x4)~GenMathematics.Matrices.sbyte2x4">
            <summary>
            Converts ulong2x4 to sbyte2x4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.sbyte2x4.op_Explicit(GenMathematics.Matrices.half2x4)~GenMathematics.Matrices.sbyte2x4">
            <summary>
            Converts half2x4 to sbyte2x4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.sbyte2x4.op_Explicit(GenMathematics.Matrices.float2x4)~GenMathematics.Matrices.sbyte2x4">
            <summary>
            Converts float2x4 to sbyte2x4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.sbyte2x4.op_Explicit(GenMathematics.Matrices.double2x4)~GenMathematics.Matrices.sbyte2x4">
            <summary>
            Converts double2x4 to sbyte2x4 with possible loss of information
            </summary>
        </member>
        <member name="T:GenMathematics.Matrices.sbyte3x2">
            <summary>
            Matrix of type sbyte with 3 rows and 2 columns using the column-major order
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.sbyte3x2.Column0">
            <summary>
            Matrix column with index 0
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.sbyte3x2.Column1">
            <summary>
            Matrix column with index 1
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.sbyte3x2.Row0">
            <summary>
            Matrix row with index 0
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.sbyte3x2.Row1">
            <summary>
            Matrix row with index 1
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.sbyte3x2.Row2">
            <summary>
            Matrix row with index 2
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.sbyte3x2.#ctor(GenMathematics.Vectors.sbyte3,GenMathematics.Vectors.sbyte3)">
            <summary>
            Creates a matrix from column values
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.sbyte3x2.#ctor(System.SByte,System.SByte,System.SByte,System.SByte,System.SByte,System.SByte)">
            <summary>
            Creates a matrix from the values of rows and columns
            </summary>
            <param name="r0c0">The value to assign to row 0 and column 0 of the matrix</param>
            <param name="r0c1">The value to assign to row 0 and column 1 of the matrix</param>
            <param name="r1c0">The value to assign to row 1 and column 0 of the matrix</param>
            <param name="r1c1">The value to assign to row 1 and column 1 of the matrix</param>
            <param name="r2c0">The value to assign to row 2 and column 0 of the matrix</param>
            <param name="r2c1">The value to assign to row 2 and column 1 of the matrix</param>
        </member>
        <member name="P:GenMathematics.Matrices.sbyte3x2.Item(System.Int32)">
            <summary>
            To access via the reference use `Unsafe.Add(ref matrix.Column0, index)` instead
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.sbyte3x2.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.sbyte3x2.Equals(GenMathematics.Matrices.sbyte3x2)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.sbyte3x2.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.sbyte3x2.CompareTo(GenMathematics.Matrices.sbyte3x2)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.sbyte3x2.ToString">
            <summary>
            Returns the object's state information as a string
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.sbyte3x2.Extract(GenMathematics.Matrices.sbyte3x2,System.Int32,System.Int32,GenMathematics.Matrices.sbyte3x2@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.sbyte3x2.Extract(GenMathematics.Matrices.sbyte3x2,System.Int32,System.Int32,GenMathematics.Matrices.sbyte2x2@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.sbyte3x2.op_Explicit(GenMathematics.Matrices.byte3x2)~GenMathematics.Matrices.sbyte3x2">
            <summary>
            Converts byte3x2 to sbyte3x2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.sbyte3x2.op_Explicit(GenMathematics.Matrices.short3x2)~GenMathematics.Matrices.sbyte3x2">
            <summary>
            Converts short3x2 to sbyte3x2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.sbyte3x2.op_Explicit(GenMathematics.Matrices.ushort3x2)~GenMathematics.Matrices.sbyte3x2">
            <summary>
            Converts ushort3x2 to sbyte3x2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.sbyte3x2.op_Explicit(GenMathematics.Matrices.int3x2)~GenMathematics.Matrices.sbyte3x2">
            <summary>
            Converts int3x2 to sbyte3x2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.sbyte3x2.op_Explicit(GenMathematics.Matrices.uint3x2)~GenMathematics.Matrices.sbyte3x2">
            <summary>
            Converts uint3x2 to sbyte3x2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.sbyte3x2.op_Explicit(GenMathematics.Matrices.long3x2)~GenMathematics.Matrices.sbyte3x2">
            <summary>
            Converts long3x2 to sbyte3x2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.sbyte3x2.op_Explicit(GenMathematics.Matrices.ulong3x2)~GenMathematics.Matrices.sbyte3x2">
            <summary>
            Converts ulong3x2 to sbyte3x2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.sbyte3x2.op_Explicit(GenMathematics.Matrices.half3x2)~GenMathematics.Matrices.sbyte3x2">
            <summary>
            Converts half3x2 to sbyte3x2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.sbyte3x2.op_Explicit(GenMathematics.Matrices.float3x2)~GenMathematics.Matrices.sbyte3x2">
            <summary>
            Converts float3x2 to sbyte3x2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.sbyte3x2.op_Explicit(GenMathematics.Matrices.double3x2)~GenMathematics.Matrices.sbyte3x2">
            <summary>
            Converts double3x2 to sbyte3x2 with possible loss of information
            </summary>
        </member>
        <member name="T:GenMathematics.Matrices.sbyte3x3">
            <summary>
            Matrix of type sbyte with 3 rows and 3 columns using the column-major order
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.sbyte3x3.Column0">
            <summary>
            Matrix column with index 0
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.sbyte3x3.Column1">
            <summary>
            Matrix column with index 1
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.sbyte3x3.Column2">
            <summary>
            Matrix column with index 2
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.sbyte3x3.Row0">
            <summary>
            Matrix row with index 0
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.sbyte3x3.Row1">
            <summary>
            Matrix row with index 1
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.sbyte3x3.Row2">
            <summary>
            Matrix row with index 2
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.sbyte3x3.#ctor(GenMathematics.Vectors.sbyte3,GenMathematics.Vectors.sbyte3,GenMathematics.Vectors.sbyte3)">
            <summary>
            Creates a matrix from column values
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.sbyte3x3.#ctor(System.SByte,System.SByte,System.SByte,System.SByte,System.SByte,System.SByte,System.SByte,System.SByte,System.SByte)">
            <summary>
            Creates a matrix from the values of rows and columns
            </summary>
            <param name="r0c0">The value to assign to row 0 and column 0 of the matrix</param>
            <param name="r0c1">The value to assign to row 0 and column 1 of the matrix</param>
            <param name="r0c2">The value to assign to row 0 and column 2 of the matrix</param>
            <param name="r1c0">The value to assign to row 1 and column 0 of the matrix</param>
            <param name="r1c1">The value to assign to row 1 and column 1 of the matrix</param>
            <param name="r1c2">The value to assign to row 1 and column 2 of the matrix</param>
            <param name="r2c0">The value to assign to row 2 and column 0 of the matrix</param>
            <param name="r2c1">The value to assign to row 2 and column 1 of the matrix</param>
            <param name="r2c2">The value to assign to row 2 and column 2 of the matrix</param>
        </member>
        <member name="P:GenMathematics.Matrices.sbyte3x3.Item(System.Int32)">
            <summary>
            To access via the reference use `Unsafe.Add(ref matrix.Column0, index)` instead
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.sbyte3x3.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.sbyte3x3.Equals(GenMathematics.Matrices.sbyte3x3)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.sbyte3x3.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.sbyte3x3.CompareTo(GenMathematics.Matrices.sbyte3x3)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.sbyte3x3.ToString">
            <summary>
            Returns the object's state information as a string
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.sbyte3x3.Extract(GenMathematics.Matrices.sbyte3x3@,System.Int32,System.Int32,GenMathematics.Matrices.sbyte3x3@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.sbyte3x3.Extract(GenMathematics.Matrices.sbyte3x3@,System.Int32,System.Int32,GenMathematics.Matrices.sbyte2x3@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.sbyte3x3.Extract(GenMathematics.Matrices.sbyte3x3@,System.Int32,System.Int32,GenMathematics.Matrices.sbyte3x2@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.sbyte3x3.Extract(GenMathematics.Matrices.sbyte3x3@,System.Int32,System.Int32,GenMathematics.Matrices.sbyte2x2@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.sbyte3x3.op_Explicit(GenMathematics.Matrices.byte3x3)~GenMathematics.Matrices.sbyte3x3">
            <summary>
            Converts byte3x3 to sbyte3x3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.sbyte3x3.op_Explicit(GenMathematics.Matrices.short3x3)~GenMathematics.Matrices.sbyte3x3">
            <summary>
            Converts short3x3 to sbyte3x3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.sbyte3x3.op_Explicit(GenMathematics.Matrices.ushort3x3)~GenMathematics.Matrices.sbyte3x3">
            <summary>
            Converts ushort3x3 to sbyte3x3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.sbyte3x3.op_Explicit(GenMathematics.Matrices.int3x3)~GenMathematics.Matrices.sbyte3x3">
            <summary>
            Converts int3x3 to sbyte3x3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.sbyte3x3.op_Explicit(GenMathematics.Matrices.uint3x3)~GenMathematics.Matrices.sbyte3x3">
            <summary>
            Converts uint3x3 to sbyte3x3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.sbyte3x3.op_Explicit(GenMathematics.Matrices.long3x3)~GenMathematics.Matrices.sbyte3x3">
            <summary>
            Converts long3x3 to sbyte3x3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.sbyte3x3.op_Explicit(GenMathematics.Matrices.ulong3x3)~GenMathematics.Matrices.sbyte3x3">
            <summary>
            Converts ulong3x3 to sbyte3x3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.sbyte3x3.op_Explicit(GenMathematics.Matrices.half3x3)~GenMathematics.Matrices.sbyte3x3">
            <summary>
            Converts half3x3 to sbyte3x3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.sbyte3x3.op_Explicit(GenMathematics.Matrices.float3x3)~GenMathematics.Matrices.sbyte3x3">
            <summary>
            Converts float3x3 to sbyte3x3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.sbyte3x3.op_Explicit(GenMathematics.Matrices.double3x3)~GenMathematics.Matrices.sbyte3x3">
            <summary>
            Converts double3x3 to sbyte3x3 with possible loss of information
            </summary>
        </member>
        <member name="T:GenMathematics.Matrices.sbyte3x4">
            <summary>
            Matrix of type sbyte with 3 rows and 4 columns using the column-major order
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.sbyte3x4.Column0">
            <summary>
            Matrix column with index 0
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.sbyte3x4.Column1">
            <summary>
            Matrix column with index 1
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.sbyte3x4.Column2">
            <summary>
            Matrix column with index 2
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.sbyte3x4.Column3">
            <summary>
            Matrix column with index 3
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.sbyte3x4.Row0">
            <summary>
            Matrix row with index 0
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.sbyte3x4.Row1">
            <summary>
            Matrix row with index 1
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.sbyte3x4.Row2">
            <summary>
            Matrix row with index 2
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.sbyte3x4.#ctor(GenMathematics.Vectors.sbyte3,GenMathematics.Vectors.sbyte3,GenMathematics.Vectors.sbyte3,GenMathematics.Vectors.sbyte3)">
            <summary>
            Creates a matrix from column values
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.sbyte3x4.#ctor(System.SByte,System.SByte,System.SByte,System.SByte,System.SByte,System.SByte,System.SByte,System.SByte,System.SByte,System.SByte,System.SByte,System.SByte)">
            <summary>
            Creates a matrix from the values of rows and columns
            </summary>
            <param name="r0c0">The value to assign to row 0 and column 0 of the matrix</param>
            <param name="r0c1">The value to assign to row 0 and column 1 of the matrix</param>
            <param name="r0c2">The value to assign to row 0 and column 2 of the matrix</param>
            <param name="r0c3">The value to assign to row 0 and column 3 of the matrix</param>
            <param name="r1c0">The value to assign to row 1 and column 0 of the matrix</param>
            <param name="r1c1">The value to assign to row 1 and column 1 of the matrix</param>
            <param name="r1c2">The value to assign to row 1 and column 2 of the matrix</param>
            <param name="r1c3">The value to assign to row 1 and column 3 of the matrix</param>
            <param name="r2c0">The value to assign to row 2 and column 0 of the matrix</param>
            <param name="r2c1">The value to assign to row 2 and column 1 of the matrix</param>
            <param name="r2c2">The value to assign to row 2 and column 2 of the matrix</param>
            <param name="r2c3">The value to assign to row 2 and column 3 of the matrix</param>
        </member>
        <member name="P:GenMathematics.Matrices.sbyte3x4.Item(System.Int32)">
            <summary>
            To access via the reference use `Unsafe.Add(ref matrix.Column0, index)` instead
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.sbyte3x4.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.sbyte3x4.Equals(GenMathematics.Matrices.sbyte3x4)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.sbyte3x4.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.sbyte3x4.CompareTo(GenMathematics.Matrices.sbyte3x4)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.sbyte3x4.ToString">
            <summary>
            Returns the object's state information as a string
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.sbyte3x4.Extract(GenMathematics.Matrices.sbyte3x4@,System.Int32,System.Int32,GenMathematics.Matrices.sbyte3x4@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.sbyte3x4.Extract(GenMathematics.Matrices.sbyte3x4@,System.Int32,System.Int32,GenMathematics.Matrices.sbyte2x4@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.sbyte3x4.Extract(GenMathematics.Matrices.sbyte3x4@,System.Int32,System.Int32,GenMathematics.Matrices.sbyte3x3@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.sbyte3x4.Extract(GenMathematics.Matrices.sbyte3x4@,System.Int32,System.Int32,GenMathematics.Matrices.sbyte2x3@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.sbyte3x4.Extract(GenMathematics.Matrices.sbyte3x4@,System.Int32,System.Int32,GenMathematics.Matrices.sbyte3x2@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.sbyte3x4.Extract(GenMathematics.Matrices.sbyte3x4@,System.Int32,System.Int32,GenMathematics.Matrices.sbyte2x2@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.sbyte3x4.op_Explicit(GenMathematics.Matrices.byte3x4)~GenMathematics.Matrices.sbyte3x4">
            <summary>
            Converts byte3x4 to sbyte3x4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.sbyte3x4.op_Explicit(GenMathematics.Matrices.short3x4)~GenMathematics.Matrices.sbyte3x4">
            <summary>
            Converts short3x4 to sbyte3x4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.sbyte3x4.op_Explicit(GenMathematics.Matrices.ushort3x4)~GenMathematics.Matrices.sbyte3x4">
            <summary>
            Converts ushort3x4 to sbyte3x4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.sbyte3x4.op_Explicit(GenMathematics.Matrices.int3x4)~GenMathematics.Matrices.sbyte3x4">
            <summary>
            Converts int3x4 to sbyte3x4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.sbyte3x4.op_Explicit(GenMathematics.Matrices.uint3x4)~GenMathematics.Matrices.sbyte3x4">
            <summary>
            Converts uint3x4 to sbyte3x4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.sbyte3x4.op_Explicit(GenMathematics.Matrices.long3x4)~GenMathematics.Matrices.sbyte3x4">
            <summary>
            Converts long3x4 to sbyte3x4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.sbyte3x4.op_Explicit(GenMathematics.Matrices.ulong3x4)~GenMathematics.Matrices.sbyte3x4">
            <summary>
            Converts ulong3x4 to sbyte3x4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.sbyte3x4.op_Explicit(GenMathematics.Matrices.half3x4)~GenMathematics.Matrices.sbyte3x4">
            <summary>
            Converts half3x4 to sbyte3x4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.sbyte3x4.op_Explicit(GenMathematics.Matrices.float3x4)~GenMathematics.Matrices.sbyte3x4">
            <summary>
            Converts float3x4 to sbyte3x4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.sbyte3x4.op_Explicit(GenMathematics.Matrices.double3x4)~GenMathematics.Matrices.sbyte3x4">
            <summary>
            Converts double3x4 to sbyte3x4 with possible loss of information
            </summary>
        </member>
        <member name="T:GenMathematics.Matrices.sbyte4x2">
            <summary>
            Matrix of type sbyte with 4 rows and 2 columns using the column-major order
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.sbyte4x2.Column0">
            <summary>
            Matrix column with index 0
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.sbyte4x2.Column1">
            <summary>
            Matrix column with index 1
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.sbyte4x2.Row0">
            <summary>
            Matrix row with index 0
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.sbyte4x2.Row1">
            <summary>
            Matrix row with index 1
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.sbyte4x2.Row2">
            <summary>
            Matrix row with index 2
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.sbyte4x2.Row3">
            <summary>
            Matrix row with index 3
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.sbyte4x2.#ctor(GenMathematics.Vectors.sbyte4,GenMathematics.Vectors.sbyte4)">
            <summary>
            Creates a matrix from column values
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.sbyte4x2.#ctor(System.SByte,System.SByte,System.SByte,System.SByte,System.SByte,System.SByte,System.SByte,System.SByte)">
            <summary>
            Creates a matrix from the values of rows and columns
            </summary>
            <param name="r0c0">The value to assign to row 0 and column 0 of the matrix</param>
            <param name="r0c1">The value to assign to row 0 and column 1 of the matrix</param>
            <param name="r1c0">The value to assign to row 1 and column 0 of the matrix</param>
            <param name="r1c1">The value to assign to row 1 and column 1 of the matrix</param>
            <param name="r2c0">The value to assign to row 2 and column 0 of the matrix</param>
            <param name="r2c1">The value to assign to row 2 and column 1 of the matrix</param>
            <param name="r3c0">The value to assign to row 3 and column 0 of the matrix</param>
            <param name="r3c1">The value to assign to row 3 and column 1 of the matrix</param>
        </member>
        <member name="P:GenMathematics.Matrices.sbyte4x2.Item(System.Int32)">
            <summary>
            To access via the reference use `Unsafe.Add(ref matrix.Column0, index)` instead
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.sbyte4x2.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.sbyte4x2.Equals(GenMathematics.Matrices.sbyte4x2)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.sbyte4x2.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.sbyte4x2.CompareTo(GenMathematics.Matrices.sbyte4x2)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.sbyte4x2.ToString">
            <summary>
            Returns the object's state information as a string
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.sbyte4x2.Extract(GenMathematics.Matrices.sbyte4x2,System.Int32,System.Int32,GenMathematics.Matrices.sbyte4x2@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.sbyte4x2.Extract(GenMathematics.Matrices.sbyte4x2,System.Int32,System.Int32,GenMathematics.Matrices.sbyte3x2@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.sbyte4x2.Extract(GenMathematics.Matrices.sbyte4x2,System.Int32,System.Int32,GenMathematics.Matrices.sbyte2x2@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.sbyte4x2.op_Explicit(GenMathematics.Matrices.byte4x2)~GenMathematics.Matrices.sbyte4x2">
            <summary>
            Converts byte4x2 to sbyte4x2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.sbyte4x2.op_Explicit(GenMathematics.Matrices.short4x2)~GenMathematics.Matrices.sbyte4x2">
            <summary>
            Converts short4x2 to sbyte4x2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.sbyte4x2.op_Explicit(GenMathematics.Matrices.ushort4x2)~GenMathematics.Matrices.sbyte4x2">
            <summary>
            Converts ushort4x2 to sbyte4x2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.sbyte4x2.op_Explicit(GenMathematics.Matrices.int4x2)~GenMathematics.Matrices.sbyte4x2">
            <summary>
            Converts int4x2 to sbyte4x2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.sbyte4x2.op_Explicit(GenMathematics.Matrices.uint4x2)~GenMathematics.Matrices.sbyte4x2">
            <summary>
            Converts uint4x2 to sbyte4x2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.sbyte4x2.op_Explicit(GenMathematics.Matrices.long4x2)~GenMathematics.Matrices.sbyte4x2">
            <summary>
            Converts long4x2 to sbyte4x2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.sbyte4x2.op_Explicit(GenMathematics.Matrices.ulong4x2)~GenMathematics.Matrices.sbyte4x2">
            <summary>
            Converts ulong4x2 to sbyte4x2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.sbyte4x2.op_Explicit(GenMathematics.Matrices.half4x2)~GenMathematics.Matrices.sbyte4x2">
            <summary>
            Converts half4x2 to sbyte4x2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.sbyte4x2.op_Explicit(GenMathematics.Matrices.float4x2)~GenMathematics.Matrices.sbyte4x2">
            <summary>
            Converts float4x2 to sbyte4x2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.sbyte4x2.op_Explicit(GenMathematics.Matrices.double4x2)~GenMathematics.Matrices.sbyte4x2">
            <summary>
            Converts double4x2 to sbyte4x2 with possible loss of information
            </summary>
        </member>
        <member name="T:GenMathematics.Matrices.sbyte4x3">
            <summary>
            Matrix of type sbyte with 4 rows and 3 columns using the column-major order
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.sbyte4x3.Column0">
            <summary>
            Matrix column with index 0
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.sbyte4x3.Column1">
            <summary>
            Matrix column with index 1
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.sbyte4x3.Column2">
            <summary>
            Matrix column with index 2
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.sbyte4x3.Row0">
            <summary>
            Matrix row with index 0
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.sbyte4x3.Row1">
            <summary>
            Matrix row with index 1
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.sbyte4x3.Row2">
            <summary>
            Matrix row with index 2
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.sbyte4x3.Row3">
            <summary>
            Matrix row with index 3
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.sbyte4x3.#ctor(GenMathematics.Vectors.sbyte4,GenMathematics.Vectors.sbyte4,GenMathematics.Vectors.sbyte4)">
            <summary>
            Creates a matrix from column values
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.sbyte4x3.#ctor(System.SByte,System.SByte,System.SByte,System.SByte,System.SByte,System.SByte,System.SByte,System.SByte,System.SByte,System.SByte,System.SByte,System.SByte)">
            <summary>
            Creates a matrix from the values of rows and columns
            </summary>
            <param name="r0c0">The value to assign to row 0 and column 0 of the matrix</param>
            <param name="r0c1">The value to assign to row 0 and column 1 of the matrix</param>
            <param name="r0c2">The value to assign to row 0 and column 2 of the matrix</param>
            <param name="r1c0">The value to assign to row 1 and column 0 of the matrix</param>
            <param name="r1c1">The value to assign to row 1 and column 1 of the matrix</param>
            <param name="r1c2">The value to assign to row 1 and column 2 of the matrix</param>
            <param name="r2c0">The value to assign to row 2 and column 0 of the matrix</param>
            <param name="r2c1">The value to assign to row 2 and column 1 of the matrix</param>
            <param name="r2c2">The value to assign to row 2 and column 2 of the matrix</param>
            <param name="r3c0">The value to assign to row 3 and column 0 of the matrix</param>
            <param name="r3c1">The value to assign to row 3 and column 1 of the matrix</param>
            <param name="r3c2">The value to assign to row 3 and column 2 of the matrix</param>
        </member>
        <member name="P:GenMathematics.Matrices.sbyte4x3.Item(System.Int32)">
            <summary>
            To access via the reference use `Unsafe.Add(ref matrix.Column0, index)` instead
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.sbyte4x3.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.sbyte4x3.Equals(GenMathematics.Matrices.sbyte4x3)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.sbyte4x3.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.sbyte4x3.CompareTo(GenMathematics.Matrices.sbyte4x3)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.sbyte4x3.ToString">
            <summary>
            Returns the object's state information as a string
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.sbyte4x3.Extract(GenMathematics.Matrices.sbyte4x3@,System.Int32,System.Int32,GenMathematics.Matrices.sbyte4x3@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.sbyte4x3.Extract(GenMathematics.Matrices.sbyte4x3@,System.Int32,System.Int32,GenMathematics.Matrices.sbyte3x3@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.sbyte4x3.Extract(GenMathematics.Matrices.sbyte4x3@,System.Int32,System.Int32,GenMathematics.Matrices.sbyte2x3@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.sbyte4x3.Extract(GenMathematics.Matrices.sbyte4x3@,System.Int32,System.Int32,GenMathematics.Matrices.sbyte4x2@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.sbyte4x3.Extract(GenMathematics.Matrices.sbyte4x3@,System.Int32,System.Int32,GenMathematics.Matrices.sbyte3x2@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.sbyte4x3.Extract(GenMathematics.Matrices.sbyte4x3@,System.Int32,System.Int32,GenMathematics.Matrices.sbyte2x2@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.sbyte4x3.op_Explicit(GenMathematics.Matrices.byte4x3)~GenMathematics.Matrices.sbyte4x3">
            <summary>
            Converts byte4x3 to sbyte4x3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.sbyte4x3.op_Explicit(GenMathematics.Matrices.short4x3)~GenMathematics.Matrices.sbyte4x3">
            <summary>
            Converts short4x3 to sbyte4x3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.sbyte4x3.op_Explicit(GenMathematics.Matrices.ushort4x3)~GenMathematics.Matrices.sbyte4x3">
            <summary>
            Converts ushort4x3 to sbyte4x3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.sbyte4x3.op_Explicit(GenMathematics.Matrices.int4x3)~GenMathematics.Matrices.sbyte4x3">
            <summary>
            Converts int4x3 to sbyte4x3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.sbyte4x3.op_Explicit(GenMathematics.Matrices.uint4x3)~GenMathematics.Matrices.sbyte4x3">
            <summary>
            Converts uint4x3 to sbyte4x3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.sbyte4x3.op_Explicit(GenMathematics.Matrices.long4x3)~GenMathematics.Matrices.sbyte4x3">
            <summary>
            Converts long4x3 to sbyte4x3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.sbyte4x3.op_Explicit(GenMathematics.Matrices.ulong4x3)~GenMathematics.Matrices.sbyte4x3">
            <summary>
            Converts ulong4x3 to sbyte4x3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.sbyte4x3.op_Explicit(GenMathematics.Matrices.half4x3)~GenMathematics.Matrices.sbyte4x3">
            <summary>
            Converts half4x3 to sbyte4x3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.sbyte4x3.op_Explicit(GenMathematics.Matrices.float4x3)~GenMathematics.Matrices.sbyte4x3">
            <summary>
            Converts float4x3 to sbyte4x3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.sbyte4x3.op_Explicit(GenMathematics.Matrices.double4x3)~GenMathematics.Matrices.sbyte4x3">
            <summary>
            Converts double4x3 to sbyte4x3 with possible loss of information
            </summary>
        </member>
        <member name="T:GenMathematics.Matrices.sbyte4x4">
            <summary>
            Matrix of type sbyte with 4 rows and 4 columns using the column-major order
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.sbyte4x4.Column0">
            <summary>
            Matrix column with index 0
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.sbyte4x4.Column1">
            <summary>
            Matrix column with index 1
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.sbyte4x4.Column2">
            <summary>
            Matrix column with index 2
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.sbyte4x4.Column3">
            <summary>
            Matrix column with index 3
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.sbyte4x4.Row0">
            <summary>
            Matrix row with index 0
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.sbyte4x4.Row1">
            <summary>
            Matrix row with index 1
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.sbyte4x4.Row2">
            <summary>
            Matrix row with index 2
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.sbyte4x4.Row3">
            <summary>
            Matrix row with index 3
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.sbyte4x4.#ctor(GenMathematics.Vectors.sbyte4,GenMathematics.Vectors.sbyte4,GenMathematics.Vectors.sbyte4,GenMathematics.Vectors.sbyte4)">
            <summary>
            Creates a matrix from column values
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.sbyte4x4.#ctor(System.SByte,System.SByte,System.SByte,System.SByte,System.SByte,System.SByte,System.SByte,System.SByte,System.SByte,System.SByte,System.SByte,System.SByte,System.SByte,System.SByte,System.SByte,System.SByte)">
            <summary>
            Creates a matrix from the values of rows and columns
            </summary>
            <param name="r0c0">The value to assign to row 0 and column 0 of the matrix</param>
            <param name="r0c1">The value to assign to row 0 and column 1 of the matrix</param>
            <param name="r0c2">The value to assign to row 0 and column 2 of the matrix</param>
            <param name="r0c3">The value to assign to row 0 and column 3 of the matrix</param>
            <param name="r1c0">The value to assign to row 1 and column 0 of the matrix</param>
            <param name="r1c1">The value to assign to row 1 and column 1 of the matrix</param>
            <param name="r1c2">The value to assign to row 1 and column 2 of the matrix</param>
            <param name="r1c3">The value to assign to row 1 and column 3 of the matrix</param>
            <param name="r2c0">The value to assign to row 2 and column 0 of the matrix</param>
            <param name="r2c1">The value to assign to row 2 and column 1 of the matrix</param>
            <param name="r2c2">The value to assign to row 2 and column 2 of the matrix</param>
            <param name="r2c3">The value to assign to row 2 and column 3 of the matrix</param>
            <param name="r3c0">The value to assign to row 3 and column 0 of the matrix</param>
            <param name="r3c1">The value to assign to row 3 and column 1 of the matrix</param>
            <param name="r3c2">The value to assign to row 3 and column 2 of the matrix</param>
            <param name="r3c3">The value to assign to row 3 and column 3 of the matrix</param>
        </member>
        <member name="P:GenMathematics.Matrices.sbyte4x4.Item(System.Int32)">
            <summary>
            To access via the reference use `Unsafe.Add(ref matrix.Column0, index)` instead
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.sbyte4x4.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.sbyte4x4.Equals(GenMathematics.Matrices.sbyte4x4)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.sbyte4x4.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.sbyte4x4.CompareTo(GenMathematics.Matrices.sbyte4x4)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.sbyte4x4.ToString">
            <summary>
            Returns the object's state information as a string
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.sbyte4x4.Extract(GenMathematics.Matrices.sbyte4x4@,System.Int32,System.Int32,GenMathematics.Matrices.sbyte4x4@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.sbyte4x4.Extract(GenMathematics.Matrices.sbyte4x4@,System.Int32,System.Int32,GenMathematics.Matrices.sbyte3x4@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.sbyte4x4.Extract(GenMathematics.Matrices.sbyte4x4@,System.Int32,System.Int32,GenMathematics.Matrices.sbyte2x4@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.sbyte4x4.Extract(GenMathematics.Matrices.sbyte4x4@,System.Int32,System.Int32,GenMathematics.Matrices.sbyte4x3@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.sbyte4x4.Extract(GenMathematics.Matrices.sbyte4x4@,System.Int32,System.Int32,GenMathematics.Matrices.sbyte3x3@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.sbyte4x4.Extract(GenMathematics.Matrices.sbyte4x4@,System.Int32,System.Int32,GenMathematics.Matrices.sbyte2x3@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.sbyte4x4.Extract(GenMathematics.Matrices.sbyte4x4@,System.Int32,System.Int32,GenMathematics.Matrices.sbyte4x2@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.sbyte4x4.Extract(GenMathematics.Matrices.sbyte4x4@,System.Int32,System.Int32,GenMathematics.Matrices.sbyte3x2@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.sbyte4x4.Extract(GenMathematics.Matrices.sbyte4x4@,System.Int32,System.Int32,GenMathematics.Matrices.sbyte2x2@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.sbyte4x4.op_Explicit(GenMathematics.Matrices.byte4x4)~GenMathematics.Matrices.sbyte4x4">
            <summary>
            Converts byte4x4 to sbyte4x4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.sbyte4x4.op_Explicit(GenMathematics.Matrices.short4x4)~GenMathematics.Matrices.sbyte4x4">
            <summary>
            Converts short4x4 to sbyte4x4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.sbyte4x4.op_Explicit(GenMathematics.Matrices.ushort4x4)~GenMathematics.Matrices.sbyte4x4">
            <summary>
            Converts ushort4x4 to sbyte4x4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.sbyte4x4.op_Explicit(GenMathematics.Matrices.int4x4)~GenMathematics.Matrices.sbyte4x4">
            <summary>
            Converts int4x4 to sbyte4x4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.sbyte4x4.op_Explicit(GenMathematics.Matrices.uint4x4)~GenMathematics.Matrices.sbyte4x4">
            <summary>
            Converts uint4x4 to sbyte4x4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.sbyte4x4.op_Explicit(GenMathematics.Matrices.long4x4)~GenMathematics.Matrices.sbyte4x4">
            <summary>
            Converts long4x4 to sbyte4x4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.sbyte4x4.op_Explicit(GenMathematics.Matrices.ulong4x4)~GenMathematics.Matrices.sbyte4x4">
            <summary>
            Converts ulong4x4 to sbyte4x4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.sbyte4x4.op_Explicit(GenMathematics.Matrices.half4x4)~GenMathematics.Matrices.sbyte4x4">
            <summary>
            Converts half4x4 to sbyte4x4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.sbyte4x4.op_Explicit(GenMathematics.Matrices.float4x4)~GenMathematics.Matrices.sbyte4x4">
            <summary>
            Converts float4x4 to sbyte4x4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.sbyte4x4.op_Explicit(GenMathematics.Matrices.double4x4)~GenMathematics.Matrices.sbyte4x4">
            <summary>
            Converts double4x4 to sbyte4x4 with possible loss of information
            </summary>
        </member>
        <member name="T:GenMathematics.Matrices.short2x2">
            <summary>
            Matrix of type short with 2 rows and 2 columns using the column-major order
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.short2x2.Column0">
            <summary>
            Matrix column with index 0
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.short2x2.Column1">
            <summary>
            Matrix column with index 1
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.short2x2.Row0">
            <summary>
            Matrix row with index 0
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.short2x2.Row1">
            <summary>
            Matrix row with index 1
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.short2x2.#ctor(GenMathematics.Vectors.short2,GenMathematics.Vectors.short2)">
            <summary>
            Creates a matrix from column values
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.short2x2.#ctor(System.Int16,System.Int16,System.Int16,System.Int16)">
            <summary>
            Creates a matrix from the values of rows and columns
            </summary>
            <param name="r0c0">The value to assign to row 0 and column 0 of the matrix</param>
            <param name="r0c1">The value to assign to row 0 and column 1 of the matrix</param>
            <param name="r1c0">The value to assign to row 1 and column 0 of the matrix</param>
            <param name="r1c1">The value to assign to row 1 and column 1 of the matrix</param>
        </member>
        <member name="P:GenMathematics.Matrices.short2x2.Item(System.Int32)">
            <summary>
            To access via the reference use `Unsafe.Add(ref matrix.Column0, index)` instead
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.short2x2.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.short2x2.Equals(GenMathematics.Matrices.short2x2)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.short2x2.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.short2x2.CompareTo(GenMathematics.Matrices.short2x2)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.short2x2.ToString">
            <summary>
            Returns the object's state information as a string
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.short2x2.Extract(GenMathematics.Matrices.short2x2,System.Int32,System.Int32,GenMathematics.Matrices.short2x2@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.short2x2.op_Explicit(GenMathematics.Matrices.ushort2x2)~GenMathematics.Matrices.short2x2">
            <summary>
            Converts ushort2x2 to short2x2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.short2x2.op_Explicit(GenMathematics.Matrices.int2x2)~GenMathematics.Matrices.short2x2">
            <summary>
            Converts int2x2 to short2x2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.short2x2.op_Explicit(GenMathematics.Matrices.uint2x2)~GenMathematics.Matrices.short2x2">
            <summary>
            Converts uint2x2 to short2x2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.short2x2.op_Explicit(GenMathematics.Matrices.long2x2)~GenMathematics.Matrices.short2x2">
            <summary>
            Converts long2x2 to short2x2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.short2x2.op_Explicit(GenMathematics.Matrices.ulong2x2)~GenMathematics.Matrices.short2x2">
            <summary>
            Converts ulong2x2 to short2x2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.short2x2.op_Explicit(GenMathematics.Matrices.half2x2)~GenMathematics.Matrices.short2x2">
            <summary>
            Converts half2x2 to short2x2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.short2x2.op_Explicit(GenMathematics.Matrices.float2x2)~GenMathematics.Matrices.short2x2">
            <summary>
            Converts float2x2 to short2x2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.short2x2.op_Explicit(GenMathematics.Matrices.double2x2)~GenMathematics.Matrices.short2x2">
            <summary>
            Converts double2x2 to short2x2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.short2x2.op_Implicit(GenMathematics.Matrices.byte2x2)~GenMathematics.Matrices.short2x2">
            <summary>
            Converts byte2x2 to short2x2
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.short2x2.op_Implicit(GenMathematics.Matrices.sbyte2x2)~GenMathematics.Matrices.short2x2">
            <summary>
            Converts sbyte2x2 to short2x2
            </summary>
        </member>
        <member name="T:GenMathematics.Matrices.short2x3">
            <summary>
            Matrix of type short with 2 rows and 3 columns using the column-major order
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.short2x3.Column0">
            <summary>
            Matrix column with index 0
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.short2x3.Column1">
            <summary>
            Matrix column with index 1
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.short2x3.Column2">
            <summary>
            Matrix column with index 2
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.short2x3.Row0">
            <summary>
            Matrix row with index 0
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.short2x3.Row1">
            <summary>
            Matrix row with index 1
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.short2x3.#ctor(GenMathematics.Vectors.short2,GenMathematics.Vectors.short2,GenMathematics.Vectors.short2)">
            <summary>
            Creates a matrix from column values
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.short2x3.#ctor(System.Int16,System.Int16,System.Int16,System.Int16,System.Int16,System.Int16)">
            <summary>
            Creates a matrix from the values of rows and columns
            </summary>
            <param name="r0c0">The value to assign to row 0 and column 0 of the matrix</param>
            <param name="r0c1">The value to assign to row 0 and column 1 of the matrix</param>
            <param name="r0c2">The value to assign to row 0 and column 2 of the matrix</param>
            <param name="r1c0">The value to assign to row 1 and column 0 of the matrix</param>
            <param name="r1c1">The value to assign to row 1 and column 1 of the matrix</param>
            <param name="r1c2">The value to assign to row 1 and column 2 of the matrix</param>
        </member>
        <member name="P:GenMathematics.Matrices.short2x3.Item(System.Int32)">
            <summary>
            To access via the reference use `Unsafe.Add(ref matrix.Column0, index)` instead
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.short2x3.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.short2x3.Equals(GenMathematics.Matrices.short2x3)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.short2x3.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.short2x3.CompareTo(GenMathematics.Matrices.short2x3)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.short2x3.ToString">
            <summary>
            Returns the object's state information as a string
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.short2x3.Extract(GenMathematics.Matrices.short2x3@,System.Int32,System.Int32,GenMathematics.Matrices.short2x3@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.short2x3.Extract(GenMathematics.Matrices.short2x3@,System.Int32,System.Int32,GenMathematics.Matrices.short2x2@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.short2x3.op_Explicit(GenMathematics.Matrices.ushort2x3)~GenMathematics.Matrices.short2x3">
            <summary>
            Converts ushort2x3 to short2x3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.short2x3.op_Explicit(GenMathematics.Matrices.int2x3)~GenMathematics.Matrices.short2x3">
            <summary>
            Converts int2x3 to short2x3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.short2x3.op_Explicit(GenMathematics.Matrices.uint2x3)~GenMathematics.Matrices.short2x3">
            <summary>
            Converts uint2x3 to short2x3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.short2x3.op_Explicit(GenMathematics.Matrices.long2x3)~GenMathematics.Matrices.short2x3">
            <summary>
            Converts long2x3 to short2x3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.short2x3.op_Explicit(GenMathematics.Matrices.ulong2x3)~GenMathematics.Matrices.short2x3">
            <summary>
            Converts ulong2x3 to short2x3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.short2x3.op_Explicit(GenMathematics.Matrices.half2x3)~GenMathematics.Matrices.short2x3">
            <summary>
            Converts half2x3 to short2x3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.short2x3.op_Explicit(GenMathematics.Matrices.float2x3)~GenMathematics.Matrices.short2x3">
            <summary>
            Converts float2x3 to short2x3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.short2x3.op_Explicit(GenMathematics.Matrices.double2x3)~GenMathematics.Matrices.short2x3">
            <summary>
            Converts double2x3 to short2x3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.short2x3.op_Implicit(GenMathematics.Matrices.byte2x3)~GenMathematics.Matrices.short2x3">
            <summary>
            Converts byte2x3 to short2x3
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.short2x3.op_Implicit(GenMathematics.Matrices.sbyte2x3)~GenMathematics.Matrices.short2x3">
            <summary>
            Converts sbyte2x3 to short2x3
            </summary>
        </member>
        <member name="T:GenMathematics.Matrices.short2x4">
            <summary>
            Matrix of type short with 2 rows and 4 columns using the column-major order
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.short2x4.Column0">
            <summary>
            Matrix column with index 0
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.short2x4.Column1">
            <summary>
            Matrix column with index 1
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.short2x4.Column2">
            <summary>
            Matrix column with index 2
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.short2x4.Column3">
            <summary>
            Matrix column with index 3
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.short2x4.Row0">
            <summary>
            Matrix row with index 0
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.short2x4.Row1">
            <summary>
            Matrix row with index 1
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.short2x4.#ctor(GenMathematics.Vectors.short2,GenMathematics.Vectors.short2,GenMathematics.Vectors.short2,GenMathematics.Vectors.short2)">
            <summary>
            Creates a matrix from column values
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.short2x4.#ctor(System.Int16,System.Int16,System.Int16,System.Int16,System.Int16,System.Int16,System.Int16,System.Int16)">
            <summary>
            Creates a matrix from the values of rows and columns
            </summary>
            <param name="r0c0">The value to assign to row 0 and column 0 of the matrix</param>
            <param name="r0c1">The value to assign to row 0 and column 1 of the matrix</param>
            <param name="r0c2">The value to assign to row 0 and column 2 of the matrix</param>
            <param name="r0c3">The value to assign to row 0 and column 3 of the matrix</param>
            <param name="r1c0">The value to assign to row 1 and column 0 of the matrix</param>
            <param name="r1c1">The value to assign to row 1 and column 1 of the matrix</param>
            <param name="r1c2">The value to assign to row 1 and column 2 of the matrix</param>
            <param name="r1c3">The value to assign to row 1 and column 3 of the matrix</param>
        </member>
        <member name="P:GenMathematics.Matrices.short2x4.Item(System.Int32)">
            <summary>
            To access via the reference use `Unsafe.Add(ref matrix.Column0, index)` instead
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.short2x4.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.short2x4.Equals(GenMathematics.Matrices.short2x4)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.short2x4.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.short2x4.CompareTo(GenMathematics.Matrices.short2x4)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.short2x4.ToString">
            <summary>
            Returns the object's state information as a string
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.short2x4.Extract(GenMathematics.Matrices.short2x4@,System.Int32,System.Int32,GenMathematics.Matrices.short2x4@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.short2x4.Extract(GenMathematics.Matrices.short2x4@,System.Int32,System.Int32,GenMathematics.Matrices.short2x3@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.short2x4.Extract(GenMathematics.Matrices.short2x4@,System.Int32,System.Int32,GenMathematics.Matrices.short2x2@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.short2x4.op_Explicit(GenMathematics.Matrices.ushort2x4)~GenMathematics.Matrices.short2x4">
            <summary>
            Converts ushort2x4 to short2x4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.short2x4.op_Explicit(GenMathematics.Matrices.int2x4)~GenMathematics.Matrices.short2x4">
            <summary>
            Converts int2x4 to short2x4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.short2x4.op_Explicit(GenMathematics.Matrices.uint2x4)~GenMathematics.Matrices.short2x4">
            <summary>
            Converts uint2x4 to short2x4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.short2x4.op_Explicit(GenMathematics.Matrices.long2x4)~GenMathematics.Matrices.short2x4">
            <summary>
            Converts long2x4 to short2x4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.short2x4.op_Explicit(GenMathematics.Matrices.ulong2x4)~GenMathematics.Matrices.short2x4">
            <summary>
            Converts ulong2x4 to short2x4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.short2x4.op_Explicit(GenMathematics.Matrices.half2x4)~GenMathematics.Matrices.short2x4">
            <summary>
            Converts half2x4 to short2x4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.short2x4.op_Explicit(GenMathematics.Matrices.float2x4)~GenMathematics.Matrices.short2x4">
            <summary>
            Converts float2x4 to short2x4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.short2x4.op_Explicit(GenMathematics.Matrices.double2x4)~GenMathematics.Matrices.short2x4">
            <summary>
            Converts double2x4 to short2x4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.short2x4.op_Implicit(GenMathematics.Matrices.byte2x4)~GenMathematics.Matrices.short2x4">
            <summary>
            Converts byte2x4 to short2x4
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.short2x4.op_Implicit(GenMathematics.Matrices.sbyte2x4)~GenMathematics.Matrices.short2x4">
            <summary>
            Converts sbyte2x4 to short2x4
            </summary>
        </member>
        <member name="T:GenMathematics.Matrices.short3x2">
            <summary>
            Matrix of type short with 3 rows and 2 columns using the column-major order
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.short3x2.Column0">
            <summary>
            Matrix column with index 0
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.short3x2.Column1">
            <summary>
            Matrix column with index 1
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.short3x2.Row0">
            <summary>
            Matrix row with index 0
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.short3x2.Row1">
            <summary>
            Matrix row with index 1
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.short3x2.Row2">
            <summary>
            Matrix row with index 2
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.short3x2.#ctor(GenMathematics.Vectors.short3,GenMathematics.Vectors.short3)">
            <summary>
            Creates a matrix from column values
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.short3x2.#ctor(System.Int16,System.Int16,System.Int16,System.Int16,System.Int16,System.Int16)">
            <summary>
            Creates a matrix from the values of rows and columns
            </summary>
            <param name="r0c0">The value to assign to row 0 and column 0 of the matrix</param>
            <param name="r0c1">The value to assign to row 0 and column 1 of the matrix</param>
            <param name="r1c0">The value to assign to row 1 and column 0 of the matrix</param>
            <param name="r1c1">The value to assign to row 1 and column 1 of the matrix</param>
            <param name="r2c0">The value to assign to row 2 and column 0 of the matrix</param>
            <param name="r2c1">The value to assign to row 2 and column 1 of the matrix</param>
        </member>
        <member name="P:GenMathematics.Matrices.short3x2.Item(System.Int32)">
            <summary>
            To access via the reference use `Unsafe.Add(ref matrix.Column0, index)` instead
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.short3x2.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.short3x2.Equals(GenMathematics.Matrices.short3x2)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.short3x2.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.short3x2.CompareTo(GenMathematics.Matrices.short3x2)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.short3x2.ToString">
            <summary>
            Returns the object's state information as a string
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.short3x2.Extract(GenMathematics.Matrices.short3x2@,System.Int32,System.Int32,GenMathematics.Matrices.short3x2@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.short3x2.Extract(GenMathematics.Matrices.short3x2@,System.Int32,System.Int32,GenMathematics.Matrices.short2x2@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.short3x2.op_Explicit(GenMathematics.Matrices.ushort3x2)~GenMathematics.Matrices.short3x2">
            <summary>
            Converts ushort3x2 to short3x2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.short3x2.op_Explicit(GenMathematics.Matrices.int3x2)~GenMathematics.Matrices.short3x2">
            <summary>
            Converts int3x2 to short3x2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.short3x2.op_Explicit(GenMathematics.Matrices.uint3x2)~GenMathematics.Matrices.short3x2">
            <summary>
            Converts uint3x2 to short3x2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.short3x2.op_Explicit(GenMathematics.Matrices.long3x2)~GenMathematics.Matrices.short3x2">
            <summary>
            Converts long3x2 to short3x2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.short3x2.op_Explicit(GenMathematics.Matrices.ulong3x2)~GenMathematics.Matrices.short3x2">
            <summary>
            Converts ulong3x2 to short3x2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.short3x2.op_Explicit(GenMathematics.Matrices.half3x2)~GenMathematics.Matrices.short3x2">
            <summary>
            Converts half3x2 to short3x2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.short3x2.op_Explicit(GenMathematics.Matrices.float3x2)~GenMathematics.Matrices.short3x2">
            <summary>
            Converts float3x2 to short3x2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.short3x2.op_Explicit(GenMathematics.Matrices.double3x2)~GenMathematics.Matrices.short3x2">
            <summary>
            Converts double3x2 to short3x2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.short3x2.op_Implicit(GenMathematics.Matrices.byte3x2)~GenMathematics.Matrices.short3x2">
            <summary>
            Converts byte3x2 to short3x2
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.short3x2.op_Implicit(GenMathematics.Matrices.sbyte3x2)~GenMathematics.Matrices.short3x2">
            <summary>
            Converts sbyte3x2 to short3x2
            </summary>
        </member>
        <member name="T:GenMathematics.Matrices.short3x3">
            <summary>
            Matrix of type short with 3 rows and 3 columns using the column-major order
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.short3x3.Column0">
            <summary>
            Matrix column with index 0
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.short3x3.Column1">
            <summary>
            Matrix column with index 1
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.short3x3.Column2">
            <summary>
            Matrix column with index 2
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.short3x3.Row0">
            <summary>
            Matrix row with index 0
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.short3x3.Row1">
            <summary>
            Matrix row with index 1
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.short3x3.Row2">
            <summary>
            Matrix row with index 2
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.short3x3.#ctor(GenMathematics.Vectors.short3,GenMathematics.Vectors.short3,GenMathematics.Vectors.short3)">
            <summary>
            Creates a matrix from column values
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.short3x3.#ctor(System.Int16,System.Int16,System.Int16,System.Int16,System.Int16,System.Int16,System.Int16,System.Int16,System.Int16)">
            <summary>
            Creates a matrix from the values of rows and columns
            </summary>
            <param name="r0c0">The value to assign to row 0 and column 0 of the matrix</param>
            <param name="r0c1">The value to assign to row 0 and column 1 of the matrix</param>
            <param name="r0c2">The value to assign to row 0 and column 2 of the matrix</param>
            <param name="r1c0">The value to assign to row 1 and column 0 of the matrix</param>
            <param name="r1c1">The value to assign to row 1 and column 1 of the matrix</param>
            <param name="r1c2">The value to assign to row 1 and column 2 of the matrix</param>
            <param name="r2c0">The value to assign to row 2 and column 0 of the matrix</param>
            <param name="r2c1">The value to assign to row 2 and column 1 of the matrix</param>
            <param name="r2c2">The value to assign to row 2 and column 2 of the matrix</param>
        </member>
        <member name="P:GenMathematics.Matrices.short3x3.Item(System.Int32)">
            <summary>
            To access via the reference use `Unsafe.Add(ref matrix.Column0, index)` instead
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.short3x3.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.short3x3.Equals(GenMathematics.Matrices.short3x3)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.short3x3.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.short3x3.CompareTo(GenMathematics.Matrices.short3x3)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.short3x3.ToString">
            <summary>
            Returns the object's state information as a string
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.short3x3.Extract(GenMathematics.Matrices.short3x3@,System.Int32,System.Int32,GenMathematics.Matrices.short3x3@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.short3x3.Extract(GenMathematics.Matrices.short3x3@,System.Int32,System.Int32,GenMathematics.Matrices.short2x3@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.short3x3.Extract(GenMathematics.Matrices.short3x3@,System.Int32,System.Int32,GenMathematics.Matrices.short3x2@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.short3x3.Extract(GenMathematics.Matrices.short3x3@,System.Int32,System.Int32,GenMathematics.Matrices.short2x2@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.short3x3.op_Explicit(GenMathematics.Matrices.ushort3x3)~GenMathematics.Matrices.short3x3">
            <summary>
            Converts ushort3x3 to short3x3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.short3x3.op_Explicit(GenMathematics.Matrices.int3x3)~GenMathematics.Matrices.short3x3">
            <summary>
            Converts int3x3 to short3x3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.short3x3.op_Explicit(GenMathematics.Matrices.uint3x3)~GenMathematics.Matrices.short3x3">
            <summary>
            Converts uint3x3 to short3x3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.short3x3.op_Explicit(GenMathematics.Matrices.long3x3)~GenMathematics.Matrices.short3x3">
            <summary>
            Converts long3x3 to short3x3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.short3x3.op_Explicit(GenMathematics.Matrices.ulong3x3)~GenMathematics.Matrices.short3x3">
            <summary>
            Converts ulong3x3 to short3x3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.short3x3.op_Explicit(GenMathematics.Matrices.half3x3)~GenMathematics.Matrices.short3x3">
            <summary>
            Converts half3x3 to short3x3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.short3x3.op_Explicit(GenMathematics.Matrices.float3x3)~GenMathematics.Matrices.short3x3">
            <summary>
            Converts float3x3 to short3x3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.short3x3.op_Explicit(GenMathematics.Matrices.double3x3)~GenMathematics.Matrices.short3x3">
            <summary>
            Converts double3x3 to short3x3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.short3x3.op_Implicit(GenMathematics.Matrices.byte3x3)~GenMathematics.Matrices.short3x3">
            <summary>
            Converts byte3x3 to short3x3
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.short3x3.op_Implicit(GenMathematics.Matrices.sbyte3x3)~GenMathematics.Matrices.short3x3">
            <summary>
            Converts sbyte3x3 to short3x3
            </summary>
        </member>
        <member name="T:GenMathematics.Matrices.short3x4">
            <summary>
            Matrix of type short with 3 rows and 4 columns using the column-major order
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.short3x4.Column0">
            <summary>
            Matrix column with index 0
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.short3x4.Column1">
            <summary>
            Matrix column with index 1
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.short3x4.Column2">
            <summary>
            Matrix column with index 2
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.short3x4.Column3">
            <summary>
            Matrix column with index 3
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.short3x4.Row0">
            <summary>
            Matrix row with index 0
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.short3x4.Row1">
            <summary>
            Matrix row with index 1
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.short3x4.Row2">
            <summary>
            Matrix row with index 2
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.short3x4.#ctor(GenMathematics.Vectors.short3,GenMathematics.Vectors.short3,GenMathematics.Vectors.short3,GenMathematics.Vectors.short3)">
            <summary>
            Creates a matrix from column values
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.short3x4.#ctor(System.Int16,System.Int16,System.Int16,System.Int16,System.Int16,System.Int16,System.Int16,System.Int16,System.Int16,System.Int16,System.Int16,System.Int16)">
            <summary>
            Creates a matrix from the values of rows and columns
            </summary>
            <param name="r0c0">The value to assign to row 0 and column 0 of the matrix</param>
            <param name="r0c1">The value to assign to row 0 and column 1 of the matrix</param>
            <param name="r0c2">The value to assign to row 0 and column 2 of the matrix</param>
            <param name="r0c3">The value to assign to row 0 and column 3 of the matrix</param>
            <param name="r1c0">The value to assign to row 1 and column 0 of the matrix</param>
            <param name="r1c1">The value to assign to row 1 and column 1 of the matrix</param>
            <param name="r1c2">The value to assign to row 1 and column 2 of the matrix</param>
            <param name="r1c3">The value to assign to row 1 and column 3 of the matrix</param>
            <param name="r2c0">The value to assign to row 2 and column 0 of the matrix</param>
            <param name="r2c1">The value to assign to row 2 and column 1 of the matrix</param>
            <param name="r2c2">The value to assign to row 2 and column 2 of the matrix</param>
            <param name="r2c3">The value to assign to row 2 and column 3 of the matrix</param>
        </member>
        <member name="P:GenMathematics.Matrices.short3x4.Item(System.Int32)">
            <summary>
            To access via the reference use `Unsafe.Add(ref matrix.Column0, index)` instead
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.short3x4.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.short3x4.Equals(GenMathematics.Matrices.short3x4)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.short3x4.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.short3x4.CompareTo(GenMathematics.Matrices.short3x4)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.short3x4.ToString">
            <summary>
            Returns the object's state information as a string
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.short3x4.Extract(GenMathematics.Matrices.short3x4@,System.Int32,System.Int32,GenMathematics.Matrices.short3x4@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.short3x4.Extract(GenMathematics.Matrices.short3x4@,System.Int32,System.Int32,GenMathematics.Matrices.short2x4@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.short3x4.Extract(GenMathematics.Matrices.short3x4@,System.Int32,System.Int32,GenMathematics.Matrices.short3x3@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.short3x4.Extract(GenMathematics.Matrices.short3x4@,System.Int32,System.Int32,GenMathematics.Matrices.short2x3@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.short3x4.Extract(GenMathematics.Matrices.short3x4@,System.Int32,System.Int32,GenMathematics.Matrices.short3x2@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.short3x4.Extract(GenMathematics.Matrices.short3x4@,System.Int32,System.Int32,GenMathematics.Matrices.short2x2@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.short3x4.op_Explicit(GenMathematics.Matrices.ushort3x4)~GenMathematics.Matrices.short3x4">
            <summary>
            Converts ushort3x4 to short3x4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.short3x4.op_Explicit(GenMathematics.Matrices.int3x4)~GenMathematics.Matrices.short3x4">
            <summary>
            Converts int3x4 to short3x4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.short3x4.op_Explicit(GenMathematics.Matrices.uint3x4)~GenMathematics.Matrices.short3x4">
            <summary>
            Converts uint3x4 to short3x4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.short3x4.op_Explicit(GenMathematics.Matrices.long3x4)~GenMathematics.Matrices.short3x4">
            <summary>
            Converts long3x4 to short3x4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.short3x4.op_Explicit(GenMathematics.Matrices.ulong3x4)~GenMathematics.Matrices.short3x4">
            <summary>
            Converts ulong3x4 to short3x4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.short3x4.op_Explicit(GenMathematics.Matrices.half3x4)~GenMathematics.Matrices.short3x4">
            <summary>
            Converts half3x4 to short3x4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.short3x4.op_Explicit(GenMathematics.Matrices.float3x4)~GenMathematics.Matrices.short3x4">
            <summary>
            Converts float3x4 to short3x4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.short3x4.op_Explicit(GenMathematics.Matrices.double3x4)~GenMathematics.Matrices.short3x4">
            <summary>
            Converts double3x4 to short3x4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.short3x4.op_Implicit(GenMathematics.Matrices.byte3x4)~GenMathematics.Matrices.short3x4">
            <summary>
            Converts byte3x4 to short3x4
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.short3x4.op_Implicit(GenMathematics.Matrices.sbyte3x4)~GenMathematics.Matrices.short3x4">
            <summary>
            Converts sbyte3x4 to short3x4
            </summary>
        </member>
        <member name="T:GenMathematics.Matrices.short4x2">
            <summary>
            Matrix of type short with 4 rows and 2 columns using the column-major order
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.short4x2.Column0">
            <summary>
            Matrix column with index 0
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.short4x2.Column1">
            <summary>
            Matrix column with index 1
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.short4x2.Row0">
            <summary>
            Matrix row with index 0
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.short4x2.Row1">
            <summary>
            Matrix row with index 1
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.short4x2.Row2">
            <summary>
            Matrix row with index 2
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.short4x2.Row3">
            <summary>
            Matrix row with index 3
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.short4x2.#ctor(GenMathematics.Vectors.short4,GenMathematics.Vectors.short4)">
            <summary>
            Creates a matrix from column values
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.short4x2.#ctor(System.Int16,System.Int16,System.Int16,System.Int16,System.Int16,System.Int16,System.Int16,System.Int16)">
            <summary>
            Creates a matrix from the values of rows and columns
            </summary>
            <param name="r0c0">The value to assign to row 0 and column 0 of the matrix</param>
            <param name="r0c1">The value to assign to row 0 and column 1 of the matrix</param>
            <param name="r1c0">The value to assign to row 1 and column 0 of the matrix</param>
            <param name="r1c1">The value to assign to row 1 and column 1 of the matrix</param>
            <param name="r2c0">The value to assign to row 2 and column 0 of the matrix</param>
            <param name="r2c1">The value to assign to row 2 and column 1 of the matrix</param>
            <param name="r3c0">The value to assign to row 3 and column 0 of the matrix</param>
            <param name="r3c1">The value to assign to row 3 and column 1 of the matrix</param>
        </member>
        <member name="P:GenMathematics.Matrices.short4x2.Item(System.Int32)">
            <summary>
            To access via the reference use `Unsafe.Add(ref matrix.Column0, index)` instead
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.short4x2.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.short4x2.Equals(GenMathematics.Matrices.short4x2)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.short4x2.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.short4x2.CompareTo(GenMathematics.Matrices.short4x2)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.short4x2.ToString">
            <summary>
            Returns the object's state information as a string
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.short4x2.Extract(GenMathematics.Matrices.short4x2@,System.Int32,System.Int32,GenMathematics.Matrices.short4x2@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.short4x2.Extract(GenMathematics.Matrices.short4x2@,System.Int32,System.Int32,GenMathematics.Matrices.short3x2@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.short4x2.Extract(GenMathematics.Matrices.short4x2@,System.Int32,System.Int32,GenMathematics.Matrices.short2x2@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.short4x2.op_Explicit(GenMathematics.Matrices.ushort4x2)~GenMathematics.Matrices.short4x2">
            <summary>
            Converts ushort4x2 to short4x2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.short4x2.op_Explicit(GenMathematics.Matrices.int4x2)~GenMathematics.Matrices.short4x2">
            <summary>
            Converts int4x2 to short4x2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.short4x2.op_Explicit(GenMathematics.Matrices.uint4x2)~GenMathematics.Matrices.short4x2">
            <summary>
            Converts uint4x2 to short4x2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.short4x2.op_Explicit(GenMathematics.Matrices.long4x2)~GenMathematics.Matrices.short4x2">
            <summary>
            Converts long4x2 to short4x2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.short4x2.op_Explicit(GenMathematics.Matrices.ulong4x2)~GenMathematics.Matrices.short4x2">
            <summary>
            Converts ulong4x2 to short4x2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.short4x2.op_Explicit(GenMathematics.Matrices.half4x2)~GenMathematics.Matrices.short4x2">
            <summary>
            Converts half4x2 to short4x2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.short4x2.op_Explicit(GenMathematics.Matrices.float4x2)~GenMathematics.Matrices.short4x2">
            <summary>
            Converts float4x2 to short4x2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.short4x2.op_Explicit(GenMathematics.Matrices.double4x2)~GenMathematics.Matrices.short4x2">
            <summary>
            Converts double4x2 to short4x2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.short4x2.op_Implicit(GenMathematics.Matrices.byte4x2)~GenMathematics.Matrices.short4x2">
            <summary>
            Converts byte4x2 to short4x2
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.short4x2.op_Implicit(GenMathematics.Matrices.sbyte4x2)~GenMathematics.Matrices.short4x2">
            <summary>
            Converts sbyte4x2 to short4x2
            </summary>
        </member>
        <member name="T:GenMathematics.Matrices.short4x3">
            <summary>
            Matrix of type short with 4 rows and 3 columns using the column-major order
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.short4x3.Column0">
            <summary>
            Matrix column with index 0
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.short4x3.Column1">
            <summary>
            Matrix column with index 1
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.short4x3.Column2">
            <summary>
            Matrix column with index 2
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.short4x3.Row0">
            <summary>
            Matrix row with index 0
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.short4x3.Row1">
            <summary>
            Matrix row with index 1
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.short4x3.Row2">
            <summary>
            Matrix row with index 2
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.short4x3.Row3">
            <summary>
            Matrix row with index 3
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.short4x3.#ctor(GenMathematics.Vectors.short4,GenMathematics.Vectors.short4,GenMathematics.Vectors.short4)">
            <summary>
            Creates a matrix from column values
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.short4x3.#ctor(System.Int16,System.Int16,System.Int16,System.Int16,System.Int16,System.Int16,System.Int16,System.Int16,System.Int16,System.Int16,System.Int16,System.Int16)">
            <summary>
            Creates a matrix from the values of rows and columns
            </summary>
            <param name="r0c0">The value to assign to row 0 and column 0 of the matrix</param>
            <param name="r0c1">The value to assign to row 0 and column 1 of the matrix</param>
            <param name="r0c2">The value to assign to row 0 and column 2 of the matrix</param>
            <param name="r1c0">The value to assign to row 1 and column 0 of the matrix</param>
            <param name="r1c1">The value to assign to row 1 and column 1 of the matrix</param>
            <param name="r1c2">The value to assign to row 1 and column 2 of the matrix</param>
            <param name="r2c0">The value to assign to row 2 and column 0 of the matrix</param>
            <param name="r2c1">The value to assign to row 2 and column 1 of the matrix</param>
            <param name="r2c2">The value to assign to row 2 and column 2 of the matrix</param>
            <param name="r3c0">The value to assign to row 3 and column 0 of the matrix</param>
            <param name="r3c1">The value to assign to row 3 and column 1 of the matrix</param>
            <param name="r3c2">The value to assign to row 3 and column 2 of the matrix</param>
        </member>
        <member name="P:GenMathematics.Matrices.short4x3.Item(System.Int32)">
            <summary>
            To access via the reference use `Unsafe.Add(ref matrix.Column0, index)` instead
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.short4x3.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.short4x3.Equals(GenMathematics.Matrices.short4x3)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.short4x3.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.short4x3.CompareTo(GenMathematics.Matrices.short4x3)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.short4x3.ToString">
            <summary>
            Returns the object's state information as a string
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.short4x3.Extract(GenMathematics.Matrices.short4x3@,System.Int32,System.Int32,GenMathematics.Matrices.short4x3@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.short4x3.Extract(GenMathematics.Matrices.short4x3@,System.Int32,System.Int32,GenMathematics.Matrices.short3x3@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.short4x3.Extract(GenMathematics.Matrices.short4x3@,System.Int32,System.Int32,GenMathematics.Matrices.short2x3@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.short4x3.Extract(GenMathematics.Matrices.short4x3@,System.Int32,System.Int32,GenMathematics.Matrices.short4x2@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.short4x3.Extract(GenMathematics.Matrices.short4x3@,System.Int32,System.Int32,GenMathematics.Matrices.short3x2@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.short4x3.Extract(GenMathematics.Matrices.short4x3@,System.Int32,System.Int32,GenMathematics.Matrices.short2x2@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.short4x3.op_Explicit(GenMathematics.Matrices.ushort4x3)~GenMathematics.Matrices.short4x3">
            <summary>
            Converts ushort4x3 to short4x3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.short4x3.op_Explicit(GenMathematics.Matrices.int4x3)~GenMathematics.Matrices.short4x3">
            <summary>
            Converts int4x3 to short4x3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.short4x3.op_Explicit(GenMathematics.Matrices.uint4x3)~GenMathematics.Matrices.short4x3">
            <summary>
            Converts uint4x3 to short4x3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.short4x3.op_Explicit(GenMathematics.Matrices.long4x3)~GenMathematics.Matrices.short4x3">
            <summary>
            Converts long4x3 to short4x3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.short4x3.op_Explicit(GenMathematics.Matrices.ulong4x3)~GenMathematics.Matrices.short4x3">
            <summary>
            Converts ulong4x3 to short4x3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.short4x3.op_Explicit(GenMathematics.Matrices.half4x3)~GenMathematics.Matrices.short4x3">
            <summary>
            Converts half4x3 to short4x3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.short4x3.op_Explicit(GenMathematics.Matrices.float4x3)~GenMathematics.Matrices.short4x3">
            <summary>
            Converts float4x3 to short4x3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.short4x3.op_Explicit(GenMathematics.Matrices.double4x3)~GenMathematics.Matrices.short4x3">
            <summary>
            Converts double4x3 to short4x3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.short4x3.op_Implicit(GenMathematics.Matrices.byte4x3)~GenMathematics.Matrices.short4x3">
            <summary>
            Converts byte4x3 to short4x3
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.short4x3.op_Implicit(GenMathematics.Matrices.sbyte4x3)~GenMathematics.Matrices.short4x3">
            <summary>
            Converts sbyte4x3 to short4x3
            </summary>
        </member>
        <member name="T:GenMathematics.Matrices.short4x4">
            <summary>
            Matrix of type short with 4 rows and 4 columns using the column-major order
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.short4x4.Column0">
            <summary>
            Matrix column with index 0
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.short4x4.Column1">
            <summary>
            Matrix column with index 1
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.short4x4.Column2">
            <summary>
            Matrix column with index 2
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.short4x4.Column3">
            <summary>
            Matrix column with index 3
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.short4x4.Row0">
            <summary>
            Matrix row with index 0
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.short4x4.Row1">
            <summary>
            Matrix row with index 1
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.short4x4.Row2">
            <summary>
            Matrix row with index 2
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.short4x4.Row3">
            <summary>
            Matrix row with index 3
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.short4x4.#ctor(GenMathematics.Vectors.short4,GenMathematics.Vectors.short4,GenMathematics.Vectors.short4,GenMathematics.Vectors.short4)">
            <summary>
            Creates a matrix from column values
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.short4x4.#ctor(System.Int16,System.Int16,System.Int16,System.Int16,System.Int16,System.Int16,System.Int16,System.Int16,System.Int16,System.Int16,System.Int16,System.Int16,System.Int16,System.Int16,System.Int16,System.Int16)">
            <summary>
            Creates a matrix from the values of rows and columns
            </summary>
            <param name="r0c0">The value to assign to row 0 and column 0 of the matrix</param>
            <param name="r0c1">The value to assign to row 0 and column 1 of the matrix</param>
            <param name="r0c2">The value to assign to row 0 and column 2 of the matrix</param>
            <param name="r0c3">The value to assign to row 0 and column 3 of the matrix</param>
            <param name="r1c0">The value to assign to row 1 and column 0 of the matrix</param>
            <param name="r1c1">The value to assign to row 1 and column 1 of the matrix</param>
            <param name="r1c2">The value to assign to row 1 and column 2 of the matrix</param>
            <param name="r1c3">The value to assign to row 1 and column 3 of the matrix</param>
            <param name="r2c0">The value to assign to row 2 and column 0 of the matrix</param>
            <param name="r2c1">The value to assign to row 2 and column 1 of the matrix</param>
            <param name="r2c2">The value to assign to row 2 and column 2 of the matrix</param>
            <param name="r2c3">The value to assign to row 2 and column 3 of the matrix</param>
            <param name="r3c0">The value to assign to row 3 and column 0 of the matrix</param>
            <param name="r3c1">The value to assign to row 3 and column 1 of the matrix</param>
            <param name="r3c2">The value to assign to row 3 and column 2 of the matrix</param>
            <param name="r3c3">The value to assign to row 3 and column 3 of the matrix</param>
        </member>
        <member name="P:GenMathematics.Matrices.short4x4.Item(System.Int32)">
            <summary>
            To access via the reference use `Unsafe.Add(ref matrix.Column0, index)` instead
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.short4x4.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.short4x4.Equals(GenMathematics.Matrices.short4x4)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.short4x4.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.short4x4.CompareTo(GenMathematics.Matrices.short4x4)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.short4x4.ToString">
            <summary>
            Returns the object's state information as a string
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.short4x4.Extract(GenMathematics.Matrices.short4x4@,System.Int32,System.Int32,GenMathematics.Matrices.short4x4@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.short4x4.Extract(GenMathematics.Matrices.short4x4@,System.Int32,System.Int32,GenMathematics.Matrices.short3x4@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.short4x4.Extract(GenMathematics.Matrices.short4x4@,System.Int32,System.Int32,GenMathematics.Matrices.short2x4@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.short4x4.Extract(GenMathematics.Matrices.short4x4@,System.Int32,System.Int32,GenMathematics.Matrices.short4x3@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.short4x4.Extract(GenMathematics.Matrices.short4x4@,System.Int32,System.Int32,GenMathematics.Matrices.short3x3@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.short4x4.Extract(GenMathematics.Matrices.short4x4@,System.Int32,System.Int32,GenMathematics.Matrices.short2x3@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.short4x4.Extract(GenMathematics.Matrices.short4x4@,System.Int32,System.Int32,GenMathematics.Matrices.short4x2@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.short4x4.Extract(GenMathematics.Matrices.short4x4@,System.Int32,System.Int32,GenMathematics.Matrices.short3x2@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.short4x4.Extract(GenMathematics.Matrices.short4x4@,System.Int32,System.Int32,GenMathematics.Matrices.short2x2@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.short4x4.op_Explicit(GenMathematics.Matrices.ushort4x4)~GenMathematics.Matrices.short4x4">
            <summary>
            Converts ushort4x4 to short4x4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.short4x4.op_Explicit(GenMathematics.Matrices.int4x4)~GenMathematics.Matrices.short4x4">
            <summary>
            Converts int4x4 to short4x4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.short4x4.op_Explicit(GenMathematics.Matrices.uint4x4)~GenMathematics.Matrices.short4x4">
            <summary>
            Converts uint4x4 to short4x4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.short4x4.op_Explicit(GenMathematics.Matrices.long4x4)~GenMathematics.Matrices.short4x4">
            <summary>
            Converts long4x4 to short4x4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.short4x4.op_Explicit(GenMathematics.Matrices.ulong4x4)~GenMathematics.Matrices.short4x4">
            <summary>
            Converts ulong4x4 to short4x4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.short4x4.op_Explicit(GenMathematics.Matrices.half4x4)~GenMathematics.Matrices.short4x4">
            <summary>
            Converts half4x4 to short4x4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.short4x4.op_Explicit(GenMathematics.Matrices.float4x4)~GenMathematics.Matrices.short4x4">
            <summary>
            Converts float4x4 to short4x4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.short4x4.op_Explicit(GenMathematics.Matrices.double4x4)~GenMathematics.Matrices.short4x4">
            <summary>
            Converts double4x4 to short4x4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.short4x4.op_Implicit(GenMathematics.Matrices.byte4x4)~GenMathematics.Matrices.short4x4">
            <summary>
            Converts byte4x4 to short4x4
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.short4x4.op_Implicit(GenMathematics.Matrices.sbyte4x4)~GenMathematics.Matrices.short4x4">
            <summary>
            Converts sbyte4x4 to short4x4
            </summary>
        </member>
        <member name="T:GenMathematics.Matrices.uint2x2">
            <summary>
            Matrix of type uint with 2 rows and 2 columns using the column-major order
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.uint2x2.Column0">
            <summary>
            Matrix column with index 0
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.uint2x2.Column1">
            <summary>
            Matrix column with index 1
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.uint2x2.Row0">
            <summary>
            Matrix row with index 0
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.uint2x2.Row1">
            <summary>
            Matrix row with index 1
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint2x2.#ctor(GenMathematics.Vectors.uint2,GenMathematics.Vectors.uint2)">
            <summary>
            Creates a matrix from column values
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint2x2.#ctor(System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Creates a matrix from the values of rows and columns
            </summary>
            <param name="r0c0">The value to assign to row 0 and column 0 of the matrix</param>
            <param name="r0c1">The value to assign to row 0 and column 1 of the matrix</param>
            <param name="r1c0">The value to assign to row 1 and column 0 of the matrix</param>
            <param name="r1c1">The value to assign to row 1 and column 1 of the matrix</param>
        </member>
        <member name="P:GenMathematics.Matrices.uint2x2.Item(System.Int32)">
            <summary>
            To access via the reference use `Unsafe.Add(ref matrix.Column0, index)` instead
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint2x2.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.uint2x2.Equals(GenMathematics.Matrices.uint2x2)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.uint2x2.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.uint2x2.CompareTo(GenMathematics.Matrices.uint2x2)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.uint2x2.ToString">
            <summary>
            Returns the object's state information as a string
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint2x2.Extract(GenMathematics.Matrices.uint2x2@,System.Int32,System.Int32,GenMathematics.Matrices.uint2x2@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint2x2.Multiply(GenMathematics.Matrices.uint2x2,System.UInt32)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint2x2.Multiply(System.UInt32,GenMathematics.Matrices.uint2x2)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint2x2.Multiply(GenMathematics.Matrices.uint2x2@,System.UInt32,GenMathematics.Matrices.uint2x2@)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint2x2.Multiply(System.UInt32,GenMathematics.Matrices.uint2x2@,GenMathematics.Matrices.uint2x2@)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint2x2.Divide(GenMathematics.Matrices.uint2x2,System.UInt32)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint2x2.Divide(System.UInt32,GenMathematics.Matrices.uint2x2)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint2x2.Divide(GenMathematics.Matrices.uint2x2@,System.UInt32,GenMathematics.Matrices.uint2x2@)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint2x2.Divide(System.UInt32,GenMathematics.Matrices.uint2x2@,GenMathematics.Matrices.uint2x2@)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint2x2.op_Multiply(GenMathematics.Matrices.uint2x2,System.UInt32)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint2x2.op_Multiply(System.UInt32,GenMathematics.Matrices.uint2x2)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint2x2.op_Division(GenMathematics.Matrices.uint2x2,System.UInt32)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint2x2.op_Division(System.UInt32,GenMathematics.Matrices.uint2x2)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint2x2.op_Explicit(GenMathematics.Matrices.sbyte2x2)~GenMathematics.Matrices.uint2x2">
            <summary>
            Converts sbyte2x2 to uint2x2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint2x2.op_Explicit(GenMathematics.Matrices.short2x2)~GenMathematics.Matrices.uint2x2">
            <summary>
            Converts short2x2 to uint2x2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint2x2.op_Explicit(GenMathematics.Matrices.int2x2)~GenMathematics.Matrices.uint2x2">
            <summary>
            Converts int2x2 to uint2x2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint2x2.op_Explicit(GenMathematics.Matrices.long2x2)~GenMathematics.Matrices.uint2x2">
            <summary>
            Converts long2x2 to uint2x2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint2x2.op_Explicit(GenMathematics.Matrices.ulong2x2)~GenMathematics.Matrices.uint2x2">
            <summary>
            Converts ulong2x2 to uint2x2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint2x2.op_Explicit(GenMathematics.Matrices.half2x2)~GenMathematics.Matrices.uint2x2">
            <summary>
            Converts half2x2 to uint2x2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint2x2.op_Explicit(GenMathematics.Matrices.float2x2)~GenMathematics.Matrices.uint2x2">
            <summary>
            Converts float2x2 to uint2x2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint2x2.op_Explicit(GenMathematics.Matrices.double2x2)~GenMathematics.Matrices.uint2x2">
            <summary>
            Converts double2x2 to uint2x2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint2x2.op_Implicit(GenMathematics.Matrices.byte2x2)~GenMathematics.Matrices.uint2x2">
            <summary>
            Converts byte2x2 to uint2x2
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint2x2.op_Implicit(GenMathematics.Matrices.ushort2x2)~GenMathematics.Matrices.uint2x2">
            <summary>
            Converts ushort2x2 to uint2x2
            </summary>
        </member>
        <member name="T:GenMathematics.Matrices.uint2x3">
            <summary>
            Matrix of type uint with 2 rows and 3 columns using the column-major order
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.uint2x3.Column0">
            <summary>
            Matrix column with index 0
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.uint2x3.Column1">
            <summary>
            Matrix column with index 1
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.uint2x3.Column2">
            <summary>
            Matrix column with index 2
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.uint2x3.Row0">
            <summary>
            Matrix row with index 0
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.uint2x3.Row1">
            <summary>
            Matrix row with index 1
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint2x3.#ctor(GenMathematics.Vectors.uint2,GenMathematics.Vectors.uint2,GenMathematics.Vectors.uint2)">
            <summary>
            Creates a matrix from column values
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint2x3.#ctor(System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Creates a matrix from the values of rows and columns
            </summary>
            <param name="r0c0">The value to assign to row 0 and column 0 of the matrix</param>
            <param name="r0c1">The value to assign to row 0 and column 1 of the matrix</param>
            <param name="r0c2">The value to assign to row 0 and column 2 of the matrix</param>
            <param name="r1c0">The value to assign to row 1 and column 0 of the matrix</param>
            <param name="r1c1">The value to assign to row 1 and column 1 of the matrix</param>
            <param name="r1c2">The value to assign to row 1 and column 2 of the matrix</param>
        </member>
        <member name="P:GenMathematics.Matrices.uint2x3.Item(System.Int32)">
            <summary>
            To access via the reference use `Unsafe.Add(ref matrix.Column0, index)` instead
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint2x3.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.uint2x3.Equals(GenMathematics.Matrices.uint2x3)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.uint2x3.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.uint2x3.CompareTo(GenMathematics.Matrices.uint2x3)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.uint2x3.ToString">
            <summary>
            Returns the object's state information as a string
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint2x3.Extract(GenMathematics.Matrices.uint2x3@,System.Int32,System.Int32,GenMathematics.Matrices.uint2x3@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint2x3.Extract(GenMathematics.Matrices.uint2x3@,System.Int32,System.Int32,GenMathematics.Matrices.uint2x2@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint2x3.Multiply(GenMathematics.Matrices.uint2x3,System.UInt32)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint2x3.Multiply(System.UInt32,GenMathematics.Matrices.uint2x3)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint2x3.Multiply(GenMathematics.Matrices.uint2x3@,System.UInt32,GenMathematics.Matrices.uint2x3@)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint2x3.Multiply(System.UInt32,GenMathematics.Matrices.uint2x3@,GenMathematics.Matrices.uint2x3@)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint2x3.Divide(GenMathematics.Matrices.uint2x3,System.UInt32)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint2x3.Divide(System.UInt32,GenMathematics.Matrices.uint2x3)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint2x3.Divide(GenMathematics.Matrices.uint2x3@,System.UInt32,GenMathematics.Matrices.uint2x3@)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint2x3.Divide(System.UInt32,GenMathematics.Matrices.uint2x3@,GenMathematics.Matrices.uint2x3@)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint2x3.op_Multiply(GenMathematics.Matrices.uint2x3,System.UInt32)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint2x3.op_Multiply(System.UInt32,GenMathematics.Matrices.uint2x3)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint2x3.op_Division(GenMathematics.Matrices.uint2x3,System.UInt32)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint2x3.op_Division(System.UInt32,GenMathematics.Matrices.uint2x3)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint2x3.op_Explicit(GenMathematics.Matrices.sbyte2x3)~GenMathematics.Matrices.uint2x3">
            <summary>
            Converts sbyte2x3 to uint2x3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint2x3.op_Explicit(GenMathematics.Matrices.short2x3)~GenMathematics.Matrices.uint2x3">
            <summary>
            Converts short2x3 to uint2x3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint2x3.op_Explicit(GenMathematics.Matrices.int2x3)~GenMathematics.Matrices.uint2x3">
            <summary>
            Converts int2x3 to uint2x3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint2x3.op_Explicit(GenMathematics.Matrices.long2x3)~GenMathematics.Matrices.uint2x3">
            <summary>
            Converts long2x3 to uint2x3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint2x3.op_Explicit(GenMathematics.Matrices.ulong2x3)~GenMathematics.Matrices.uint2x3">
            <summary>
            Converts ulong2x3 to uint2x3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint2x3.op_Explicit(GenMathematics.Matrices.half2x3)~GenMathematics.Matrices.uint2x3">
            <summary>
            Converts half2x3 to uint2x3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint2x3.op_Explicit(GenMathematics.Matrices.float2x3)~GenMathematics.Matrices.uint2x3">
            <summary>
            Converts float2x3 to uint2x3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint2x3.op_Explicit(GenMathematics.Matrices.double2x3)~GenMathematics.Matrices.uint2x3">
            <summary>
            Converts double2x3 to uint2x3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint2x3.op_Implicit(GenMathematics.Matrices.byte2x3)~GenMathematics.Matrices.uint2x3">
            <summary>
            Converts byte2x3 to uint2x3
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint2x3.op_Implicit(GenMathematics.Matrices.ushort2x3)~GenMathematics.Matrices.uint2x3">
            <summary>
            Converts ushort2x3 to uint2x3
            </summary>
        </member>
        <member name="T:GenMathematics.Matrices.uint2x4">
            <summary>
            Matrix of type uint with 2 rows and 4 columns using the column-major order
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.uint2x4.Column0">
            <summary>
            Matrix column with index 0
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.uint2x4.Column1">
            <summary>
            Matrix column with index 1
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.uint2x4.Column2">
            <summary>
            Matrix column with index 2
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.uint2x4.Column3">
            <summary>
            Matrix column with index 3
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.uint2x4.Row0">
            <summary>
            Matrix row with index 0
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.uint2x4.Row1">
            <summary>
            Matrix row with index 1
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint2x4.#ctor(GenMathematics.Vectors.uint2,GenMathematics.Vectors.uint2,GenMathematics.Vectors.uint2,GenMathematics.Vectors.uint2)">
            <summary>
            Creates a matrix from column values
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint2x4.#ctor(System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Creates a matrix from the values of rows and columns
            </summary>
            <param name="r0c0">The value to assign to row 0 and column 0 of the matrix</param>
            <param name="r0c1">The value to assign to row 0 and column 1 of the matrix</param>
            <param name="r0c2">The value to assign to row 0 and column 2 of the matrix</param>
            <param name="r0c3">The value to assign to row 0 and column 3 of the matrix</param>
            <param name="r1c0">The value to assign to row 1 and column 0 of the matrix</param>
            <param name="r1c1">The value to assign to row 1 and column 1 of the matrix</param>
            <param name="r1c2">The value to assign to row 1 and column 2 of the matrix</param>
            <param name="r1c3">The value to assign to row 1 and column 3 of the matrix</param>
        </member>
        <member name="P:GenMathematics.Matrices.uint2x4.Item(System.Int32)">
            <summary>
            To access via the reference use `Unsafe.Add(ref matrix.Column0, index)` instead
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint2x4.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.uint2x4.Equals(GenMathematics.Matrices.uint2x4)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.uint2x4.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.uint2x4.CompareTo(GenMathematics.Matrices.uint2x4)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.uint2x4.ToString">
            <summary>
            Returns the object's state information as a string
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint2x4.Extract(GenMathematics.Matrices.uint2x4@,System.Int32,System.Int32,GenMathematics.Matrices.uint2x4@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint2x4.Extract(GenMathematics.Matrices.uint2x4@,System.Int32,System.Int32,GenMathematics.Matrices.uint2x3@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint2x4.Extract(GenMathematics.Matrices.uint2x4@,System.Int32,System.Int32,GenMathematics.Matrices.uint2x2@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint2x4.Multiply(GenMathematics.Matrices.uint2x4,System.UInt32)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint2x4.Multiply(System.UInt32,GenMathematics.Matrices.uint2x4)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint2x4.Multiply(GenMathematics.Matrices.uint2x4@,System.UInt32,GenMathematics.Matrices.uint2x4@)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint2x4.Multiply(System.UInt32,GenMathematics.Matrices.uint2x4@,GenMathematics.Matrices.uint2x4@)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint2x4.Divide(GenMathematics.Matrices.uint2x4,System.UInt32)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint2x4.Divide(System.UInt32,GenMathematics.Matrices.uint2x4)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint2x4.Divide(GenMathematics.Matrices.uint2x4@,System.UInt32,GenMathematics.Matrices.uint2x4@)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint2x4.Divide(System.UInt32,GenMathematics.Matrices.uint2x4@,GenMathematics.Matrices.uint2x4@)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint2x4.op_Multiply(GenMathematics.Matrices.uint2x4,System.UInt32)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint2x4.op_Multiply(System.UInt32,GenMathematics.Matrices.uint2x4)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint2x4.op_Division(GenMathematics.Matrices.uint2x4,System.UInt32)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint2x4.op_Division(System.UInt32,GenMathematics.Matrices.uint2x4)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint2x4.op_Explicit(GenMathematics.Matrices.sbyte2x4)~GenMathematics.Matrices.uint2x4">
            <summary>
            Converts sbyte2x4 to uint2x4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint2x4.op_Explicit(GenMathematics.Matrices.short2x4)~GenMathematics.Matrices.uint2x4">
            <summary>
            Converts short2x4 to uint2x4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint2x4.op_Explicit(GenMathematics.Matrices.int2x4)~GenMathematics.Matrices.uint2x4">
            <summary>
            Converts int2x4 to uint2x4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint2x4.op_Explicit(GenMathematics.Matrices.long2x4)~GenMathematics.Matrices.uint2x4">
            <summary>
            Converts long2x4 to uint2x4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint2x4.op_Explicit(GenMathematics.Matrices.ulong2x4)~GenMathematics.Matrices.uint2x4">
            <summary>
            Converts ulong2x4 to uint2x4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint2x4.op_Explicit(GenMathematics.Matrices.half2x4)~GenMathematics.Matrices.uint2x4">
            <summary>
            Converts half2x4 to uint2x4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint2x4.op_Explicit(GenMathematics.Matrices.float2x4)~GenMathematics.Matrices.uint2x4">
            <summary>
            Converts float2x4 to uint2x4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint2x4.op_Explicit(GenMathematics.Matrices.double2x4)~GenMathematics.Matrices.uint2x4">
            <summary>
            Converts double2x4 to uint2x4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint2x4.op_Implicit(GenMathematics.Matrices.byte2x4)~GenMathematics.Matrices.uint2x4">
            <summary>
            Converts byte2x4 to uint2x4
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint2x4.op_Implicit(GenMathematics.Matrices.ushort2x4)~GenMathematics.Matrices.uint2x4">
            <summary>
            Converts ushort2x4 to uint2x4
            </summary>
        </member>
        <member name="T:GenMathematics.Matrices.uint3x2">
            <summary>
            Matrix of type uint with 3 rows and 2 columns using the column-major order
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.uint3x2.Column0">
            <summary>
            Matrix column with index 0
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.uint3x2.Column1">
            <summary>
            Matrix column with index 1
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.uint3x2.Row0">
            <summary>
            Matrix row with index 0
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.uint3x2.Row1">
            <summary>
            Matrix row with index 1
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.uint3x2.Row2">
            <summary>
            Matrix row with index 2
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint3x2.#ctor(GenMathematics.Vectors.uint3,GenMathematics.Vectors.uint3)">
            <summary>
            Creates a matrix from column values
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint3x2.#ctor(System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Creates a matrix from the values of rows and columns
            </summary>
            <param name="r0c0">The value to assign to row 0 and column 0 of the matrix</param>
            <param name="r0c1">The value to assign to row 0 and column 1 of the matrix</param>
            <param name="r1c0">The value to assign to row 1 and column 0 of the matrix</param>
            <param name="r1c1">The value to assign to row 1 and column 1 of the matrix</param>
            <param name="r2c0">The value to assign to row 2 and column 0 of the matrix</param>
            <param name="r2c1">The value to assign to row 2 and column 1 of the matrix</param>
        </member>
        <member name="P:GenMathematics.Matrices.uint3x2.Item(System.Int32)">
            <summary>
            To access via the reference use `Unsafe.Add(ref matrix.Column0, index)` instead
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint3x2.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.uint3x2.Equals(GenMathematics.Matrices.uint3x2)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.uint3x2.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.uint3x2.CompareTo(GenMathematics.Matrices.uint3x2)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.uint3x2.ToString">
            <summary>
            Returns the object's state information as a string
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint3x2.Extract(GenMathematics.Matrices.uint3x2@,System.Int32,System.Int32,GenMathematics.Matrices.uint3x2@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint3x2.Extract(GenMathematics.Matrices.uint3x2@,System.Int32,System.Int32,GenMathematics.Matrices.uint2x2@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint3x2.Multiply(GenMathematics.Matrices.uint3x2,System.UInt32)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint3x2.Multiply(System.UInt32,GenMathematics.Matrices.uint3x2)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint3x2.Multiply(GenMathematics.Matrices.uint3x2@,System.UInt32,GenMathematics.Matrices.uint3x2@)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint3x2.Multiply(System.UInt32,GenMathematics.Matrices.uint3x2@,GenMathematics.Matrices.uint3x2@)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint3x2.Divide(GenMathematics.Matrices.uint3x2,System.UInt32)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint3x2.Divide(System.UInt32,GenMathematics.Matrices.uint3x2)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint3x2.Divide(GenMathematics.Matrices.uint3x2@,System.UInt32,GenMathematics.Matrices.uint3x2@)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint3x2.Divide(System.UInt32,GenMathematics.Matrices.uint3x2@,GenMathematics.Matrices.uint3x2@)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint3x2.op_Multiply(GenMathematics.Matrices.uint3x2,System.UInt32)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint3x2.op_Multiply(System.UInt32,GenMathematics.Matrices.uint3x2)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint3x2.op_Division(GenMathematics.Matrices.uint3x2,System.UInt32)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint3x2.op_Division(System.UInt32,GenMathematics.Matrices.uint3x2)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint3x2.op_Explicit(GenMathematics.Matrices.sbyte3x2)~GenMathematics.Matrices.uint3x2">
            <summary>
            Converts sbyte3x2 to uint3x2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint3x2.op_Explicit(GenMathematics.Matrices.short3x2)~GenMathematics.Matrices.uint3x2">
            <summary>
            Converts short3x2 to uint3x2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint3x2.op_Explicit(GenMathematics.Matrices.int3x2)~GenMathematics.Matrices.uint3x2">
            <summary>
            Converts int3x2 to uint3x2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint3x2.op_Explicit(GenMathematics.Matrices.long3x2)~GenMathematics.Matrices.uint3x2">
            <summary>
            Converts long3x2 to uint3x2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint3x2.op_Explicit(GenMathematics.Matrices.ulong3x2)~GenMathematics.Matrices.uint3x2">
            <summary>
            Converts ulong3x2 to uint3x2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint3x2.op_Explicit(GenMathematics.Matrices.half3x2)~GenMathematics.Matrices.uint3x2">
            <summary>
            Converts half3x2 to uint3x2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint3x2.op_Explicit(GenMathematics.Matrices.float3x2)~GenMathematics.Matrices.uint3x2">
            <summary>
            Converts float3x2 to uint3x2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint3x2.op_Explicit(GenMathematics.Matrices.double3x2)~GenMathematics.Matrices.uint3x2">
            <summary>
            Converts double3x2 to uint3x2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint3x2.op_Implicit(GenMathematics.Matrices.byte3x2)~GenMathematics.Matrices.uint3x2">
            <summary>
            Converts byte3x2 to uint3x2
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint3x2.op_Implicit(GenMathematics.Matrices.ushort3x2)~GenMathematics.Matrices.uint3x2">
            <summary>
            Converts ushort3x2 to uint3x2
            </summary>
        </member>
        <member name="T:GenMathematics.Matrices.uint3x3">
            <summary>
            Matrix of type uint with 3 rows and 3 columns using the column-major order
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.uint3x3.Column0">
            <summary>
            Matrix column with index 0
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.uint3x3.Column1">
            <summary>
            Matrix column with index 1
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.uint3x3.Column2">
            <summary>
            Matrix column with index 2
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.uint3x3.Row0">
            <summary>
            Matrix row with index 0
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.uint3x3.Row1">
            <summary>
            Matrix row with index 1
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.uint3x3.Row2">
            <summary>
            Matrix row with index 2
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint3x3.#ctor(GenMathematics.Vectors.uint3,GenMathematics.Vectors.uint3,GenMathematics.Vectors.uint3)">
            <summary>
            Creates a matrix from column values
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint3x3.#ctor(System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Creates a matrix from the values of rows and columns
            </summary>
            <param name="r0c0">The value to assign to row 0 and column 0 of the matrix</param>
            <param name="r0c1">The value to assign to row 0 and column 1 of the matrix</param>
            <param name="r0c2">The value to assign to row 0 and column 2 of the matrix</param>
            <param name="r1c0">The value to assign to row 1 and column 0 of the matrix</param>
            <param name="r1c1">The value to assign to row 1 and column 1 of the matrix</param>
            <param name="r1c2">The value to assign to row 1 and column 2 of the matrix</param>
            <param name="r2c0">The value to assign to row 2 and column 0 of the matrix</param>
            <param name="r2c1">The value to assign to row 2 and column 1 of the matrix</param>
            <param name="r2c2">The value to assign to row 2 and column 2 of the matrix</param>
        </member>
        <member name="P:GenMathematics.Matrices.uint3x3.Item(System.Int32)">
            <summary>
            To access via the reference use `Unsafe.Add(ref matrix.Column0, index)` instead
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint3x3.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.uint3x3.Equals(GenMathematics.Matrices.uint3x3)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.uint3x3.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.uint3x3.CompareTo(GenMathematics.Matrices.uint3x3)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.uint3x3.ToString">
            <summary>
            Returns the object's state information as a string
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint3x3.Extract(GenMathematics.Matrices.uint3x3@,System.Int32,System.Int32,GenMathematics.Matrices.uint3x3@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint3x3.Extract(GenMathematics.Matrices.uint3x3@,System.Int32,System.Int32,GenMathematics.Matrices.uint2x3@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint3x3.Extract(GenMathematics.Matrices.uint3x3@,System.Int32,System.Int32,GenMathematics.Matrices.uint3x2@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint3x3.Extract(GenMathematics.Matrices.uint3x3@,System.Int32,System.Int32,GenMathematics.Matrices.uint2x2@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint3x3.Multiply(GenMathematics.Matrices.uint3x3,System.UInt32)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint3x3.Multiply(System.UInt32,GenMathematics.Matrices.uint3x3)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint3x3.Multiply(GenMathematics.Matrices.uint3x3@,System.UInt32,GenMathematics.Matrices.uint3x3@)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint3x3.Multiply(System.UInt32,GenMathematics.Matrices.uint3x3@,GenMathematics.Matrices.uint3x3@)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint3x3.Divide(GenMathematics.Matrices.uint3x3,System.UInt32)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint3x3.Divide(System.UInt32,GenMathematics.Matrices.uint3x3)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint3x3.Divide(GenMathematics.Matrices.uint3x3@,System.UInt32,GenMathematics.Matrices.uint3x3@)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint3x3.Divide(System.UInt32,GenMathematics.Matrices.uint3x3@,GenMathematics.Matrices.uint3x3@)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint3x3.op_Multiply(GenMathematics.Matrices.uint3x3,System.UInt32)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint3x3.op_Multiply(System.UInt32,GenMathematics.Matrices.uint3x3)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint3x3.op_Division(GenMathematics.Matrices.uint3x3,System.UInt32)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint3x3.op_Division(System.UInt32,GenMathematics.Matrices.uint3x3)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint3x3.op_Explicit(GenMathematics.Matrices.sbyte3x3)~GenMathematics.Matrices.uint3x3">
            <summary>
            Converts sbyte3x3 to uint3x3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint3x3.op_Explicit(GenMathematics.Matrices.short3x3)~GenMathematics.Matrices.uint3x3">
            <summary>
            Converts short3x3 to uint3x3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint3x3.op_Explicit(GenMathematics.Matrices.int3x3)~GenMathematics.Matrices.uint3x3">
            <summary>
            Converts int3x3 to uint3x3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint3x3.op_Explicit(GenMathematics.Matrices.long3x3)~GenMathematics.Matrices.uint3x3">
            <summary>
            Converts long3x3 to uint3x3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint3x3.op_Explicit(GenMathematics.Matrices.ulong3x3)~GenMathematics.Matrices.uint3x3">
            <summary>
            Converts ulong3x3 to uint3x3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint3x3.op_Explicit(GenMathematics.Matrices.half3x3)~GenMathematics.Matrices.uint3x3">
            <summary>
            Converts half3x3 to uint3x3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint3x3.op_Explicit(GenMathematics.Matrices.float3x3)~GenMathematics.Matrices.uint3x3">
            <summary>
            Converts float3x3 to uint3x3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint3x3.op_Explicit(GenMathematics.Matrices.double3x3)~GenMathematics.Matrices.uint3x3">
            <summary>
            Converts double3x3 to uint3x3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint3x3.op_Implicit(GenMathematics.Matrices.byte3x3)~GenMathematics.Matrices.uint3x3">
            <summary>
            Converts byte3x3 to uint3x3
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint3x3.op_Implicit(GenMathematics.Matrices.ushort3x3)~GenMathematics.Matrices.uint3x3">
            <summary>
            Converts ushort3x3 to uint3x3
            </summary>
        </member>
        <member name="T:GenMathematics.Matrices.uint3x4">
            <summary>
            Matrix of type uint with 3 rows and 4 columns using the column-major order
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.uint3x4.Column0">
            <summary>
            Matrix column with index 0
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.uint3x4.Column1">
            <summary>
            Matrix column with index 1
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.uint3x4.Column2">
            <summary>
            Matrix column with index 2
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.uint3x4.Column3">
            <summary>
            Matrix column with index 3
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.uint3x4.Row0">
            <summary>
            Matrix row with index 0
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.uint3x4.Row1">
            <summary>
            Matrix row with index 1
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.uint3x4.Row2">
            <summary>
            Matrix row with index 2
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint3x4.#ctor(GenMathematics.Vectors.uint3,GenMathematics.Vectors.uint3,GenMathematics.Vectors.uint3,GenMathematics.Vectors.uint3)">
            <summary>
            Creates a matrix from column values
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint3x4.#ctor(System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Creates a matrix from the values of rows and columns
            </summary>
            <param name="r0c0">The value to assign to row 0 and column 0 of the matrix</param>
            <param name="r0c1">The value to assign to row 0 and column 1 of the matrix</param>
            <param name="r0c2">The value to assign to row 0 and column 2 of the matrix</param>
            <param name="r0c3">The value to assign to row 0 and column 3 of the matrix</param>
            <param name="r1c0">The value to assign to row 1 and column 0 of the matrix</param>
            <param name="r1c1">The value to assign to row 1 and column 1 of the matrix</param>
            <param name="r1c2">The value to assign to row 1 and column 2 of the matrix</param>
            <param name="r1c3">The value to assign to row 1 and column 3 of the matrix</param>
            <param name="r2c0">The value to assign to row 2 and column 0 of the matrix</param>
            <param name="r2c1">The value to assign to row 2 and column 1 of the matrix</param>
            <param name="r2c2">The value to assign to row 2 and column 2 of the matrix</param>
            <param name="r2c3">The value to assign to row 2 and column 3 of the matrix</param>
        </member>
        <member name="P:GenMathematics.Matrices.uint3x4.Item(System.Int32)">
            <summary>
            To access via the reference use `Unsafe.Add(ref matrix.Column0, index)` instead
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint3x4.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.uint3x4.Equals(GenMathematics.Matrices.uint3x4)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.uint3x4.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.uint3x4.CompareTo(GenMathematics.Matrices.uint3x4)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.uint3x4.ToString">
            <summary>
            Returns the object's state information as a string
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint3x4.Extract(GenMathematics.Matrices.uint3x4@,System.Int32,System.Int32,GenMathematics.Matrices.uint3x4@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint3x4.Extract(GenMathematics.Matrices.uint3x4@,System.Int32,System.Int32,GenMathematics.Matrices.uint2x4@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint3x4.Extract(GenMathematics.Matrices.uint3x4@,System.Int32,System.Int32,GenMathematics.Matrices.uint3x3@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint3x4.Extract(GenMathematics.Matrices.uint3x4@,System.Int32,System.Int32,GenMathematics.Matrices.uint2x3@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint3x4.Extract(GenMathematics.Matrices.uint3x4@,System.Int32,System.Int32,GenMathematics.Matrices.uint3x2@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint3x4.Extract(GenMathematics.Matrices.uint3x4@,System.Int32,System.Int32,GenMathematics.Matrices.uint2x2@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint3x4.Multiply(GenMathematics.Matrices.uint3x4,System.UInt32)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint3x4.Multiply(System.UInt32,GenMathematics.Matrices.uint3x4)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint3x4.Multiply(GenMathematics.Matrices.uint3x4@,System.UInt32,GenMathematics.Matrices.uint3x4@)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint3x4.Multiply(System.UInt32,GenMathematics.Matrices.uint3x4@,GenMathematics.Matrices.uint3x4@)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint3x4.Divide(GenMathematics.Matrices.uint3x4,System.UInt32)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint3x4.Divide(System.UInt32,GenMathematics.Matrices.uint3x4)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint3x4.Divide(GenMathematics.Matrices.uint3x4@,System.UInt32,GenMathematics.Matrices.uint3x4@)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint3x4.Divide(System.UInt32,GenMathematics.Matrices.uint3x4@,GenMathematics.Matrices.uint3x4@)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint3x4.op_Multiply(GenMathematics.Matrices.uint3x4,System.UInt32)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint3x4.op_Multiply(System.UInt32,GenMathematics.Matrices.uint3x4)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint3x4.op_Division(GenMathematics.Matrices.uint3x4,System.UInt32)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint3x4.op_Division(System.UInt32,GenMathematics.Matrices.uint3x4)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint3x4.op_Explicit(GenMathematics.Matrices.sbyte3x4)~GenMathematics.Matrices.uint3x4">
            <summary>
            Converts sbyte3x4 to uint3x4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint3x4.op_Explicit(GenMathematics.Matrices.short3x4)~GenMathematics.Matrices.uint3x4">
            <summary>
            Converts short3x4 to uint3x4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint3x4.op_Explicit(GenMathematics.Matrices.int3x4)~GenMathematics.Matrices.uint3x4">
            <summary>
            Converts int3x4 to uint3x4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint3x4.op_Explicit(GenMathematics.Matrices.long3x4)~GenMathematics.Matrices.uint3x4">
            <summary>
            Converts long3x4 to uint3x4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint3x4.op_Explicit(GenMathematics.Matrices.ulong3x4)~GenMathematics.Matrices.uint3x4">
            <summary>
            Converts ulong3x4 to uint3x4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint3x4.op_Explicit(GenMathematics.Matrices.half3x4)~GenMathematics.Matrices.uint3x4">
            <summary>
            Converts half3x4 to uint3x4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint3x4.op_Explicit(GenMathematics.Matrices.float3x4)~GenMathematics.Matrices.uint3x4">
            <summary>
            Converts float3x4 to uint3x4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint3x4.op_Explicit(GenMathematics.Matrices.double3x4)~GenMathematics.Matrices.uint3x4">
            <summary>
            Converts double3x4 to uint3x4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint3x4.op_Implicit(GenMathematics.Matrices.byte3x4)~GenMathematics.Matrices.uint3x4">
            <summary>
            Converts byte3x4 to uint3x4
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint3x4.op_Implicit(GenMathematics.Matrices.ushort3x4)~GenMathematics.Matrices.uint3x4">
            <summary>
            Converts ushort3x4 to uint3x4
            </summary>
        </member>
        <member name="T:GenMathematics.Matrices.uint4x2">
            <summary>
            Matrix of type uint with 4 rows and 2 columns using the column-major order
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.uint4x2.Column0">
            <summary>
            Matrix column with index 0
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.uint4x2.Column1">
            <summary>
            Matrix column with index 1
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.uint4x2.Row0">
            <summary>
            Matrix row with index 0
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.uint4x2.Row1">
            <summary>
            Matrix row with index 1
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.uint4x2.Row2">
            <summary>
            Matrix row with index 2
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.uint4x2.Row3">
            <summary>
            Matrix row with index 3
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint4x2.#ctor(GenMathematics.Vectors.uint4,GenMathematics.Vectors.uint4)">
            <summary>
            Creates a matrix from column values
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint4x2.#ctor(System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Creates a matrix from the values of rows and columns
            </summary>
            <param name="r0c0">The value to assign to row 0 and column 0 of the matrix</param>
            <param name="r0c1">The value to assign to row 0 and column 1 of the matrix</param>
            <param name="r1c0">The value to assign to row 1 and column 0 of the matrix</param>
            <param name="r1c1">The value to assign to row 1 and column 1 of the matrix</param>
            <param name="r2c0">The value to assign to row 2 and column 0 of the matrix</param>
            <param name="r2c1">The value to assign to row 2 and column 1 of the matrix</param>
            <param name="r3c0">The value to assign to row 3 and column 0 of the matrix</param>
            <param name="r3c1">The value to assign to row 3 and column 1 of the matrix</param>
        </member>
        <member name="P:GenMathematics.Matrices.uint4x2.Item(System.Int32)">
            <summary>
            To access via the reference use `Unsafe.Add(ref matrix.Column0, index)` instead
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint4x2.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.uint4x2.Equals(GenMathematics.Matrices.uint4x2)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.uint4x2.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.uint4x2.CompareTo(GenMathematics.Matrices.uint4x2)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.uint4x2.ToString">
            <summary>
            Returns the object's state information as a string
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint4x2.Extract(GenMathematics.Matrices.uint4x2@,System.Int32,System.Int32,GenMathematics.Matrices.uint4x2@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint4x2.Extract(GenMathematics.Matrices.uint4x2@,System.Int32,System.Int32,GenMathematics.Matrices.uint3x2@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint4x2.Extract(GenMathematics.Matrices.uint4x2@,System.Int32,System.Int32,GenMathematics.Matrices.uint2x2@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint4x2.Multiply(GenMathematics.Matrices.uint4x2,System.UInt32)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint4x2.Multiply(System.UInt32,GenMathematics.Matrices.uint4x2)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint4x2.Multiply(GenMathematics.Matrices.uint4x2@,System.UInt32,GenMathematics.Matrices.uint4x2@)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint4x2.Multiply(System.UInt32,GenMathematics.Matrices.uint4x2@,GenMathematics.Matrices.uint4x2@)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint4x2.Divide(GenMathematics.Matrices.uint4x2,System.UInt32)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint4x2.Divide(System.UInt32,GenMathematics.Matrices.uint4x2)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint4x2.Divide(GenMathematics.Matrices.uint4x2@,System.UInt32,GenMathematics.Matrices.uint4x2@)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint4x2.Divide(System.UInt32,GenMathematics.Matrices.uint4x2@,GenMathematics.Matrices.uint4x2@)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint4x2.op_Multiply(GenMathematics.Matrices.uint4x2,System.UInt32)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint4x2.op_Multiply(System.UInt32,GenMathematics.Matrices.uint4x2)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint4x2.op_Division(GenMathematics.Matrices.uint4x2,System.UInt32)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint4x2.op_Division(System.UInt32,GenMathematics.Matrices.uint4x2)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint4x2.op_Explicit(GenMathematics.Matrices.sbyte4x2)~GenMathematics.Matrices.uint4x2">
            <summary>
            Converts sbyte4x2 to uint4x2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint4x2.op_Explicit(GenMathematics.Matrices.short4x2)~GenMathematics.Matrices.uint4x2">
            <summary>
            Converts short4x2 to uint4x2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint4x2.op_Explicit(GenMathematics.Matrices.int4x2)~GenMathematics.Matrices.uint4x2">
            <summary>
            Converts int4x2 to uint4x2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint4x2.op_Explicit(GenMathematics.Matrices.long4x2)~GenMathematics.Matrices.uint4x2">
            <summary>
            Converts long4x2 to uint4x2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint4x2.op_Explicit(GenMathematics.Matrices.ulong4x2)~GenMathematics.Matrices.uint4x2">
            <summary>
            Converts ulong4x2 to uint4x2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint4x2.op_Explicit(GenMathematics.Matrices.half4x2)~GenMathematics.Matrices.uint4x2">
            <summary>
            Converts half4x2 to uint4x2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint4x2.op_Explicit(GenMathematics.Matrices.float4x2)~GenMathematics.Matrices.uint4x2">
            <summary>
            Converts float4x2 to uint4x2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint4x2.op_Explicit(GenMathematics.Matrices.double4x2)~GenMathematics.Matrices.uint4x2">
            <summary>
            Converts double4x2 to uint4x2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint4x2.op_Implicit(GenMathematics.Matrices.byte4x2)~GenMathematics.Matrices.uint4x2">
            <summary>
            Converts byte4x2 to uint4x2
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint4x2.op_Implicit(GenMathematics.Matrices.ushort4x2)~GenMathematics.Matrices.uint4x2">
            <summary>
            Converts ushort4x2 to uint4x2
            </summary>
        </member>
        <member name="T:GenMathematics.Matrices.uint4x3">
            <summary>
            Matrix of type uint with 4 rows and 3 columns using the column-major order
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.uint4x3.Column0">
            <summary>
            Matrix column with index 0
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.uint4x3.Column1">
            <summary>
            Matrix column with index 1
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.uint4x3.Column2">
            <summary>
            Matrix column with index 2
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.uint4x3.Row0">
            <summary>
            Matrix row with index 0
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.uint4x3.Row1">
            <summary>
            Matrix row with index 1
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.uint4x3.Row2">
            <summary>
            Matrix row with index 2
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.uint4x3.Row3">
            <summary>
            Matrix row with index 3
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint4x3.#ctor(GenMathematics.Vectors.uint4,GenMathematics.Vectors.uint4,GenMathematics.Vectors.uint4)">
            <summary>
            Creates a matrix from column values
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint4x3.#ctor(System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Creates a matrix from the values of rows and columns
            </summary>
            <param name="r0c0">The value to assign to row 0 and column 0 of the matrix</param>
            <param name="r0c1">The value to assign to row 0 and column 1 of the matrix</param>
            <param name="r0c2">The value to assign to row 0 and column 2 of the matrix</param>
            <param name="r1c0">The value to assign to row 1 and column 0 of the matrix</param>
            <param name="r1c1">The value to assign to row 1 and column 1 of the matrix</param>
            <param name="r1c2">The value to assign to row 1 and column 2 of the matrix</param>
            <param name="r2c0">The value to assign to row 2 and column 0 of the matrix</param>
            <param name="r2c1">The value to assign to row 2 and column 1 of the matrix</param>
            <param name="r2c2">The value to assign to row 2 and column 2 of the matrix</param>
            <param name="r3c0">The value to assign to row 3 and column 0 of the matrix</param>
            <param name="r3c1">The value to assign to row 3 and column 1 of the matrix</param>
            <param name="r3c2">The value to assign to row 3 and column 2 of the matrix</param>
        </member>
        <member name="P:GenMathematics.Matrices.uint4x3.Item(System.Int32)">
            <summary>
            To access via the reference use `Unsafe.Add(ref matrix.Column0, index)` instead
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint4x3.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.uint4x3.Equals(GenMathematics.Matrices.uint4x3)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.uint4x3.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.uint4x3.CompareTo(GenMathematics.Matrices.uint4x3)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.uint4x3.ToString">
            <summary>
            Returns the object's state information as a string
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint4x3.Extract(GenMathematics.Matrices.uint4x3@,System.Int32,System.Int32,GenMathematics.Matrices.uint4x3@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint4x3.Extract(GenMathematics.Matrices.uint4x3@,System.Int32,System.Int32,GenMathematics.Matrices.uint3x3@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint4x3.Extract(GenMathematics.Matrices.uint4x3@,System.Int32,System.Int32,GenMathematics.Matrices.uint2x3@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint4x3.Extract(GenMathematics.Matrices.uint4x3@,System.Int32,System.Int32,GenMathematics.Matrices.uint4x2@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint4x3.Extract(GenMathematics.Matrices.uint4x3@,System.Int32,System.Int32,GenMathematics.Matrices.uint3x2@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint4x3.Extract(GenMathematics.Matrices.uint4x3@,System.Int32,System.Int32,GenMathematics.Matrices.uint2x2@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint4x3.Multiply(GenMathematics.Matrices.uint4x3,System.UInt32)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint4x3.Multiply(System.UInt32,GenMathematics.Matrices.uint4x3)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint4x3.Multiply(GenMathematics.Matrices.uint4x3@,System.UInt32,GenMathematics.Matrices.uint4x3@)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint4x3.Multiply(System.UInt32,GenMathematics.Matrices.uint4x3@,GenMathematics.Matrices.uint4x3@)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint4x3.Divide(GenMathematics.Matrices.uint4x3,System.UInt32)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint4x3.Divide(System.UInt32,GenMathematics.Matrices.uint4x3)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint4x3.Divide(GenMathematics.Matrices.uint4x3@,System.UInt32,GenMathematics.Matrices.uint4x3@)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint4x3.Divide(System.UInt32,GenMathematics.Matrices.uint4x3@,GenMathematics.Matrices.uint4x3@)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint4x3.op_Multiply(GenMathematics.Matrices.uint4x3,System.UInt32)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint4x3.op_Multiply(System.UInt32,GenMathematics.Matrices.uint4x3)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint4x3.op_Division(GenMathematics.Matrices.uint4x3,System.UInt32)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint4x3.op_Division(System.UInt32,GenMathematics.Matrices.uint4x3)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint4x3.op_Explicit(GenMathematics.Matrices.sbyte4x3)~GenMathematics.Matrices.uint4x3">
            <summary>
            Converts sbyte4x3 to uint4x3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint4x3.op_Explicit(GenMathematics.Matrices.short4x3)~GenMathematics.Matrices.uint4x3">
            <summary>
            Converts short4x3 to uint4x3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint4x3.op_Explicit(GenMathematics.Matrices.int4x3)~GenMathematics.Matrices.uint4x3">
            <summary>
            Converts int4x3 to uint4x3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint4x3.op_Explicit(GenMathematics.Matrices.long4x3)~GenMathematics.Matrices.uint4x3">
            <summary>
            Converts long4x3 to uint4x3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint4x3.op_Explicit(GenMathematics.Matrices.ulong4x3)~GenMathematics.Matrices.uint4x3">
            <summary>
            Converts ulong4x3 to uint4x3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint4x3.op_Explicit(GenMathematics.Matrices.half4x3)~GenMathematics.Matrices.uint4x3">
            <summary>
            Converts half4x3 to uint4x3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint4x3.op_Explicit(GenMathematics.Matrices.float4x3)~GenMathematics.Matrices.uint4x3">
            <summary>
            Converts float4x3 to uint4x3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint4x3.op_Explicit(GenMathematics.Matrices.double4x3)~GenMathematics.Matrices.uint4x3">
            <summary>
            Converts double4x3 to uint4x3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint4x3.op_Implicit(GenMathematics.Matrices.byte4x3)~GenMathematics.Matrices.uint4x3">
            <summary>
            Converts byte4x3 to uint4x3
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint4x3.op_Implicit(GenMathematics.Matrices.ushort4x3)~GenMathematics.Matrices.uint4x3">
            <summary>
            Converts ushort4x3 to uint4x3
            </summary>
        </member>
        <member name="T:GenMathematics.Matrices.uint4x4">
            <summary>
            Matrix of type uint with 4 rows and 4 columns using the column-major order
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.uint4x4.Column0">
            <summary>
            Matrix column with index 0
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.uint4x4.Column1">
            <summary>
            Matrix column with index 1
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.uint4x4.Column2">
            <summary>
            Matrix column with index 2
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.uint4x4.Column3">
            <summary>
            Matrix column with index 3
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.uint4x4.Row0">
            <summary>
            Matrix row with index 0
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.uint4x4.Row1">
            <summary>
            Matrix row with index 1
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.uint4x4.Row2">
            <summary>
            Matrix row with index 2
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.uint4x4.Row3">
            <summary>
            Matrix row with index 3
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint4x4.#ctor(GenMathematics.Vectors.uint4,GenMathematics.Vectors.uint4,GenMathematics.Vectors.uint4,GenMathematics.Vectors.uint4)">
            <summary>
            Creates a matrix from column values
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint4x4.#ctor(System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Creates a matrix from the values of rows and columns
            </summary>
            <param name="r0c0">The value to assign to row 0 and column 0 of the matrix</param>
            <param name="r0c1">The value to assign to row 0 and column 1 of the matrix</param>
            <param name="r0c2">The value to assign to row 0 and column 2 of the matrix</param>
            <param name="r0c3">The value to assign to row 0 and column 3 of the matrix</param>
            <param name="r1c0">The value to assign to row 1 and column 0 of the matrix</param>
            <param name="r1c1">The value to assign to row 1 and column 1 of the matrix</param>
            <param name="r1c2">The value to assign to row 1 and column 2 of the matrix</param>
            <param name="r1c3">The value to assign to row 1 and column 3 of the matrix</param>
            <param name="r2c0">The value to assign to row 2 and column 0 of the matrix</param>
            <param name="r2c1">The value to assign to row 2 and column 1 of the matrix</param>
            <param name="r2c2">The value to assign to row 2 and column 2 of the matrix</param>
            <param name="r2c3">The value to assign to row 2 and column 3 of the matrix</param>
            <param name="r3c0">The value to assign to row 3 and column 0 of the matrix</param>
            <param name="r3c1">The value to assign to row 3 and column 1 of the matrix</param>
            <param name="r3c2">The value to assign to row 3 and column 2 of the matrix</param>
            <param name="r3c3">The value to assign to row 3 and column 3 of the matrix</param>
        </member>
        <member name="P:GenMathematics.Matrices.uint4x4.Item(System.Int32)">
            <summary>
            To access via the reference use `Unsafe.Add(ref matrix.Column0, index)` instead
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint4x4.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.uint4x4.Equals(GenMathematics.Matrices.uint4x4)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.uint4x4.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.uint4x4.CompareTo(GenMathematics.Matrices.uint4x4)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.uint4x4.ToString">
            <summary>
            Returns the object's state information as a string
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint4x4.Extract(GenMathematics.Matrices.uint4x4@,System.Int32,System.Int32,GenMathematics.Matrices.uint4x4@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint4x4.Extract(GenMathematics.Matrices.uint4x4@,System.Int32,System.Int32,GenMathematics.Matrices.uint3x4@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint4x4.Extract(GenMathematics.Matrices.uint4x4@,System.Int32,System.Int32,GenMathematics.Matrices.uint2x4@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint4x4.Extract(GenMathematics.Matrices.uint4x4@,System.Int32,System.Int32,GenMathematics.Matrices.uint4x3@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint4x4.Extract(GenMathematics.Matrices.uint4x4@,System.Int32,System.Int32,GenMathematics.Matrices.uint3x3@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint4x4.Extract(GenMathematics.Matrices.uint4x4@,System.Int32,System.Int32,GenMathematics.Matrices.uint2x3@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint4x4.Extract(GenMathematics.Matrices.uint4x4@,System.Int32,System.Int32,GenMathematics.Matrices.uint4x2@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint4x4.Extract(GenMathematics.Matrices.uint4x4@,System.Int32,System.Int32,GenMathematics.Matrices.uint3x2@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint4x4.Extract(GenMathematics.Matrices.uint4x4@,System.Int32,System.Int32,GenMathematics.Matrices.uint2x2@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint4x4.Multiply(GenMathematics.Matrices.uint4x4,System.UInt32)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint4x4.Multiply(System.UInt32,GenMathematics.Matrices.uint4x4)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint4x4.Multiply(GenMathematics.Matrices.uint4x4@,System.UInt32,GenMathematics.Matrices.uint4x4@)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint4x4.Multiply(System.UInt32,GenMathematics.Matrices.uint4x4@,GenMathematics.Matrices.uint4x4@)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint4x4.Divide(GenMathematics.Matrices.uint4x4,System.UInt32)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint4x4.Divide(System.UInt32,GenMathematics.Matrices.uint4x4)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint4x4.Divide(GenMathematics.Matrices.uint4x4@,System.UInt32,GenMathematics.Matrices.uint4x4@)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint4x4.Divide(System.UInt32,GenMathematics.Matrices.uint4x4@,GenMathematics.Matrices.uint4x4@)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint4x4.op_Multiply(GenMathematics.Matrices.uint4x4,System.UInt32)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint4x4.op_Multiply(System.UInt32,GenMathematics.Matrices.uint4x4)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint4x4.op_Division(GenMathematics.Matrices.uint4x4,System.UInt32)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint4x4.op_Division(System.UInt32,GenMathematics.Matrices.uint4x4)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint4x4.op_Explicit(GenMathematics.Matrices.sbyte4x4)~GenMathematics.Matrices.uint4x4">
            <summary>
            Converts sbyte4x4 to uint4x4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint4x4.op_Explicit(GenMathematics.Matrices.short4x4)~GenMathematics.Matrices.uint4x4">
            <summary>
            Converts short4x4 to uint4x4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint4x4.op_Explicit(GenMathematics.Matrices.int4x4)~GenMathematics.Matrices.uint4x4">
            <summary>
            Converts int4x4 to uint4x4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint4x4.op_Explicit(GenMathematics.Matrices.long4x4)~GenMathematics.Matrices.uint4x4">
            <summary>
            Converts long4x4 to uint4x4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint4x4.op_Explicit(GenMathematics.Matrices.ulong4x4)~GenMathematics.Matrices.uint4x4">
            <summary>
            Converts ulong4x4 to uint4x4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint4x4.op_Explicit(GenMathematics.Matrices.half4x4)~GenMathematics.Matrices.uint4x4">
            <summary>
            Converts half4x4 to uint4x4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint4x4.op_Explicit(GenMathematics.Matrices.float4x4)~GenMathematics.Matrices.uint4x4">
            <summary>
            Converts float4x4 to uint4x4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint4x4.op_Explicit(GenMathematics.Matrices.double4x4)~GenMathematics.Matrices.uint4x4">
            <summary>
            Converts double4x4 to uint4x4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint4x4.op_Implicit(GenMathematics.Matrices.byte4x4)~GenMathematics.Matrices.uint4x4">
            <summary>
            Converts byte4x4 to uint4x4
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.uint4x4.op_Implicit(GenMathematics.Matrices.ushort4x4)~GenMathematics.Matrices.uint4x4">
            <summary>
            Converts ushort4x4 to uint4x4
            </summary>
        </member>
        <member name="T:GenMathematics.Matrices.ulong2x2">
            <summary>
            Matrix of type ulong with 2 rows and 2 columns using the column-major order
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.ulong2x2.Column0">
            <summary>
            Matrix column with index 0
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.ulong2x2.Column1">
            <summary>
            Matrix column with index 1
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.ulong2x2.Row0">
            <summary>
            Matrix row with index 0
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.ulong2x2.Row1">
            <summary>
            Matrix row with index 1
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong2x2.#ctor(GenMathematics.Vectors.ulong2,GenMathematics.Vectors.ulong2)">
            <summary>
            Creates a matrix from column values
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong2x2.#ctor(System.UInt64,System.UInt64,System.UInt64,System.UInt64)">
            <summary>
            Creates a matrix from the values of rows and columns
            </summary>
            <param name="r0c0">The value to assign to row 0 and column 0 of the matrix</param>
            <param name="r0c1">The value to assign to row 0 and column 1 of the matrix</param>
            <param name="r1c0">The value to assign to row 1 and column 0 of the matrix</param>
            <param name="r1c1">The value to assign to row 1 and column 1 of the matrix</param>
        </member>
        <member name="P:GenMathematics.Matrices.ulong2x2.Item(System.Int32)">
            <summary>
            To access via the reference use `Unsafe.Add(ref matrix.Column0, index)` instead
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong2x2.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.ulong2x2.Equals(GenMathematics.Matrices.ulong2x2)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.ulong2x2.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.ulong2x2.CompareTo(GenMathematics.Matrices.ulong2x2)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.ulong2x2.ToString">
            <summary>
            Returns the object's state information as a string
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong2x2.Extract(GenMathematics.Matrices.ulong2x2@,System.Int32,System.Int32,GenMathematics.Matrices.ulong2x2@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong2x2.Multiply(GenMathematics.Matrices.ulong2x2,System.UInt64)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong2x2.Multiply(System.UInt64,GenMathematics.Matrices.ulong2x2)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong2x2.Multiply(GenMathematics.Matrices.ulong2x2@,System.UInt64,GenMathematics.Matrices.ulong2x2@)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong2x2.Multiply(System.UInt64,GenMathematics.Matrices.ulong2x2@,GenMathematics.Matrices.ulong2x2@)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong2x2.Divide(GenMathematics.Matrices.ulong2x2,System.UInt64)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong2x2.Divide(System.UInt64,GenMathematics.Matrices.ulong2x2)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong2x2.Divide(GenMathematics.Matrices.ulong2x2@,System.UInt64,GenMathematics.Matrices.ulong2x2@)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong2x2.Divide(System.UInt64,GenMathematics.Matrices.ulong2x2@,GenMathematics.Matrices.ulong2x2@)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong2x2.op_Multiply(GenMathematics.Matrices.ulong2x2,System.UInt64)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong2x2.op_Multiply(System.UInt64,GenMathematics.Matrices.ulong2x2)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong2x2.op_Division(GenMathematics.Matrices.ulong2x2,System.UInt64)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong2x2.op_Division(System.UInt64,GenMathematics.Matrices.ulong2x2)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong2x2.op_Explicit(GenMathematics.Matrices.sbyte2x2)~GenMathematics.Matrices.ulong2x2">
            <summary>
            Converts sbyte2x2 to ulong2x2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong2x2.op_Explicit(GenMathematics.Matrices.short2x2)~GenMathematics.Matrices.ulong2x2">
            <summary>
            Converts short2x2 to ulong2x2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong2x2.op_Explicit(GenMathematics.Matrices.int2x2)~GenMathematics.Matrices.ulong2x2">
            <summary>
            Converts int2x2 to ulong2x2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong2x2.op_Explicit(GenMathematics.Matrices.long2x2)~GenMathematics.Matrices.ulong2x2">
            <summary>
            Converts long2x2 to ulong2x2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong2x2.op_Explicit(GenMathematics.Matrices.half2x2)~GenMathematics.Matrices.ulong2x2">
            <summary>
            Converts half2x2 to ulong2x2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong2x2.op_Explicit(GenMathematics.Matrices.float2x2)~GenMathematics.Matrices.ulong2x2">
            <summary>
            Converts float2x2 to ulong2x2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong2x2.op_Explicit(GenMathematics.Matrices.double2x2)~GenMathematics.Matrices.ulong2x2">
            <summary>
            Converts double2x2 to ulong2x2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong2x2.op_Implicit(GenMathematics.Matrices.byte2x2)~GenMathematics.Matrices.ulong2x2">
            <summary>
            Converts byte2x2 to ulong2x2
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong2x2.op_Implicit(GenMathematics.Matrices.ushort2x2)~GenMathematics.Matrices.ulong2x2">
            <summary>
            Converts ushort2x2 to ulong2x2
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong2x2.op_Implicit(GenMathematics.Matrices.uint2x2)~GenMathematics.Matrices.ulong2x2">
            <summary>
            Converts uint2x2 to ulong2x2
            </summary>
        </member>
        <member name="T:GenMathematics.Matrices.ulong2x3">
            <summary>
            Matrix of type ulong with 2 rows and 3 columns using the column-major order
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.ulong2x3.Column0">
            <summary>
            Matrix column with index 0
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.ulong2x3.Column1">
            <summary>
            Matrix column with index 1
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.ulong2x3.Column2">
            <summary>
            Matrix column with index 2
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.ulong2x3.Row0">
            <summary>
            Matrix row with index 0
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.ulong2x3.Row1">
            <summary>
            Matrix row with index 1
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong2x3.#ctor(GenMathematics.Vectors.ulong2,GenMathematics.Vectors.ulong2,GenMathematics.Vectors.ulong2)">
            <summary>
            Creates a matrix from column values
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong2x3.#ctor(System.UInt64,System.UInt64,System.UInt64,System.UInt64,System.UInt64,System.UInt64)">
            <summary>
            Creates a matrix from the values of rows and columns
            </summary>
            <param name="r0c0">The value to assign to row 0 and column 0 of the matrix</param>
            <param name="r0c1">The value to assign to row 0 and column 1 of the matrix</param>
            <param name="r0c2">The value to assign to row 0 and column 2 of the matrix</param>
            <param name="r1c0">The value to assign to row 1 and column 0 of the matrix</param>
            <param name="r1c1">The value to assign to row 1 and column 1 of the matrix</param>
            <param name="r1c2">The value to assign to row 1 and column 2 of the matrix</param>
        </member>
        <member name="P:GenMathematics.Matrices.ulong2x3.Item(System.Int32)">
            <summary>
            To access via the reference use `Unsafe.Add(ref matrix.Column0, index)` instead
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong2x3.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.ulong2x3.Equals(GenMathematics.Matrices.ulong2x3)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.ulong2x3.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.ulong2x3.CompareTo(GenMathematics.Matrices.ulong2x3)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.ulong2x3.ToString">
            <summary>
            Returns the object's state information as a string
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong2x3.Extract(GenMathematics.Matrices.ulong2x3@,System.Int32,System.Int32,GenMathematics.Matrices.ulong2x3@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong2x3.Extract(GenMathematics.Matrices.ulong2x3@,System.Int32,System.Int32,GenMathematics.Matrices.ulong2x2@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong2x3.Multiply(GenMathematics.Matrices.ulong2x3,System.UInt64)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong2x3.Multiply(System.UInt64,GenMathematics.Matrices.ulong2x3)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong2x3.Multiply(GenMathematics.Matrices.ulong2x3@,System.UInt64,GenMathematics.Matrices.ulong2x3@)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong2x3.Multiply(System.UInt64,GenMathematics.Matrices.ulong2x3@,GenMathematics.Matrices.ulong2x3@)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong2x3.Divide(GenMathematics.Matrices.ulong2x3,System.UInt64)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong2x3.Divide(System.UInt64,GenMathematics.Matrices.ulong2x3)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong2x3.Divide(GenMathematics.Matrices.ulong2x3@,System.UInt64,GenMathematics.Matrices.ulong2x3@)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong2x3.Divide(System.UInt64,GenMathematics.Matrices.ulong2x3@,GenMathematics.Matrices.ulong2x3@)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong2x3.op_Multiply(GenMathematics.Matrices.ulong2x3,System.UInt64)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong2x3.op_Multiply(System.UInt64,GenMathematics.Matrices.ulong2x3)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong2x3.op_Division(GenMathematics.Matrices.ulong2x3,System.UInt64)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong2x3.op_Division(System.UInt64,GenMathematics.Matrices.ulong2x3)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong2x3.op_Explicit(GenMathematics.Matrices.sbyte2x3)~GenMathematics.Matrices.ulong2x3">
            <summary>
            Converts sbyte2x3 to ulong2x3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong2x3.op_Explicit(GenMathematics.Matrices.short2x3)~GenMathematics.Matrices.ulong2x3">
            <summary>
            Converts short2x3 to ulong2x3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong2x3.op_Explicit(GenMathematics.Matrices.int2x3)~GenMathematics.Matrices.ulong2x3">
            <summary>
            Converts int2x3 to ulong2x3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong2x3.op_Explicit(GenMathematics.Matrices.long2x3)~GenMathematics.Matrices.ulong2x3">
            <summary>
            Converts long2x3 to ulong2x3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong2x3.op_Explicit(GenMathematics.Matrices.half2x3)~GenMathematics.Matrices.ulong2x3">
            <summary>
            Converts half2x3 to ulong2x3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong2x3.op_Explicit(GenMathematics.Matrices.float2x3)~GenMathematics.Matrices.ulong2x3">
            <summary>
            Converts float2x3 to ulong2x3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong2x3.op_Explicit(GenMathematics.Matrices.double2x3)~GenMathematics.Matrices.ulong2x3">
            <summary>
            Converts double2x3 to ulong2x3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong2x3.op_Implicit(GenMathematics.Matrices.byte2x3)~GenMathematics.Matrices.ulong2x3">
            <summary>
            Converts byte2x3 to ulong2x3
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong2x3.op_Implicit(GenMathematics.Matrices.ushort2x3)~GenMathematics.Matrices.ulong2x3">
            <summary>
            Converts ushort2x3 to ulong2x3
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong2x3.op_Implicit(GenMathematics.Matrices.uint2x3)~GenMathematics.Matrices.ulong2x3">
            <summary>
            Converts uint2x3 to ulong2x3
            </summary>
        </member>
        <member name="T:GenMathematics.Matrices.ulong2x4">
            <summary>
            Matrix of type ulong with 2 rows and 4 columns using the column-major order
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.ulong2x4.Column0">
            <summary>
            Matrix column with index 0
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.ulong2x4.Column1">
            <summary>
            Matrix column with index 1
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.ulong2x4.Column2">
            <summary>
            Matrix column with index 2
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.ulong2x4.Column3">
            <summary>
            Matrix column with index 3
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.ulong2x4.Row0">
            <summary>
            Matrix row with index 0
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.ulong2x4.Row1">
            <summary>
            Matrix row with index 1
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong2x4.#ctor(GenMathematics.Vectors.ulong2,GenMathematics.Vectors.ulong2,GenMathematics.Vectors.ulong2,GenMathematics.Vectors.ulong2)">
            <summary>
            Creates a matrix from column values
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong2x4.#ctor(System.UInt64,System.UInt64,System.UInt64,System.UInt64,System.UInt64,System.UInt64,System.UInt64,System.UInt64)">
            <summary>
            Creates a matrix from the values of rows and columns
            </summary>
            <param name="r0c0">The value to assign to row 0 and column 0 of the matrix</param>
            <param name="r0c1">The value to assign to row 0 and column 1 of the matrix</param>
            <param name="r0c2">The value to assign to row 0 and column 2 of the matrix</param>
            <param name="r0c3">The value to assign to row 0 and column 3 of the matrix</param>
            <param name="r1c0">The value to assign to row 1 and column 0 of the matrix</param>
            <param name="r1c1">The value to assign to row 1 and column 1 of the matrix</param>
            <param name="r1c2">The value to assign to row 1 and column 2 of the matrix</param>
            <param name="r1c3">The value to assign to row 1 and column 3 of the matrix</param>
        </member>
        <member name="P:GenMathematics.Matrices.ulong2x4.Item(System.Int32)">
            <summary>
            To access via the reference use `Unsafe.Add(ref matrix.Column0, index)` instead
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong2x4.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.ulong2x4.Equals(GenMathematics.Matrices.ulong2x4)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.ulong2x4.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.ulong2x4.CompareTo(GenMathematics.Matrices.ulong2x4)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.ulong2x4.ToString">
            <summary>
            Returns the object's state information as a string
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong2x4.Extract(GenMathematics.Matrices.ulong2x4@,System.Int32,System.Int32,GenMathematics.Matrices.ulong2x4@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong2x4.Extract(GenMathematics.Matrices.ulong2x4@,System.Int32,System.Int32,GenMathematics.Matrices.ulong2x3@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong2x4.Extract(GenMathematics.Matrices.ulong2x4@,System.Int32,System.Int32,GenMathematics.Matrices.ulong2x2@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong2x4.Multiply(GenMathematics.Matrices.ulong2x4,System.UInt64)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong2x4.Multiply(System.UInt64,GenMathematics.Matrices.ulong2x4)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong2x4.Multiply(GenMathematics.Matrices.ulong2x4@,System.UInt64,GenMathematics.Matrices.ulong2x4@)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong2x4.Multiply(System.UInt64,GenMathematics.Matrices.ulong2x4@,GenMathematics.Matrices.ulong2x4@)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong2x4.Divide(GenMathematics.Matrices.ulong2x4,System.UInt64)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong2x4.Divide(System.UInt64,GenMathematics.Matrices.ulong2x4)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong2x4.Divide(GenMathematics.Matrices.ulong2x4@,System.UInt64,GenMathematics.Matrices.ulong2x4@)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong2x4.Divide(System.UInt64,GenMathematics.Matrices.ulong2x4@,GenMathematics.Matrices.ulong2x4@)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong2x4.op_Multiply(GenMathematics.Matrices.ulong2x4,System.UInt64)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong2x4.op_Multiply(System.UInt64,GenMathematics.Matrices.ulong2x4)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong2x4.op_Division(GenMathematics.Matrices.ulong2x4,System.UInt64)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong2x4.op_Division(System.UInt64,GenMathematics.Matrices.ulong2x4)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong2x4.op_Explicit(GenMathematics.Matrices.sbyte2x4)~GenMathematics.Matrices.ulong2x4">
            <summary>
            Converts sbyte2x4 to ulong2x4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong2x4.op_Explicit(GenMathematics.Matrices.short2x4)~GenMathematics.Matrices.ulong2x4">
            <summary>
            Converts short2x4 to ulong2x4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong2x4.op_Explicit(GenMathematics.Matrices.int2x4)~GenMathematics.Matrices.ulong2x4">
            <summary>
            Converts int2x4 to ulong2x4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong2x4.op_Explicit(GenMathematics.Matrices.long2x4)~GenMathematics.Matrices.ulong2x4">
            <summary>
            Converts long2x4 to ulong2x4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong2x4.op_Explicit(GenMathematics.Matrices.half2x4)~GenMathematics.Matrices.ulong2x4">
            <summary>
            Converts half2x4 to ulong2x4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong2x4.op_Explicit(GenMathematics.Matrices.float2x4)~GenMathematics.Matrices.ulong2x4">
            <summary>
            Converts float2x4 to ulong2x4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong2x4.op_Explicit(GenMathematics.Matrices.double2x4)~GenMathematics.Matrices.ulong2x4">
            <summary>
            Converts double2x4 to ulong2x4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong2x4.op_Implicit(GenMathematics.Matrices.byte2x4)~GenMathematics.Matrices.ulong2x4">
            <summary>
            Converts byte2x4 to ulong2x4
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong2x4.op_Implicit(GenMathematics.Matrices.ushort2x4)~GenMathematics.Matrices.ulong2x4">
            <summary>
            Converts ushort2x4 to ulong2x4
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong2x4.op_Implicit(GenMathematics.Matrices.uint2x4)~GenMathematics.Matrices.ulong2x4">
            <summary>
            Converts uint2x4 to ulong2x4
            </summary>
        </member>
        <member name="T:GenMathematics.Matrices.ulong3x2">
            <summary>
            Matrix of type ulong with 3 rows and 2 columns using the column-major order
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.ulong3x2.Column0">
            <summary>
            Matrix column with index 0
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.ulong3x2.Column1">
            <summary>
            Matrix column with index 1
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.ulong3x2.Row0">
            <summary>
            Matrix row with index 0
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.ulong3x2.Row1">
            <summary>
            Matrix row with index 1
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.ulong3x2.Row2">
            <summary>
            Matrix row with index 2
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong3x2.#ctor(GenMathematics.Vectors.ulong3,GenMathematics.Vectors.ulong3)">
            <summary>
            Creates a matrix from column values
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong3x2.#ctor(System.UInt64,System.UInt64,System.UInt64,System.UInt64,System.UInt64,System.UInt64)">
            <summary>
            Creates a matrix from the values of rows and columns
            </summary>
            <param name="r0c0">The value to assign to row 0 and column 0 of the matrix</param>
            <param name="r0c1">The value to assign to row 0 and column 1 of the matrix</param>
            <param name="r1c0">The value to assign to row 1 and column 0 of the matrix</param>
            <param name="r1c1">The value to assign to row 1 and column 1 of the matrix</param>
            <param name="r2c0">The value to assign to row 2 and column 0 of the matrix</param>
            <param name="r2c1">The value to assign to row 2 and column 1 of the matrix</param>
        </member>
        <member name="P:GenMathematics.Matrices.ulong3x2.Item(System.Int32)">
            <summary>
            To access via the reference use `Unsafe.Add(ref matrix.Column0, index)` instead
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong3x2.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.ulong3x2.Equals(GenMathematics.Matrices.ulong3x2)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.ulong3x2.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.ulong3x2.CompareTo(GenMathematics.Matrices.ulong3x2)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.ulong3x2.ToString">
            <summary>
            Returns the object's state information as a string
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong3x2.Extract(GenMathematics.Matrices.ulong3x2@,System.Int32,System.Int32,GenMathematics.Matrices.ulong3x2@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong3x2.Extract(GenMathematics.Matrices.ulong3x2@,System.Int32,System.Int32,GenMathematics.Matrices.ulong2x2@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong3x2.Multiply(GenMathematics.Matrices.ulong3x2,System.UInt64)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong3x2.Multiply(System.UInt64,GenMathematics.Matrices.ulong3x2)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong3x2.Multiply(GenMathematics.Matrices.ulong3x2@,System.UInt64,GenMathematics.Matrices.ulong3x2@)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong3x2.Multiply(System.UInt64,GenMathematics.Matrices.ulong3x2@,GenMathematics.Matrices.ulong3x2@)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong3x2.Divide(GenMathematics.Matrices.ulong3x2,System.UInt64)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong3x2.Divide(System.UInt64,GenMathematics.Matrices.ulong3x2)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong3x2.Divide(GenMathematics.Matrices.ulong3x2@,System.UInt64,GenMathematics.Matrices.ulong3x2@)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong3x2.Divide(System.UInt64,GenMathematics.Matrices.ulong3x2@,GenMathematics.Matrices.ulong3x2@)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong3x2.op_Multiply(GenMathematics.Matrices.ulong3x2,System.UInt64)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong3x2.op_Multiply(System.UInt64,GenMathematics.Matrices.ulong3x2)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong3x2.op_Division(GenMathematics.Matrices.ulong3x2,System.UInt64)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong3x2.op_Division(System.UInt64,GenMathematics.Matrices.ulong3x2)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong3x2.op_Explicit(GenMathematics.Matrices.sbyte3x2)~GenMathematics.Matrices.ulong3x2">
            <summary>
            Converts sbyte3x2 to ulong3x2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong3x2.op_Explicit(GenMathematics.Matrices.short3x2)~GenMathematics.Matrices.ulong3x2">
            <summary>
            Converts short3x2 to ulong3x2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong3x2.op_Explicit(GenMathematics.Matrices.int3x2)~GenMathematics.Matrices.ulong3x2">
            <summary>
            Converts int3x2 to ulong3x2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong3x2.op_Explicit(GenMathematics.Matrices.long3x2)~GenMathematics.Matrices.ulong3x2">
            <summary>
            Converts long3x2 to ulong3x2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong3x2.op_Explicit(GenMathematics.Matrices.half3x2)~GenMathematics.Matrices.ulong3x2">
            <summary>
            Converts half3x2 to ulong3x2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong3x2.op_Explicit(GenMathematics.Matrices.float3x2)~GenMathematics.Matrices.ulong3x2">
            <summary>
            Converts float3x2 to ulong3x2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong3x2.op_Explicit(GenMathematics.Matrices.double3x2)~GenMathematics.Matrices.ulong3x2">
            <summary>
            Converts double3x2 to ulong3x2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong3x2.op_Implicit(GenMathematics.Matrices.byte3x2)~GenMathematics.Matrices.ulong3x2">
            <summary>
            Converts byte3x2 to ulong3x2
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong3x2.op_Implicit(GenMathematics.Matrices.ushort3x2)~GenMathematics.Matrices.ulong3x2">
            <summary>
            Converts ushort3x2 to ulong3x2
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong3x2.op_Implicit(GenMathematics.Matrices.uint3x2)~GenMathematics.Matrices.ulong3x2">
            <summary>
            Converts uint3x2 to ulong3x2
            </summary>
        </member>
        <member name="T:GenMathematics.Matrices.ulong3x3">
            <summary>
            Matrix of type ulong with 3 rows and 3 columns using the column-major order
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.ulong3x3.Column0">
            <summary>
            Matrix column with index 0
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.ulong3x3.Column1">
            <summary>
            Matrix column with index 1
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.ulong3x3.Column2">
            <summary>
            Matrix column with index 2
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.ulong3x3.Row0">
            <summary>
            Matrix row with index 0
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.ulong3x3.Row1">
            <summary>
            Matrix row with index 1
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.ulong3x3.Row2">
            <summary>
            Matrix row with index 2
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong3x3.#ctor(GenMathematics.Vectors.ulong3,GenMathematics.Vectors.ulong3,GenMathematics.Vectors.ulong3)">
            <summary>
            Creates a matrix from column values
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong3x3.#ctor(System.UInt64,System.UInt64,System.UInt64,System.UInt64,System.UInt64,System.UInt64,System.UInt64,System.UInt64,System.UInt64)">
            <summary>
            Creates a matrix from the values of rows and columns
            </summary>
            <param name="r0c0">The value to assign to row 0 and column 0 of the matrix</param>
            <param name="r0c1">The value to assign to row 0 and column 1 of the matrix</param>
            <param name="r0c2">The value to assign to row 0 and column 2 of the matrix</param>
            <param name="r1c0">The value to assign to row 1 and column 0 of the matrix</param>
            <param name="r1c1">The value to assign to row 1 and column 1 of the matrix</param>
            <param name="r1c2">The value to assign to row 1 and column 2 of the matrix</param>
            <param name="r2c0">The value to assign to row 2 and column 0 of the matrix</param>
            <param name="r2c1">The value to assign to row 2 and column 1 of the matrix</param>
            <param name="r2c2">The value to assign to row 2 and column 2 of the matrix</param>
        </member>
        <member name="P:GenMathematics.Matrices.ulong3x3.Item(System.Int32)">
            <summary>
            To access via the reference use `Unsafe.Add(ref matrix.Column0, index)` instead
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong3x3.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.ulong3x3.Equals(GenMathematics.Matrices.ulong3x3)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.ulong3x3.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.ulong3x3.CompareTo(GenMathematics.Matrices.ulong3x3)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.ulong3x3.ToString">
            <summary>
            Returns the object's state information as a string
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong3x3.Extract(GenMathematics.Matrices.ulong3x3@,System.Int32,System.Int32,GenMathematics.Matrices.ulong3x3@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong3x3.Extract(GenMathematics.Matrices.ulong3x3@,System.Int32,System.Int32,GenMathematics.Matrices.ulong2x3@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong3x3.Extract(GenMathematics.Matrices.ulong3x3@,System.Int32,System.Int32,GenMathematics.Matrices.ulong3x2@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong3x3.Extract(GenMathematics.Matrices.ulong3x3@,System.Int32,System.Int32,GenMathematics.Matrices.ulong2x2@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong3x3.Multiply(GenMathematics.Matrices.ulong3x3,System.UInt64)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong3x3.Multiply(System.UInt64,GenMathematics.Matrices.ulong3x3)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong3x3.Multiply(GenMathematics.Matrices.ulong3x3@,System.UInt64,GenMathematics.Matrices.ulong3x3@)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong3x3.Multiply(System.UInt64,GenMathematics.Matrices.ulong3x3@,GenMathematics.Matrices.ulong3x3@)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong3x3.Divide(GenMathematics.Matrices.ulong3x3,System.UInt64)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong3x3.Divide(System.UInt64,GenMathematics.Matrices.ulong3x3)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong3x3.Divide(GenMathematics.Matrices.ulong3x3@,System.UInt64,GenMathematics.Matrices.ulong3x3@)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong3x3.Divide(System.UInt64,GenMathematics.Matrices.ulong3x3@,GenMathematics.Matrices.ulong3x3@)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong3x3.op_Multiply(GenMathematics.Matrices.ulong3x3,System.UInt64)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong3x3.op_Multiply(System.UInt64,GenMathematics.Matrices.ulong3x3)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong3x3.op_Division(GenMathematics.Matrices.ulong3x3,System.UInt64)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong3x3.op_Division(System.UInt64,GenMathematics.Matrices.ulong3x3)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong3x3.op_Explicit(GenMathematics.Matrices.sbyte3x3)~GenMathematics.Matrices.ulong3x3">
            <summary>
            Converts sbyte3x3 to ulong3x3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong3x3.op_Explicit(GenMathematics.Matrices.short3x3)~GenMathematics.Matrices.ulong3x3">
            <summary>
            Converts short3x3 to ulong3x3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong3x3.op_Explicit(GenMathematics.Matrices.int3x3)~GenMathematics.Matrices.ulong3x3">
            <summary>
            Converts int3x3 to ulong3x3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong3x3.op_Explicit(GenMathematics.Matrices.long3x3)~GenMathematics.Matrices.ulong3x3">
            <summary>
            Converts long3x3 to ulong3x3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong3x3.op_Explicit(GenMathematics.Matrices.half3x3)~GenMathematics.Matrices.ulong3x3">
            <summary>
            Converts half3x3 to ulong3x3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong3x3.op_Explicit(GenMathematics.Matrices.float3x3)~GenMathematics.Matrices.ulong3x3">
            <summary>
            Converts float3x3 to ulong3x3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong3x3.op_Explicit(GenMathematics.Matrices.double3x3)~GenMathematics.Matrices.ulong3x3">
            <summary>
            Converts double3x3 to ulong3x3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong3x3.op_Implicit(GenMathematics.Matrices.byte3x3)~GenMathematics.Matrices.ulong3x3">
            <summary>
            Converts byte3x3 to ulong3x3
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong3x3.op_Implicit(GenMathematics.Matrices.ushort3x3)~GenMathematics.Matrices.ulong3x3">
            <summary>
            Converts ushort3x3 to ulong3x3
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong3x3.op_Implicit(GenMathematics.Matrices.uint3x3)~GenMathematics.Matrices.ulong3x3">
            <summary>
            Converts uint3x3 to ulong3x3
            </summary>
        </member>
        <member name="T:GenMathematics.Matrices.ulong3x4">
            <summary>
            Matrix of type ulong with 3 rows and 4 columns using the column-major order
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.ulong3x4.Column0">
            <summary>
            Matrix column with index 0
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.ulong3x4.Column1">
            <summary>
            Matrix column with index 1
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.ulong3x4.Column2">
            <summary>
            Matrix column with index 2
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.ulong3x4.Column3">
            <summary>
            Matrix column with index 3
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.ulong3x4.Row0">
            <summary>
            Matrix row with index 0
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.ulong3x4.Row1">
            <summary>
            Matrix row with index 1
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.ulong3x4.Row2">
            <summary>
            Matrix row with index 2
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong3x4.#ctor(GenMathematics.Vectors.ulong3,GenMathematics.Vectors.ulong3,GenMathematics.Vectors.ulong3,GenMathematics.Vectors.ulong3)">
            <summary>
            Creates a matrix from column values
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong3x4.#ctor(System.UInt64,System.UInt64,System.UInt64,System.UInt64,System.UInt64,System.UInt64,System.UInt64,System.UInt64,System.UInt64,System.UInt64,System.UInt64,System.UInt64)">
            <summary>
            Creates a matrix from the values of rows and columns
            </summary>
            <param name="r0c0">The value to assign to row 0 and column 0 of the matrix</param>
            <param name="r0c1">The value to assign to row 0 and column 1 of the matrix</param>
            <param name="r0c2">The value to assign to row 0 and column 2 of the matrix</param>
            <param name="r0c3">The value to assign to row 0 and column 3 of the matrix</param>
            <param name="r1c0">The value to assign to row 1 and column 0 of the matrix</param>
            <param name="r1c1">The value to assign to row 1 and column 1 of the matrix</param>
            <param name="r1c2">The value to assign to row 1 and column 2 of the matrix</param>
            <param name="r1c3">The value to assign to row 1 and column 3 of the matrix</param>
            <param name="r2c0">The value to assign to row 2 and column 0 of the matrix</param>
            <param name="r2c1">The value to assign to row 2 and column 1 of the matrix</param>
            <param name="r2c2">The value to assign to row 2 and column 2 of the matrix</param>
            <param name="r2c3">The value to assign to row 2 and column 3 of the matrix</param>
        </member>
        <member name="P:GenMathematics.Matrices.ulong3x4.Item(System.Int32)">
            <summary>
            To access via the reference use `Unsafe.Add(ref matrix.Column0, index)` instead
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong3x4.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.ulong3x4.Equals(GenMathematics.Matrices.ulong3x4)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.ulong3x4.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.ulong3x4.CompareTo(GenMathematics.Matrices.ulong3x4)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.ulong3x4.ToString">
            <summary>
            Returns the object's state information as a string
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong3x4.Extract(GenMathematics.Matrices.ulong3x4@,System.Int32,System.Int32,GenMathematics.Matrices.ulong3x4@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong3x4.Extract(GenMathematics.Matrices.ulong3x4@,System.Int32,System.Int32,GenMathematics.Matrices.ulong2x4@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong3x4.Extract(GenMathematics.Matrices.ulong3x4@,System.Int32,System.Int32,GenMathematics.Matrices.ulong3x3@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong3x4.Extract(GenMathematics.Matrices.ulong3x4@,System.Int32,System.Int32,GenMathematics.Matrices.ulong2x3@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong3x4.Extract(GenMathematics.Matrices.ulong3x4@,System.Int32,System.Int32,GenMathematics.Matrices.ulong3x2@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong3x4.Extract(GenMathematics.Matrices.ulong3x4@,System.Int32,System.Int32,GenMathematics.Matrices.ulong2x2@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong3x4.Multiply(GenMathematics.Matrices.ulong3x4,System.UInt64)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong3x4.Multiply(System.UInt64,GenMathematics.Matrices.ulong3x4)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong3x4.Multiply(GenMathematics.Matrices.ulong3x4@,System.UInt64,GenMathematics.Matrices.ulong3x4@)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong3x4.Multiply(System.UInt64,GenMathematics.Matrices.ulong3x4@,GenMathematics.Matrices.ulong3x4@)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong3x4.Divide(GenMathematics.Matrices.ulong3x4,System.UInt64)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong3x4.Divide(System.UInt64,GenMathematics.Matrices.ulong3x4)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong3x4.Divide(GenMathematics.Matrices.ulong3x4@,System.UInt64,GenMathematics.Matrices.ulong3x4@)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong3x4.Divide(System.UInt64,GenMathematics.Matrices.ulong3x4@,GenMathematics.Matrices.ulong3x4@)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong3x4.op_Multiply(GenMathematics.Matrices.ulong3x4,System.UInt64)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong3x4.op_Multiply(System.UInt64,GenMathematics.Matrices.ulong3x4)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong3x4.op_Division(GenMathematics.Matrices.ulong3x4,System.UInt64)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong3x4.op_Division(System.UInt64,GenMathematics.Matrices.ulong3x4)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong3x4.op_Explicit(GenMathematics.Matrices.sbyte3x4)~GenMathematics.Matrices.ulong3x4">
            <summary>
            Converts sbyte3x4 to ulong3x4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong3x4.op_Explicit(GenMathematics.Matrices.short3x4)~GenMathematics.Matrices.ulong3x4">
            <summary>
            Converts short3x4 to ulong3x4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong3x4.op_Explicit(GenMathematics.Matrices.int3x4)~GenMathematics.Matrices.ulong3x4">
            <summary>
            Converts int3x4 to ulong3x4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong3x4.op_Explicit(GenMathematics.Matrices.long3x4)~GenMathematics.Matrices.ulong3x4">
            <summary>
            Converts long3x4 to ulong3x4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong3x4.op_Explicit(GenMathematics.Matrices.half3x4)~GenMathematics.Matrices.ulong3x4">
            <summary>
            Converts half3x4 to ulong3x4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong3x4.op_Explicit(GenMathematics.Matrices.float3x4)~GenMathematics.Matrices.ulong3x4">
            <summary>
            Converts float3x4 to ulong3x4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong3x4.op_Explicit(GenMathematics.Matrices.double3x4)~GenMathematics.Matrices.ulong3x4">
            <summary>
            Converts double3x4 to ulong3x4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong3x4.op_Implicit(GenMathematics.Matrices.byte3x4)~GenMathematics.Matrices.ulong3x4">
            <summary>
            Converts byte3x4 to ulong3x4
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong3x4.op_Implicit(GenMathematics.Matrices.ushort3x4)~GenMathematics.Matrices.ulong3x4">
            <summary>
            Converts ushort3x4 to ulong3x4
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong3x4.op_Implicit(GenMathematics.Matrices.uint3x4)~GenMathematics.Matrices.ulong3x4">
            <summary>
            Converts uint3x4 to ulong3x4
            </summary>
        </member>
        <member name="T:GenMathematics.Matrices.ulong4x2">
            <summary>
            Matrix of type ulong with 4 rows and 2 columns using the column-major order
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.ulong4x2.Column0">
            <summary>
            Matrix column with index 0
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.ulong4x2.Column1">
            <summary>
            Matrix column with index 1
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.ulong4x2.Row0">
            <summary>
            Matrix row with index 0
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.ulong4x2.Row1">
            <summary>
            Matrix row with index 1
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.ulong4x2.Row2">
            <summary>
            Matrix row with index 2
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.ulong4x2.Row3">
            <summary>
            Matrix row with index 3
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong4x2.#ctor(GenMathematics.Vectors.ulong4,GenMathematics.Vectors.ulong4)">
            <summary>
            Creates a matrix from column values
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong4x2.#ctor(System.UInt64,System.UInt64,System.UInt64,System.UInt64,System.UInt64,System.UInt64,System.UInt64,System.UInt64)">
            <summary>
            Creates a matrix from the values of rows and columns
            </summary>
            <param name="r0c0">The value to assign to row 0 and column 0 of the matrix</param>
            <param name="r0c1">The value to assign to row 0 and column 1 of the matrix</param>
            <param name="r1c0">The value to assign to row 1 and column 0 of the matrix</param>
            <param name="r1c1">The value to assign to row 1 and column 1 of the matrix</param>
            <param name="r2c0">The value to assign to row 2 and column 0 of the matrix</param>
            <param name="r2c1">The value to assign to row 2 and column 1 of the matrix</param>
            <param name="r3c0">The value to assign to row 3 and column 0 of the matrix</param>
            <param name="r3c1">The value to assign to row 3 and column 1 of the matrix</param>
        </member>
        <member name="P:GenMathematics.Matrices.ulong4x2.Item(System.Int32)">
            <summary>
            To access via the reference use `Unsafe.Add(ref matrix.Column0, index)` instead
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong4x2.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.ulong4x2.Equals(GenMathematics.Matrices.ulong4x2)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.ulong4x2.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.ulong4x2.CompareTo(GenMathematics.Matrices.ulong4x2)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.ulong4x2.ToString">
            <summary>
            Returns the object's state information as a string
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong4x2.Extract(GenMathematics.Matrices.ulong4x2@,System.Int32,System.Int32,GenMathematics.Matrices.ulong4x2@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong4x2.Extract(GenMathematics.Matrices.ulong4x2@,System.Int32,System.Int32,GenMathematics.Matrices.ulong3x2@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong4x2.Extract(GenMathematics.Matrices.ulong4x2@,System.Int32,System.Int32,GenMathematics.Matrices.ulong2x2@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong4x2.Multiply(GenMathematics.Matrices.ulong4x2,System.UInt64)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong4x2.Multiply(System.UInt64,GenMathematics.Matrices.ulong4x2)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong4x2.Multiply(GenMathematics.Matrices.ulong4x2@,System.UInt64,GenMathematics.Matrices.ulong4x2@)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong4x2.Multiply(System.UInt64,GenMathematics.Matrices.ulong4x2@,GenMathematics.Matrices.ulong4x2@)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong4x2.Divide(GenMathematics.Matrices.ulong4x2,System.UInt64)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong4x2.Divide(System.UInt64,GenMathematics.Matrices.ulong4x2)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong4x2.Divide(GenMathematics.Matrices.ulong4x2@,System.UInt64,GenMathematics.Matrices.ulong4x2@)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong4x2.Divide(System.UInt64,GenMathematics.Matrices.ulong4x2@,GenMathematics.Matrices.ulong4x2@)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong4x2.op_Multiply(GenMathematics.Matrices.ulong4x2,System.UInt64)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong4x2.op_Multiply(System.UInt64,GenMathematics.Matrices.ulong4x2)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong4x2.op_Division(GenMathematics.Matrices.ulong4x2,System.UInt64)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong4x2.op_Division(System.UInt64,GenMathematics.Matrices.ulong4x2)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong4x2.op_Explicit(GenMathematics.Matrices.sbyte4x2)~GenMathematics.Matrices.ulong4x2">
            <summary>
            Converts sbyte4x2 to ulong4x2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong4x2.op_Explicit(GenMathematics.Matrices.short4x2)~GenMathematics.Matrices.ulong4x2">
            <summary>
            Converts short4x2 to ulong4x2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong4x2.op_Explicit(GenMathematics.Matrices.int4x2)~GenMathematics.Matrices.ulong4x2">
            <summary>
            Converts int4x2 to ulong4x2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong4x2.op_Explicit(GenMathematics.Matrices.long4x2)~GenMathematics.Matrices.ulong4x2">
            <summary>
            Converts long4x2 to ulong4x2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong4x2.op_Explicit(GenMathematics.Matrices.half4x2)~GenMathematics.Matrices.ulong4x2">
            <summary>
            Converts half4x2 to ulong4x2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong4x2.op_Explicit(GenMathematics.Matrices.float4x2)~GenMathematics.Matrices.ulong4x2">
            <summary>
            Converts float4x2 to ulong4x2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong4x2.op_Explicit(GenMathematics.Matrices.double4x2)~GenMathematics.Matrices.ulong4x2">
            <summary>
            Converts double4x2 to ulong4x2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong4x2.op_Implicit(GenMathematics.Matrices.byte4x2)~GenMathematics.Matrices.ulong4x2">
            <summary>
            Converts byte4x2 to ulong4x2
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong4x2.op_Implicit(GenMathematics.Matrices.ushort4x2)~GenMathematics.Matrices.ulong4x2">
            <summary>
            Converts ushort4x2 to ulong4x2
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong4x2.op_Implicit(GenMathematics.Matrices.uint4x2)~GenMathematics.Matrices.ulong4x2">
            <summary>
            Converts uint4x2 to ulong4x2
            </summary>
        </member>
        <member name="T:GenMathematics.Matrices.ulong4x3">
            <summary>
            Matrix of type ulong with 4 rows and 3 columns using the column-major order
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.ulong4x3.Column0">
            <summary>
            Matrix column with index 0
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.ulong4x3.Column1">
            <summary>
            Matrix column with index 1
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.ulong4x3.Column2">
            <summary>
            Matrix column with index 2
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.ulong4x3.Row0">
            <summary>
            Matrix row with index 0
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.ulong4x3.Row1">
            <summary>
            Matrix row with index 1
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.ulong4x3.Row2">
            <summary>
            Matrix row with index 2
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.ulong4x3.Row3">
            <summary>
            Matrix row with index 3
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong4x3.#ctor(GenMathematics.Vectors.ulong4,GenMathematics.Vectors.ulong4,GenMathematics.Vectors.ulong4)">
            <summary>
            Creates a matrix from column values
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong4x3.#ctor(System.UInt64,System.UInt64,System.UInt64,System.UInt64,System.UInt64,System.UInt64,System.UInt64,System.UInt64,System.UInt64,System.UInt64,System.UInt64,System.UInt64)">
            <summary>
            Creates a matrix from the values of rows and columns
            </summary>
            <param name="r0c0">The value to assign to row 0 and column 0 of the matrix</param>
            <param name="r0c1">The value to assign to row 0 and column 1 of the matrix</param>
            <param name="r0c2">The value to assign to row 0 and column 2 of the matrix</param>
            <param name="r1c0">The value to assign to row 1 and column 0 of the matrix</param>
            <param name="r1c1">The value to assign to row 1 and column 1 of the matrix</param>
            <param name="r1c2">The value to assign to row 1 and column 2 of the matrix</param>
            <param name="r2c0">The value to assign to row 2 and column 0 of the matrix</param>
            <param name="r2c1">The value to assign to row 2 and column 1 of the matrix</param>
            <param name="r2c2">The value to assign to row 2 and column 2 of the matrix</param>
            <param name="r3c0">The value to assign to row 3 and column 0 of the matrix</param>
            <param name="r3c1">The value to assign to row 3 and column 1 of the matrix</param>
            <param name="r3c2">The value to assign to row 3 and column 2 of the matrix</param>
        </member>
        <member name="P:GenMathematics.Matrices.ulong4x3.Item(System.Int32)">
            <summary>
            To access via the reference use `Unsafe.Add(ref matrix.Column0, index)` instead
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong4x3.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.ulong4x3.Equals(GenMathematics.Matrices.ulong4x3)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.ulong4x3.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.ulong4x3.CompareTo(GenMathematics.Matrices.ulong4x3)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.ulong4x3.ToString">
            <summary>
            Returns the object's state information as a string
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong4x3.Extract(GenMathematics.Matrices.ulong4x3@,System.Int32,System.Int32,GenMathematics.Matrices.ulong4x3@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong4x3.Extract(GenMathematics.Matrices.ulong4x3@,System.Int32,System.Int32,GenMathematics.Matrices.ulong3x3@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong4x3.Extract(GenMathematics.Matrices.ulong4x3@,System.Int32,System.Int32,GenMathematics.Matrices.ulong2x3@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong4x3.Extract(GenMathematics.Matrices.ulong4x3@,System.Int32,System.Int32,GenMathematics.Matrices.ulong4x2@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong4x3.Extract(GenMathematics.Matrices.ulong4x3@,System.Int32,System.Int32,GenMathematics.Matrices.ulong3x2@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong4x3.Extract(GenMathematics.Matrices.ulong4x3@,System.Int32,System.Int32,GenMathematics.Matrices.ulong2x2@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong4x3.Multiply(GenMathematics.Matrices.ulong4x3,System.UInt64)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong4x3.Multiply(System.UInt64,GenMathematics.Matrices.ulong4x3)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong4x3.Multiply(GenMathematics.Matrices.ulong4x3@,System.UInt64,GenMathematics.Matrices.ulong4x3@)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong4x3.Multiply(System.UInt64,GenMathematics.Matrices.ulong4x3@,GenMathematics.Matrices.ulong4x3@)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong4x3.Divide(GenMathematics.Matrices.ulong4x3,System.UInt64)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong4x3.Divide(System.UInt64,GenMathematics.Matrices.ulong4x3)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong4x3.Divide(GenMathematics.Matrices.ulong4x3@,System.UInt64,GenMathematics.Matrices.ulong4x3@)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong4x3.Divide(System.UInt64,GenMathematics.Matrices.ulong4x3@,GenMathematics.Matrices.ulong4x3@)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong4x3.op_Multiply(GenMathematics.Matrices.ulong4x3,System.UInt64)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong4x3.op_Multiply(System.UInt64,GenMathematics.Matrices.ulong4x3)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong4x3.op_Division(GenMathematics.Matrices.ulong4x3,System.UInt64)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong4x3.op_Division(System.UInt64,GenMathematics.Matrices.ulong4x3)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong4x3.op_Explicit(GenMathematics.Matrices.sbyte4x3)~GenMathematics.Matrices.ulong4x3">
            <summary>
            Converts sbyte4x3 to ulong4x3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong4x3.op_Explicit(GenMathematics.Matrices.short4x3)~GenMathematics.Matrices.ulong4x3">
            <summary>
            Converts short4x3 to ulong4x3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong4x3.op_Explicit(GenMathematics.Matrices.int4x3)~GenMathematics.Matrices.ulong4x3">
            <summary>
            Converts int4x3 to ulong4x3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong4x3.op_Explicit(GenMathematics.Matrices.long4x3)~GenMathematics.Matrices.ulong4x3">
            <summary>
            Converts long4x3 to ulong4x3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong4x3.op_Explicit(GenMathematics.Matrices.half4x3)~GenMathematics.Matrices.ulong4x3">
            <summary>
            Converts half4x3 to ulong4x3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong4x3.op_Explicit(GenMathematics.Matrices.float4x3)~GenMathematics.Matrices.ulong4x3">
            <summary>
            Converts float4x3 to ulong4x3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong4x3.op_Explicit(GenMathematics.Matrices.double4x3)~GenMathematics.Matrices.ulong4x3">
            <summary>
            Converts double4x3 to ulong4x3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong4x3.op_Implicit(GenMathematics.Matrices.byte4x3)~GenMathematics.Matrices.ulong4x3">
            <summary>
            Converts byte4x3 to ulong4x3
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong4x3.op_Implicit(GenMathematics.Matrices.ushort4x3)~GenMathematics.Matrices.ulong4x3">
            <summary>
            Converts ushort4x3 to ulong4x3
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong4x3.op_Implicit(GenMathematics.Matrices.uint4x3)~GenMathematics.Matrices.ulong4x3">
            <summary>
            Converts uint4x3 to ulong4x3
            </summary>
        </member>
        <member name="T:GenMathematics.Matrices.ulong4x4">
            <summary>
            Matrix of type ulong with 4 rows and 4 columns using the column-major order
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.ulong4x4.Column0">
            <summary>
            Matrix column with index 0
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.ulong4x4.Column1">
            <summary>
            Matrix column with index 1
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.ulong4x4.Column2">
            <summary>
            Matrix column with index 2
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.ulong4x4.Column3">
            <summary>
            Matrix column with index 3
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.ulong4x4.Row0">
            <summary>
            Matrix row with index 0
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.ulong4x4.Row1">
            <summary>
            Matrix row with index 1
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.ulong4x4.Row2">
            <summary>
            Matrix row with index 2
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.ulong4x4.Row3">
            <summary>
            Matrix row with index 3
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong4x4.#ctor(GenMathematics.Vectors.ulong4,GenMathematics.Vectors.ulong4,GenMathematics.Vectors.ulong4,GenMathematics.Vectors.ulong4)">
            <summary>
            Creates a matrix from column values
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong4x4.#ctor(System.UInt64,System.UInt64,System.UInt64,System.UInt64,System.UInt64,System.UInt64,System.UInt64,System.UInt64,System.UInt64,System.UInt64,System.UInt64,System.UInt64,System.UInt64,System.UInt64,System.UInt64,System.UInt64)">
            <summary>
            Creates a matrix from the values of rows and columns
            </summary>
            <param name="r0c0">The value to assign to row 0 and column 0 of the matrix</param>
            <param name="r0c1">The value to assign to row 0 and column 1 of the matrix</param>
            <param name="r0c2">The value to assign to row 0 and column 2 of the matrix</param>
            <param name="r0c3">The value to assign to row 0 and column 3 of the matrix</param>
            <param name="r1c0">The value to assign to row 1 and column 0 of the matrix</param>
            <param name="r1c1">The value to assign to row 1 and column 1 of the matrix</param>
            <param name="r1c2">The value to assign to row 1 and column 2 of the matrix</param>
            <param name="r1c3">The value to assign to row 1 and column 3 of the matrix</param>
            <param name="r2c0">The value to assign to row 2 and column 0 of the matrix</param>
            <param name="r2c1">The value to assign to row 2 and column 1 of the matrix</param>
            <param name="r2c2">The value to assign to row 2 and column 2 of the matrix</param>
            <param name="r2c3">The value to assign to row 2 and column 3 of the matrix</param>
            <param name="r3c0">The value to assign to row 3 and column 0 of the matrix</param>
            <param name="r3c1">The value to assign to row 3 and column 1 of the matrix</param>
            <param name="r3c2">The value to assign to row 3 and column 2 of the matrix</param>
            <param name="r3c3">The value to assign to row 3 and column 3 of the matrix</param>
        </member>
        <member name="P:GenMathematics.Matrices.ulong4x4.Item(System.Int32)">
            <summary>
            To access via the reference use `Unsafe.Add(ref matrix.Column0, index)` instead
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong4x4.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.ulong4x4.Equals(GenMathematics.Matrices.ulong4x4)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.ulong4x4.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.ulong4x4.CompareTo(GenMathematics.Matrices.ulong4x4)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.ulong4x4.ToString">
            <summary>
            Returns the object's state information as a string
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong4x4.Extract(GenMathematics.Matrices.ulong4x4@,System.Int32,System.Int32,GenMathematics.Matrices.ulong4x4@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong4x4.Extract(GenMathematics.Matrices.ulong4x4@,System.Int32,System.Int32,GenMathematics.Matrices.ulong3x4@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong4x4.Extract(GenMathematics.Matrices.ulong4x4@,System.Int32,System.Int32,GenMathematics.Matrices.ulong2x4@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong4x4.Extract(GenMathematics.Matrices.ulong4x4@,System.Int32,System.Int32,GenMathematics.Matrices.ulong4x3@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong4x4.Extract(GenMathematics.Matrices.ulong4x4@,System.Int32,System.Int32,GenMathematics.Matrices.ulong3x3@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong4x4.Extract(GenMathematics.Matrices.ulong4x4@,System.Int32,System.Int32,GenMathematics.Matrices.ulong2x3@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong4x4.Extract(GenMathematics.Matrices.ulong4x4@,System.Int32,System.Int32,GenMathematics.Matrices.ulong4x2@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong4x4.Extract(GenMathematics.Matrices.ulong4x4@,System.Int32,System.Int32,GenMathematics.Matrices.ulong3x2@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong4x4.Extract(GenMathematics.Matrices.ulong4x4@,System.Int32,System.Int32,GenMathematics.Matrices.ulong2x2@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong4x4.Multiply(GenMathematics.Matrices.ulong4x4,System.UInt64)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong4x4.Multiply(System.UInt64,GenMathematics.Matrices.ulong4x4)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong4x4.Multiply(GenMathematics.Matrices.ulong4x4@,System.UInt64,GenMathematics.Matrices.ulong4x4@)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong4x4.Multiply(System.UInt64,GenMathematics.Matrices.ulong4x4@,GenMathematics.Matrices.ulong4x4@)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong4x4.Divide(GenMathematics.Matrices.ulong4x4,System.UInt64)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong4x4.Divide(System.UInt64,GenMathematics.Matrices.ulong4x4)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong4x4.Divide(GenMathematics.Matrices.ulong4x4@,System.UInt64,GenMathematics.Matrices.ulong4x4@)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong4x4.Divide(System.UInt64,GenMathematics.Matrices.ulong4x4@,GenMathematics.Matrices.ulong4x4@)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong4x4.op_Multiply(GenMathematics.Matrices.ulong4x4,System.UInt64)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong4x4.op_Multiply(System.UInt64,GenMathematics.Matrices.ulong4x4)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong4x4.op_Division(GenMathematics.Matrices.ulong4x4,System.UInt64)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong4x4.op_Division(System.UInt64,GenMathematics.Matrices.ulong4x4)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong4x4.op_Explicit(GenMathematics.Matrices.sbyte4x4)~GenMathematics.Matrices.ulong4x4">
            <summary>
            Converts sbyte4x4 to ulong4x4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong4x4.op_Explicit(GenMathematics.Matrices.short4x4)~GenMathematics.Matrices.ulong4x4">
            <summary>
            Converts short4x4 to ulong4x4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong4x4.op_Explicit(GenMathematics.Matrices.int4x4)~GenMathematics.Matrices.ulong4x4">
            <summary>
            Converts int4x4 to ulong4x4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong4x4.op_Explicit(GenMathematics.Matrices.long4x4)~GenMathematics.Matrices.ulong4x4">
            <summary>
            Converts long4x4 to ulong4x4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong4x4.op_Explicit(GenMathematics.Matrices.half4x4)~GenMathematics.Matrices.ulong4x4">
            <summary>
            Converts half4x4 to ulong4x4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong4x4.op_Explicit(GenMathematics.Matrices.float4x4)~GenMathematics.Matrices.ulong4x4">
            <summary>
            Converts float4x4 to ulong4x4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong4x4.op_Explicit(GenMathematics.Matrices.double4x4)~GenMathematics.Matrices.ulong4x4">
            <summary>
            Converts double4x4 to ulong4x4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong4x4.op_Implicit(GenMathematics.Matrices.byte4x4)~GenMathematics.Matrices.ulong4x4">
            <summary>
            Converts byte4x4 to ulong4x4
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong4x4.op_Implicit(GenMathematics.Matrices.ushort4x4)~GenMathematics.Matrices.ulong4x4">
            <summary>
            Converts ushort4x4 to ulong4x4
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ulong4x4.op_Implicit(GenMathematics.Matrices.uint4x4)~GenMathematics.Matrices.ulong4x4">
            <summary>
            Converts uint4x4 to ulong4x4
            </summary>
        </member>
        <member name="T:GenMathematics.Matrices.ushort2x2">
            <summary>
            Matrix of type ushort with 2 rows and 2 columns using the column-major order
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.ushort2x2.Column0">
            <summary>
            Matrix column with index 0
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.ushort2x2.Column1">
            <summary>
            Matrix column with index 1
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.ushort2x2.Row0">
            <summary>
            Matrix row with index 0
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.ushort2x2.Row1">
            <summary>
            Matrix row with index 1
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ushort2x2.#ctor(GenMathematics.Vectors.ushort2,GenMathematics.Vectors.ushort2)">
            <summary>
            Creates a matrix from column values
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ushort2x2.#ctor(System.UInt16,System.UInt16,System.UInt16,System.UInt16)">
            <summary>
            Creates a matrix from the values of rows and columns
            </summary>
            <param name="r0c0">The value to assign to row 0 and column 0 of the matrix</param>
            <param name="r0c1">The value to assign to row 0 and column 1 of the matrix</param>
            <param name="r1c0">The value to assign to row 1 and column 0 of the matrix</param>
            <param name="r1c1">The value to assign to row 1 and column 1 of the matrix</param>
        </member>
        <member name="P:GenMathematics.Matrices.ushort2x2.Item(System.Int32)">
            <summary>
            To access via the reference use `Unsafe.Add(ref matrix.Column0, index)` instead
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ushort2x2.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.ushort2x2.Equals(GenMathematics.Matrices.ushort2x2)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.ushort2x2.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.ushort2x2.CompareTo(GenMathematics.Matrices.ushort2x2)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.ushort2x2.ToString">
            <summary>
            Returns the object's state information as a string
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ushort2x2.Extract(GenMathematics.Matrices.ushort2x2,System.Int32,System.Int32,GenMathematics.Matrices.ushort2x2@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ushort2x2.op_Explicit(GenMathematics.Matrices.sbyte2x2)~GenMathematics.Matrices.ushort2x2">
            <summary>
            Converts sbyte2x2 to ushort2x2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ushort2x2.op_Explicit(GenMathematics.Matrices.short2x2)~GenMathematics.Matrices.ushort2x2">
            <summary>
            Converts short2x2 to ushort2x2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ushort2x2.op_Explicit(GenMathematics.Matrices.int2x2)~GenMathematics.Matrices.ushort2x2">
            <summary>
            Converts int2x2 to ushort2x2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ushort2x2.op_Explicit(GenMathematics.Matrices.uint2x2)~GenMathematics.Matrices.ushort2x2">
            <summary>
            Converts uint2x2 to ushort2x2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ushort2x2.op_Explicit(GenMathematics.Matrices.long2x2)~GenMathematics.Matrices.ushort2x2">
            <summary>
            Converts long2x2 to ushort2x2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ushort2x2.op_Explicit(GenMathematics.Matrices.ulong2x2)~GenMathematics.Matrices.ushort2x2">
            <summary>
            Converts ulong2x2 to ushort2x2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ushort2x2.op_Explicit(GenMathematics.Matrices.half2x2)~GenMathematics.Matrices.ushort2x2">
            <summary>
            Converts half2x2 to ushort2x2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ushort2x2.op_Explicit(GenMathematics.Matrices.float2x2)~GenMathematics.Matrices.ushort2x2">
            <summary>
            Converts float2x2 to ushort2x2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ushort2x2.op_Explicit(GenMathematics.Matrices.double2x2)~GenMathematics.Matrices.ushort2x2">
            <summary>
            Converts double2x2 to ushort2x2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ushort2x2.op_Implicit(GenMathematics.Matrices.byte2x2)~GenMathematics.Matrices.ushort2x2">
            <summary>
            Converts byte2x2 to ushort2x2
            </summary>
        </member>
        <member name="T:GenMathematics.Matrices.ushort2x3">
            <summary>
            Matrix of type ushort with 2 rows and 3 columns using the column-major order
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.ushort2x3.Column0">
            <summary>
            Matrix column with index 0
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.ushort2x3.Column1">
            <summary>
            Matrix column with index 1
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.ushort2x3.Column2">
            <summary>
            Matrix column with index 2
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.ushort2x3.Row0">
            <summary>
            Matrix row with index 0
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.ushort2x3.Row1">
            <summary>
            Matrix row with index 1
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ushort2x3.#ctor(GenMathematics.Vectors.ushort2,GenMathematics.Vectors.ushort2,GenMathematics.Vectors.ushort2)">
            <summary>
            Creates a matrix from column values
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ushort2x3.#ctor(System.UInt16,System.UInt16,System.UInt16,System.UInt16,System.UInt16,System.UInt16)">
            <summary>
            Creates a matrix from the values of rows and columns
            </summary>
            <param name="r0c0">The value to assign to row 0 and column 0 of the matrix</param>
            <param name="r0c1">The value to assign to row 0 and column 1 of the matrix</param>
            <param name="r0c2">The value to assign to row 0 and column 2 of the matrix</param>
            <param name="r1c0">The value to assign to row 1 and column 0 of the matrix</param>
            <param name="r1c1">The value to assign to row 1 and column 1 of the matrix</param>
            <param name="r1c2">The value to assign to row 1 and column 2 of the matrix</param>
        </member>
        <member name="P:GenMathematics.Matrices.ushort2x3.Item(System.Int32)">
            <summary>
            To access via the reference use `Unsafe.Add(ref matrix.Column0, index)` instead
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ushort2x3.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.ushort2x3.Equals(GenMathematics.Matrices.ushort2x3)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.ushort2x3.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.ushort2x3.CompareTo(GenMathematics.Matrices.ushort2x3)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.ushort2x3.ToString">
            <summary>
            Returns the object's state information as a string
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ushort2x3.Extract(GenMathematics.Matrices.ushort2x3@,System.Int32,System.Int32,GenMathematics.Matrices.ushort2x3@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ushort2x3.Extract(GenMathematics.Matrices.ushort2x3@,System.Int32,System.Int32,GenMathematics.Matrices.ushort2x2@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ushort2x3.op_Explicit(GenMathematics.Matrices.sbyte2x3)~GenMathematics.Matrices.ushort2x3">
            <summary>
            Converts sbyte2x3 to ushort2x3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ushort2x3.op_Explicit(GenMathematics.Matrices.short2x3)~GenMathematics.Matrices.ushort2x3">
            <summary>
            Converts short2x3 to ushort2x3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ushort2x3.op_Explicit(GenMathematics.Matrices.int2x3)~GenMathematics.Matrices.ushort2x3">
            <summary>
            Converts int2x3 to ushort2x3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ushort2x3.op_Explicit(GenMathematics.Matrices.uint2x3)~GenMathematics.Matrices.ushort2x3">
            <summary>
            Converts uint2x3 to ushort2x3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ushort2x3.op_Explicit(GenMathematics.Matrices.long2x3)~GenMathematics.Matrices.ushort2x3">
            <summary>
            Converts long2x3 to ushort2x3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ushort2x3.op_Explicit(GenMathematics.Matrices.ulong2x3)~GenMathematics.Matrices.ushort2x3">
            <summary>
            Converts ulong2x3 to ushort2x3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ushort2x3.op_Explicit(GenMathematics.Matrices.half2x3)~GenMathematics.Matrices.ushort2x3">
            <summary>
            Converts half2x3 to ushort2x3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ushort2x3.op_Explicit(GenMathematics.Matrices.float2x3)~GenMathematics.Matrices.ushort2x3">
            <summary>
            Converts float2x3 to ushort2x3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ushort2x3.op_Explicit(GenMathematics.Matrices.double2x3)~GenMathematics.Matrices.ushort2x3">
            <summary>
            Converts double2x3 to ushort2x3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ushort2x3.op_Implicit(GenMathematics.Matrices.byte2x3)~GenMathematics.Matrices.ushort2x3">
            <summary>
            Converts byte2x3 to ushort2x3
            </summary>
        </member>
        <member name="T:GenMathematics.Matrices.ushort2x4">
            <summary>
            Matrix of type ushort with 2 rows and 4 columns using the column-major order
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.ushort2x4.Column0">
            <summary>
            Matrix column with index 0
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.ushort2x4.Column1">
            <summary>
            Matrix column with index 1
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.ushort2x4.Column2">
            <summary>
            Matrix column with index 2
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.ushort2x4.Column3">
            <summary>
            Matrix column with index 3
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.ushort2x4.Row0">
            <summary>
            Matrix row with index 0
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.ushort2x4.Row1">
            <summary>
            Matrix row with index 1
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ushort2x4.#ctor(GenMathematics.Vectors.ushort2,GenMathematics.Vectors.ushort2,GenMathematics.Vectors.ushort2,GenMathematics.Vectors.ushort2)">
            <summary>
            Creates a matrix from column values
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ushort2x4.#ctor(System.UInt16,System.UInt16,System.UInt16,System.UInt16,System.UInt16,System.UInt16,System.UInt16,System.UInt16)">
            <summary>
            Creates a matrix from the values of rows and columns
            </summary>
            <param name="r0c0">The value to assign to row 0 and column 0 of the matrix</param>
            <param name="r0c1">The value to assign to row 0 and column 1 of the matrix</param>
            <param name="r0c2">The value to assign to row 0 and column 2 of the matrix</param>
            <param name="r0c3">The value to assign to row 0 and column 3 of the matrix</param>
            <param name="r1c0">The value to assign to row 1 and column 0 of the matrix</param>
            <param name="r1c1">The value to assign to row 1 and column 1 of the matrix</param>
            <param name="r1c2">The value to assign to row 1 and column 2 of the matrix</param>
            <param name="r1c3">The value to assign to row 1 and column 3 of the matrix</param>
        </member>
        <member name="P:GenMathematics.Matrices.ushort2x4.Item(System.Int32)">
            <summary>
            To access via the reference use `Unsafe.Add(ref matrix.Column0, index)` instead
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ushort2x4.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.ushort2x4.Equals(GenMathematics.Matrices.ushort2x4)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.ushort2x4.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.ushort2x4.CompareTo(GenMathematics.Matrices.ushort2x4)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.ushort2x4.ToString">
            <summary>
            Returns the object's state information as a string
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ushort2x4.Extract(GenMathematics.Matrices.ushort2x4@,System.Int32,System.Int32,GenMathematics.Matrices.ushort2x4@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ushort2x4.Extract(GenMathematics.Matrices.ushort2x4@,System.Int32,System.Int32,GenMathematics.Matrices.ushort2x3@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ushort2x4.Extract(GenMathematics.Matrices.ushort2x4@,System.Int32,System.Int32,GenMathematics.Matrices.ushort2x2@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ushort2x4.op_Explicit(GenMathematics.Matrices.sbyte2x4)~GenMathematics.Matrices.ushort2x4">
            <summary>
            Converts sbyte2x4 to ushort2x4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ushort2x4.op_Explicit(GenMathematics.Matrices.short2x4)~GenMathematics.Matrices.ushort2x4">
            <summary>
            Converts short2x4 to ushort2x4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ushort2x4.op_Explicit(GenMathematics.Matrices.int2x4)~GenMathematics.Matrices.ushort2x4">
            <summary>
            Converts int2x4 to ushort2x4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ushort2x4.op_Explicit(GenMathematics.Matrices.uint2x4)~GenMathematics.Matrices.ushort2x4">
            <summary>
            Converts uint2x4 to ushort2x4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ushort2x4.op_Explicit(GenMathematics.Matrices.long2x4)~GenMathematics.Matrices.ushort2x4">
            <summary>
            Converts long2x4 to ushort2x4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ushort2x4.op_Explicit(GenMathematics.Matrices.ulong2x4)~GenMathematics.Matrices.ushort2x4">
            <summary>
            Converts ulong2x4 to ushort2x4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ushort2x4.op_Explicit(GenMathematics.Matrices.half2x4)~GenMathematics.Matrices.ushort2x4">
            <summary>
            Converts half2x4 to ushort2x4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ushort2x4.op_Explicit(GenMathematics.Matrices.float2x4)~GenMathematics.Matrices.ushort2x4">
            <summary>
            Converts float2x4 to ushort2x4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ushort2x4.op_Explicit(GenMathematics.Matrices.double2x4)~GenMathematics.Matrices.ushort2x4">
            <summary>
            Converts double2x4 to ushort2x4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ushort2x4.op_Implicit(GenMathematics.Matrices.byte2x4)~GenMathematics.Matrices.ushort2x4">
            <summary>
            Converts byte2x4 to ushort2x4
            </summary>
        </member>
        <member name="T:GenMathematics.Matrices.ushort3x2">
            <summary>
            Matrix of type ushort with 3 rows and 2 columns using the column-major order
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.ushort3x2.Column0">
            <summary>
            Matrix column with index 0
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.ushort3x2.Column1">
            <summary>
            Matrix column with index 1
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.ushort3x2.Row0">
            <summary>
            Matrix row with index 0
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.ushort3x2.Row1">
            <summary>
            Matrix row with index 1
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.ushort3x2.Row2">
            <summary>
            Matrix row with index 2
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ushort3x2.#ctor(GenMathematics.Vectors.ushort3,GenMathematics.Vectors.ushort3)">
            <summary>
            Creates a matrix from column values
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ushort3x2.#ctor(System.UInt16,System.UInt16,System.UInt16,System.UInt16,System.UInt16,System.UInt16)">
            <summary>
            Creates a matrix from the values of rows and columns
            </summary>
            <param name="r0c0">The value to assign to row 0 and column 0 of the matrix</param>
            <param name="r0c1">The value to assign to row 0 and column 1 of the matrix</param>
            <param name="r1c0">The value to assign to row 1 and column 0 of the matrix</param>
            <param name="r1c1">The value to assign to row 1 and column 1 of the matrix</param>
            <param name="r2c0">The value to assign to row 2 and column 0 of the matrix</param>
            <param name="r2c1">The value to assign to row 2 and column 1 of the matrix</param>
        </member>
        <member name="P:GenMathematics.Matrices.ushort3x2.Item(System.Int32)">
            <summary>
            To access via the reference use `Unsafe.Add(ref matrix.Column0, index)` instead
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ushort3x2.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.ushort3x2.Equals(GenMathematics.Matrices.ushort3x2)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.ushort3x2.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.ushort3x2.CompareTo(GenMathematics.Matrices.ushort3x2)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.ushort3x2.ToString">
            <summary>
            Returns the object's state information as a string
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ushort3x2.Extract(GenMathematics.Matrices.ushort3x2@,System.Int32,System.Int32,GenMathematics.Matrices.ushort3x2@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ushort3x2.Extract(GenMathematics.Matrices.ushort3x2@,System.Int32,System.Int32,GenMathematics.Matrices.ushort2x2@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ushort3x2.op_Explicit(GenMathematics.Matrices.sbyte3x2)~GenMathematics.Matrices.ushort3x2">
            <summary>
            Converts sbyte3x2 to ushort3x2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ushort3x2.op_Explicit(GenMathematics.Matrices.short3x2)~GenMathematics.Matrices.ushort3x2">
            <summary>
            Converts short3x2 to ushort3x2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ushort3x2.op_Explicit(GenMathematics.Matrices.int3x2)~GenMathematics.Matrices.ushort3x2">
            <summary>
            Converts int3x2 to ushort3x2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ushort3x2.op_Explicit(GenMathematics.Matrices.uint3x2)~GenMathematics.Matrices.ushort3x2">
            <summary>
            Converts uint3x2 to ushort3x2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ushort3x2.op_Explicit(GenMathematics.Matrices.long3x2)~GenMathematics.Matrices.ushort3x2">
            <summary>
            Converts long3x2 to ushort3x2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ushort3x2.op_Explicit(GenMathematics.Matrices.ulong3x2)~GenMathematics.Matrices.ushort3x2">
            <summary>
            Converts ulong3x2 to ushort3x2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ushort3x2.op_Explicit(GenMathematics.Matrices.half3x2)~GenMathematics.Matrices.ushort3x2">
            <summary>
            Converts half3x2 to ushort3x2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ushort3x2.op_Explicit(GenMathematics.Matrices.float3x2)~GenMathematics.Matrices.ushort3x2">
            <summary>
            Converts float3x2 to ushort3x2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ushort3x2.op_Explicit(GenMathematics.Matrices.double3x2)~GenMathematics.Matrices.ushort3x2">
            <summary>
            Converts double3x2 to ushort3x2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ushort3x2.op_Implicit(GenMathematics.Matrices.byte3x2)~GenMathematics.Matrices.ushort3x2">
            <summary>
            Converts byte3x2 to ushort3x2
            </summary>
        </member>
        <member name="T:GenMathematics.Matrices.ushort3x3">
            <summary>
            Matrix of type ushort with 3 rows and 3 columns using the column-major order
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.ushort3x3.Column0">
            <summary>
            Matrix column with index 0
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.ushort3x3.Column1">
            <summary>
            Matrix column with index 1
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.ushort3x3.Column2">
            <summary>
            Matrix column with index 2
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.ushort3x3.Row0">
            <summary>
            Matrix row with index 0
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.ushort3x3.Row1">
            <summary>
            Matrix row with index 1
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.ushort3x3.Row2">
            <summary>
            Matrix row with index 2
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ushort3x3.#ctor(GenMathematics.Vectors.ushort3,GenMathematics.Vectors.ushort3,GenMathematics.Vectors.ushort3)">
            <summary>
            Creates a matrix from column values
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ushort3x3.#ctor(System.UInt16,System.UInt16,System.UInt16,System.UInt16,System.UInt16,System.UInt16,System.UInt16,System.UInt16,System.UInt16)">
            <summary>
            Creates a matrix from the values of rows and columns
            </summary>
            <param name="r0c0">The value to assign to row 0 and column 0 of the matrix</param>
            <param name="r0c1">The value to assign to row 0 and column 1 of the matrix</param>
            <param name="r0c2">The value to assign to row 0 and column 2 of the matrix</param>
            <param name="r1c0">The value to assign to row 1 and column 0 of the matrix</param>
            <param name="r1c1">The value to assign to row 1 and column 1 of the matrix</param>
            <param name="r1c2">The value to assign to row 1 and column 2 of the matrix</param>
            <param name="r2c0">The value to assign to row 2 and column 0 of the matrix</param>
            <param name="r2c1">The value to assign to row 2 and column 1 of the matrix</param>
            <param name="r2c2">The value to assign to row 2 and column 2 of the matrix</param>
        </member>
        <member name="P:GenMathematics.Matrices.ushort3x3.Item(System.Int32)">
            <summary>
            To access via the reference use `Unsafe.Add(ref matrix.Column0, index)` instead
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ushort3x3.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.ushort3x3.Equals(GenMathematics.Matrices.ushort3x3)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.ushort3x3.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.ushort3x3.CompareTo(GenMathematics.Matrices.ushort3x3)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.ushort3x3.ToString">
            <summary>
            Returns the object's state information as a string
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ushort3x3.Extract(GenMathematics.Matrices.ushort3x3@,System.Int32,System.Int32,GenMathematics.Matrices.ushort3x3@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ushort3x3.Extract(GenMathematics.Matrices.ushort3x3@,System.Int32,System.Int32,GenMathematics.Matrices.ushort2x3@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ushort3x3.Extract(GenMathematics.Matrices.ushort3x3@,System.Int32,System.Int32,GenMathematics.Matrices.ushort3x2@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ushort3x3.Extract(GenMathematics.Matrices.ushort3x3@,System.Int32,System.Int32,GenMathematics.Matrices.ushort2x2@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ushort3x3.op_Explicit(GenMathematics.Matrices.sbyte3x3)~GenMathematics.Matrices.ushort3x3">
            <summary>
            Converts sbyte3x3 to ushort3x3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ushort3x3.op_Explicit(GenMathematics.Matrices.short3x3)~GenMathematics.Matrices.ushort3x3">
            <summary>
            Converts short3x3 to ushort3x3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ushort3x3.op_Explicit(GenMathematics.Matrices.int3x3)~GenMathematics.Matrices.ushort3x3">
            <summary>
            Converts int3x3 to ushort3x3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ushort3x3.op_Explicit(GenMathematics.Matrices.uint3x3)~GenMathematics.Matrices.ushort3x3">
            <summary>
            Converts uint3x3 to ushort3x3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ushort3x3.op_Explicit(GenMathematics.Matrices.long3x3)~GenMathematics.Matrices.ushort3x3">
            <summary>
            Converts long3x3 to ushort3x3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ushort3x3.op_Explicit(GenMathematics.Matrices.ulong3x3)~GenMathematics.Matrices.ushort3x3">
            <summary>
            Converts ulong3x3 to ushort3x3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ushort3x3.op_Explicit(GenMathematics.Matrices.half3x3)~GenMathematics.Matrices.ushort3x3">
            <summary>
            Converts half3x3 to ushort3x3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ushort3x3.op_Explicit(GenMathematics.Matrices.float3x3)~GenMathematics.Matrices.ushort3x3">
            <summary>
            Converts float3x3 to ushort3x3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ushort3x3.op_Explicit(GenMathematics.Matrices.double3x3)~GenMathematics.Matrices.ushort3x3">
            <summary>
            Converts double3x3 to ushort3x3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ushort3x3.op_Implicit(GenMathematics.Matrices.byte3x3)~GenMathematics.Matrices.ushort3x3">
            <summary>
            Converts byte3x3 to ushort3x3
            </summary>
        </member>
        <member name="T:GenMathematics.Matrices.ushort3x4">
            <summary>
            Matrix of type ushort with 3 rows and 4 columns using the column-major order
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.ushort3x4.Column0">
            <summary>
            Matrix column with index 0
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.ushort3x4.Column1">
            <summary>
            Matrix column with index 1
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.ushort3x4.Column2">
            <summary>
            Matrix column with index 2
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.ushort3x4.Column3">
            <summary>
            Matrix column with index 3
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.ushort3x4.Row0">
            <summary>
            Matrix row with index 0
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.ushort3x4.Row1">
            <summary>
            Matrix row with index 1
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.ushort3x4.Row2">
            <summary>
            Matrix row with index 2
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ushort3x4.#ctor(GenMathematics.Vectors.ushort3,GenMathematics.Vectors.ushort3,GenMathematics.Vectors.ushort3,GenMathematics.Vectors.ushort3)">
            <summary>
            Creates a matrix from column values
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ushort3x4.#ctor(System.UInt16,System.UInt16,System.UInt16,System.UInt16,System.UInt16,System.UInt16,System.UInt16,System.UInt16,System.UInt16,System.UInt16,System.UInt16,System.UInt16)">
            <summary>
            Creates a matrix from the values of rows and columns
            </summary>
            <param name="r0c0">The value to assign to row 0 and column 0 of the matrix</param>
            <param name="r0c1">The value to assign to row 0 and column 1 of the matrix</param>
            <param name="r0c2">The value to assign to row 0 and column 2 of the matrix</param>
            <param name="r0c3">The value to assign to row 0 and column 3 of the matrix</param>
            <param name="r1c0">The value to assign to row 1 and column 0 of the matrix</param>
            <param name="r1c1">The value to assign to row 1 and column 1 of the matrix</param>
            <param name="r1c2">The value to assign to row 1 and column 2 of the matrix</param>
            <param name="r1c3">The value to assign to row 1 and column 3 of the matrix</param>
            <param name="r2c0">The value to assign to row 2 and column 0 of the matrix</param>
            <param name="r2c1">The value to assign to row 2 and column 1 of the matrix</param>
            <param name="r2c2">The value to assign to row 2 and column 2 of the matrix</param>
            <param name="r2c3">The value to assign to row 2 and column 3 of the matrix</param>
        </member>
        <member name="P:GenMathematics.Matrices.ushort3x4.Item(System.Int32)">
            <summary>
            To access via the reference use `Unsafe.Add(ref matrix.Column0, index)` instead
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ushort3x4.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.ushort3x4.Equals(GenMathematics.Matrices.ushort3x4)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.ushort3x4.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.ushort3x4.CompareTo(GenMathematics.Matrices.ushort3x4)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.ushort3x4.ToString">
            <summary>
            Returns the object's state information as a string
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ushort3x4.Extract(GenMathematics.Matrices.ushort3x4@,System.Int32,System.Int32,GenMathematics.Matrices.ushort3x4@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ushort3x4.Extract(GenMathematics.Matrices.ushort3x4@,System.Int32,System.Int32,GenMathematics.Matrices.ushort2x4@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ushort3x4.Extract(GenMathematics.Matrices.ushort3x4@,System.Int32,System.Int32,GenMathematics.Matrices.ushort3x3@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ushort3x4.Extract(GenMathematics.Matrices.ushort3x4@,System.Int32,System.Int32,GenMathematics.Matrices.ushort2x3@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ushort3x4.Extract(GenMathematics.Matrices.ushort3x4@,System.Int32,System.Int32,GenMathematics.Matrices.ushort3x2@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ushort3x4.Extract(GenMathematics.Matrices.ushort3x4@,System.Int32,System.Int32,GenMathematics.Matrices.ushort2x2@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ushort3x4.op_Explicit(GenMathematics.Matrices.sbyte3x4)~GenMathematics.Matrices.ushort3x4">
            <summary>
            Converts sbyte3x4 to ushort3x4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ushort3x4.op_Explicit(GenMathematics.Matrices.short3x4)~GenMathematics.Matrices.ushort3x4">
            <summary>
            Converts short3x4 to ushort3x4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ushort3x4.op_Explicit(GenMathematics.Matrices.int3x4)~GenMathematics.Matrices.ushort3x4">
            <summary>
            Converts int3x4 to ushort3x4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ushort3x4.op_Explicit(GenMathematics.Matrices.uint3x4)~GenMathematics.Matrices.ushort3x4">
            <summary>
            Converts uint3x4 to ushort3x4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ushort3x4.op_Explicit(GenMathematics.Matrices.long3x4)~GenMathematics.Matrices.ushort3x4">
            <summary>
            Converts long3x4 to ushort3x4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ushort3x4.op_Explicit(GenMathematics.Matrices.ulong3x4)~GenMathematics.Matrices.ushort3x4">
            <summary>
            Converts ulong3x4 to ushort3x4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ushort3x4.op_Explicit(GenMathematics.Matrices.half3x4)~GenMathematics.Matrices.ushort3x4">
            <summary>
            Converts half3x4 to ushort3x4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ushort3x4.op_Explicit(GenMathematics.Matrices.float3x4)~GenMathematics.Matrices.ushort3x4">
            <summary>
            Converts float3x4 to ushort3x4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ushort3x4.op_Explicit(GenMathematics.Matrices.double3x4)~GenMathematics.Matrices.ushort3x4">
            <summary>
            Converts double3x4 to ushort3x4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ushort3x4.op_Implicit(GenMathematics.Matrices.byte3x4)~GenMathematics.Matrices.ushort3x4">
            <summary>
            Converts byte3x4 to ushort3x4
            </summary>
        </member>
        <member name="T:GenMathematics.Matrices.ushort4x2">
            <summary>
            Matrix of type ushort with 4 rows and 2 columns using the column-major order
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.ushort4x2.Column0">
            <summary>
            Matrix column with index 0
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.ushort4x2.Column1">
            <summary>
            Matrix column with index 1
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.ushort4x2.Row0">
            <summary>
            Matrix row with index 0
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.ushort4x2.Row1">
            <summary>
            Matrix row with index 1
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.ushort4x2.Row2">
            <summary>
            Matrix row with index 2
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.ushort4x2.Row3">
            <summary>
            Matrix row with index 3
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ushort4x2.#ctor(GenMathematics.Vectors.ushort4,GenMathematics.Vectors.ushort4)">
            <summary>
            Creates a matrix from column values
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ushort4x2.#ctor(System.UInt16,System.UInt16,System.UInt16,System.UInt16,System.UInt16,System.UInt16,System.UInt16,System.UInt16)">
            <summary>
            Creates a matrix from the values of rows and columns
            </summary>
            <param name="r0c0">The value to assign to row 0 and column 0 of the matrix</param>
            <param name="r0c1">The value to assign to row 0 and column 1 of the matrix</param>
            <param name="r1c0">The value to assign to row 1 and column 0 of the matrix</param>
            <param name="r1c1">The value to assign to row 1 and column 1 of the matrix</param>
            <param name="r2c0">The value to assign to row 2 and column 0 of the matrix</param>
            <param name="r2c1">The value to assign to row 2 and column 1 of the matrix</param>
            <param name="r3c0">The value to assign to row 3 and column 0 of the matrix</param>
            <param name="r3c1">The value to assign to row 3 and column 1 of the matrix</param>
        </member>
        <member name="P:GenMathematics.Matrices.ushort4x2.Item(System.Int32)">
            <summary>
            To access via the reference use `Unsafe.Add(ref matrix.Column0, index)` instead
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ushort4x2.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.ushort4x2.Equals(GenMathematics.Matrices.ushort4x2)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.ushort4x2.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.ushort4x2.CompareTo(GenMathematics.Matrices.ushort4x2)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.ushort4x2.ToString">
            <summary>
            Returns the object's state information as a string
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ushort4x2.Extract(GenMathematics.Matrices.ushort4x2@,System.Int32,System.Int32,GenMathematics.Matrices.ushort4x2@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ushort4x2.Extract(GenMathematics.Matrices.ushort4x2@,System.Int32,System.Int32,GenMathematics.Matrices.ushort3x2@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ushort4x2.Extract(GenMathematics.Matrices.ushort4x2@,System.Int32,System.Int32,GenMathematics.Matrices.ushort2x2@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ushort4x2.op_Explicit(GenMathematics.Matrices.sbyte4x2)~GenMathematics.Matrices.ushort4x2">
            <summary>
            Converts sbyte4x2 to ushort4x2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ushort4x2.op_Explicit(GenMathematics.Matrices.short4x2)~GenMathematics.Matrices.ushort4x2">
            <summary>
            Converts short4x2 to ushort4x2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ushort4x2.op_Explicit(GenMathematics.Matrices.int4x2)~GenMathematics.Matrices.ushort4x2">
            <summary>
            Converts int4x2 to ushort4x2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ushort4x2.op_Explicit(GenMathematics.Matrices.uint4x2)~GenMathematics.Matrices.ushort4x2">
            <summary>
            Converts uint4x2 to ushort4x2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ushort4x2.op_Explicit(GenMathematics.Matrices.long4x2)~GenMathematics.Matrices.ushort4x2">
            <summary>
            Converts long4x2 to ushort4x2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ushort4x2.op_Explicit(GenMathematics.Matrices.ulong4x2)~GenMathematics.Matrices.ushort4x2">
            <summary>
            Converts ulong4x2 to ushort4x2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ushort4x2.op_Explicit(GenMathematics.Matrices.half4x2)~GenMathematics.Matrices.ushort4x2">
            <summary>
            Converts half4x2 to ushort4x2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ushort4x2.op_Explicit(GenMathematics.Matrices.float4x2)~GenMathematics.Matrices.ushort4x2">
            <summary>
            Converts float4x2 to ushort4x2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ushort4x2.op_Explicit(GenMathematics.Matrices.double4x2)~GenMathematics.Matrices.ushort4x2">
            <summary>
            Converts double4x2 to ushort4x2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ushort4x2.op_Implicit(GenMathematics.Matrices.byte4x2)~GenMathematics.Matrices.ushort4x2">
            <summary>
            Converts byte4x2 to ushort4x2
            </summary>
        </member>
        <member name="T:GenMathematics.Matrices.ushort4x3">
            <summary>
            Matrix of type ushort with 4 rows and 3 columns using the column-major order
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.ushort4x3.Column0">
            <summary>
            Matrix column with index 0
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.ushort4x3.Column1">
            <summary>
            Matrix column with index 1
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.ushort4x3.Column2">
            <summary>
            Matrix column with index 2
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.ushort4x3.Row0">
            <summary>
            Matrix row with index 0
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.ushort4x3.Row1">
            <summary>
            Matrix row with index 1
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.ushort4x3.Row2">
            <summary>
            Matrix row with index 2
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.ushort4x3.Row3">
            <summary>
            Matrix row with index 3
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ushort4x3.#ctor(GenMathematics.Vectors.ushort4,GenMathematics.Vectors.ushort4,GenMathematics.Vectors.ushort4)">
            <summary>
            Creates a matrix from column values
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ushort4x3.#ctor(System.UInt16,System.UInt16,System.UInt16,System.UInt16,System.UInt16,System.UInt16,System.UInt16,System.UInt16,System.UInt16,System.UInt16,System.UInt16,System.UInt16)">
            <summary>
            Creates a matrix from the values of rows and columns
            </summary>
            <param name="r0c0">The value to assign to row 0 and column 0 of the matrix</param>
            <param name="r0c1">The value to assign to row 0 and column 1 of the matrix</param>
            <param name="r0c2">The value to assign to row 0 and column 2 of the matrix</param>
            <param name="r1c0">The value to assign to row 1 and column 0 of the matrix</param>
            <param name="r1c1">The value to assign to row 1 and column 1 of the matrix</param>
            <param name="r1c2">The value to assign to row 1 and column 2 of the matrix</param>
            <param name="r2c0">The value to assign to row 2 and column 0 of the matrix</param>
            <param name="r2c1">The value to assign to row 2 and column 1 of the matrix</param>
            <param name="r2c2">The value to assign to row 2 and column 2 of the matrix</param>
            <param name="r3c0">The value to assign to row 3 and column 0 of the matrix</param>
            <param name="r3c1">The value to assign to row 3 and column 1 of the matrix</param>
            <param name="r3c2">The value to assign to row 3 and column 2 of the matrix</param>
        </member>
        <member name="P:GenMathematics.Matrices.ushort4x3.Item(System.Int32)">
            <summary>
            To access via the reference use `Unsafe.Add(ref matrix.Column0, index)` instead
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ushort4x3.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.ushort4x3.Equals(GenMathematics.Matrices.ushort4x3)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.ushort4x3.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.ushort4x3.CompareTo(GenMathematics.Matrices.ushort4x3)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.ushort4x3.ToString">
            <summary>
            Returns the object's state information as a string
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ushort4x3.Extract(GenMathematics.Matrices.ushort4x3@,System.Int32,System.Int32,GenMathematics.Matrices.ushort4x3@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ushort4x3.Extract(GenMathematics.Matrices.ushort4x3@,System.Int32,System.Int32,GenMathematics.Matrices.ushort3x3@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ushort4x3.Extract(GenMathematics.Matrices.ushort4x3@,System.Int32,System.Int32,GenMathematics.Matrices.ushort2x3@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ushort4x3.Extract(GenMathematics.Matrices.ushort4x3@,System.Int32,System.Int32,GenMathematics.Matrices.ushort4x2@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ushort4x3.Extract(GenMathematics.Matrices.ushort4x3@,System.Int32,System.Int32,GenMathematics.Matrices.ushort3x2@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ushort4x3.Extract(GenMathematics.Matrices.ushort4x3@,System.Int32,System.Int32,GenMathematics.Matrices.ushort2x2@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ushort4x3.op_Explicit(GenMathematics.Matrices.sbyte4x3)~GenMathematics.Matrices.ushort4x3">
            <summary>
            Converts sbyte4x3 to ushort4x3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ushort4x3.op_Explicit(GenMathematics.Matrices.short4x3)~GenMathematics.Matrices.ushort4x3">
            <summary>
            Converts short4x3 to ushort4x3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ushort4x3.op_Explicit(GenMathematics.Matrices.int4x3)~GenMathematics.Matrices.ushort4x3">
            <summary>
            Converts int4x3 to ushort4x3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ushort4x3.op_Explicit(GenMathematics.Matrices.uint4x3)~GenMathematics.Matrices.ushort4x3">
            <summary>
            Converts uint4x3 to ushort4x3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ushort4x3.op_Explicit(GenMathematics.Matrices.long4x3)~GenMathematics.Matrices.ushort4x3">
            <summary>
            Converts long4x3 to ushort4x3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ushort4x3.op_Explicit(GenMathematics.Matrices.ulong4x3)~GenMathematics.Matrices.ushort4x3">
            <summary>
            Converts ulong4x3 to ushort4x3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ushort4x3.op_Explicit(GenMathematics.Matrices.half4x3)~GenMathematics.Matrices.ushort4x3">
            <summary>
            Converts half4x3 to ushort4x3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ushort4x3.op_Explicit(GenMathematics.Matrices.float4x3)~GenMathematics.Matrices.ushort4x3">
            <summary>
            Converts float4x3 to ushort4x3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ushort4x3.op_Explicit(GenMathematics.Matrices.double4x3)~GenMathematics.Matrices.ushort4x3">
            <summary>
            Converts double4x3 to ushort4x3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ushort4x3.op_Implicit(GenMathematics.Matrices.byte4x3)~GenMathematics.Matrices.ushort4x3">
            <summary>
            Converts byte4x3 to ushort4x3
            </summary>
        </member>
        <member name="T:GenMathematics.Matrices.ushort4x4">
            <summary>
            Matrix of type ushort with 4 rows and 4 columns using the column-major order
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.ushort4x4.Column0">
            <summary>
            Matrix column with index 0
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.ushort4x4.Column1">
            <summary>
            Matrix column with index 1
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.ushort4x4.Column2">
            <summary>
            Matrix column with index 2
            </summary>
        </member>
        <member name="F:GenMathematics.Matrices.ushort4x4.Column3">
            <summary>
            Matrix column with index 3
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.ushort4x4.Row0">
            <summary>
            Matrix row with index 0
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.ushort4x4.Row1">
            <summary>
            Matrix row with index 1
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.ushort4x4.Row2">
            <summary>
            Matrix row with index 2
            </summary>
        </member>
        <member name="P:GenMathematics.Matrices.ushort4x4.Row3">
            <summary>
            Matrix row with index 3
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ushort4x4.#ctor(GenMathematics.Vectors.ushort4,GenMathematics.Vectors.ushort4,GenMathematics.Vectors.ushort4,GenMathematics.Vectors.ushort4)">
            <summary>
            Creates a matrix from column values
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ushort4x4.#ctor(System.UInt16,System.UInt16,System.UInt16,System.UInt16,System.UInt16,System.UInt16,System.UInt16,System.UInt16,System.UInt16,System.UInt16,System.UInt16,System.UInt16,System.UInt16,System.UInt16,System.UInt16,System.UInt16)">
            <summary>
            Creates a matrix from the values of rows and columns
            </summary>
            <param name="r0c0">The value to assign to row 0 and column 0 of the matrix</param>
            <param name="r0c1">The value to assign to row 0 and column 1 of the matrix</param>
            <param name="r0c2">The value to assign to row 0 and column 2 of the matrix</param>
            <param name="r0c3">The value to assign to row 0 and column 3 of the matrix</param>
            <param name="r1c0">The value to assign to row 1 and column 0 of the matrix</param>
            <param name="r1c1">The value to assign to row 1 and column 1 of the matrix</param>
            <param name="r1c2">The value to assign to row 1 and column 2 of the matrix</param>
            <param name="r1c3">The value to assign to row 1 and column 3 of the matrix</param>
            <param name="r2c0">The value to assign to row 2 and column 0 of the matrix</param>
            <param name="r2c1">The value to assign to row 2 and column 1 of the matrix</param>
            <param name="r2c2">The value to assign to row 2 and column 2 of the matrix</param>
            <param name="r2c3">The value to assign to row 2 and column 3 of the matrix</param>
            <param name="r3c0">The value to assign to row 3 and column 0 of the matrix</param>
            <param name="r3c1">The value to assign to row 3 and column 1 of the matrix</param>
            <param name="r3c2">The value to assign to row 3 and column 2 of the matrix</param>
            <param name="r3c3">The value to assign to row 3 and column 3 of the matrix</param>
        </member>
        <member name="P:GenMathematics.Matrices.ushort4x4.Item(System.Int32)">
            <summary>
            To access via the reference use `Unsafe.Add(ref matrix.Column0, index)` instead
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ushort4x4.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.ushort4x4.Equals(GenMathematics.Matrices.ushort4x4)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.ushort4x4.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.ushort4x4.CompareTo(GenMathematics.Matrices.ushort4x4)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Matrices.ushort4x4.ToString">
            <summary>
            Returns the object's state information as a string
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ushort4x4.Extract(GenMathematics.Matrices.ushort4x4@,System.Int32,System.Int32,GenMathematics.Matrices.ushort4x4@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ushort4x4.Extract(GenMathematics.Matrices.ushort4x4@,System.Int32,System.Int32,GenMathematics.Matrices.ushort3x4@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ushort4x4.Extract(GenMathematics.Matrices.ushort4x4@,System.Int32,System.Int32,GenMathematics.Matrices.ushort2x4@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ushort4x4.Extract(GenMathematics.Matrices.ushort4x4@,System.Int32,System.Int32,GenMathematics.Matrices.ushort4x3@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ushort4x4.Extract(GenMathematics.Matrices.ushort4x4@,System.Int32,System.Int32,GenMathematics.Matrices.ushort3x3@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ushort4x4.Extract(GenMathematics.Matrices.ushort4x4@,System.Int32,System.Int32,GenMathematics.Matrices.ushort2x3@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ushort4x4.Extract(GenMathematics.Matrices.ushort4x4@,System.Int32,System.Int32,GenMathematics.Matrices.ushort4x2@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ushort4x4.Extract(GenMathematics.Matrices.ushort4x4@,System.Int32,System.Int32,GenMathematics.Matrices.ushort3x2@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ushort4x4.Extract(GenMathematics.Matrices.ushort4x4@,System.Int32,System.Int32,GenMathematics.Matrices.ushort2x2@)">
            <summary>
            Extracts a matrix at a given offset
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ushort4x4.op_Explicit(GenMathematics.Matrices.sbyte4x4)~GenMathematics.Matrices.ushort4x4">
            <summary>
            Converts sbyte4x4 to ushort4x4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ushort4x4.op_Explicit(GenMathematics.Matrices.short4x4)~GenMathematics.Matrices.ushort4x4">
            <summary>
            Converts short4x4 to ushort4x4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ushort4x4.op_Explicit(GenMathematics.Matrices.int4x4)~GenMathematics.Matrices.ushort4x4">
            <summary>
            Converts int4x4 to ushort4x4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ushort4x4.op_Explicit(GenMathematics.Matrices.uint4x4)~GenMathematics.Matrices.ushort4x4">
            <summary>
            Converts uint4x4 to ushort4x4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ushort4x4.op_Explicit(GenMathematics.Matrices.long4x4)~GenMathematics.Matrices.ushort4x4">
            <summary>
            Converts long4x4 to ushort4x4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ushort4x4.op_Explicit(GenMathematics.Matrices.ulong4x4)~GenMathematics.Matrices.ushort4x4">
            <summary>
            Converts ulong4x4 to ushort4x4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ushort4x4.op_Explicit(GenMathematics.Matrices.half4x4)~GenMathematics.Matrices.ushort4x4">
            <summary>
            Converts half4x4 to ushort4x4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ushort4x4.op_Explicit(GenMathematics.Matrices.float4x4)~GenMathematics.Matrices.ushort4x4">
            <summary>
            Converts float4x4 to ushort4x4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ushort4x4.op_Explicit(GenMathematics.Matrices.double4x4)~GenMathematics.Matrices.ushort4x4">
            <summary>
            Converts double4x4 to ushort4x4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Matrices.ushort4x4.op_Implicit(GenMathematics.Matrices.byte4x4)~GenMathematics.Matrices.ushort4x4">
            <summary>
            Converts byte4x4 to ushort4x4
            </summary>
        </member>
        <member name="T:GenMathematics.Vectors.bool2">
            <summary>
            Vector of size 2 of type <see cref="T:System.Boolean"/>
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.bool2.x">
            <summary>
            Component 'x' of the vector
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.bool2.y">
            <summary>
            Component 'y' of the vector
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool2.xx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool2.yx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool2.yy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.bool2.#ctor(System.Boolean)">
            <summary>
            Constructs a vector by filling all components with the value
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.bool2.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Constructs a vector from component values
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool2.Item(System.Int32)">
            <summary>
            Returns the vector component by index
            </summary>
            <param name="index">Index within [0,1]</param>
            <exception cref="T:System.IndexOutOfRangeException">Exception if the index is outside the vector size</exception>
        </member>
        <member name="M:GenMathematics.Vectors.bool2.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Vectors.bool2.Equals(GenMathematics.Vectors.bool2)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Vectors.bool2.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Vectors.bool2.CompareTo(GenMathematics.Vectors.bool2)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Vectors.bool2.ToString">
            <summary>
            Returns the object's state information as a string
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.bool2.And(GenMathematics.Vectors.bool2,GenMathematics.Vectors.bool2)">
            <summary>
            Component-wise 'and' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.bool2.And(GenMathematics.Vectors.bool2,System.Boolean)">
            <summary>
            Component-wise 'and' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.bool2.And(System.Boolean,GenMathematics.Vectors.bool2)">
            <summary>
            Component-wise 'and' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.bool2.Or(GenMathematics.Vectors.bool2,GenMathematics.Vectors.bool2)">
            <summary>
            Component-wise 'or' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.bool2.Or(GenMathematics.Vectors.bool2,System.Boolean)">
            <summary>
            Component-wise 'or' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.bool2.Or(System.Boolean,GenMathematics.Vectors.bool2)">
            <summary>
            Component-wise 'or' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.bool2.Xor(GenMathematics.Vectors.bool2,GenMathematics.Vectors.bool2)">
            <summary>
            Component-wise 'xor' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.bool2.Xor(GenMathematics.Vectors.bool2,System.Boolean)">
            <summary>
            Component-wise 'xor' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.bool2.Xor(System.Boolean,GenMathematics.Vectors.bool2)">
            <summary>
            Component-wise 'xor' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.bool2.Not(GenMathematics.Vectors.bool2)">
            <summary>
            Component-wise 'not' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.bool2.op_BitwiseAnd(GenMathematics.Vectors.bool2,GenMathematics.Vectors.bool2)">
            <summary>
            Component-wise 'and' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.bool2.op_BitwiseAnd(GenMathematics.Vectors.bool2,System.Boolean)">
            <summary>
            Component-wise 'and' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.bool2.op_BitwiseAnd(System.Boolean,GenMathematics.Vectors.bool2)">
            <summary>
            Component-wise 'and' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.bool2.op_BitwiseOr(GenMathematics.Vectors.bool2,GenMathematics.Vectors.bool2)">
            <summary>
            Component-wise 'or' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.bool2.op_BitwiseOr(GenMathematics.Vectors.bool2,System.Boolean)">
            <summary>
            Component-wise 'or' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.bool2.op_BitwiseOr(System.Boolean,GenMathematics.Vectors.bool2)">
            <summary>
            Component-wise 'or' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.bool2.op_ExclusiveOr(GenMathematics.Vectors.bool2,GenMathematics.Vectors.bool2)">
            <summary>
            Component-wise 'xor' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.bool2.op_ExclusiveOr(GenMathematics.Vectors.bool2,System.Boolean)">
            <summary>
            Component-wise 'xor' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.bool2.op_ExclusiveOr(System.Boolean,GenMathematics.Vectors.bool2)">
            <summary>
            Component-wise 'xor' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.bool2.op_LogicalNot(GenMathematics.Vectors.bool2)">
            <summary>
            Component-wise 'not' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.bool2.Equal(GenMathematics.Vectors.bool2,GenMathematics.Vectors.bool2)">
            <summary>
            Component-wise 'equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.bool2.Equal(GenMathematics.Vectors.bool2@,GenMathematics.Vectors.bool2@,GenMathematics.Vectors.bool2@)">
            <summary>
            Component-wise 'equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.bool2.NotEqual(GenMathematics.Vectors.bool2,GenMathematics.Vectors.bool2)">
            <summary>
            Component-wise 'not equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.bool2.NotEqual(GenMathematics.Vectors.bool2@,GenMathematics.Vectors.bool2@,GenMathematics.Vectors.bool2@)">
            <summary>
            Component-wise 'not equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.bool2.op_Implicit(System.Boolean)~GenMathematics.Vectors.bool2">
            <summary>
            Creates a vector by filling all components with the value
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.bool2.op_Equality(GenMathematics.Vectors.bool2,GenMathematics.Vectors.bool2)">
            <summary>
            Component-wise 'equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.bool2.op_Inequality(GenMathematics.Vectors.bool2,GenMathematics.Vectors.bool2)">
            <summary>
            Component-wise 'not equal' operation
            </summary>
        </member>
        <member name="T:GenMathematics.Vectors.bool3">
            <summary>
            Vector of size 3 of type <see cref="T:System.Boolean"/>
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.bool3.x">
            <summary>
            Component 'x' of the vector
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.bool3.y">
            <summary>
            Component 'y' of the vector
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.bool3.z">
            <summary>
            Component 'z' of the vector
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool3.xx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool3.xy">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool3.xz">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool3.yx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool3.yy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool3.yz">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool3.zx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool3.zy">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool3.zz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool3.xxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool3.xxy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool3.xxz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool3.xyx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool3.xyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool3.xzx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool3.xzy">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool3.xzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool3.yxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool3.yxy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool3.yxz">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool3.yyx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool3.yyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool3.yyz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool3.yzx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool3.yzy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool3.yzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool3.zxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool3.zxy">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool3.zxz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool3.zyx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool3.zyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool3.zyz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool3.zzx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool3.zzy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool3.zzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.bool3.#ctor(System.Boolean)">
            <summary>
            Constructs a vector by filling all components with the value
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.bool3.#ctor(System.Boolean,GenMathematics.Vectors.bool2)">
            <summary>
            Constructs a vector from component values
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.bool3.#ctor(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Constructs a vector from component values
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.bool3.#ctor(GenMathematics.Vectors.bool2,System.Boolean)">
            <summary>
            Constructs a vector from component values
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool3.Item(System.Int32)">
            <summary>
            Returns the vector component by index
            </summary>
            <param name="index">Index within [0,2]</param>
            <exception cref="T:System.IndexOutOfRangeException">Exception if the index is outside the vector size</exception>
        </member>
        <member name="M:GenMathematics.Vectors.bool3.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Vectors.bool3.Equals(GenMathematics.Vectors.bool3)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Vectors.bool3.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Vectors.bool3.CompareTo(GenMathematics.Vectors.bool3)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Vectors.bool3.ToString">
            <summary>
            Returns the object's state information as a string
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.bool3.And(GenMathematics.Vectors.bool3,GenMathematics.Vectors.bool3)">
            <summary>
            Component-wise 'and' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.bool3.And(GenMathematics.Vectors.bool3,System.Boolean)">
            <summary>
            Component-wise 'and' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.bool3.And(System.Boolean,GenMathematics.Vectors.bool3)">
            <summary>
            Component-wise 'and' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.bool3.And(GenMathematics.Vectors.bool3@,GenMathematics.Vectors.bool3@,GenMathematics.Vectors.bool3@)">
            <summary>
            Component-wise 'and' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.bool3.And(GenMathematics.Vectors.bool3@,System.Boolean,GenMathematics.Vectors.bool3@)">
            <summary>
            Component-wise 'and' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.bool3.And(System.Boolean,GenMathematics.Vectors.bool3@,GenMathematics.Vectors.bool3@)">
            <summary>
            Component-wise 'and' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.bool3.Or(GenMathematics.Vectors.bool3,GenMathematics.Vectors.bool3)">
            <summary>
            Component-wise 'or' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.bool3.Or(GenMathematics.Vectors.bool3,System.Boolean)">
            <summary>
            Component-wise 'or' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.bool3.Or(System.Boolean,GenMathematics.Vectors.bool3)">
            <summary>
            Component-wise 'or' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.bool3.Or(GenMathematics.Vectors.bool3@,GenMathematics.Vectors.bool3@,GenMathematics.Vectors.bool3@)">
            <summary>
            Component-wise 'or' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.bool3.Or(GenMathematics.Vectors.bool3@,System.Boolean,GenMathematics.Vectors.bool3@)">
            <summary>
            Component-wise 'or' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.bool3.Or(System.Boolean,GenMathematics.Vectors.bool3@,GenMathematics.Vectors.bool3@)">
            <summary>
            Component-wise 'or' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.bool3.Xor(GenMathematics.Vectors.bool3,GenMathematics.Vectors.bool3)">
            <summary>
            Component-wise 'xor' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.bool3.Xor(GenMathematics.Vectors.bool3,System.Boolean)">
            <summary>
            Component-wise 'xor' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.bool3.Xor(System.Boolean,GenMathematics.Vectors.bool3)">
            <summary>
            Component-wise 'xor' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.bool3.Xor(GenMathematics.Vectors.bool3@,GenMathematics.Vectors.bool3@,GenMathematics.Vectors.bool3@)">
            <summary>
            Component-wise 'xor' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.bool3.Xor(GenMathematics.Vectors.bool3@,System.Boolean,GenMathematics.Vectors.bool3@)">
            <summary>
            Component-wise 'xor' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.bool3.Xor(System.Boolean,GenMathematics.Vectors.bool3@,GenMathematics.Vectors.bool3@)">
            <summary>
            Component-wise 'xor' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.bool3.Not(GenMathematics.Vectors.bool3)">
            <summary>
            Component-wise 'not' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.bool3.Not(GenMathematics.Vectors.bool3@,GenMathematics.Vectors.bool3@)">
            <summary>
            Component-wise 'not' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.bool3.op_BitwiseAnd(GenMathematics.Vectors.bool3,GenMathematics.Vectors.bool3)">
            <summary>
            Component-wise 'and' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.bool3.op_BitwiseAnd(GenMathematics.Vectors.bool3,System.Boolean)">
            <summary>
            Component-wise 'and' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.bool3.op_BitwiseAnd(System.Boolean,GenMathematics.Vectors.bool3)">
            <summary>
            Component-wise 'and' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.bool3.op_BitwiseOr(GenMathematics.Vectors.bool3,GenMathematics.Vectors.bool3)">
            <summary>
            Component-wise 'or' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.bool3.op_BitwiseOr(GenMathematics.Vectors.bool3,System.Boolean)">
            <summary>
            Component-wise 'or' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.bool3.op_BitwiseOr(System.Boolean,GenMathematics.Vectors.bool3)">
            <summary>
            Component-wise 'or' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.bool3.op_ExclusiveOr(GenMathematics.Vectors.bool3,GenMathematics.Vectors.bool3)">
            <summary>
            Component-wise 'xor' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.bool3.op_ExclusiveOr(GenMathematics.Vectors.bool3,System.Boolean)">
            <summary>
            Component-wise 'xor' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.bool3.op_ExclusiveOr(System.Boolean,GenMathematics.Vectors.bool3)">
            <summary>
            Component-wise 'xor' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.bool3.op_LogicalNot(GenMathematics.Vectors.bool3)">
            <summary>
            Component-wise 'not' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.bool3.Equal(GenMathematics.Vectors.bool3,GenMathematics.Vectors.bool3)">
            <summary>
            Component-wise 'equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.bool3.Equal(GenMathematics.Vectors.bool3@,GenMathematics.Vectors.bool3@,GenMathematics.Vectors.bool3@)">
            <summary>
            Component-wise 'equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.bool3.NotEqual(GenMathematics.Vectors.bool3,GenMathematics.Vectors.bool3)">
            <summary>
            Component-wise 'not equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.bool3.NotEqual(GenMathematics.Vectors.bool3@,GenMathematics.Vectors.bool3@,GenMathematics.Vectors.bool3@)">
            <summary>
            Component-wise 'not equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.bool3.op_Implicit(System.Boolean)~GenMathematics.Vectors.bool3">
            <summary>
            Creates a vector by filling all components with the value
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.bool3.op_Equality(GenMathematics.Vectors.bool3,GenMathematics.Vectors.bool3)">
            <summary>
            Component-wise 'equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.bool3.op_Inequality(GenMathematics.Vectors.bool3,GenMathematics.Vectors.bool3)">
            <summary>
            Component-wise 'not equal' operation
            </summary>
        </member>
        <member name="T:GenMathematics.Vectors.bool4">
            <summary>
            Vector of size 4 of type <see cref="T:System.Boolean"/>
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.bool4.x">
            <summary>
            Component 'x' of the vector
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.bool4.y">
            <summary>
            Component 'y' of the vector
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.bool4.z">
            <summary>
            Component 'z' of the vector
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.bool4.w">
            <summary>
            Component 'w' of the vector
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.xx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.xy">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.xz">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.xw">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.yx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.yy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.yz">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.yw">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.zx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.zy">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.zz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.zw">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.wx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.wy">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.wz">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.ww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.xxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.xxy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.xxz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.xxw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.xyx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.xyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.xyz">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.xyw">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.xzx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.xzy">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.xzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.xzw">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.xwx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.xwy">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.xwz">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.xww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.yxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.yxy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.yxz">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.yxw">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.yyx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.yyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.yyz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.yyw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.yzx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.yzy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.yzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.yzw">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.ywx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.ywy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.ywz">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.yww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.zxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.zxy">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.zxz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.zxw">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.zyx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.zyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.zyz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.zyw">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.zzx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.zzy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.zzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.zzw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.zwx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.zwy">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.zwz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.zww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.wxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.wxy">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.wxz">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.wxw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.wyx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.wyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.wyz">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.wyw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.wzx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.wzy">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.wzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.wzw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.wwx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.wwy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.wwz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.www">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.xxxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.xxxy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.xxxz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.xxxw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.xxyx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.xxyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.xxyz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.xxyw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.xxzx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.xxzy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.xxzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.xxzw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.xxwx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.xxwy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.xxwz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.xxww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.xyxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.xyxy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.xyxz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.xyxw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.xyyx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.xyyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.xyyz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.xyyw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.xyzx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.xyzy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.xyzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.xywx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.xywy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.xywz">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.xyww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.xzxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.xzxy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.xzxz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.xzxw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.xzyx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.xzyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.xzyz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.xzyw">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.xzzx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.xzzy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.xzzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.xzzw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.xzwx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.xzwy">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.xzwz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.xzww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.xwxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.xwxy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.xwxz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.xwxw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.xwyx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.xwyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.xwyz">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.xwyw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.xwzx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.xwzy">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.xwzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.xwzw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.xwwx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.xwwy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.xwwz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.xwww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.yxxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.yxxy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.yxxz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.yxxw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.yxyx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.yxyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.yxyz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.yxyw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.yxzx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.yxzy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.yxzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.yxzw">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.yxwx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.yxwy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.yxwz">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.yxww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.yyxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.yyxy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.yyxz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.yyxw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.yyyx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.yyyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.yyyz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.yyyw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.yyzx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.yyzy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.yyzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.yyzw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.yywx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.yywy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.yywz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.yyww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.yzxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.yzxy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.yzxz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.yzxw">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.yzyx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.yzyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.yzyz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.yzyw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.yzzx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.yzzy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.yzzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.yzzw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.yzwx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.yzwy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.yzwz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.yzww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.ywxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.ywxy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.ywxz">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.ywxw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.ywyx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.ywyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.ywyz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.ywyw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.ywzx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.ywzy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.ywzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.ywzw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.ywwx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.ywwy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.ywwz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.ywww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.zxxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.zxxy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.zxxz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.zxxw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.zxyx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.zxyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.zxyz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.zxyw">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.zxzx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.zxzy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.zxzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.zxzw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.zxwx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.zxwy">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.zxwz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.zxww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.zyxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.zyxy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.zyxz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.zyxw">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.zyyx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.zyyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.zyyz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.zyyw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.zyzx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.zyzy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.zyzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.zyzw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.zywx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.zywy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.zywz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.zyww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.zzxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.zzxy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.zzxz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.zzxw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.zzyx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.zzyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.zzyz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.zzyw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.zzzx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.zzzy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.zzzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.zzzw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.zzwx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.zzwy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.zzwz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.zzww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.zwxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.zwxy">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.zwxz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.zwxw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.zwyx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.zwyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.zwyz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.zwyw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.zwzx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.zwzy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.zwzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.zwzw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.zwwx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.zwwy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.zwwz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.zwww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.wxxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.wxxy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.wxxz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.wxxw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.wxyx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.wxyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.wxyz">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.wxyw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.wxzx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.wxzy">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.wxzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.wxzw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.wxwx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.wxwy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.wxwz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.wxww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.wyxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.wyxy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.wyxz">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.wyxw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.wyyx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.wyyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.wyyz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.wyyw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.wyzx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.wyzy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.wyzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.wyzw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.wywx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.wywy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.wywz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.wyww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.wzxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.wzxy">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.wzxz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.wzxw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.wzyx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.wzyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.wzyz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.wzyw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.wzzx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.wzzy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.wzzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.wzzw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.wzwx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.wzwy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.wzwz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.wzww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.wwxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.wwxy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.wwxz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.wwxw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.wwyx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.wwyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.wwyz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.wwyw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.wwzx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.wwzy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.wwzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.wwzw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.wwwx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.wwwy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.wwwz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.wwww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.bool4.#ctor(System.Boolean)">
            <summary>
            Constructs a vector by filling all components with the value
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.bool4.#ctor(System.Boolean,GenMathematics.Vectors.bool3)">
            <summary>
            Constructs a vector from component values
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.bool4.#ctor(System.Boolean,GenMathematics.Vectors.bool2,System.Boolean)">
            <summary>
            Constructs a vector from component values
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.bool4.#ctor(System.Boolean,System.Boolean,GenMathematics.Vectors.bool2)">
            <summary>
            Constructs a vector from component values
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.bool4.#ctor(System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Constructs a vector from component values
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.bool4.#ctor(GenMathematics.Vectors.bool2,GenMathematics.Vectors.bool2)">
            <summary>
            Constructs a vector from component values
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.bool4.#ctor(GenMathematics.Vectors.bool2,System.Boolean,System.Boolean)">
            <summary>
            Constructs a vector from component values
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.bool4.#ctor(GenMathematics.Vectors.bool3,System.Boolean)">
            <summary>
            Constructs a vector from component values
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.bool4.Item(System.Int32)">
            <summary>
            Returns the vector component by index
            </summary>
            <param name="index">Index within [0,3]</param>
            <exception cref="T:System.IndexOutOfRangeException">Exception if the index is outside the vector size</exception>
        </member>
        <member name="M:GenMathematics.Vectors.bool4.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Vectors.bool4.Equals(GenMathematics.Vectors.bool4)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Vectors.bool4.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Vectors.bool4.CompareTo(GenMathematics.Vectors.bool4)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Vectors.bool4.ToString">
            <summary>
            Returns the object's state information as a string
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.bool4.And(GenMathematics.Vectors.bool4,GenMathematics.Vectors.bool4)">
            <summary>
            Component-wise 'and' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.bool4.And(GenMathematics.Vectors.bool4,System.Boolean)">
            <summary>
            Component-wise 'and' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.bool4.And(System.Boolean,GenMathematics.Vectors.bool4)">
            <summary>
            Component-wise 'and' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.bool4.And(GenMathematics.Vectors.bool4@,GenMathematics.Vectors.bool4@,GenMathematics.Vectors.bool4@)">
            <summary>
            Component-wise 'and' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.bool4.And(GenMathematics.Vectors.bool4@,System.Boolean,GenMathematics.Vectors.bool4@)">
            <summary>
            Component-wise 'and' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.bool4.And(System.Boolean,GenMathematics.Vectors.bool4@,GenMathematics.Vectors.bool4@)">
            <summary>
            Component-wise 'and' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.bool4.Or(GenMathematics.Vectors.bool4,GenMathematics.Vectors.bool4)">
            <summary>
            Component-wise 'or' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.bool4.Or(GenMathematics.Vectors.bool4,System.Boolean)">
            <summary>
            Component-wise 'or' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.bool4.Or(System.Boolean,GenMathematics.Vectors.bool4)">
            <summary>
            Component-wise 'or' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.bool4.Or(GenMathematics.Vectors.bool4@,GenMathematics.Vectors.bool4@,GenMathematics.Vectors.bool4@)">
            <summary>
            Component-wise 'or' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.bool4.Or(GenMathematics.Vectors.bool4@,System.Boolean,GenMathematics.Vectors.bool4@)">
            <summary>
            Component-wise 'or' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.bool4.Or(System.Boolean,GenMathematics.Vectors.bool4@,GenMathematics.Vectors.bool4@)">
            <summary>
            Component-wise 'or' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.bool4.Xor(GenMathematics.Vectors.bool4,GenMathematics.Vectors.bool4)">
            <summary>
            Component-wise 'xor' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.bool4.Xor(GenMathematics.Vectors.bool4,System.Boolean)">
            <summary>
            Component-wise 'xor' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.bool4.Xor(System.Boolean,GenMathematics.Vectors.bool4)">
            <summary>
            Component-wise 'xor' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.bool4.Xor(GenMathematics.Vectors.bool4@,GenMathematics.Vectors.bool4@,GenMathematics.Vectors.bool4@)">
            <summary>
            Component-wise 'xor' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.bool4.Xor(GenMathematics.Vectors.bool4@,System.Boolean,GenMathematics.Vectors.bool4@)">
            <summary>
            Component-wise 'xor' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.bool4.Xor(System.Boolean,GenMathematics.Vectors.bool4@,GenMathematics.Vectors.bool4@)">
            <summary>
            Component-wise 'xor' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.bool4.Not(GenMathematics.Vectors.bool4)">
            <summary>
            Component-wise 'not' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.bool4.Not(GenMathematics.Vectors.bool4@,GenMathematics.Vectors.bool4@)">
            <summary>
            Component-wise 'not' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.bool4.op_BitwiseAnd(GenMathematics.Vectors.bool4,GenMathematics.Vectors.bool4)">
            <summary>
            Component-wise 'and' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.bool4.op_BitwiseAnd(GenMathematics.Vectors.bool4,System.Boolean)">
            <summary>
            Component-wise 'and' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.bool4.op_BitwiseAnd(System.Boolean,GenMathematics.Vectors.bool4)">
            <summary>
            Component-wise 'and' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.bool4.op_BitwiseOr(GenMathematics.Vectors.bool4,GenMathematics.Vectors.bool4)">
            <summary>
            Component-wise 'or' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.bool4.op_BitwiseOr(GenMathematics.Vectors.bool4,System.Boolean)">
            <summary>
            Component-wise 'or' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.bool4.op_BitwiseOr(System.Boolean,GenMathematics.Vectors.bool4)">
            <summary>
            Component-wise 'or' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.bool4.op_ExclusiveOr(GenMathematics.Vectors.bool4,GenMathematics.Vectors.bool4)">
            <summary>
            Component-wise 'xor' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.bool4.op_ExclusiveOr(GenMathematics.Vectors.bool4,System.Boolean)">
            <summary>
            Component-wise 'xor' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.bool4.op_ExclusiveOr(System.Boolean,GenMathematics.Vectors.bool4)">
            <summary>
            Component-wise 'xor' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.bool4.op_LogicalNot(GenMathematics.Vectors.bool4)">
            <summary>
            Component-wise 'not' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.bool4.Equal(GenMathematics.Vectors.bool4,GenMathematics.Vectors.bool4)">
            <summary>
            Component-wise 'equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.bool4.Equal(GenMathematics.Vectors.bool4@,GenMathematics.Vectors.bool4@,GenMathematics.Vectors.bool4@)">
            <summary>
            Component-wise 'equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.bool4.NotEqual(GenMathematics.Vectors.bool4,GenMathematics.Vectors.bool4)">
            <summary>
            Component-wise 'not equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.bool4.NotEqual(GenMathematics.Vectors.bool4@,GenMathematics.Vectors.bool4@,GenMathematics.Vectors.bool4@)">
            <summary>
            Component-wise 'not equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.bool4.op_Implicit(System.Boolean)~GenMathematics.Vectors.bool4">
            <summary>
            Creates a vector by filling all components with the value
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.bool4.op_Equality(GenMathematics.Vectors.bool4,GenMathematics.Vectors.bool4)">
            <summary>
            Component-wise 'equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.bool4.op_Inequality(GenMathematics.Vectors.bool4,GenMathematics.Vectors.bool4)">
            <summary>
            Component-wise 'not equal' operation
            </summary>
        </member>
        <member name="T:GenMathematics.Vectors.byte2">
            <summary>
            Vector of size 2 of type <see cref="T:System.Byte"/>
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.byte2.Zero">
            <summary>
            Vector with zero in all components
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.byte2.One">
            <summary>
            Vector with unit in all components
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.byte2.UnitX">
            <summary>
            A vector with unit in the component 'x' and zeroes in the remaining components
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.byte2.UnitY">
            <summary>
            A vector with unit in the component 'y' and zeroes in the remaining components
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.byte2.x">
            <summary>
            Component 'x' of the vector
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.byte2.y">
            <summary>
            Component 'y' of the vector
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte2.xx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte2.yx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte2.yy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.byte2.#ctor(System.Byte)">
            <summary>
            Constructs a vector by filling all components with the value
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.byte2.#ctor(System.Byte,System.Byte)">
            <summary>
            Constructs a vector from component values
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte2.Item(System.Int32)">
            <summary>
            Returns the vector component by index
            </summary>
            <param name="index">Index within [0,1]</param>
            <exception cref="T:System.IndexOutOfRangeException">Exception if the index is outside the vector size</exception>
        </member>
        <member name="M:GenMathematics.Vectors.byte2.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Vectors.byte2.Equals(GenMathematics.Vectors.byte2)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Vectors.byte2.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Vectors.byte2.CompareTo(GenMathematics.Vectors.byte2)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Vectors.byte2.ToString">
            <summary>
            Returns the object's state information as a string
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.byte2.LessThan(GenMathematics.Vectors.byte2,GenMathematics.Vectors.byte2)">
            <summary>
            Component-wise 'less than' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.byte2.LessThan(GenMathematics.Vectors.byte2@,GenMathematics.Vectors.byte2@,GenMathematics.Vectors.bool2@)">
            <summary>
            Component-wise 'less than' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.byte2.GreaterThan(GenMathematics.Vectors.byte2,GenMathematics.Vectors.byte2)">
            <summary>
            Component-wise 'greater than' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.byte2.GreaterThan(GenMathematics.Vectors.byte2@,GenMathematics.Vectors.byte2@,GenMathematics.Vectors.bool2@)">
            <summary>
            Component-wise 'greater than' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.byte2.LessThanEqual(GenMathematics.Vectors.byte2,GenMathematics.Vectors.byte2)">
            <summary>
            Component-wise 'less than or equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.byte2.LessThanEqual(GenMathematics.Vectors.byte2@,GenMathematics.Vectors.byte2@,GenMathematics.Vectors.bool2@)">
            <summary>
            Component-wise 'less than or equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.byte2.GreaterThanEqual(GenMathematics.Vectors.byte2,GenMathematics.Vectors.byte2)">
            <summary>
            Component-wise 'greater than or equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.byte2.GreaterThanEqual(GenMathematics.Vectors.byte2@,GenMathematics.Vectors.byte2@,GenMathematics.Vectors.bool2@)">
            <summary>
            Component-wise 'greater than or equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.byte2.Equal(GenMathematics.Vectors.byte2,GenMathematics.Vectors.byte2)">
            <summary>
            Component-wise 'equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.byte2.Equal(GenMathematics.Vectors.byte2@,GenMathematics.Vectors.byte2@,GenMathematics.Vectors.bool2@)">
            <summary>
            Component-wise 'equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.byte2.NotEqual(GenMathematics.Vectors.byte2,GenMathematics.Vectors.byte2)">
            <summary>
            Component-wise 'not equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.byte2.NotEqual(GenMathematics.Vectors.byte2@,GenMathematics.Vectors.byte2@,GenMathematics.Vectors.bool2@)">
            <summary>
            Component-wise 'not equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.byte2.op_Implicit(System.Byte)~GenMathematics.Vectors.byte2">
            <summary>
            Creates a vector by filling all components with the value
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.byte2.op_Explicit(GenMathematics.Vectors.sbyte2)~GenMathematics.Vectors.byte2">
            <summary>
            Converts sbyte2 to byte2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.byte2.op_Explicit(GenMathematics.Vectors.short2)~GenMathematics.Vectors.byte2">
            <summary>
            Converts short2 to byte2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.byte2.op_Explicit(GenMathematics.Vectors.ushort2)~GenMathematics.Vectors.byte2">
            <summary>
            Converts ushort2 to byte2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.byte2.op_Explicit(GenMathematics.Vectors.int2)~GenMathematics.Vectors.byte2">
            <summary>
            Converts int2 to byte2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.byte2.op_Explicit(GenMathematics.Vectors.uint2)~GenMathematics.Vectors.byte2">
            <summary>
            Converts uint2 to byte2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.byte2.op_Explicit(GenMathematics.Vectors.long2)~GenMathematics.Vectors.byte2">
            <summary>
            Converts long2 to byte2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.byte2.op_Explicit(GenMathematics.Vectors.ulong2)~GenMathematics.Vectors.byte2">
            <summary>
            Converts ulong2 to byte2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.byte2.op_Explicit(GenMathematics.Vectors.half2)~GenMathematics.Vectors.byte2">
            <summary>
            Converts half2 to byte2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.byte2.op_Explicit(GenMathematics.Vectors.float2)~GenMathematics.Vectors.byte2">
            <summary>
            Converts float2 to byte2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.byte2.op_Explicit(GenMathematics.Vectors.double2)~GenMathematics.Vectors.byte2">
            <summary>
            Converts double2 to byte2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.byte2.op_LessThan(GenMathematics.Vectors.byte2,GenMathematics.Vectors.byte2)">
            <summary>
            Component-wise 'less than' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.byte2.op_GreaterThan(GenMathematics.Vectors.byte2,GenMathematics.Vectors.byte2)">
            <summary>
            Component-wise 'greater than' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.byte2.op_LessThanOrEqual(GenMathematics.Vectors.byte2,GenMathematics.Vectors.byte2)">
            <summary>
            Component-wise 'less than or equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.byte2.op_GreaterThanOrEqual(GenMathematics.Vectors.byte2,GenMathematics.Vectors.byte2)">
            <summary>
            Component-wise 'greater than or equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.byte2.op_Equality(GenMathematics.Vectors.byte2,GenMathematics.Vectors.byte2)">
            <summary>
            Component-wise 'equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.byte2.op_Inequality(GenMathematics.Vectors.byte2,GenMathematics.Vectors.byte2)">
            <summary>
            Component-wise 'not equal' operation
            </summary>
        </member>
        <member name="T:GenMathematics.Vectors.byte3">
            <summary>
            Vector of size 3 of type <see cref="T:System.Byte"/>
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.byte3.Zero">
            <summary>
            Vector with zero in all components
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.byte3.One">
            <summary>
            Vector with unit in all components
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.byte3.UnitX">
            <summary>
            A vector with unit in the component 'x' and zeroes in the remaining components
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.byte3.UnitY">
            <summary>
            A vector with unit in the component 'y' and zeroes in the remaining components
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.byte3.UnitZ">
            <summary>
            A vector with unit in the component 'z' and zeroes in the remaining components
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.byte3.x">
            <summary>
            Component 'x' of the vector
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.byte3.y">
            <summary>
            Component 'y' of the vector
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.byte3.z">
            <summary>
            Component 'z' of the vector
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte3.xx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte3.xy">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte3.xz">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte3.yx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte3.yy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte3.yz">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte3.zx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte3.zy">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte3.zz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte3.xxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte3.xxy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte3.xxz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte3.xyx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte3.xyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte3.xzx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte3.xzy">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte3.xzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte3.yxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte3.yxy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte3.yxz">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte3.yyx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte3.yyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte3.yyz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte3.yzx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte3.yzy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte3.yzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte3.zxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte3.zxy">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte3.zxz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte3.zyx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte3.zyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte3.zyz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte3.zzx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte3.zzy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte3.zzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.byte3.#ctor(System.Byte)">
            <summary>
            Constructs a vector by filling all components with the value
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.byte3.#ctor(System.Byte,GenMathematics.Vectors.byte2)">
            <summary>
            Constructs a vector from component values
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.byte3.#ctor(System.Byte,System.Byte,System.Byte)">
            <summary>
            Constructs a vector from component values
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.byte3.#ctor(GenMathematics.Vectors.byte2,System.Byte)">
            <summary>
            Constructs a vector from component values
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte3.Item(System.Int32)">
            <summary>
            Returns the vector component by index
            </summary>
            <param name="index">Index within [0,2]</param>
            <exception cref="T:System.IndexOutOfRangeException">Exception if the index is outside the vector size</exception>
        </member>
        <member name="M:GenMathematics.Vectors.byte3.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Vectors.byte3.Equals(GenMathematics.Vectors.byte3)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Vectors.byte3.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Vectors.byte3.CompareTo(GenMathematics.Vectors.byte3)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Vectors.byte3.ToString">
            <summary>
            Returns the object's state information as a string
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.byte3.LessThan(GenMathematics.Vectors.byte3,GenMathematics.Vectors.byte3)">
            <summary>
            Component-wise 'less than' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.byte3.LessThan(GenMathematics.Vectors.byte3@,GenMathematics.Vectors.byte3@,GenMathematics.Vectors.bool3@)">
            <summary>
            Component-wise 'less than' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.byte3.GreaterThan(GenMathematics.Vectors.byte3,GenMathematics.Vectors.byte3)">
            <summary>
            Component-wise 'greater than' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.byte3.GreaterThan(GenMathematics.Vectors.byte3@,GenMathematics.Vectors.byte3@,GenMathematics.Vectors.bool3@)">
            <summary>
            Component-wise 'greater than' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.byte3.LessThanEqual(GenMathematics.Vectors.byte3,GenMathematics.Vectors.byte3)">
            <summary>
            Component-wise 'less than or equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.byte3.LessThanEqual(GenMathematics.Vectors.byte3@,GenMathematics.Vectors.byte3@,GenMathematics.Vectors.bool3@)">
            <summary>
            Component-wise 'less than or equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.byte3.GreaterThanEqual(GenMathematics.Vectors.byte3,GenMathematics.Vectors.byte3)">
            <summary>
            Component-wise 'greater than or equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.byte3.GreaterThanEqual(GenMathematics.Vectors.byte3@,GenMathematics.Vectors.byte3@,GenMathematics.Vectors.bool3@)">
            <summary>
            Component-wise 'greater than or equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.byte3.Equal(GenMathematics.Vectors.byte3,GenMathematics.Vectors.byte3)">
            <summary>
            Component-wise 'equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.byte3.Equal(GenMathematics.Vectors.byte3@,GenMathematics.Vectors.byte3@,GenMathematics.Vectors.bool3@)">
            <summary>
            Component-wise 'equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.byte3.NotEqual(GenMathematics.Vectors.byte3,GenMathematics.Vectors.byte3)">
            <summary>
            Component-wise 'not equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.byte3.NotEqual(GenMathematics.Vectors.byte3@,GenMathematics.Vectors.byte3@,GenMathematics.Vectors.bool3@)">
            <summary>
            Component-wise 'not equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.byte3.op_Implicit(System.Byte)~GenMathematics.Vectors.byte3">
            <summary>
            Creates a vector by filling all components with the value
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.byte3.op_Explicit(GenMathematics.Vectors.sbyte3)~GenMathematics.Vectors.byte3">
            <summary>
            Converts sbyte3 to byte3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.byte3.op_Explicit(GenMathematics.Vectors.short3)~GenMathematics.Vectors.byte3">
            <summary>
            Converts short3 to byte3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.byte3.op_Explicit(GenMathematics.Vectors.ushort3)~GenMathematics.Vectors.byte3">
            <summary>
            Converts ushort3 to byte3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.byte3.op_Explicit(GenMathematics.Vectors.int3)~GenMathematics.Vectors.byte3">
            <summary>
            Converts int3 to byte3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.byte3.op_Explicit(GenMathematics.Vectors.uint3)~GenMathematics.Vectors.byte3">
            <summary>
            Converts uint3 to byte3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.byte3.op_Explicit(GenMathematics.Vectors.long3)~GenMathematics.Vectors.byte3">
            <summary>
            Converts long3 to byte3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.byte3.op_Explicit(GenMathematics.Vectors.ulong3)~GenMathematics.Vectors.byte3">
            <summary>
            Converts ulong3 to byte3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.byte3.op_Explicit(GenMathematics.Vectors.half3)~GenMathematics.Vectors.byte3">
            <summary>
            Converts half3 to byte3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.byte3.op_Explicit(GenMathematics.Vectors.float3)~GenMathematics.Vectors.byte3">
            <summary>
            Converts float3 to byte3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.byte3.op_Explicit(GenMathematics.Vectors.double3)~GenMathematics.Vectors.byte3">
            <summary>
            Converts double3 to byte3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.byte3.op_LessThan(GenMathematics.Vectors.byte3,GenMathematics.Vectors.byte3)">
            <summary>
            Component-wise 'less than' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.byte3.op_GreaterThan(GenMathematics.Vectors.byte3,GenMathematics.Vectors.byte3)">
            <summary>
            Component-wise 'greater than' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.byte3.op_LessThanOrEqual(GenMathematics.Vectors.byte3,GenMathematics.Vectors.byte3)">
            <summary>
            Component-wise 'less than or equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.byte3.op_GreaterThanOrEqual(GenMathematics.Vectors.byte3,GenMathematics.Vectors.byte3)">
            <summary>
            Component-wise 'greater than or equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.byte3.op_Equality(GenMathematics.Vectors.byte3,GenMathematics.Vectors.byte3)">
            <summary>
            Component-wise 'equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.byte3.op_Inequality(GenMathematics.Vectors.byte3,GenMathematics.Vectors.byte3)">
            <summary>
            Component-wise 'not equal' operation
            </summary>
        </member>
        <member name="T:GenMathematics.Vectors.byte4">
            <summary>
            Vector of size 4 of type <see cref="T:System.Byte"/>
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.byte4.Zero">
            <summary>
            Vector with zero in all components
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.byte4.One">
            <summary>
            Vector with unit in all components
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.byte4.UnitX">
            <summary>
            A vector with unit in the component 'x' and zeroes in the remaining components
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.byte4.UnitY">
            <summary>
            A vector with unit in the component 'y' and zeroes in the remaining components
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.byte4.UnitZ">
            <summary>
            A vector with unit in the component 'z' and zeroes in the remaining components
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.byte4.UnitW">
            <summary>
            A vector with unit in the component 'w' and zeroes in the remaining components
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.byte4.x">
            <summary>
            Component 'x' of the vector
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.byte4.y">
            <summary>
            Component 'y' of the vector
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.byte4.z">
            <summary>
            Component 'z' of the vector
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.byte4.w">
            <summary>
            Component 'w' of the vector
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.xx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.xy">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.xz">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.xw">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.yx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.yy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.yz">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.yw">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.zx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.zy">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.zz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.zw">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.wx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.wy">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.wz">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.ww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.xxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.xxy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.xxz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.xxw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.xyx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.xyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.xyz">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.xyw">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.xzx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.xzy">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.xzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.xzw">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.xwx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.xwy">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.xwz">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.xww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.yxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.yxy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.yxz">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.yxw">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.yyx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.yyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.yyz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.yyw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.yzx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.yzy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.yzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.yzw">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.ywx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.ywy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.ywz">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.yww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.zxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.zxy">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.zxz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.zxw">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.zyx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.zyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.zyz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.zyw">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.zzx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.zzy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.zzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.zzw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.zwx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.zwy">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.zwz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.zww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.wxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.wxy">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.wxz">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.wxw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.wyx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.wyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.wyz">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.wyw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.wzx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.wzy">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.wzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.wzw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.wwx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.wwy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.wwz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.www">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.xxxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.xxxy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.xxxz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.xxxw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.xxyx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.xxyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.xxyz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.xxyw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.xxzx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.xxzy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.xxzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.xxzw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.xxwx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.xxwy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.xxwz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.xxww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.xyxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.xyxy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.xyxz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.xyxw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.xyyx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.xyyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.xyyz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.xyyw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.xyzx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.xyzy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.xyzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.xywx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.xywy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.xywz">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.xyww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.xzxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.xzxy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.xzxz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.xzxw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.xzyx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.xzyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.xzyz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.xzyw">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.xzzx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.xzzy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.xzzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.xzzw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.xzwx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.xzwy">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.xzwz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.xzww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.xwxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.xwxy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.xwxz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.xwxw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.xwyx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.xwyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.xwyz">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.xwyw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.xwzx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.xwzy">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.xwzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.xwzw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.xwwx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.xwwy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.xwwz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.xwww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.yxxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.yxxy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.yxxz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.yxxw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.yxyx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.yxyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.yxyz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.yxyw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.yxzx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.yxzy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.yxzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.yxzw">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.yxwx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.yxwy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.yxwz">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.yxww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.yyxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.yyxy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.yyxz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.yyxw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.yyyx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.yyyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.yyyz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.yyyw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.yyzx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.yyzy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.yyzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.yyzw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.yywx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.yywy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.yywz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.yyww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.yzxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.yzxy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.yzxz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.yzxw">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.yzyx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.yzyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.yzyz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.yzyw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.yzzx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.yzzy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.yzzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.yzzw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.yzwx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.yzwy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.yzwz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.yzww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.ywxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.ywxy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.ywxz">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.ywxw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.ywyx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.ywyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.ywyz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.ywyw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.ywzx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.ywzy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.ywzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.ywzw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.ywwx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.ywwy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.ywwz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.ywww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.zxxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.zxxy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.zxxz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.zxxw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.zxyx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.zxyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.zxyz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.zxyw">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.zxzx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.zxzy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.zxzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.zxzw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.zxwx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.zxwy">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.zxwz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.zxww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.zyxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.zyxy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.zyxz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.zyxw">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.zyyx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.zyyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.zyyz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.zyyw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.zyzx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.zyzy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.zyzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.zyzw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.zywx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.zywy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.zywz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.zyww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.zzxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.zzxy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.zzxz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.zzxw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.zzyx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.zzyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.zzyz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.zzyw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.zzzx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.zzzy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.zzzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.zzzw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.zzwx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.zzwy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.zzwz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.zzww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.zwxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.zwxy">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.zwxz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.zwxw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.zwyx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.zwyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.zwyz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.zwyw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.zwzx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.zwzy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.zwzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.zwzw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.zwwx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.zwwy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.zwwz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.zwww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.wxxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.wxxy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.wxxz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.wxxw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.wxyx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.wxyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.wxyz">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.wxyw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.wxzx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.wxzy">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.wxzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.wxzw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.wxwx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.wxwy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.wxwz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.wxww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.wyxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.wyxy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.wyxz">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.wyxw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.wyyx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.wyyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.wyyz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.wyyw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.wyzx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.wyzy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.wyzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.wyzw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.wywx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.wywy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.wywz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.wyww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.wzxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.wzxy">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.wzxz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.wzxw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.wzyx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.wzyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.wzyz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.wzyw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.wzzx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.wzzy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.wzzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.wzzw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.wzwx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.wzwy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.wzwz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.wzww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.wwxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.wwxy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.wwxz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.wwxw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.wwyx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.wwyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.wwyz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.wwyw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.wwzx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.wwzy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.wwzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.wwzw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.wwwx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.wwwy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.wwwz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.wwww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.byte4.#ctor(System.Byte)">
            <summary>
            Constructs a vector by filling all components with the value
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.byte4.#ctor(System.Byte,GenMathematics.Vectors.byte3)">
            <summary>
            Constructs a vector from component values
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.byte4.#ctor(System.Byte,GenMathematics.Vectors.byte2,System.Byte)">
            <summary>
            Constructs a vector from component values
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.byte4.#ctor(System.Byte,System.Byte,GenMathematics.Vectors.byte2)">
            <summary>
            Constructs a vector from component values
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.byte4.#ctor(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Constructs a vector from component values
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.byte4.#ctor(GenMathematics.Vectors.byte2,GenMathematics.Vectors.byte2)">
            <summary>
            Constructs a vector from component values
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.byte4.#ctor(GenMathematics.Vectors.byte2,System.Byte,System.Byte)">
            <summary>
            Constructs a vector from component values
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.byte4.#ctor(GenMathematics.Vectors.byte3,System.Byte)">
            <summary>
            Constructs a vector from component values
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.byte4.Item(System.Int32)">
            <summary>
            Returns the vector component by index
            </summary>
            <param name="index">Index within [0,3]</param>
            <exception cref="T:System.IndexOutOfRangeException">Exception if the index is outside the vector size</exception>
        </member>
        <member name="M:GenMathematics.Vectors.byte4.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Vectors.byte4.Equals(GenMathematics.Vectors.byte4)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Vectors.byte4.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Vectors.byte4.CompareTo(GenMathematics.Vectors.byte4)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Vectors.byte4.ToString">
            <summary>
            Returns the object's state information as a string
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.byte4.LessThan(GenMathematics.Vectors.byte4,GenMathematics.Vectors.byte4)">
            <summary>
            Component-wise 'less than' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.byte4.LessThan(GenMathematics.Vectors.byte4@,GenMathematics.Vectors.byte4@,GenMathematics.Vectors.bool4@)">
            <summary>
            Component-wise 'less than' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.byte4.GreaterThan(GenMathematics.Vectors.byte4,GenMathematics.Vectors.byte4)">
            <summary>
            Component-wise 'greater than' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.byte4.GreaterThan(GenMathematics.Vectors.byte4@,GenMathematics.Vectors.byte4@,GenMathematics.Vectors.bool4@)">
            <summary>
            Component-wise 'greater than' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.byte4.LessThanEqual(GenMathematics.Vectors.byte4,GenMathematics.Vectors.byte4)">
            <summary>
            Component-wise 'less than or equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.byte4.LessThanEqual(GenMathematics.Vectors.byte4@,GenMathematics.Vectors.byte4@,GenMathematics.Vectors.bool4@)">
            <summary>
            Component-wise 'less than or equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.byte4.GreaterThanEqual(GenMathematics.Vectors.byte4,GenMathematics.Vectors.byte4)">
            <summary>
            Component-wise 'greater than or equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.byte4.GreaterThanEqual(GenMathematics.Vectors.byte4@,GenMathematics.Vectors.byte4@,GenMathematics.Vectors.bool4@)">
            <summary>
            Component-wise 'greater than or equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.byte4.Equal(GenMathematics.Vectors.byte4,GenMathematics.Vectors.byte4)">
            <summary>
            Component-wise 'equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.byte4.Equal(GenMathematics.Vectors.byte4@,GenMathematics.Vectors.byte4@,GenMathematics.Vectors.bool4@)">
            <summary>
            Component-wise 'equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.byte4.NotEqual(GenMathematics.Vectors.byte4,GenMathematics.Vectors.byte4)">
            <summary>
            Component-wise 'not equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.byte4.NotEqual(GenMathematics.Vectors.byte4@,GenMathematics.Vectors.byte4@,GenMathematics.Vectors.bool4@)">
            <summary>
            Component-wise 'not equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.byte4.op_Implicit(System.Byte)~GenMathematics.Vectors.byte4">
            <summary>
            Creates a vector by filling all components with the value
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.byte4.op_Explicit(GenMathematics.Vectors.sbyte4)~GenMathematics.Vectors.byte4">
            <summary>
            Converts sbyte4 to byte4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.byte4.op_Explicit(GenMathematics.Vectors.short4)~GenMathematics.Vectors.byte4">
            <summary>
            Converts short4 to byte4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.byte4.op_Explicit(GenMathematics.Vectors.ushort4)~GenMathematics.Vectors.byte4">
            <summary>
            Converts ushort4 to byte4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.byte4.op_Explicit(GenMathematics.Vectors.int4)~GenMathematics.Vectors.byte4">
            <summary>
            Converts int4 to byte4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.byte4.op_Explicit(GenMathematics.Vectors.uint4)~GenMathematics.Vectors.byte4">
            <summary>
            Converts uint4 to byte4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.byte4.op_Explicit(GenMathematics.Vectors.long4)~GenMathematics.Vectors.byte4">
            <summary>
            Converts long4 to byte4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.byte4.op_Explicit(GenMathematics.Vectors.ulong4)~GenMathematics.Vectors.byte4">
            <summary>
            Converts ulong4 to byte4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.byte4.op_Explicit(GenMathematics.Vectors.half4)~GenMathematics.Vectors.byte4">
            <summary>
            Converts half4 to byte4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.byte4.op_Explicit(GenMathematics.Vectors.float4)~GenMathematics.Vectors.byte4">
            <summary>
            Converts float4 to byte4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.byte4.op_Explicit(GenMathematics.Vectors.double4)~GenMathematics.Vectors.byte4">
            <summary>
            Converts double4 to byte4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.byte4.op_LessThan(GenMathematics.Vectors.byte4,GenMathematics.Vectors.byte4)">
            <summary>
            Component-wise 'less than' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.byte4.op_GreaterThan(GenMathematics.Vectors.byte4,GenMathematics.Vectors.byte4)">
            <summary>
            Component-wise 'greater than' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.byte4.op_LessThanOrEqual(GenMathematics.Vectors.byte4,GenMathematics.Vectors.byte4)">
            <summary>
            Component-wise 'less than or equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.byte4.op_GreaterThanOrEqual(GenMathematics.Vectors.byte4,GenMathematics.Vectors.byte4)">
            <summary>
            Component-wise 'greater than or equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.byte4.op_Equality(GenMathematics.Vectors.byte4,GenMathematics.Vectors.byte4)">
            <summary>
            Component-wise 'equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.byte4.op_Inequality(GenMathematics.Vectors.byte4,GenMathematics.Vectors.byte4)">
            <summary>
            Component-wise 'not equal' operation
            </summary>
        </member>
        <member name="T:GenMathematics.Vectors.double2">
            <summary>
            Vector of size 2 of type <see cref="T:System.Double"/>
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.double2.Zero">
            <summary>
            Vector with zero in all components
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.double2.One">
            <summary>
            Vector with unit in all components
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.double2.UnitX">
            <summary>
            A vector with unit in the component 'x' and zeroes in the remaining components
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.double2.UnitY">
            <summary>
            A vector with unit in the component 'y' and zeroes in the remaining components
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.double2.x">
            <summary>
            Component 'x' of the vector
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.double2.y">
            <summary>
            Component 'y' of the vector
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double2.xx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double2.yx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double2.yy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double2.#ctor(System.Double)">
            <summary>
            Constructs a vector by filling all components with the value
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double2.#ctor(System.Double,System.Double)">
            <summary>
            Constructs a vector from component values
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double2.Item(System.Int32)">
            <summary>
            Returns the vector component by index
            </summary>
            <param name="index">Index within [0,1]</param>
            <exception cref="T:System.IndexOutOfRangeException">Exception if the index is outside the vector size</exception>
        </member>
        <member name="M:GenMathematics.Vectors.double2.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Vectors.double2.Equals(GenMathematics.Vectors.double2)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Vectors.double2.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Vectors.double2.CompareTo(GenMathematics.Vectors.double2)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Vectors.double2.ToString">
            <summary>
            Returns the object's state information as a string
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double2.Add(GenMathematics.Vectors.double2,GenMathematics.Vectors.double2)">
            <summary>
            Component-wise 'add' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double2.Add(GenMathematics.Vectors.double2,System.Double)">
            <summary>
            Component-wise 'add' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double2.Add(System.Double,GenMathematics.Vectors.double2)">
            <summary>
            Component-wise 'add' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double2.Add(GenMathematics.Vectors.double2@,GenMathematics.Vectors.double2@,GenMathematics.Vectors.double2@)">
            <summary>
            Component-wise 'add' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double2.Add(GenMathematics.Vectors.double2@,System.Double,GenMathematics.Vectors.double2@)">
            <summary>
            Component-wise 'add' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double2.Add(System.Double,GenMathematics.Vectors.double2@,GenMathematics.Vectors.double2@)">
            <summary>
            Component-wise 'add' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double2.Subtract(GenMathematics.Vectors.double2,GenMathematics.Vectors.double2)">
            <summary>
            Component-wise 'subtract' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double2.Subtract(GenMathematics.Vectors.double2,System.Double)">
            <summary>
            Component-wise 'subtract' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double2.Subtract(System.Double,GenMathematics.Vectors.double2)">
            <summary>
            Component-wise 'subtract' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double2.Subtract(GenMathematics.Vectors.double2@,GenMathematics.Vectors.double2@,GenMathematics.Vectors.double2@)">
            <summary>
            Component-wise 'subtract' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double2.Subtract(GenMathematics.Vectors.double2@,System.Double,GenMathematics.Vectors.double2@)">
            <summary>
            Component-wise 'subtract' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double2.Subtract(System.Double,GenMathematics.Vectors.double2@,GenMathematics.Vectors.double2@)">
            <summary>
            Component-wise 'subtract' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double2.Multiply(GenMathematics.Vectors.double2,GenMathematics.Vectors.double2)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double2.Multiply(GenMathematics.Vectors.double2,System.Double)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double2.Multiply(System.Double,GenMathematics.Vectors.double2)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double2.Multiply(GenMathematics.Vectors.double2@,GenMathematics.Vectors.double2@,GenMathematics.Vectors.double2@)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double2.Multiply(GenMathematics.Vectors.double2@,System.Double,GenMathematics.Vectors.double2@)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double2.Multiply(System.Double,GenMathematics.Vectors.double2@,GenMathematics.Vectors.double2@)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double2.Divide(GenMathematics.Vectors.double2,GenMathematics.Vectors.double2)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double2.Divide(GenMathematics.Vectors.double2,System.Double)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double2.Divide(System.Double,GenMathematics.Vectors.double2)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double2.Divide(GenMathematics.Vectors.double2@,GenMathematics.Vectors.double2@,GenMathematics.Vectors.double2@)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double2.Divide(GenMathematics.Vectors.double2@,System.Double,GenMathematics.Vectors.double2@)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double2.Divide(System.Double,GenMathematics.Vectors.double2@,GenMathematics.Vectors.double2@)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double2.Remainder(GenMathematics.Vectors.double2,GenMathematics.Vectors.double2)">
            <summary>
            Component-wise 'remainder' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double2.Remainder(GenMathematics.Vectors.double2,System.Double)">
            <summary>
            Component-wise 'remainder' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double2.Remainder(System.Double,GenMathematics.Vectors.double2)">
            <summary>
            Component-wise 'remainder' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double2.Remainder(GenMathematics.Vectors.double2@,GenMathematics.Vectors.double2@,GenMathematics.Vectors.double2@)">
            <summary>
            Component-wise 'remainder' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double2.Remainder(GenMathematics.Vectors.double2@,System.Double,GenMathematics.Vectors.double2@)">
            <summary>
            Component-wise 'remainder' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double2.Remainder(System.Double,GenMathematics.Vectors.double2@,GenMathematics.Vectors.double2@)">
            <summary>
            Component-wise 'remainder' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double2.Negate(GenMathematics.Vectors.double2)">
            <summary>
            Component-wise 'negate' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double2.Negate(GenMathematics.Vectors.double2@,GenMathematics.Vectors.double2@)">
            <summary>
            Component-wise 'negate' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double2.op_Addition(GenMathematics.Vectors.double2,GenMathematics.Vectors.double2)">
            <summary>
            Component-wise 'add' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double2.op_Addition(GenMathematics.Vectors.double2,System.Double)">
            <summary>
            Component-wise 'add' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double2.op_Addition(System.Double,GenMathematics.Vectors.double2)">
            <summary>
            Component-wise 'add' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double2.op_Subtraction(GenMathematics.Vectors.double2,GenMathematics.Vectors.double2)">
            <summary>
            Component-wise 'subtract' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double2.op_Subtraction(GenMathematics.Vectors.double2,System.Double)">
            <summary>
            Component-wise 'subtract' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double2.op_Subtraction(System.Double,GenMathematics.Vectors.double2)">
            <summary>
            Component-wise 'subtract' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double2.op_Multiply(GenMathematics.Vectors.double2,GenMathematics.Vectors.double2)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double2.op_Multiply(GenMathematics.Vectors.double2,System.Double)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double2.op_Multiply(System.Double,GenMathematics.Vectors.double2)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double2.op_Division(GenMathematics.Vectors.double2,GenMathematics.Vectors.double2)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double2.op_Division(GenMathematics.Vectors.double2,System.Double)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double2.op_Division(System.Double,GenMathematics.Vectors.double2)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double2.op_Modulus(GenMathematics.Vectors.double2,GenMathematics.Vectors.double2)">
            <summary>
            Component-wise 'remainder' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double2.op_Modulus(GenMathematics.Vectors.double2,System.Double)">
            <summary>
            Component-wise 'remainder' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double2.op_Modulus(System.Double,GenMathematics.Vectors.double2)">
            <summary>
            Component-wise 'remainder' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double2.op_UnaryNegation(GenMathematics.Vectors.double2)">
            <summary>
            Component-wise 'negate' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double2.LessThan(GenMathematics.Vectors.double2,GenMathematics.Vectors.double2)">
            <summary>
            Component-wise 'less than' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double2.LessThan(GenMathematics.Vectors.double2@,GenMathematics.Vectors.double2@,GenMathematics.Vectors.bool2@)">
            <summary>
            Component-wise 'less than' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double2.GreaterThan(GenMathematics.Vectors.double2,GenMathematics.Vectors.double2)">
            <summary>
            Component-wise 'greater than' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double2.GreaterThan(GenMathematics.Vectors.double2@,GenMathematics.Vectors.double2@,GenMathematics.Vectors.bool2@)">
            <summary>
            Component-wise 'greater than' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double2.LessThanEqual(GenMathematics.Vectors.double2,GenMathematics.Vectors.double2)">
            <summary>
            Component-wise 'less than or equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double2.LessThanEqual(GenMathematics.Vectors.double2@,GenMathematics.Vectors.double2@,GenMathematics.Vectors.bool2@)">
            <summary>
            Component-wise 'less than or equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double2.GreaterThanEqual(GenMathematics.Vectors.double2,GenMathematics.Vectors.double2)">
            <summary>
            Component-wise 'greater than or equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double2.GreaterThanEqual(GenMathematics.Vectors.double2@,GenMathematics.Vectors.double2@,GenMathematics.Vectors.bool2@)">
            <summary>
            Component-wise 'greater than or equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double2.Equal(GenMathematics.Vectors.double2,GenMathematics.Vectors.double2)">
            <summary>
            Component-wise 'equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double2.Equal(GenMathematics.Vectors.double2@,GenMathematics.Vectors.double2@,GenMathematics.Vectors.bool2@)">
            <summary>
            Component-wise 'equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double2.NotEqual(GenMathematics.Vectors.double2,GenMathematics.Vectors.double2)">
            <summary>
            Component-wise 'not equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double2.NotEqual(GenMathematics.Vectors.double2@,GenMathematics.Vectors.double2@,GenMathematics.Vectors.bool2@)">
            <summary>
            Component-wise 'not equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double2.op_Implicit(System.Double)~GenMathematics.Vectors.double2">
            <summary>
            Creates a vector by filling all components with the value
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double2.op_Implicit(GenMathematics.Vectors.byte2)~GenMathematics.Vectors.double2">
            <summary>
            Converts byte2 to double2
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double2.op_Implicit(GenMathematics.Vectors.sbyte2)~GenMathematics.Vectors.double2">
            <summary>
            Converts sbyte2 to double2
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double2.op_Implicit(GenMathematics.Vectors.short2)~GenMathematics.Vectors.double2">
            <summary>
            Converts short2 to double2
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double2.op_Implicit(GenMathematics.Vectors.ushort2)~GenMathematics.Vectors.double2">
            <summary>
            Converts ushort2 to double2
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double2.op_Implicit(GenMathematics.Vectors.int2)~GenMathematics.Vectors.double2">
            <summary>
            Converts int2 to double2
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double2.op_Implicit(GenMathematics.Vectors.uint2)~GenMathematics.Vectors.double2">
            <summary>
            Converts uint2 to double2
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double2.op_Implicit(GenMathematics.Vectors.long2)~GenMathematics.Vectors.double2">
            <summary>
            Converts long2 to double2
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double2.op_Implicit(GenMathematics.Vectors.ulong2)~GenMathematics.Vectors.double2">
            <summary>
            Converts ulong2 to double2
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double2.op_Implicit(GenMathematics.Vectors.half2)~GenMathematics.Vectors.double2">
            <summary>
            Converts half2 to double2
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double2.op_Implicit(GenMathematics.Vectors.float2)~GenMathematics.Vectors.double2">
            <summary>
            Converts float2 to double2
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double2.op_LessThan(GenMathematics.Vectors.double2,GenMathematics.Vectors.double2)">
            <summary>
            Component-wise 'less than' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double2.op_GreaterThan(GenMathematics.Vectors.double2,GenMathematics.Vectors.double2)">
            <summary>
            Component-wise 'greater than' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double2.op_LessThanOrEqual(GenMathematics.Vectors.double2,GenMathematics.Vectors.double2)">
            <summary>
            Component-wise 'less than or equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double2.op_GreaterThanOrEqual(GenMathematics.Vectors.double2,GenMathematics.Vectors.double2)">
            <summary>
            Component-wise 'greater than or equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double2.op_Equality(GenMathematics.Vectors.double2,GenMathematics.Vectors.double2)">
            <summary>
            Component-wise 'equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double2.op_Inequality(GenMathematics.Vectors.double2,GenMathematics.Vectors.double2)">
            <summary>
            Component-wise 'not equal' operation
            </summary>
        </member>
        <member name="T:GenMathematics.Vectors.double3">
            <summary>
            Vector of size 3 of type <see cref="T:System.Double"/>
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.double3.Zero">
            <summary>
            Vector with zero in all components
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.double3.One">
            <summary>
            Vector with unit in all components
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.double3.UnitX">
            <summary>
            A vector with unit in the component 'x' and zeroes in the remaining components
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.double3.UnitY">
            <summary>
            A vector with unit in the component 'y' and zeroes in the remaining components
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.double3.UnitZ">
            <summary>
            A vector with unit in the component 'z' and zeroes in the remaining components
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.double3.x">
            <summary>
            Component 'x' of the vector
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.double3.y">
            <summary>
            Component 'y' of the vector
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.double3.z">
            <summary>
            Component 'z' of the vector
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double3.xx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double3.xy">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double3.xz">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double3.yx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double3.yy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double3.yz">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double3.zx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double3.zy">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double3.zz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double3.xxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double3.xxy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double3.xxz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double3.xyx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double3.xyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double3.xzx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double3.xzy">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double3.xzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double3.yxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double3.yxy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double3.yxz">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double3.yyx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double3.yyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double3.yyz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double3.yzx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double3.yzy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double3.yzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double3.zxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double3.zxy">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double3.zxz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double3.zyx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double3.zyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double3.zyz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double3.zzx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double3.zzy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double3.zzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double3.#ctor(System.Double)">
            <summary>
            Constructs a vector by filling all components with the value
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double3.#ctor(System.Double,GenMathematics.Vectors.double2)">
            <summary>
            Constructs a vector from component values
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double3.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Constructs a vector from component values
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double3.#ctor(GenMathematics.Vectors.double2,System.Double)">
            <summary>
            Constructs a vector from component values
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double3.Item(System.Int32)">
            <summary>
            Returns the vector component by index
            </summary>
            <param name="index">Index within [0,2]</param>
            <exception cref="T:System.IndexOutOfRangeException">Exception if the index is outside the vector size</exception>
        </member>
        <member name="M:GenMathematics.Vectors.double3.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Vectors.double3.Equals(GenMathematics.Vectors.double3)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Vectors.double3.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Vectors.double3.CompareTo(GenMathematics.Vectors.double3)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Vectors.double3.ToString">
            <summary>
            Returns the object's state information as a string
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double3.Add(GenMathematics.Vectors.double3,GenMathematics.Vectors.double3)">
            <summary>
            Component-wise 'add' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double3.Add(GenMathematics.Vectors.double3,System.Double)">
            <summary>
            Component-wise 'add' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double3.Add(System.Double,GenMathematics.Vectors.double3)">
            <summary>
            Component-wise 'add' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double3.Add(GenMathematics.Vectors.double3@,GenMathematics.Vectors.double3@,GenMathematics.Vectors.double3@)">
            <summary>
            Component-wise 'add' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double3.Add(GenMathematics.Vectors.double3@,System.Double,GenMathematics.Vectors.double3@)">
            <summary>
            Component-wise 'add' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double3.Add(System.Double,GenMathematics.Vectors.double3@,GenMathematics.Vectors.double3@)">
            <summary>
            Component-wise 'add' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double3.Subtract(GenMathematics.Vectors.double3,GenMathematics.Vectors.double3)">
            <summary>
            Component-wise 'subtract' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double3.Subtract(GenMathematics.Vectors.double3,System.Double)">
            <summary>
            Component-wise 'subtract' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double3.Subtract(System.Double,GenMathematics.Vectors.double3)">
            <summary>
            Component-wise 'subtract' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double3.Subtract(GenMathematics.Vectors.double3@,GenMathematics.Vectors.double3@,GenMathematics.Vectors.double3@)">
            <summary>
            Component-wise 'subtract' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double3.Subtract(GenMathematics.Vectors.double3@,System.Double,GenMathematics.Vectors.double3@)">
            <summary>
            Component-wise 'subtract' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double3.Subtract(System.Double,GenMathematics.Vectors.double3@,GenMathematics.Vectors.double3@)">
            <summary>
            Component-wise 'subtract' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double3.Multiply(GenMathematics.Vectors.double3,GenMathematics.Vectors.double3)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double3.Multiply(GenMathematics.Vectors.double3,System.Double)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double3.Multiply(System.Double,GenMathematics.Vectors.double3)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double3.Multiply(GenMathematics.Vectors.double3@,GenMathematics.Vectors.double3@,GenMathematics.Vectors.double3@)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double3.Multiply(GenMathematics.Vectors.double3@,System.Double,GenMathematics.Vectors.double3@)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double3.Multiply(System.Double,GenMathematics.Vectors.double3@,GenMathematics.Vectors.double3@)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double3.Divide(GenMathematics.Vectors.double3,GenMathematics.Vectors.double3)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double3.Divide(GenMathematics.Vectors.double3,System.Double)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double3.Divide(System.Double,GenMathematics.Vectors.double3)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double3.Divide(GenMathematics.Vectors.double3@,GenMathematics.Vectors.double3@,GenMathematics.Vectors.double3@)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double3.Divide(GenMathematics.Vectors.double3@,System.Double,GenMathematics.Vectors.double3@)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double3.Divide(System.Double,GenMathematics.Vectors.double3@,GenMathematics.Vectors.double3@)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double3.Remainder(GenMathematics.Vectors.double3,GenMathematics.Vectors.double3)">
            <summary>
            Component-wise 'remainder' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double3.Remainder(GenMathematics.Vectors.double3,System.Double)">
            <summary>
            Component-wise 'remainder' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double3.Remainder(System.Double,GenMathematics.Vectors.double3)">
            <summary>
            Component-wise 'remainder' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double3.Remainder(GenMathematics.Vectors.double3@,GenMathematics.Vectors.double3@,GenMathematics.Vectors.double3@)">
            <summary>
            Component-wise 'remainder' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double3.Remainder(GenMathematics.Vectors.double3@,System.Double,GenMathematics.Vectors.double3@)">
            <summary>
            Component-wise 'remainder' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double3.Remainder(System.Double,GenMathematics.Vectors.double3@,GenMathematics.Vectors.double3@)">
            <summary>
            Component-wise 'remainder' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double3.Negate(GenMathematics.Vectors.double3)">
            <summary>
            Component-wise 'negate' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double3.Negate(GenMathematics.Vectors.double3@,GenMathematics.Vectors.double3@)">
            <summary>
            Component-wise 'negate' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double3.op_Addition(GenMathematics.Vectors.double3,GenMathematics.Vectors.double3)">
            <summary>
            Component-wise 'add' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double3.op_Addition(GenMathematics.Vectors.double3,System.Double)">
            <summary>
            Component-wise 'add' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double3.op_Addition(System.Double,GenMathematics.Vectors.double3)">
            <summary>
            Component-wise 'add' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double3.op_Subtraction(GenMathematics.Vectors.double3,GenMathematics.Vectors.double3)">
            <summary>
            Component-wise 'subtract' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double3.op_Subtraction(GenMathematics.Vectors.double3,System.Double)">
            <summary>
            Component-wise 'subtract' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double3.op_Subtraction(System.Double,GenMathematics.Vectors.double3)">
            <summary>
            Component-wise 'subtract' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double3.op_Multiply(GenMathematics.Vectors.double3,GenMathematics.Vectors.double3)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double3.op_Multiply(GenMathematics.Vectors.double3,System.Double)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double3.op_Multiply(System.Double,GenMathematics.Vectors.double3)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double3.op_Division(GenMathematics.Vectors.double3,GenMathematics.Vectors.double3)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double3.op_Division(GenMathematics.Vectors.double3,System.Double)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double3.op_Division(System.Double,GenMathematics.Vectors.double3)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double3.op_Modulus(GenMathematics.Vectors.double3,GenMathematics.Vectors.double3)">
            <summary>
            Component-wise 'remainder' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double3.op_Modulus(GenMathematics.Vectors.double3,System.Double)">
            <summary>
            Component-wise 'remainder' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double3.op_Modulus(System.Double,GenMathematics.Vectors.double3)">
            <summary>
            Component-wise 'remainder' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double3.op_UnaryNegation(GenMathematics.Vectors.double3)">
            <summary>
            Component-wise 'negate' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double3.LessThan(GenMathematics.Vectors.double3,GenMathematics.Vectors.double3)">
            <summary>
            Component-wise 'less than' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double3.LessThan(GenMathematics.Vectors.double3@,GenMathematics.Vectors.double3@,GenMathematics.Vectors.bool3@)">
            <summary>
            Component-wise 'less than' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double3.GreaterThan(GenMathematics.Vectors.double3,GenMathematics.Vectors.double3)">
            <summary>
            Component-wise 'greater than' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double3.GreaterThan(GenMathematics.Vectors.double3@,GenMathematics.Vectors.double3@,GenMathematics.Vectors.bool3@)">
            <summary>
            Component-wise 'greater than' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double3.LessThanEqual(GenMathematics.Vectors.double3,GenMathematics.Vectors.double3)">
            <summary>
            Component-wise 'less than or equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double3.LessThanEqual(GenMathematics.Vectors.double3@,GenMathematics.Vectors.double3@,GenMathematics.Vectors.bool3@)">
            <summary>
            Component-wise 'less than or equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double3.GreaterThanEqual(GenMathematics.Vectors.double3,GenMathematics.Vectors.double3)">
            <summary>
            Component-wise 'greater than or equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double3.GreaterThanEqual(GenMathematics.Vectors.double3@,GenMathematics.Vectors.double3@,GenMathematics.Vectors.bool3@)">
            <summary>
            Component-wise 'greater than or equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double3.Equal(GenMathematics.Vectors.double3,GenMathematics.Vectors.double3)">
            <summary>
            Component-wise 'equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double3.Equal(GenMathematics.Vectors.double3@,GenMathematics.Vectors.double3@,GenMathematics.Vectors.bool3@)">
            <summary>
            Component-wise 'equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double3.NotEqual(GenMathematics.Vectors.double3,GenMathematics.Vectors.double3)">
            <summary>
            Component-wise 'not equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double3.NotEqual(GenMathematics.Vectors.double3@,GenMathematics.Vectors.double3@,GenMathematics.Vectors.bool3@)">
            <summary>
            Component-wise 'not equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double3.op_Implicit(System.Double)~GenMathematics.Vectors.double3">
            <summary>
            Creates a vector by filling all components with the value
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double3.op_Implicit(GenMathematics.Vectors.byte3)~GenMathematics.Vectors.double3">
            <summary>
            Converts byte3 to double3
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double3.op_Implicit(GenMathematics.Vectors.sbyte3)~GenMathematics.Vectors.double3">
            <summary>
            Converts sbyte3 to double3
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double3.op_Implicit(GenMathematics.Vectors.short3)~GenMathematics.Vectors.double3">
            <summary>
            Converts short3 to double3
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double3.op_Implicit(GenMathematics.Vectors.ushort3)~GenMathematics.Vectors.double3">
            <summary>
            Converts ushort3 to double3
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double3.op_Implicit(GenMathematics.Vectors.int3)~GenMathematics.Vectors.double3">
            <summary>
            Converts int3 to double3
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double3.op_Implicit(GenMathematics.Vectors.uint3)~GenMathematics.Vectors.double3">
            <summary>
            Converts uint3 to double3
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double3.op_Implicit(GenMathematics.Vectors.long3)~GenMathematics.Vectors.double3">
            <summary>
            Converts long3 to double3
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double3.op_Implicit(GenMathematics.Vectors.ulong3)~GenMathematics.Vectors.double3">
            <summary>
            Converts ulong3 to double3
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double3.op_Implicit(GenMathematics.Vectors.half3)~GenMathematics.Vectors.double3">
            <summary>
            Converts half3 to double3
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double3.op_Implicit(GenMathematics.Vectors.float3)~GenMathematics.Vectors.double3">
            <summary>
            Converts float3 to double3
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double3.op_LessThan(GenMathematics.Vectors.double3,GenMathematics.Vectors.double3)">
            <summary>
            Component-wise 'less than' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double3.op_GreaterThan(GenMathematics.Vectors.double3,GenMathematics.Vectors.double3)">
            <summary>
            Component-wise 'greater than' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double3.op_LessThanOrEqual(GenMathematics.Vectors.double3,GenMathematics.Vectors.double3)">
            <summary>
            Component-wise 'less than or equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double3.op_GreaterThanOrEqual(GenMathematics.Vectors.double3,GenMathematics.Vectors.double3)">
            <summary>
            Component-wise 'greater than or equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double3.op_Equality(GenMathematics.Vectors.double3,GenMathematics.Vectors.double3)">
            <summary>
            Component-wise 'equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double3.op_Inequality(GenMathematics.Vectors.double3,GenMathematics.Vectors.double3)">
            <summary>
            Component-wise 'not equal' operation
            </summary>
        </member>
        <member name="T:GenMathematics.Vectors.double4">
            <summary>
            Vector of size 4 of type <see cref="T:System.Double"/>
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.double4.Zero">
            <summary>
            Vector with zero in all components
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.double4.One">
            <summary>
            Vector with unit in all components
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.double4.UnitX">
            <summary>
            A vector with unit in the component 'x' and zeroes in the remaining components
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.double4.UnitY">
            <summary>
            A vector with unit in the component 'y' and zeroes in the remaining components
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.double4.UnitZ">
            <summary>
            A vector with unit in the component 'z' and zeroes in the remaining components
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.double4.UnitW">
            <summary>
            A vector with unit in the component 'w' and zeroes in the remaining components
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.double4.x">
            <summary>
            Component 'x' of the vector
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.double4.y">
            <summary>
            Component 'y' of the vector
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.double4.z">
            <summary>
            Component 'z' of the vector
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.double4.w">
            <summary>
            Component 'w' of the vector
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.xx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.xy">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.xz">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.xw">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.yx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.yy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.yz">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.yw">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.zx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.zy">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.zz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.zw">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.wx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.wy">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.wz">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.ww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.xxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.xxy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.xxz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.xxw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.xyx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.xyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.xyz">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.xyw">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.xzx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.xzy">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.xzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.xzw">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.xwx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.xwy">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.xwz">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.xww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.yxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.yxy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.yxz">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.yxw">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.yyx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.yyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.yyz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.yyw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.yzx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.yzy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.yzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.yzw">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.ywx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.ywy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.ywz">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.yww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.zxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.zxy">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.zxz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.zxw">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.zyx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.zyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.zyz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.zyw">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.zzx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.zzy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.zzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.zzw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.zwx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.zwy">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.zwz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.zww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.wxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.wxy">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.wxz">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.wxw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.wyx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.wyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.wyz">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.wyw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.wzx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.wzy">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.wzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.wzw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.wwx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.wwy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.wwz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.www">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.xxxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.xxxy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.xxxz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.xxxw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.xxyx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.xxyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.xxyz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.xxyw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.xxzx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.xxzy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.xxzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.xxzw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.xxwx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.xxwy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.xxwz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.xxww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.xyxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.xyxy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.xyxz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.xyxw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.xyyx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.xyyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.xyyz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.xyyw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.xyzx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.xyzy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.xyzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.xywx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.xywy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.xywz">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.xyww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.xzxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.xzxy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.xzxz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.xzxw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.xzyx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.xzyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.xzyz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.xzyw">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.xzzx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.xzzy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.xzzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.xzzw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.xzwx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.xzwy">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.xzwz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.xzww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.xwxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.xwxy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.xwxz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.xwxw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.xwyx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.xwyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.xwyz">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.xwyw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.xwzx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.xwzy">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.xwzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.xwzw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.xwwx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.xwwy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.xwwz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.xwww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.yxxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.yxxy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.yxxz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.yxxw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.yxyx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.yxyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.yxyz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.yxyw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.yxzx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.yxzy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.yxzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.yxzw">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.yxwx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.yxwy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.yxwz">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.yxww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.yyxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.yyxy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.yyxz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.yyxw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.yyyx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.yyyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.yyyz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.yyyw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.yyzx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.yyzy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.yyzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.yyzw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.yywx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.yywy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.yywz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.yyww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.yzxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.yzxy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.yzxz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.yzxw">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.yzyx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.yzyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.yzyz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.yzyw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.yzzx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.yzzy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.yzzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.yzzw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.yzwx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.yzwy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.yzwz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.yzww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.ywxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.ywxy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.ywxz">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.ywxw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.ywyx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.ywyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.ywyz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.ywyw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.ywzx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.ywzy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.ywzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.ywzw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.ywwx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.ywwy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.ywwz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.ywww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.zxxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.zxxy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.zxxz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.zxxw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.zxyx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.zxyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.zxyz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.zxyw">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.zxzx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.zxzy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.zxzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.zxzw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.zxwx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.zxwy">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.zxwz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.zxww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.zyxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.zyxy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.zyxz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.zyxw">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.zyyx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.zyyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.zyyz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.zyyw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.zyzx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.zyzy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.zyzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.zyzw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.zywx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.zywy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.zywz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.zyww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.zzxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.zzxy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.zzxz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.zzxw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.zzyx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.zzyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.zzyz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.zzyw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.zzzx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.zzzy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.zzzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.zzzw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.zzwx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.zzwy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.zzwz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.zzww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.zwxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.zwxy">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.zwxz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.zwxw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.zwyx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.zwyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.zwyz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.zwyw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.zwzx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.zwzy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.zwzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.zwzw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.zwwx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.zwwy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.zwwz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.zwww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.wxxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.wxxy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.wxxz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.wxxw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.wxyx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.wxyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.wxyz">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.wxyw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.wxzx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.wxzy">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.wxzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.wxzw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.wxwx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.wxwy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.wxwz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.wxww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.wyxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.wyxy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.wyxz">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.wyxw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.wyyx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.wyyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.wyyz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.wyyw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.wyzx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.wyzy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.wyzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.wyzw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.wywx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.wywy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.wywz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.wyww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.wzxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.wzxy">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.wzxz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.wzxw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.wzyx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.wzyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.wzyz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.wzyw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.wzzx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.wzzy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.wzzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.wzzw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.wzwx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.wzwy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.wzwz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.wzww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.wwxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.wwxy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.wwxz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.wwxw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.wwyx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.wwyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.wwyz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.wwyw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.wwzx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.wwzy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.wwzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.wwzw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.wwwx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.wwwy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.wwwz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.wwww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double4.#ctor(System.Double)">
            <summary>
            Constructs a vector by filling all components with the value
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double4.#ctor(System.Double,GenMathematics.Vectors.double3)">
            <summary>
            Constructs a vector from component values
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double4.#ctor(System.Double,GenMathematics.Vectors.double2,System.Double)">
            <summary>
            Constructs a vector from component values
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double4.#ctor(System.Double,System.Double,GenMathematics.Vectors.double2)">
            <summary>
            Constructs a vector from component values
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double4.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Constructs a vector from component values
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double4.#ctor(GenMathematics.Vectors.double2,GenMathematics.Vectors.double2)">
            <summary>
            Constructs a vector from component values
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double4.#ctor(GenMathematics.Vectors.double2,System.Double,System.Double)">
            <summary>
            Constructs a vector from component values
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double4.#ctor(GenMathematics.Vectors.double3,System.Double)">
            <summary>
            Constructs a vector from component values
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.double4.Item(System.Int32)">
            <summary>
            Returns the vector component by index
            </summary>
            <param name="index">Index within [0,3]</param>
            <exception cref="T:System.IndexOutOfRangeException">Exception if the index is outside the vector size</exception>
        </member>
        <member name="M:GenMathematics.Vectors.double4.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Vectors.double4.Equals(GenMathematics.Vectors.double4)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Vectors.double4.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Vectors.double4.CompareTo(GenMathematics.Vectors.double4)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Vectors.double4.ToString">
            <summary>
            Returns the object's state information as a string
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double4.Add(GenMathematics.Vectors.double4,GenMathematics.Vectors.double4)">
            <summary>
            Component-wise 'add' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double4.Add(GenMathematics.Vectors.double4,System.Double)">
            <summary>
            Component-wise 'add' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double4.Add(System.Double,GenMathematics.Vectors.double4)">
            <summary>
            Component-wise 'add' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double4.Add(GenMathematics.Vectors.double4@,GenMathematics.Vectors.double4@,GenMathematics.Vectors.double4@)">
            <summary>
            Component-wise 'add' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double4.Add(GenMathematics.Vectors.double4@,System.Double,GenMathematics.Vectors.double4@)">
            <summary>
            Component-wise 'add' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double4.Add(System.Double,GenMathematics.Vectors.double4@,GenMathematics.Vectors.double4@)">
            <summary>
            Component-wise 'add' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double4.Subtract(GenMathematics.Vectors.double4,GenMathematics.Vectors.double4)">
            <summary>
            Component-wise 'subtract' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double4.Subtract(GenMathematics.Vectors.double4,System.Double)">
            <summary>
            Component-wise 'subtract' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double4.Subtract(System.Double,GenMathematics.Vectors.double4)">
            <summary>
            Component-wise 'subtract' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double4.Subtract(GenMathematics.Vectors.double4@,GenMathematics.Vectors.double4@,GenMathematics.Vectors.double4@)">
            <summary>
            Component-wise 'subtract' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double4.Subtract(GenMathematics.Vectors.double4@,System.Double,GenMathematics.Vectors.double4@)">
            <summary>
            Component-wise 'subtract' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double4.Subtract(System.Double,GenMathematics.Vectors.double4@,GenMathematics.Vectors.double4@)">
            <summary>
            Component-wise 'subtract' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double4.Multiply(GenMathematics.Vectors.double4,GenMathematics.Vectors.double4)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double4.Multiply(GenMathematics.Vectors.double4,System.Double)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double4.Multiply(System.Double,GenMathematics.Vectors.double4)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double4.Multiply(GenMathematics.Vectors.double4@,GenMathematics.Vectors.double4@,GenMathematics.Vectors.double4@)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double4.Multiply(GenMathematics.Vectors.double4@,System.Double,GenMathematics.Vectors.double4@)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double4.Multiply(System.Double,GenMathematics.Vectors.double4@,GenMathematics.Vectors.double4@)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double4.Divide(GenMathematics.Vectors.double4,GenMathematics.Vectors.double4)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double4.Divide(GenMathematics.Vectors.double4,System.Double)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double4.Divide(System.Double,GenMathematics.Vectors.double4)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double4.Divide(GenMathematics.Vectors.double4@,GenMathematics.Vectors.double4@,GenMathematics.Vectors.double4@)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double4.Divide(GenMathematics.Vectors.double4@,System.Double,GenMathematics.Vectors.double4@)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double4.Divide(System.Double,GenMathematics.Vectors.double4@,GenMathematics.Vectors.double4@)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double4.Remainder(GenMathematics.Vectors.double4,GenMathematics.Vectors.double4)">
            <summary>
            Component-wise 'remainder' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double4.Remainder(GenMathematics.Vectors.double4,System.Double)">
            <summary>
            Component-wise 'remainder' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double4.Remainder(System.Double,GenMathematics.Vectors.double4)">
            <summary>
            Component-wise 'remainder' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double4.Remainder(GenMathematics.Vectors.double4@,GenMathematics.Vectors.double4@,GenMathematics.Vectors.double4@)">
            <summary>
            Component-wise 'remainder' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double4.Remainder(GenMathematics.Vectors.double4@,System.Double,GenMathematics.Vectors.double4@)">
            <summary>
            Component-wise 'remainder' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double4.Remainder(System.Double,GenMathematics.Vectors.double4@,GenMathematics.Vectors.double4@)">
            <summary>
            Component-wise 'remainder' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double4.Negate(GenMathematics.Vectors.double4)">
            <summary>
            Component-wise 'negate' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double4.Negate(GenMathematics.Vectors.double4@,GenMathematics.Vectors.double4@)">
            <summary>
            Component-wise 'negate' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double4.op_Addition(GenMathematics.Vectors.double4,GenMathematics.Vectors.double4)">
            <summary>
            Component-wise 'add' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double4.op_Addition(GenMathematics.Vectors.double4,System.Double)">
            <summary>
            Component-wise 'add' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double4.op_Addition(System.Double,GenMathematics.Vectors.double4)">
            <summary>
            Component-wise 'add' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double4.op_Subtraction(GenMathematics.Vectors.double4,GenMathematics.Vectors.double4)">
            <summary>
            Component-wise 'subtract' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double4.op_Subtraction(GenMathematics.Vectors.double4,System.Double)">
            <summary>
            Component-wise 'subtract' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double4.op_Subtraction(System.Double,GenMathematics.Vectors.double4)">
            <summary>
            Component-wise 'subtract' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double4.op_Multiply(GenMathematics.Vectors.double4,GenMathematics.Vectors.double4)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double4.op_Multiply(GenMathematics.Vectors.double4,System.Double)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double4.op_Multiply(System.Double,GenMathematics.Vectors.double4)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double4.op_Division(GenMathematics.Vectors.double4,GenMathematics.Vectors.double4)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double4.op_Division(GenMathematics.Vectors.double4,System.Double)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double4.op_Division(System.Double,GenMathematics.Vectors.double4)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double4.op_Modulus(GenMathematics.Vectors.double4,GenMathematics.Vectors.double4)">
            <summary>
            Component-wise 'remainder' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double4.op_Modulus(GenMathematics.Vectors.double4,System.Double)">
            <summary>
            Component-wise 'remainder' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double4.op_Modulus(System.Double,GenMathematics.Vectors.double4)">
            <summary>
            Component-wise 'remainder' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double4.op_UnaryNegation(GenMathematics.Vectors.double4)">
            <summary>
            Component-wise 'negate' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double4.LessThan(GenMathematics.Vectors.double4,GenMathematics.Vectors.double4)">
            <summary>
            Component-wise 'less than' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double4.LessThan(GenMathematics.Vectors.double4@,GenMathematics.Vectors.double4@,GenMathematics.Vectors.bool4@)">
            <summary>
            Component-wise 'less than' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double4.GreaterThan(GenMathematics.Vectors.double4,GenMathematics.Vectors.double4)">
            <summary>
            Component-wise 'greater than' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double4.GreaterThan(GenMathematics.Vectors.double4@,GenMathematics.Vectors.double4@,GenMathematics.Vectors.bool4@)">
            <summary>
            Component-wise 'greater than' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double4.LessThanEqual(GenMathematics.Vectors.double4,GenMathematics.Vectors.double4)">
            <summary>
            Component-wise 'less than or equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double4.LessThanEqual(GenMathematics.Vectors.double4@,GenMathematics.Vectors.double4@,GenMathematics.Vectors.bool4@)">
            <summary>
            Component-wise 'less than or equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double4.GreaterThanEqual(GenMathematics.Vectors.double4,GenMathematics.Vectors.double4)">
            <summary>
            Component-wise 'greater than or equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double4.GreaterThanEqual(GenMathematics.Vectors.double4@,GenMathematics.Vectors.double4@,GenMathematics.Vectors.bool4@)">
            <summary>
            Component-wise 'greater than or equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double4.Equal(GenMathematics.Vectors.double4,GenMathematics.Vectors.double4)">
            <summary>
            Component-wise 'equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double4.Equal(GenMathematics.Vectors.double4@,GenMathematics.Vectors.double4@,GenMathematics.Vectors.bool4@)">
            <summary>
            Component-wise 'equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double4.NotEqual(GenMathematics.Vectors.double4,GenMathematics.Vectors.double4)">
            <summary>
            Component-wise 'not equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double4.NotEqual(GenMathematics.Vectors.double4@,GenMathematics.Vectors.double4@,GenMathematics.Vectors.bool4@)">
            <summary>
            Component-wise 'not equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double4.op_Implicit(System.Double)~GenMathematics.Vectors.double4">
            <summary>
            Creates a vector by filling all components with the value
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double4.op_Implicit(GenMathematics.Vectors.byte4)~GenMathematics.Vectors.double4">
            <summary>
            Converts byte4 to double4
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double4.op_Implicit(GenMathematics.Vectors.sbyte4)~GenMathematics.Vectors.double4">
            <summary>
            Converts sbyte4 to double4
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double4.op_Implicit(GenMathematics.Vectors.short4)~GenMathematics.Vectors.double4">
            <summary>
            Converts short4 to double4
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double4.op_Implicit(GenMathematics.Vectors.ushort4)~GenMathematics.Vectors.double4">
            <summary>
            Converts ushort4 to double4
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double4.op_Implicit(GenMathematics.Vectors.int4)~GenMathematics.Vectors.double4">
            <summary>
            Converts int4 to double4
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double4.op_Implicit(GenMathematics.Vectors.uint4)~GenMathematics.Vectors.double4">
            <summary>
            Converts uint4 to double4
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double4.op_Implicit(GenMathematics.Vectors.long4)~GenMathematics.Vectors.double4">
            <summary>
            Converts long4 to double4
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double4.op_Implicit(GenMathematics.Vectors.ulong4)~GenMathematics.Vectors.double4">
            <summary>
            Converts ulong4 to double4
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double4.op_Implicit(GenMathematics.Vectors.half4)~GenMathematics.Vectors.double4">
            <summary>
            Converts half4 to double4
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double4.op_Implicit(GenMathematics.Vectors.float4)~GenMathematics.Vectors.double4">
            <summary>
            Converts float4 to double4
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double4.op_LessThan(GenMathematics.Vectors.double4,GenMathematics.Vectors.double4)">
            <summary>
            Component-wise 'less than' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double4.op_GreaterThan(GenMathematics.Vectors.double4,GenMathematics.Vectors.double4)">
            <summary>
            Component-wise 'greater than' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double4.op_LessThanOrEqual(GenMathematics.Vectors.double4,GenMathematics.Vectors.double4)">
            <summary>
            Component-wise 'less than or equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double4.op_GreaterThanOrEqual(GenMathematics.Vectors.double4,GenMathematics.Vectors.double4)">
            <summary>
            Component-wise 'greater than or equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double4.op_Equality(GenMathematics.Vectors.double4,GenMathematics.Vectors.double4)">
            <summary>
            Component-wise 'equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.double4.op_Inequality(GenMathematics.Vectors.double4,GenMathematics.Vectors.double4)">
            <summary>
            Component-wise 'not equal' operation
            </summary>
        </member>
        <member name="T:GenMathematics.Vectors.float2">
            <summary>
            Vector of size 2 of type <see cref="T:System.Single"/>
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.float2.Zero">
            <summary>
            Vector with zero in all components
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.float2.One">
            <summary>
            Vector with unit in all components
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.float2.UnitX">
            <summary>
            A vector with unit in the component 'x' and zeroes in the remaining components
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.float2.UnitY">
            <summary>
            A vector with unit in the component 'y' and zeroes in the remaining components
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.float2.x">
            <summary>
            Component 'x' of the vector
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.float2.y">
            <summary>
            Component 'y' of the vector
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float2.xx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float2.yx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float2.yy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.float2.#ctor(System.Single)">
            <summary>
            Constructs a vector by filling all components with the value
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.float2.#ctor(System.Single,System.Single)">
            <summary>
            Constructs a vector from component values
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float2.Item(System.Int32)">
            <summary>
            Returns the vector component by index
            </summary>
            <param name="index">Index within [0,1]</param>
            <exception cref="T:System.IndexOutOfRangeException">Exception if the index is outside the vector size</exception>
        </member>
        <member name="M:GenMathematics.Vectors.float2.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Vectors.float2.Equals(GenMathematics.Vectors.float2)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Vectors.float2.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Vectors.float2.CompareTo(GenMathematics.Vectors.float2)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Vectors.float2.ToString">
            <summary>
            Returns the object's state information as a string
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.float2.Add(GenMathematics.Vectors.float2,GenMathematics.Vectors.float2)">
            <summary>
            Component-wise 'add' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.float2.Add(GenMathematics.Vectors.float2,System.Single)">
            <summary>
            Component-wise 'add' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.float2.Add(System.Single,GenMathematics.Vectors.float2)">
            <summary>
            Component-wise 'add' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.float2.Subtract(GenMathematics.Vectors.float2,GenMathematics.Vectors.float2)">
            <summary>
            Component-wise 'subtract' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.float2.Subtract(GenMathematics.Vectors.float2,System.Single)">
            <summary>
            Component-wise 'subtract' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.float2.Subtract(System.Single,GenMathematics.Vectors.float2)">
            <summary>
            Component-wise 'subtract' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.float2.Multiply(GenMathematics.Vectors.float2,GenMathematics.Vectors.float2)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.float2.Multiply(GenMathematics.Vectors.float2,System.Single)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.float2.Multiply(System.Single,GenMathematics.Vectors.float2)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.float2.Divide(GenMathematics.Vectors.float2,GenMathematics.Vectors.float2)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.float2.Divide(GenMathematics.Vectors.float2,System.Single)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.float2.Divide(System.Single,GenMathematics.Vectors.float2)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.float2.Remainder(GenMathematics.Vectors.float2,GenMathematics.Vectors.float2)">
            <summary>
            Component-wise 'remainder' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.float2.Remainder(GenMathematics.Vectors.float2,System.Single)">
            <summary>
            Component-wise 'remainder' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.float2.Remainder(System.Single,GenMathematics.Vectors.float2)">
            <summary>
            Component-wise 'remainder' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.float2.Negate(GenMathematics.Vectors.float2)">
            <summary>
            Component-wise 'negate' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.float2.op_Addition(GenMathematics.Vectors.float2,GenMathematics.Vectors.float2)">
            <summary>
            Component-wise 'add' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.float2.op_Addition(GenMathematics.Vectors.float2,System.Single)">
            <summary>
            Component-wise 'add' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.float2.op_Addition(System.Single,GenMathematics.Vectors.float2)">
            <summary>
            Component-wise 'add' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.float2.op_Subtraction(GenMathematics.Vectors.float2,GenMathematics.Vectors.float2)">
            <summary>
            Component-wise 'subtract' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.float2.op_Subtraction(GenMathematics.Vectors.float2,System.Single)">
            <summary>
            Component-wise 'subtract' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.float2.op_Subtraction(System.Single,GenMathematics.Vectors.float2)">
            <summary>
            Component-wise 'subtract' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.float2.op_Multiply(GenMathematics.Vectors.float2,GenMathematics.Vectors.float2)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.float2.op_Multiply(GenMathematics.Vectors.float2,System.Single)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.float2.op_Multiply(System.Single,GenMathematics.Vectors.float2)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.float2.op_Division(GenMathematics.Vectors.float2,GenMathematics.Vectors.float2)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.float2.op_Division(GenMathematics.Vectors.float2,System.Single)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.float2.op_Division(System.Single,GenMathematics.Vectors.float2)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.float2.op_Modulus(GenMathematics.Vectors.float2,GenMathematics.Vectors.float2)">
            <summary>
            Component-wise 'remainder' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.float2.op_Modulus(GenMathematics.Vectors.float2,System.Single)">
            <summary>
            Component-wise 'remainder' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.float2.op_Modulus(System.Single,GenMathematics.Vectors.float2)">
            <summary>
            Component-wise 'remainder' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.float2.op_UnaryNegation(GenMathematics.Vectors.float2)">
            <summary>
            Component-wise 'negate' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.float2.LessThan(GenMathematics.Vectors.float2,GenMathematics.Vectors.float2)">
            <summary>
            Component-wise 'less than' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.float2.LessThan(GenMathematics.Vectors.float2@,GenMathematics.Vectors.float2@,GenMathematics.Vectors.bool2@)">
            <summary>
            Component-wise 'less than' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.float2.GreaterThan(GenMathematics.Vectors.float2,GenMathematics.Vectors.float2)">
            <summary>
            Component-wise 'greater than' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.float2.GreaterThan(GenMathematics.Vectors.float2@,GenMathematics.Vectors.float2@,GenMathematics.Vectors.bool2@)">
            <summary>
            Component-wise 'greater than' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.float2.LessThanEqual(GenMathematics.Vectors.float2,GenMathematics.Vectors.float2)">
            <summary>
            Component-wise 'less than or equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.float2.LessThanEqual(GenMathematics.Vectors.float2@,GenMathematics.Vectors.float2@,GenMathematics.Vectors.bool2@)">
            <summary>
            Component-wise 'less than or equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.float2.GreaterThanEqual(GenMathematics.Vectors.float2,GenMathematics.Vectors.float2)">
            <summary>
            Component-wise 'greater than or equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.float2.GreaterThanEqual(GenMathematics.Vectors.float2@,GenMathematics.Vectors.float2@,GenMathematics.Vectors.bool2@)">
            <summary>
            Component-wise 'greater than or equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.float2.Equal(GenMathematics.Vectors.float2,GenMathematics.Vectors.float2)">
            <summary>
            Component-wise 'equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.float2.Equal(GenMathematics.Vectors.float2@,GenMathematics.Vectors.float2@,GenMathematics.Vectors.bool2@)">
            <summary>
            Component-wise 'equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.float2.NotEqual(GenMathematics.Vectors.float2,GenMathematics.Vectors.float2)">
            <summary>
            Component-wise 'not equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.float2.NotEqual(GenMathematics.Vectors.float2@,GenMathematics.Vectors.float2@,GenMathematics.Vectors.bool2@)">
            <summary>
            Component-wise 'not equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.float2.op_Implicit(System.Single)~GenMathematics.Vectors.float2">
            <summary>
            Creates a vector by filling all components with the value
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.float2.op_Explicit(GenMathematics.Vectors.double2)~GenMathematics.Vectors.float2">
            <summary>
            Converts double2 to float2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.float2.op_Implicit(GenMathematics.Vectors.byte2)~GenMathematics.Vectors.float2">
            <summary>
            Converts byte2 to float2
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.float2.op_Implicit(GenMathematics.Vectors.sbyte2)~GenMathematics.Vectors.float2">
            <summary>
            Converts sbyte2 to float2
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.float2.op_Implicit(GenMathematics.Vectors.short2)~GenMathematics.Vectors.float2">
            <summary>
            Converts short2 to float2
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.float2.op_Implicit(GenMathematics.Vectors.ushort2)~GenMathematics.Vectors.float2">
            <summary>
            Converts ushort2 to float2
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.float2.op_Implicit(GenMathematics.Vectors.int2)~GenMathematics.Vectors.float2">
            <summary>
            Converts int2 to float2
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.float2.op_Implicit(GenMathematics.Vectors.uint2)~GenMathematics.Vectors.float2">
            <summary>
            Converts uint2 to float2
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.float2.op_Implicit(GenMathematics.Vectors.long2)~GenMathematics.Vectors.float2">
            <summary>
            Converts long2 to float2
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.float2.op_Implicit(GenMathematics.Vectors.ulong2)~GenMathematics.Vectors.float2">
            <summary>
            Converts ulong2 to float2
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.float2.op_Implicit(GenMathematics.Vectors.half2)~GenMathematics.Vectors.float2">
            <summary>
            Converts half2 to float2
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.float2.op_LessThan(GenMathematics.Vectors.float2,GenMathematics.Vectors.float2)">
            <summary>
            Component-wise 'less than' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.float2.op_GreaterThan(GenMathematics.Vectors.float2,GenMathematics.Vectors.float2)">
            <summary>
            Component-wise 'greater than' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.float2.op_LessThanOrEqual(GenMathematics.Vectors.float2,GenMathematics.Vectors.float2)">
            <summary>
            Component-wise 'less than or equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.float2.op_GreaterThanOrEqual(GenMathematics.Vectors.float2,GenMathematics.Vectors.float2)">
            <summary>
            Component-wise 'greater than or equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.float2.op_Equality(GenMathematics.Vectors.float2,GenMathematics.Vectors.float2)">
            <summary>
            Component-wise 'equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.float2.op_Inequality(GenMathematics.Vectors.float2,GenMathematics.Vectors.float2)">
            <summary>
            Component-wise 'not equal' operation
            </summary>
        </member>
        <member name="T:GenMathematics.Vectors.float3">
            <summary>
            Vector of size 3 of type <see cref="T:System.Single"/>
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.float3.Zero">
            <summary>
            Vector with zero in all components
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.float3.One">
            <summary>
            Vector with unit in all components
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.float3.UnitX">
            <summary>
            A vector with unit in the component 'x' and zeroes in the remaining components
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.float3.UnitY">
            <summary>
            A vector with unit in the component 'y' and zeroes in the remaining components
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.float3.UnitZ">
            <summary>
            A vector with unit in the component 'z' and zeroes in the remaining components
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.float3.x">
            <summary>
            Component 'x' of the vector
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.float3.y">
            <summary>
            Component 'y' of the vector
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.float3.z">
            <summary>
            Component 'z' of the vector
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float3.xx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float3.xy">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float3.xz">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float3.yx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float3.yy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float3.yz">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float3.zx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float3.zy">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float3.zz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float3.xxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float3.xxy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float3.xxz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float3.xyx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float3.xyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float3.xzx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float3.xzy">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float3.xzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float3.yxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float3.yxy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float3.yxz">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float3.yyx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float3.yyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float3.yyz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float3.yzx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float3.yzy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float3.yzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float3.zxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float3.zxy">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float3.zxz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float3.zyx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float3.zyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float3.zyz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float3.zzx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float3.zzy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float3.zzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.float3.#ctor(System.Single)">
            <summary>
            Constructs a vector by filling all components with the value
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.float3.#ctor(System.Single,GenMathematics.Vectors.float2)">
            <summary>
            Constructs a vector from component values
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.float3.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Constructs a vector from component values
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.float3.#ctor(GenMathematics.Vectors.float2,System.Single)">
            <summary>
            Constructs a vector from component values
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float3.Item(System.Int32)">
            <summary>
            Returns the vector component by index
            </summary>
            <param name="index">Index within [0,2]</param>
            <exception cref="T:System.IndexOutOfRangeException">Exception if the index is outside the vector size</exception>
        </member>
        <member name="M:GenMathematics.Vectors.float3.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Vectors.float3.Equals(GenMathematics.Vectors.float3)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Vectors.float3.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Vectors.float3.CompareTo(GenMathematics.Vectors.float3)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Vectors.float3.ToString">
            <summary>
            Returns the object's state information as a string
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.float3.Add(GenMathematics.Vectors.float3,GenMathematics.Vectors.float3)">
            <summary>
            Component-wise 'add' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.float3.Add(GenMathematics.Vectors.float3,System.Single)">
            <summary>
            Component-wise 'add' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.float3.Add(System.Single,GenMathematics.Vectors.float3)">
            <summary>
            Component-wise 'add' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.float3.Add(GenMathematics.Vectors.float3@,GenMathematics.Vectors.float3@,GenMathematics.Vectors.float3@)">
            <summary>
            Component-wise 'add' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.float3.Add(GenMathematics.Vectors.float3@,System.Single,GenMathematics.Vectors.float3@)">
            <summary>
            Component-wise 'add' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.float3.Add(System.Single,GenMathematics.Vectors.float3@,GenMathematics.Vectors.float3@)">
            <summary>
            Component-wise 'add' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.float3.Subtract(GenMathematics.Vectors.float3,GenMathematics.Vectors.float3)">
            <summary>
            Component-wise 'subtract' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.float3.Subtract(GenMathematics.Vectors.float3,System.Single)">
            <summary>
            Component-wise 'subtract' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.float3.Subtract(System.Single,GenMathematics.Vectors.float3)">
            <summary>
            Component-wise 'subtract' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.float3.Subtract(GenMathematics.Vectors.float3@,GenMathematics.Vectors.float3@,GenMathematics.Vectors.float3@)">
            <summary>
            Component-wise 'subtract' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.float3.Subtract(GenMathematics.Vectors.float3@,System.Single,GenMathematics.Vectors.float3@)">
            <summary>
            Component-wise 'subtract' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.float3.Subtract(System.Single,GenMathematics.Vectors.float3@,GenMathematics.Vectors.float3@)">
            <summary>
            Component-wise 'subtract' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.float3.Multiply(GenMathematics.Vectors.float3,GenMathematics.Vectors.float3)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.float3.Multiply(GenMathematics.Vectors.float3,System.Single)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.float3.Multiply(System.Single,GenMathematics.Vectors.float3)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.float3.Multiply(GenMathematics.Vectors.float3@,GenMathematics.Vectors.float3@,GenMathematics.Vectors.float3@)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.float3.Multiply(GenMathematics.Vectors.float3@,System.Single,GenMathematics.Vectors.float3@)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.float3.Multiply(System.Single,GenMathematics.Vectors.float3@,GenMathematics.Vectors.float3@)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.float3.Divide(GenMathematics.Vectors.float3,GenMathematics.Vectors.float3)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.float3.Divide(GenMathematics.Vectors.float3,System.Single)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.float3.Divide(System.Single,GenMathematics.Vectors.float3)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.float3.Divide(GenMathematics.Vectors.float3@,GenMathematics.Vectors.float3@,GenMathematics.Vectors.float3@)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.float3.Divide(GenMathematics.Vectors.float3@,System.Single,GenMathematics.Vectors.float3@)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.float3.Divide(System.Single,GenMathematics.Vectors.float3@,GenMathematics.Vectors.float3@)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.float3.Remainder(GenMathematics.Vectors.float3,GenMathematics.Vectors.float3)">
            <summary>
            Component-wise 'remainder' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.float3.Remainder(GenMathematics.Vectors.float3,System.Single)">
            <summary>
            Component-wise 'remainder' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.float3.Remainder(System.Single,GenMathematics.Vectors.float3)">
            <summary>
            Component-wise 'remainder' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.float3.Remainder(GenMathematics.Vectors.float3@,GenMathematics.Vectors.float3@,GenMathematics.Vectors.float3@)">
            <summary>
            Component-wise 'remainder' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.float3.Remainder(GenMathematics.Vectors.float3@,System.Single,GenMathematics.Vectors.float3@)">
            <summary>
            Component-wise 'remainder' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.float3.Remainder(System.Single,GenMathematics.Vectors.float3@,GenMathematics.Vectors.float3@)">
            <summary>
            Component-wise 'remainder' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.float3.Negate(GenMathematics.Vectors.float3)">
            <summary>
            Component-wise 'negate' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.float3.Negate(GenMathematics.Vectors.float3@,GenMathematics.Vectors.float3@)">
            <summary>
            Component-wise 'negate' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.float3.op_Addition(GenMathematics.Vectors.float3,GenMathematics.Vectors.float3)">
            <summary>
            Component-wise 'add' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.float3.op_Addition(GenMathematics.Vectors.float3,System.Single)">
            <summary>
            Component-wise 'add' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.float3.op_Addition(System.Single,GenMathematics.Vectors.float3)">
            <summary>
            Component-wise 'add' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.float3.op_Subtraction(GenMathematics.Vectors.float3,GenMathematics.Vectors.float3)">
            <summary>
            Component-wise 'subtract' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.float3.op_Subtraction(GenMathematics.Vectors.float3,System.Single)">
            <summary>
            Component-wise 'subtract' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.float3.op_Subtraction(System.Single,GenMathematics.Vectors.float3)">
            <summary>
            Component-wise 'subtract' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.float3.op_Multiply(GenMathematics.Vectors.float3,GenMathematics.Vectors.float3)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.float3.op_Multiply(GenMathematics.Vectors.float3,System.Single)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.float3.op_Multiply(System.Single,GenMathematics.Vectors.float3)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.float3.op_Division(GenMathematics.Vectors.float3,GenMathematics.Vectors.float3)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.float3.op_Division(GenMathematics.Vectors.float3,System.Single)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.float3.op_Division(System.Single,GenMathematics.Vectors.float3)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.float3.op_Modulus(GenMathematics.Vectors.float3,GenMathematics.Vectors.float3)">
            <summary>
            Component-wise 'remainder' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.float3.op_Modulus(GenMathematics.Vectors.float3,System.Single)">
            <summary>
            Component-wise 'remainder' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.float3.op_Modulus(System.Single,GenMathematics.Vectors.float3)">
            <summary>
            Component-wise 'remainder' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.float3.op_UnaryNegation(GenMathematics.Vectors.float3)">
            <summary>
            Component-wise 'negate' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.float3.LessThan(GenMathematics.Vectors.float3,GenMathematics.Vectors.float3)">
            <summary>
            Component-wise 'less than' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.float3.LessThan(GenMathematics.Vectors.float3@,GenMathematics.Vectors.float3@,GenMathematics.Vectors.bool3@)">
            <summary>
            Component-wise 'less than' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.float3.GreaterThan(GenMathematics.Vectors.float3,GenMathematics.Vectors.float3)">
            <summary>
            Component-wise 'greater than' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.float3.GreaterThan(GenMathematics.Vectors.float3@,GenMathematics.Vectors.float3@,GenMathematics.Vectors.bool3@)">
            <summary>
            Component-wise 'greater than' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.float3.LessThanEqual(GenMathematics.Vectors.float3,GenMathematics.Vectors.float3)">
            <summary>
            Component-wise 'less than or equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.float3.LessThanEqual(GenMathematics.Vectors.float3@,GenMathematics.Vectors.float3@,GenMathematics.Vectors.bool3@)">
            <summary>
            Component-wise 'less than or equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.float3.GreaterThanEqual(GenMathematics.Vectors.float3,GenMathematics.Vectors.float3)">
            <summary>
            Component-wise 'greater than or equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.float3.GreaterThanEqual(GenMathematics.Vectors.float3@,GenMathematics.Vectors.float3@,GenMathematics.Vectors.bool3@)">
            <summary>
            Component-wise 'greater than or equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.float3.Equal(GenMathematics.Vectors.float3,GenMathematics.Vectors.float3)">
            <summary>
            Component-wise 'equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.float3.Equal(GenMathematics.Vectors.float3@,GenMathematics.Vectors.float3@,GenMathematics.Vectors.bool3@)">
            <summary>
            Component-wise 'equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.float3.NotEqual(GenMathematics.Vectors.float3,GenMathematics.Vectors.float3)">
            <summary>
            Component-wise 'not equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.float3.NotEqual(GenMathematics.Vectors.float3@,GenMathematics.Vectors.float3@,GenMathematics.Vectors.bool3@)">
            <summary>
            Component-wise 'not equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.float3.op_Implicit(System.Single)~GenMathematics.Vectors.float3">
            <summary>
            Creates a vector by filling all components with the value
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.float3.op_Explicit(GenMathematics.Vectors.double3)~GenMathematics.Vectors.float3">
            <summary>
            Converts double3 to float3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.float3.op_Implicit(GenMathematics.Vectors.byte3)~GenMathematics.Vectors.float3">
            <summary>
            Converts byte3 to float3
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.float3.op_Implicit(GenMathematics.Vectors.sbyte3)~GenMathematics.Vectors.float3">
            <summary>
            Converts sbyte3 to float3
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.float3.op_Implicit(GenMathematics.Vectors.short3)~GenMathematics.Vectors.float3">
            <summary>
            Converts short3 to float3
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.float3.op_Implicit(GenMathematics.Vectors.ushort3)~GenMathematics.Vectors.float3">
            <summary>
            Converts ushort3 to float3
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.float3.op_Implicit(GenMathematics.Vectors.int3)~GenMathematics.Vectors.float3">
            <summary>
            Converts int3 to float3
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.float3.op_Implicit(GenMathematics.Vectors.uint3)~GenMathematics.Vectors.float3">
            <summary>
            Converts uint3 to float3
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.float3.op_Implicit(GenMathematics.Vectors.long3)~GenMathematics.Vectors.float3">
            <summary>
            Converts long3 to float3
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.float3.op_Implicit(GenMathematics.Vectors.ulong3)~GenMathematics.Vectors.float3">
            <summary>
            Converts ulong3 to float3
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.float3.op_Implicit(GenMathematics.Vectors.half3)~GenMathematics.Vectors.float3">
            <summary>
            Converts half3 to float3
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.float3.op_LessThan(GenMathematics.Vectors.float3,GenMathematics.Vectors.float3)">
            <summary>
            Component-wise 'less than' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.float3.op_GreaterThan(GenMathematics.Vectors.float3,GenMathematics.Vectors.float3)">
            <summary>
            Component-wise 'greater than' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.float3.op_LessThanOrEqual(GenMathematics.Vectors.float3,GenMathematics.Vectors.float3)">
            <summary>
            Component-wise 'less than or equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.float3.op_GreaterThanOrEqual(GenMathematics.Vectors.float3,GenMathematics.Vectors.float3)">
            <summary>
            Component-wise 'greater than or equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.float3.op_Equality(GenMathematics.Vectors.float3,GenMathematics.Vectors.float3)">
            <summary>
            Component-wise 'equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.float3.op_Inequality(GenMathematics.Vectors.float3,GenMathematics.Vectors.float3)">
            <summary>
            Component-wise 'not equal' operation
            </summary>
        </member>
        <member name="T:GenMathematics.Vectors.float4">
            <summary>
            Vector of size 4 of type <see cref="T:System.Single"/>
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.float4.Zero">
            <summary>
            Vector with zero in all components
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.float4.One">
            <summary>
            Vector with unit in all components
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.float4.UnitX">
            <summary>
            A vector with unit in the component 'x' and zeroes in the remaining components
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.float4.UnitY">
            <summary>
            A vector with unit in the component 'y' and zeroes in the remaining components
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.float4.UnitZ">
            <summary>
            A vector with unit in the component 'z' and zeroes in the remaining components
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.float4.UnitW">
            <summary>
            A vector with unit in the component 'w' and zeroes in the remaining components
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.float4.x">
            <summary>
            Component 'x' of the vector
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.float4.y">
            <summary>
            Component 'y' of the vector
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.float4.z">
            <summary>
            Component 'z' of the vector
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.float4.w">
            <summary>
            Component 'w' of the vector
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.xx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.xy">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.xz">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.xw">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.yx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.yy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.yz">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.yw">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.zx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.zy">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.zz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.zw">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.wx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.wy">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.wz">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.ww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.xxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.xxy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.xxz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.xxw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.xyx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.xyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.xyz">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.xyw">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.xzx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.xzy">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.xzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.xzw">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.xwx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.xwy">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.xwz">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.xww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.yxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.yxy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.yxz">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.yxw">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.yyx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.yyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.yyz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.yyw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.yzx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.yzy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.yzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.yzw">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.ywx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.ywy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.ywz">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.yww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.zxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.zxy">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.zxz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.zxw">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.zyx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.zyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.zyz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.zyw">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.zzx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.zzy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.zzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.zzw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.zwx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.zwy">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.zwz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.zww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.wxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.wxy">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.wxz">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.wxw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.wyx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.wyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.wyz">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.wyw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.wzx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.wzy">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.wzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.wzw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.wwx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.wwy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.wwz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.www">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.xxxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.xxxy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.xxxz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.xxxw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.xxyx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.xxyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.xxyz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.xxyw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.xxzx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.xxzy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.xxzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.xxzw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.xxwx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.xxwy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.xxwz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.xxww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.xyxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.xyxy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.xyxz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.xyxw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.xyyx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.xyyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.xyyz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.xyyw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.xyzx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.xyzy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.xyzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.xywx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.xywy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.xywz">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.xyww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.xzxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.xzxy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.xzxz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.xzxw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.xzyx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.xzyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.xzyz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.xzyw">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.xzzx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.xzzy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.xzzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.xzzw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.xzwx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.xzwy">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.xzwz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.xzww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.xwxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.xwxy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.xwxz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.xwxw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.xwyx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.xwyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.xwyz">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.xwyw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.xwzx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.xwzy">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.xwzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.xwzw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.xwwx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.xwwy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.xwwz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.xwww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.yxxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.yxxy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.yxxz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.yxxw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.yxyx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.yxyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.yxyz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.yxyw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.yxzx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.yxzy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.yxzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.yxzw">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.yxwx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.yxwy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.yxwz">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.yxww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.yyxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.yyxy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.yyxz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.yyxw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.yyyx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.yyyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.yyyz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.yyyw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.yyzx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.yyzy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.yyzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.yyzw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.yywx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.yywy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.yywz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.yyww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.yzxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.yzxy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.yzxz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.yzxw">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.yzyx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.yzyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.yzyz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.yzyw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.yzzx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.yzzy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.yzzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.yzzw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.yzwx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.yzwy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.yzwz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.yzww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.ywxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.ywxy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.ywxz">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.ywxw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.ywyx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.ywyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.ywyz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.ywyw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.ywzx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.ywzy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.ywzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.ywzw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.ywwx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.ywwy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.ywwz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.ywww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.zxxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.zxxy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.zxxz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.zxxw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.zxyx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.zxyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.zxyz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.zxyw">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.zxzx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.zxzy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.zxzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.zxzw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.zxwx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.zxwy">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.zxwz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.zxww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.zyxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.zyxy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.zyxz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.zyxw">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.zyyx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.zyyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.zyyz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.zyyw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.zyzx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.zyzy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.zyzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.zyzw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.zywx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.zywy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.zywz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.zyww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.zzxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.zzxy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.zzxz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.zzxw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.zzyx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.zzyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.zzyz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.zzyw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.zzzx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.zzzy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.zzzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.zzzw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.zzwx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.zzwy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.zzwz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.zzww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.zwxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.zwxy">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.zwxz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.zwxw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.zwyx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.zwyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.zwyz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.zwyw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.zwzx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.zwzy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.zwzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.zwzw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.zwwx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.zwwy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.zwwz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.zwww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.wxxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.wxxy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.wxxz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.wxxw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.wxyx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.wxyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.wxyz">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.wxyw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.wxzx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.wxzy">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.wxzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.wxzw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.wxwx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.wxwy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.wxwz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.wxww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.wyxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.wyxy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.wyxz">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.wyxw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.wyyx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.wyyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.wyyz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.wyyw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.wyzx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.wyzy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.wyzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.wyzw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.wywx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.wywy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.wywz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.wyww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.wzxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.wzxy">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.wzxz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.wzxw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.wzyx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.wzyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.wzyz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.wzyw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.wzzx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.wzzy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.wzzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.wzzw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.wzwx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.wzwy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.wzwz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.wzww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.wwxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.wwxy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.wwxz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.wwxw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.wwyx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.wwyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.wwyz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.wwyw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.wwzx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.wwzy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.wwzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.wwzw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.wwwx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.wwwy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.wwwz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.wwww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.float4.#ctor(System.Single)">
            <summary>
            Constructs a vector by filling all components with the value
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.float4.#ctor(System.Single,GenMathematics.Vectors.float3)">
            <summary>
            Constructs a vector from component values
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.float4.#ctor(System.Single,GenMathematics.Vectors.float2,System.Single)">
            <summary>
            Constructs a vector from component values
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.float4.#ctor(System.Single,System.Single,GenMathematics.Vectors.float2)">
            <summary>
            Constructs a vector from component values
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.float4.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Constructs a vector from component values
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.float4.#ctor(GenMathematics.Vectors.float2,GenMathematics.Vectors.float2)">
            <summary>
            Constructs a vector from component values
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.float4.#ctor(GenMathematics.Vectors.float2,System.Single,System.Single)">
            <summary>
            Constructs a vector from component values
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.float4.#ctor(GenMathematics.Vectors.float3,System.Single)">
            <summary>
            Constructs a vector from component values
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.float4.Item(System.Int32)">
            <summary>
            Returns the vector component by index
            </summary>
            <param name="index">Index within [0,3]</param>
            <exception cref="T:System.IndexOutOfRangeException">Exception if the index is outside the vector size</exception>
        </member>
        <member name="M:GenMathematics.Vectors.float4.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Vectors.float4.Equals(GenMathematics.Vectors.float4)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Vectors.float4.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Vectors.float4.CompareTo(GenMathematics.Vectors.float4)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Vectors.float4.ToString">
            <summary>
            Returns the object's state information as a string
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.float4.Add(GenMathematics.Vectors.float4,GenMathematics.Vectors.float4)">
            <summary>
            Component-wise 'add' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.float4.Add(GenMathematics.Vectors.float4,System.Single)">
            <summary>
            Component-wise 'add' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.float4.Add(System.Single,GenMathematics.Vectors.float4)">
            <summary>
            Component-wise 'add' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.float4.Add(GenMathematics.Vectors.float4@,GenMathematics.Vectors.float4@,GenMathematics.Vectors.float4@)">
            <summary>
            Component-wise 'add' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.float4.Add(GenMathematics.Vectors.float4@,System.Single,GenMathematics.Vectors.float4@)">
            <summary>
            Component-wise 'add' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.float4.Add(System.Single,GenMathematics.Vectors.float4@,GenMathematics.Vectors.float4@)">
            <summary>
            Component-wise 'add' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.float4.Subtract(GenMathematics.Vectors.float4,GenMathematics.Vectors.float4)">
            <summary>
            Component-wise 'subtract' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.float4.Subtract(GenMathematics.Vectors.float4,System.Single)">
            <summary>
            Component-wise 'subtract' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.float4.Subtract(System.Single,GenMathematics.Vectors.float4)">
            <summary>
            Component-wise 'subtract' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.float4.Subtract(GenMathematics.Vectors.float4@,GenMathematics.Vectors.float4@,GenMathematics.Vectors.float4@)">
            <summary>
            Component-wise 'subtract' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.float4.Subtract(GenMathematics.Vectors.float4@,System.Single,GenMathematics.Vectors.float4@)">
            <summary>
            Component-wise 'subtract' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.float4.Subtract(System.Single,GenMathematics.Vectors.float4@,GenMathematics.Vectors.float4@)">
            <summary>
            Component-wise 'subtract' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.float4.Multiply(GenMathematics.Vectors.float4,GenMathematics.Vectors.float4)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.float4.Multiply(GenMathematics.Vectors.float4,System.Single)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.float4.Multiply(System.Single,GenMathematics.Vectors.float4)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.float4.Multiply(GenMathematics.Vectors.float4@,GenMathematics.Vectors.float4@,GenMathematics.Vectors.float4@)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.float4.Multiply(GenMathematics.Vectors.float4@,System.Single,GenMathematics.Vectors.float4@)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.float4.Multiply(System.Single,GenMathematics.Vectors.float4@,GenMathematics.Vectors.float4@)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.float4.Divide(GenMathematics.Vectors.float4,GenMathematics.Vectors.float4)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.float4.Divide(GenMathematics.Vectors.float4,System.Single)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.float4.Divide(System.Single,GenMathematics.Vectors.float4)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.float4.Divide(GenMathematics.Vectors.float4@,GenMathematics.Vectors.float4@,GenMathematics.Vectors.float4@)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.float4.Divide(GenMathematics.Vectors.float4@,System.Single,GenMathematics.Vectors.float4@)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.float4.Divide(System.Single,GenMathematics.Vectors.float4@,GenMathematics.Vectors.float4@)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.float4.Remainder(GenMathematics.Vectors.float4,GenMathematics.Vectors.float4)">
            <summary>
            Component-wise 'remainder' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.float4.Remainder(GenMathematics.Vectors.float4,System.Single)">
            <summary>
            Component-wise 'remainder' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.float4.Remainder(System.Single,GenMathematics.Vectors.float4)">
            <summary>
            Component-wise 'remainder' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.float4.Remainder(GenMathematics.Vectors.float4@,GenMathematics.Vectors.float4@,GenMathematics.Vectors.float4@)">
            <summary>
            Component-wise 'remainder' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.float4.Remainder(GenMathematics.Vectors.float4@,System.Single,GenMathematics.Vectors.float4@)">
            <summary>
            Component-wise 'remainder' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.float4.Remainder(System.Single,GenMathematics.Vectors.float4@,GenMathematics.Vectors.float4@)">
            <summary>
            Component-wise 'remainder' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.float4.Negate(GenMathematics.Vectors.float4)">
            <summary>
            Component-wise 'negate' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.float4.Negate(GenMathematics.Vectors.float4@,GenMathematics.Vectors.float4@)">
            <summary>
            Component-wise 'negate' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.float4.op_Addition(GenMathematics.Vectors.float4,GenMathematics.Vectors.float4)">
            <summary>
            Component-wise 'add' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.float4.op_Addition(GenMathematics.Vectors.float4,System.Single)">
            <summary>
            Component-wise 'add' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.float4.op_Addition(System.Single,GenMathematics.Vectors.float4)">
            <summary>
            Component-wise 'add' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.float4.op_Subtraction(GenMathematics.Vectors.float4,GenMathematics.Vectors.float4)">
            <summary>
            Component-wise 'subtract' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.float4.op_Subtraction(GenMathematics.Vectors.float4,System.Single)">
            <summary>
            Component-wise 'subtract' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.float4.op_Subtraction(System.Single,GenMathematics.Vectors.float4)">
            <summary>
            Component-wise 'subtract' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.float4.op_Multiply(GenMathematics.Vectors.float4,GenMathematics.Vectors.float4)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.float4.op_Multiply(GenMathematics.Vectors.float4,System.Single)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.float4.op_Multiply(System.Single,GenMathematics.Vectors.float4)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.float4.op_Division(GenMathematics.Vectors.float4,GenMathematics.Vectors.float4)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.float4.op_Division(GenMathematics.Vectors.float4,System.Single)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.float4.op_Division(System.Single,GenMathematics.Vectors.float4)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.float4.op_Modulus(GenMathematics.Vectors.float4,GenMathematics.Vectors.float4)">
            <summary>
            Component-wise 'remainder' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.float4.op_Modulus(GenMathematics.Vectors.float4,System.Single)">
            <summary>
            Component-wise 'remainder' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.float4.op_Modulus(System.Single,GenMathematics.Vectors.float4)">
            <summary>
            Component-wise 'remainder' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.float4.op_UnaryNegation(GenMathematics.Vectors.float4)">
            <summary>
            Component-wise 'negate' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.float4.LessThan(GenMathematics.Vectors.float4,GenMathematics.Vectors.float4)">
            <summary>
            Component-wise 'less than' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.float4.LessThan(GenMathematics.Vectors.float4@,GenMathematics.Vectors.float4@,GenMathematics.Vectors.bool4@)">
            <summary>
            Component-wise 'less than' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.float4.GreaterThan(GenMathematics.Vectors.float4,GenMathematics.Vectors.float4)">
            <summary>
            Component-wise 'greater than' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.float4.GreaterThan(GenMathematics.Vectors.float4@,GenMathematics.Vectors.float4@,GenMathematics.Vectors.bool4@)">
            <summary>
            Component-wise 'greater than' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.float4.LessThanEqual(GenMathematics.Vectors.float4,GenMathematics.Vectors.float4)">
            <summary>
            Component-wise 'less than or equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.float4.LessThanEqual(GenMathematics.Vectors.float4@,GenMathematics.Vectors.float4@,GenMathematics.Vectors.bool4@)">
            <summary>
            Component-wise 'less than or equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.float4.GreaterThanEqual(GenMathematics.Vectors.float4,GenMathematics.Vectors.float4)">
            <summary>
            Component-wise 'greater than or equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.float4.GreaterThanEqual(GenMathematics.Vectors.float4@,GenMathematics.Vectors.float4@,GenMathematics.Vectors.bool4@)">
            <summary>
            Component-wise 'greater than or equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.float4.Equal(GenMathematics.Vectors.float4,GenMathematics.Vectors.float4)">
            <summary>
            Component-wise 'equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.float4.Equal(GenMathematics.Vectors.float4@,GenMathematics.Vectors.float4@,GenMathematics.Vectors.bool4@)">
            <summary>
            Component-wise 'equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.float4.NotEqual(GenMathematics.Vectors.float4,GenMathematics.Vectors.float4)">
            <summary>
            Component-wise 'not equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.float4.NotEqual(GenMathematics.Vectors.float4@,GenMathematics.Vectors.float4@,GenMathematics.Vectors.bool4@)">
            <summary>
            Component-wise 'not equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.float4.op_Implicit(System.Single)~GenMathematics.Vectors.float4">
            <summary>
            Creates a vector by filling all components with the value
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.float4.op_Explicit(GenMathematics.Vectors.double4)~GenMathematics.Vectors.float4">
            <summary>
            Converts double4 to float4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.float4.op_Implicit(GenMathematics.Vectors.byte4)~GenMathematics.Vectors.float4">
            <summary>
            Converts byte4 to float4
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.float4.op_Implicit(GenMathematics.Vectors.sbyte4)~GenMathematics.Vectors.float4">
            <summary>
            Converts sbyte4 to float4
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.float4.op_Implicit(GenMathematics.Vectors.short4)~GenMathematics.Vectors.float4">
            <summary>
            Converts short4 to float4
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.float4.op_Implicit(GenMathematics.Vectors.ushort4)~GenMathematics.Vectors.float4">
            <summary>
            Converts ushort4 to float4
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.float4.op_Implicit(GenMathematics.Vectors.int4)~GenMathematics.Vectors.float4">
            <summary>
            Converts int4 to float4
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.float4.op_Implicit(GenMathematics.Vectors.uint4)~GenMathematics.Vectors.float4">
            <summary>
            Converts uint4 to float4
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.float4.op_Implicit(GenMathematics.Vectors.long4)~GenMathematics.Vectors.float4">
            <summary>
            Converts long4 to float4
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.float4.op_Implicit(GenMathematics.Vectors.ulong4)~GenMathematics.Vectors.float4">
            <summary>
            Converts ulong4 to float4
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.float4.op_Implicit(GenMathematics.Vectors.half4)~GenMathematics.Vectors.float4">
            <summary>
            Converts half4 to float4
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.float4.op_LessThan(GenMathematics.Vectors.float4,GenMathematics.Vectors.float4)">
            <summary>
            Component-wise 'less than' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.float4.op_GreaterThan(GenMathematics.Vectors.float4,GenMathematics.Vectors.float4)">
            <summary>
            Component-wise 'greater than' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.float4.op_LessThanOrEqual(GenMathematics.Vectors.float4,GenMathematics.Vectors.float4)">
            <summary>
            Component-wise 'less than or equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.float4.op_GreaterThanOrEqual(GenMathematics.Vectors.float4,GenMathematics.Vectors.float4)">
            <summary>
            Component-wise 'greater than or equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.float4.op_Equality(GenMathematics.Vectors.float4,GenMathematics.Vectors.float4)">
            <summary>
            Component-wise 'equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.float4.op_Inequality(GenMathematics.Vectors.float4,GenMathematics.Vectors.float4)">
            <summary>
            Component-wise 'not equal' operation
            </summary>
        </member>
        <member name="T:GenMathematics.Vectors.half2">
            <summary>
            Vector of size 2 of type <see cref="T:System.Half"/>
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.half2.Zero">
            <summary>
            Vector with zero in all components
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.half2.One">
            <summary>
            Vector with unit in all components
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.half2.UnitX">
            <summary>
            A vector with unit in the component 'x' and zeroes in the remaining components
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.half2.UnitY">
            <summary>
            A vector with unit in the component 'y' and zeroes in the remaining components
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.half2.x">
            <summary>
            Component 'x' of the vector
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.half2.y">
            <summary>
            Component 'y' of the vector
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half2.xx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half2.yx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half2.yy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.half2.#ctor(System.Half)">
            <summary>
            Constructs a vector by filling all components with the value
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.half2.#ctor(System.Half,System.Half)">
            <summary>
            Constructs a vector from component values
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half2.Item(System.Int32)">
            <summary>
            Returns the vector component by index
            </summary>
            <param name="index">Index within [0,1]</param>
            <exception cref="T:System.IndexOutOfRangeException">Exception if the index is outside the vector size</exception>
        </member>
        <member name="M:GenMathematics.Vectors.half2.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Vectors.half2.Equals(GenMathematics.Vectors.half2)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Vectors.half2.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Vectors.half2.CompareTo(GenMathematics.Vectors.half2)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Vectors.half2.ToString">
            <summary>
            Returns the object's state information as a string
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.half2.Add(GenMathematics.Vectors.half2,GenMathematics.Vectors.half2)">
            <summary>
            Component-wise 'add' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.half2.Add(GenMathematics.Vectors.half2,System.Half)">
            <summary>
            Component-wise 'add' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.half2.Add(System.Half,GenMathematics.Vectors.half2)">
            <summary>
            Component-wise 'add' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.half2.Subtract(GenMathematics.Vectors.half2,GenMathematics.Vectors.half2)">
            <summary>
            Component-wise 'subtract' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.half2.Subtract(GenMathematics.Vectors.half2,System.Half)">
            <summary>
            Component-wise 'subtract' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.half2.Subtract(System.Half,GenMathematics.Vectors.half2)">
            <summary>
            Component-wise 'subtract' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.half2.Multiply(GenMathematics.Vectors.half2,GenMathematics.Vectors.half2)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.half2.Multiply(GenMathematics.Vectors.half2,System.Half)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.half2.Multiply(System.Half,GenMathematics.Vectors.half2)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.half2.Divide(GenMathematics.Vectors.half2,GenMathematics.Vectors.half2)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.half2.Divide(GenMathematics.Vectors.half2,System.Half)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.half2.Divide(System.Half,GenMathematics.Vectors.half2)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.half2.Remainder(GenMathematics.Vectors.half2,GenMathematics.Vectors.half2)">
            <summary>
            Component-wise 'remainder' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.half2.Remainder(GenMathematics.Vectors.half2,System.Half)">
            <summary>
            Component-wise 'remainder' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.half2.Remainder(System.Half,GenMathematics.Vectors.half2)">
            <summary>
            Component-wise 'remainder' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.half2.Negate(GenMathematics.Vectors.half2)">
            <summary>
            Component-wise 'negate' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.half2.op_Addition(GenMathematics.Vectors.half2,GenMathematics.Vectors.half2)">
            <summary>
            Component-wise 'add' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.half2.op_Addition(GenMathematics.Vectors.half2,System.Half)">
            <summary>
            Component-wise 'add' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.half2.op_Addition(System.Half,GenMathematics.Vectors.half2)">
            <summary>
            Component-wise 'add' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.half2.op_Subtraction(GenMathematics.Vectors.half2,GenMathematics.Vectors.half2)">
            <summary>
            Component-wise 'subtract' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.half2.op_Subtraction(GenMathematics.Vectors.half2,System.Half)">
            <summary>
            Component-wise 'subtract' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.half2.op_Subtraction(System.Half,GenMathematics.Vectors.half2)">
            <summary>
            Component-wise 'subtract' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.half2.op_Multiply(GenMathematics.Vectors.half2,GenMathematics.Vectors.half2)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.half2.op_Multiply(GenMathematics.Vectors.half2,System.Half)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.half2.op_Multiply(System.Half,GenMathematics.Vectors.half2)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.half2.op_Division(GenMathematics.Vectors.half2,GenMathematics.Vectors.half2)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.half2.op_Division(GenMathematics.Vectors.half2,System.Half)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.half2.op_Division(System.Half,GenMathematics.Vectors.half2)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.half2.op_Modulus(GenMathematics.Vectors.half2,GenMathematics.Vectors.half2)">
            <summary>
            Component-wise 'remainder' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.half2.op_Modulus(GenMathematics.Vectors.half2,System.Half)">
            <summary>
            Component-wise 'remainder' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.half2.op_Modulus(System.Half,GenMathematics.Vectors.half2)">
            <summary>
            Component-wise 'remainder' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.half2.op_UnaryNegation(GenMathematics.Vectors.half2)">
            <summary>
            Component-wise 'negate' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.half2.LessThan(GenMathematics.Vectors.half2,GenMathematics.Vectors.half2)">
            <summary>
            Component-wise 'less than' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.half2.LessThan(GenMathematics.Vectors.half2@,GenMathematics.Vectors.half2@,GenMathematics.Vectors.bool2@)">
            <summary>
            Component-wise 'less than' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.half2.GreaterThan(GenMathematics.Vectors.half2,GenMathematics.Vectors.half2)">
            <summary>
            Component-wise 'greater than' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.half2.GreaterThan(GenMathematics.Vectors.half2@,GenMathematics.Vectors.half2@,GenMathematics.Vectors.bool2@)">
            <summary>
            Component-wise 'greater than' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.half2.LessThanEqual(GenMathematics.Vectors.half2,GenMathematics.Vectors.half2)">
            <summary>
            Component-wise 'less than or equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.half2.LessThanEqual(GenMathematics.Vectors.half2@,GenMathematics.Vectors.half2@,GenMathematics.Vectors.bool2@)">
            <summary>
            Component-wise 'less than or equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.half2.GreaterThanEqual(GenMathematics.Vectors.half2,GenMathematics.Vectors.half2)">
            <summary>
            Component-wise 'greater than or equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.half2.GreaterThanEqual(GenMathematics.Vectors.half2@,GenMathematics.Vectors.half2@,GenMathematics.Vectors.bool2@)">
            <summary>
            Component-wise 'greater than or equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.half2.Equal(GenMathematics.Vectors.half2,GenMathematics.Vectors.half2)">
            <summary>
            Component-wise 'equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.half2.Equal(GenMathematics.Vectors.half2@,GenMathematics.Vectors.half2@,GenMathematics.Vectors.bool2@)">
            <summary>
            Component-wise 'equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.half2.NotEqual(GenMathematics.Vectors.half2,GenMathematics.Vectors.half2)">
            <summary>
            Component-wise 'not equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.half2.NotEqual(GenMathematics.Vectors.half2@,GenMathematics.Vectors.half2@,GenMathematics.Vectors.bool2@)">
            <summary>
            Component-wise 'not equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.half2.op_Implicit(System.Half)~GenMathematics.Vectors.half2">
            <summary>
            Creates a vector by filling all components with the value
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.half2.op_Explicit(GenMathematics.Vectors.short2)~GenMathematics.Vectors.half2">
            <summary>
            Converts short2 to half2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.half2.op_Explicit(GenMathematics.Vectors.ushort2)~GenMathematics.Vectors.half2">
            <summary>
            Converts ushort2 to half2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.half2.op_Explicit(GenMathematics.Vectors.int2)~GenMathematics.Vectors.half2">
            <summary>
            Converts int2 to half2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.half2.op_Explicit(GenMathematics.Vectors.uint2)~GenMathematics.Vectors.half2">
            <summary>
            Converts uint2 to half2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.half2.op_Explicit(GenMathematics.Vectors.long2)~GenMathematics.Vectors.half2">
            <summary>
            Converts long2 to half2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.half2.op_Explicit(GenMathematics.Vectors.ulong2)~GenMathematics.Vectors.half2">
            <summary>
            Converts ulong2 to half2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.half2.op_Explicit(GenMathematics.Vectors.float2)~GenMathematics.Vectors.half2">
            <summary>
            Converts float2 to half2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.half2.op_Explicit(GenMathematics.Vectors.double2)~GenMathematics.Vectors.half2">
            <summary>
            Converts double2 to half2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.half2.op_Implicit(GenMathematics.Vectors.byte2)~GenMathematics.Vectors.half2">
            <summary>
            Converts byte2 to half2
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.half2.op_Implicit(GenMathematics.Vectors.sbyte2)~GenMathematics.Vectors.half2">
            <summary>
            Converts sbyte2 to half2
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.half2.op_LessThan(GenMathematics.Vectors.half2,GenMathematics.Vectors.half2)">
            <summary>
            Component-wise 'less than' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.half2.op_GreaterThan(GenMathematics.Vectors.half2,GenMathematics.Vectors.half2)">
            <summary>
            Component-wise 'greater than' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.half2.op_LessThanOrEqual(GenMathematics.Vectors.half2,GenMathematics.Vectors.half2)">
            <summary>
            Component-wise 'less than or equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.half2.op_GreaterThanOrEqual(GenMathematics.Vectors.half2,GenMathematics.Vectors.half2)">
            <summary>
            Component-wise 'greater than or equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.half2.op_Equality(GenMathematics.Vectors.half2,GenMathematics.Vectors.half2)">
            <summary>
            Component-wise 'equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.half2.op_Inequality(GenMathematics.Vectors.half2,GenMathematics.Vectors.half2)">
            <summary>
            Component-wise 'not equal' operation
            </summary>
        </member>
        <member name="T:GenMathematics.Vectors.half3">
            <summary>
            Vector of size 3 of type <see cref="T:System.Half"/>
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.half3.Zero">
            <summary>
            Vector with zero in all components
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.half3.One">
            <summary>
            Vector with unit in all components
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.half3.UnitX">
            <summary>
            A vector with unit in the component 'x' and zeroes in the remaining components
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.half3.UnitY">
            <summary>
            A vector with unit in the component 'y' and zeroes in the remaining components
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.half3.UnitZ">
            <summary>
            A vector with unit in the component 'z' and zeroes in the remaining components
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.half3.x">
            <summary>
            Component 'x' of the vector
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.half3.y">
            <summary>
            Component 'y' of the vector
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.half3.z">
            <summary>
            Component 'z' of the vector
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half3.xx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half3.xy">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half3.xz">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half3.yx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half3.yy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half3.yz">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half3.zx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half3.zy">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half3.zz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half3.xxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half3.xxy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half3.xxz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half3.xyx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half3.xyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half3.xzx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half3.xzy">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half3.xzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half3.yxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half3.yxy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half3.yxz">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half3.yyx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half3.yyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half3.yyz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half3.yzx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half3.yzy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half3.yzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half3.zxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half3.zxy">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half3.zxz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half3.zyx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half3.zyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half3.zyz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half3.zzx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half3.zzy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half3.zzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.half3.#ctor(System.Half)">
            <summary>
            Constructs a vector by filling all components with the value
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.half3.#ctor(System.Half,GenMathematics.Vectors.half2)">
            <summary>
            Constructs a vector from component values
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.half3.#ctor(System.Half,System.Half,System.Half)">
            <summary>
            Constructs a vector from component values
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.half3.#ctor(GenMathematics.Vectors.half2,System.Half)">
            <summary>
            Constructs a vector from component values
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half3.Item(System.Int32)">
            <summary>
            Returns the vector component by index
            </summary>
            <param name="index">Index within [0,2]</param>
            <exception cref="T:System.IndexOutOfRangeException">Exception if the index is outside the vector size</exception>
        </member>
        <member name="M:GenMathematics.Vectors.half3.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Vectors.half3.Equals(GenMathematics.Vectors.half3)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Vectors.half3.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Vectors.half3.CompareTo(GenMathematics.Vectors.half3)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Vectors.half3.ToString">
            <summary>
            Returns the object's state information as a string
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.half3.Add(GenMathematics.Vectors.half3,GenMathematics.Vectors.half3)">
            <summary>
            Component-wise 'add' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.half3.Add(GenMathematics.Vectors.half3,System.Half)">
            <summary>
            Component-wise 'add' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.half3.Add(System.Half,GenMathematics.Vectors.half3)">
            <summary>
            Component-wise 'add' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.half3.Subtract(GenMathematics.Vectors.half3,GenMathematics.Vectors.half3)">
            <summary>
            Component-wise 'subtract' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.half3.Subtract(GenMathematics.Vectors.half3,System.Half)">
            <summary>
            Component-wise 'subtract' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.half3.Subtract(System.Half,GenMathematics.Vectors.half3)">
            <summary>
            Component-wise 'subtract' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.half3.Multiply(GenMathematics.Vectors.half3,GenMathematics.Vectors.half3)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.half3.Multiply(GenMathematics.Vectors.half3,System.Half)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.half3.Multiply(System.Half,GenMathematics.Vectors.half3)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.half3.Divide(GenMathematics.Vectors.half3,GenMathematics.Vectors.half3)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.half3.Divide(GenMathematics.Vectors.half3,System.Half)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.half3.Divide(System.Half,GenMathematics.Vectors.half3)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.half3.Remainder(GenMathematics.Vectors.half3,GenMathematics.Vectors.half3)">
            <summary>
            Component-wise 'remainder' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.half3.Remainder(GenMathematics.Vectors.half3,System.Half)">
            <summary>
            Component-wise 'remainder' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.half3.Remainder(System.Half,GenMathematics.Vectors.half3)">
            <summary>
            Component-wise 'remainder' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.half3.Negate(GenMathematics.Vectors.half3)">
            <summary>
            Component-wise 'negate' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.half3.op_Addition(GenMathematics.Vectors.half3,GenMathematics.Vectors.half3)">
            <summary>
            Component-wise 'add' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.half3.op_Addition(GenMathematics.Vectors.half3,System.Half)">
            <summary>
            Component-wise 'add' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.half3.op_Addition(System.Half,GenMathematics.Vectors.half3)">
            <summary>
            Component-wise 'add' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.half3.op_Subtraction(GenMathematics.Vectors.half3,GenMathematics.Vectors.half3)">
            <summary>
            Component-wise 'subtract' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.half3.op_Subtraction(GenMathematics.Vectors.half3,System.Half)">
            <summary>
            Component-wise 'subtract' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.half3.op_Subtraction(System.Half,GenMathematics.Vectors.half3)">
            <summary>
            Component-wise 'subtract' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.half3.op_Multiply(GenMathematics.Vectors.half3,GenMathematics.Vectors.half3)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.half3.op_Multiply(GenMathematics.Vectors.half3,System.Half)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.half3.op_Multiply(System.Half,GenMathematics.Vectors.half3)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.half3.op_Division(GenMathematics.Vectors.half3,GenMathematics.Vectors.half3)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.half3.op_Division(GenMathematics.Vectors.half3,System.Half)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.half3.op_Division(System.Half,GenMathematics.Vectors.half3)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.half3.op_Modulus(GenMathematics.Vectors.half3,GenMathematics.Vectors.half3)">
            <summary>
            Component-wise 'remainder' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.half3.op_Modulus(GenMathematics.Vectors.half3,System.Half)">
            <summary>
            Component-wise 'remainder' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.half3.op_Modulus(System.Half,GenMathematics.Vectors.half3)">
            <summary>
            Component-wise 'remainder' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.half3.op_UnaryNegation(GenMathematics.Vectors.half3)">
            <summary>
            Component-wise 'negate' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.half3.LessThan(GenMathematics.Vectors.half3,GenMathematics.Vectors.half3)">
            <summary>
            Component-wise 'less than' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.half3.LessThan(GenMathematics.Vectors.half3@,GenMathematics.Vectors.half3@,GenMathematics.Vectors.bool3@)">
            <summary>
            Component-wise 'less than' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.half3.GreaterThan(GenMathematics.Vectors.half3,GenMathematics.Vectors.half3)">
            <summary>
            Component-wise 'greater than' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.half3.GreaterThan(GenMathematics.Vectors.half3@,GenMathematics.Vectors.half3@,GenMathematics.Vectors.bool3@)">
            <summary>
            Component-wise 'greater than' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.half3.LessThanEqual(GenMathematics.Vectors.half3,GenMathematics.Vectors.half3)">
            <summary>
            Component-wise 'less than or equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.half3.LessThanEqual(GenMathematics.Vectors.half3@,GenMathematics.Vectors.half3@,GenMathematics.Vectors.bool3@)">
            <summary>
            Component-wise 'less than or equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.half3.GreaterThanEqual(GenMathematics.Vectors.half3,GenMathematics.Vectors.half3)">
            <summary>
            Component-wise 'greater than or equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.half3.GreaterThanEqual(GenMathematics.Vectors.half3@,GenMathematics.Vectors.half3@,GenMathematics.Vectors.bool3@)">
            <summary>
            Component-wise 'greater than or equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.half3.Equal(GenMathematics.Vectors.half3,GenMathematics.Vectors.half3)">
            <summary>
            Component-wise 'equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.half3.Equal(GenMathematics.Vectors.half3@,GenMathematics.Vectors.half3@,GenMathematics.Vectors.bool3@)">
            <summary>
            Component-wise 'equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.half3.NotEqual(GenMathematics.Vectors.half3,GenMathematics.Vectors.half3)">
            <summary>
            Component-wise 'not equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.half3.NotEqual(GenMathematics.Vectors.half3@,GenMathematics.Vectors.half3@,GenMathematics.Vectors.bool3@)">
            <summary>
            Component-wise 'not equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.half3.op_Implicit(System.Half)~GenMathematics.Vectors.half3">
            <summary>
            Creates a vector by filling all components with the value
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.half3.op_Explicit(GenMathematics.Vectors.short3)~GenMathematics.Vectors.half3">
            <summary>
            Converts short3 to half3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.half3.op_Explicit(GenMathematics.Vectors.ushort3)~GenMathematics.Vectors.half3">
            <summary>
            Converts ushort3 to half3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.half3.op_Explicit(GenMathematics.Vectors.int3)~GenMathematics.Vectors.half3">
            <summary>
            Converts int3 to half3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.half3.op_Explicit(GenMathematics.Vectors.uint3)~GenMathematics.Vectors.half3">
            <summary>
            Converts uint3 to half3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.half3.op_Explicit(GenMathematics.Vectors.long3)~GenMathematics.Vectors.half3">
            <summary>
            Converts long3 to half3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.half3.op_Explicit(GenMathematics.Vectors.ulong3)~GenMathematics.Vectors.half3">
            <summary>
            Converts ulong3 to half3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.half3.op_Explicit(GenMathematics.Vectors.float3)~GenMathematics.Vectors.half3">
            <summary>
            Converts float3 to half3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.half3.op_Explicit(GenMathematics.Vectors.double3)~GenMathematics.Vectors.half3">
            <summary>
            Converts double3 to half3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.half3.op_Implicit(GenMathematics.Vectors.byte3)~GenMathematics.Vectors.half3">
            <summary>
            Converts byte3 to half3
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.half3.op_Implicit(GenMathematics.Vectors.sbyte3)~GenMathematics.Vectors.half3">
            <summary>
            Converts sbyte3 to half3
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.half3.op_LessThan(GenMathematics.Vectors.half3,GenMathematics.Vectors.half3)">
            <summary>
            Component-wise 'less than' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.half3.op_GreaterThan(GenMathematics.Vectors.half3,GenMathematics.Vectors.half3)">
            <summary>
            Component-wise 'greater than' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.half3.op_LessThanOrEqual(GenMathematics.Vectors.half3,GenMathematics.Vectors.half3)">
            <summary>
            Component-wise 'less than or equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.half3.op_GreaterThanOrEqual(GenMathematics.Vectors.half3,GenMathematics.Vectors.half3)">
            <summary>
            Component-wise 'greater than or equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.half3.op_Equality(GenMathematics.Vectors.half3,GenMathematics.Vectors.half3)">
            <summary>
            Component-wise 'equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.half3.op_Inequality(GenMathematics.Vectors.half3,GenMathematics.Vectors.half3)">
            <summary>
            Component-wise 'not equal' operation
            </summary>
        </member>
        <member name="T:GenMathematics.Vectors.half4">
            <summary>
            Vector of size 4 of type <see cref="T:System.Half"/>
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.half4.Zero">
            <summary>
            Vector with zero in all components
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.half4.One">
            <summary>
            Vector with unit in all components
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.half4.UnitX">
            <summary>
            A vector with unit in the component 'x' and zeroes in the remaining components
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.half4.UnitY">
            <summary>
            A vector with unit in the component 'y' and zeroes in the remaining components
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.half4.UnitZ">
            <summary>
            A vector with unit in the component 'z' and zeroes in the remaining components
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.half4.UnitW">
            <summary>
            A vector with unit in the component 'w' and zeroes in the remaining components
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.half4.x">
            <summary>
            Component 'x' of the vector
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.half4.y">
            <summary>
            Component 'y' of the vector
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.half4.z">
            <summary>
            Component 'z' of the vector
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.half4.w">
            <summary>
            Component 'w' of the vector
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.xx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.xy">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.xz">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.xw">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.yx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.yy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.yz">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.yw">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.zx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.zy">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.zz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.zw">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.wx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.wy">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.wz">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.ww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.xxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.xxy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.xxz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.xxw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.xyx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.xyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.xyz">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.xyw">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.xzx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.xzy">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.xzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.xzw">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.xwx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.xwy">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.xwz">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.xww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.yxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.yxy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.yxz">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.yxw">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.yyx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.yyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.yyz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.yyw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.yzx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.yzy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.yzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.yzw">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.ywx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.ywy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.ywz">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.yww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.zxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.zxy">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.zxz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.zxw">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.zyx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.zyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.zyz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.zyw">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.zzx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.zzy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.zzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.zzw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.zwx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.zwy">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.zwz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.zww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.wxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.wxy">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.wxz">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.wxw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.wyx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.wyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.wyz">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.wyw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.wzx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.wzy">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.wzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.wzw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.wwx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.wwy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.wwz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.www">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.xxxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.xxxy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.xxxz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.xxxw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.xxyx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.xxyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.xxyz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.xxyw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.xxzx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.xxzy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.xxzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.xxzw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.xxwx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.xxwy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.xxwz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.xxww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.xyxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.xyxy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.xyxz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.xyxw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.xyyx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.xyyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.xyyz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.xyyw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.xyzx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.xyzy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.xyzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.xywx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.xywy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.xywz">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.xyww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.xzxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.xzxy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.xzxz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.xzxw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.xzyx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.xzyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.xzyz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.xzyw">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.xzzx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.xzzy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.xzzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.xzzw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.xzwx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.xzwy">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.xzwz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.xzww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.xwxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.xwxy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.xwxz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.xwxw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.xwyx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.xwyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.xwyz">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.xwyw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.xwzx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.xwzy">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.xwzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.xwzw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.xwwx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.xwwy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.xwwz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.xwww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.yxxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.yxxy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.yxxz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.yxxw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.yxyx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.yxyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.yxyz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.yxyw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.yxzx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.yxzy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.yxzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.yxzw">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.yxwx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.yxwy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.yxwz">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.yxww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.yyxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.yyxy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.yyxz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.yyxw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.yyyx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.yyyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.yyyz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.yyyw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.yyzx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.yyzy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.yyzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.yyzw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.yywx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.yywy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.yywz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.yyww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.yzxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.yzxy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.yzxz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.yzxw">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.yzyx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.yzyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.yzyz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.yzyw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.yzzx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.yzzy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.yzzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.yzzw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.yzwx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.yzwy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.yzwz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.yzww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.ywxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.ywxy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.ywxz">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.ywxw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.ywyx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.ywyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.ywyz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.ywyw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.ywzx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.ywzy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.ywzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.ywzw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.ywwx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.ywwy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.ywwz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.ywww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.zxxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.zxxy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.zxxz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.zxxw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.zxyx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.zxyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.zxyz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.zxyw">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.zxzx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.zxzy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.zxzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.zxzw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.zxwx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.zxwy">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.zxwz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.zxww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.zyxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.zyxy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.zyxz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.zyxw">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.zyyx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.zyyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.zyyz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.zyyw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.zyzx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.zyzy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.zyzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.zyzw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.zywx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.zywy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.zywz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.zyww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.zzxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.zzxy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.zzxz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.zzxw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.zzyx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.zzyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.zzyz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.zzyw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.zzzx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.zzzy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.zzzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.zzzw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.zzwx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.zzwy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.zzwz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.zzww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.zwxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.zwxy">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.zwxz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.zwxw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.zwyx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.zwyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.zwyz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.zwyw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.zwzx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.zwzy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.zwzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.zwzw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.zwwx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.zwwy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.zwwz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.zwww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.wxxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.wxxy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.wxxz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.wxxw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.wxyx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.wxyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.wxyz">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.wxyw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.wxzx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.wxzy">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.wxzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.wxzw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.wxwx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.wxwy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.wxwz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.wxww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.wyxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.wyxy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.wyxz">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.wyxw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.wyyx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.wyyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.wyyz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.wyyw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.wyzx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.wyzy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.wyzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.wyzw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.wywx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.wywy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.wywz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.wyww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.wzxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.wzxy">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.wzxz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.wzxw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.wzyx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.wzyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.wzyz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.wzyw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.wzzx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.wzzy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.wzzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.wzzw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.wzwx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.wzwy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.wzwz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.wzww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.wwxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.wwxy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.wwxz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.wwxw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.wwyx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.wwyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.wwyz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.wwyw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.wwzx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.wwzy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.wwzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.wwzw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.wwwx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.wwwy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.wwwz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.wwww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.half4.#ctor(System.Half)">
            <summary>
            Constructs a vector by filling all components with the value
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.half4.#ctor(System.Half,GenMathematics.Vectors.half3)">
            <summary>
            Constructs a vector from component values
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.half4.#ctor(System.Half,GenMathematics.Vectors.half2,System.Half)">
            <summary>
            Constructs a vector from component values
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.half4.#ctor(System.Half,System.Half,GenMathematics.Vectors.half2)">
            <summary>
            Constructs a vector from component values
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.half4.#ctor(System.Half,System.Half,System.Half,System.Half)">
            <summary>
            Constructs a vector from component values
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.half4.#ctor(GenMathematics.Vectors.half2,GenMathematics.Vectors.half2)">
            <summary>
            Constructs a vector from component values
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.half4.#ctor(GenMathematics.Vectors.half2,System.Half,System.Half)">
            <summary>
            Constructs a vector from component values
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.half4.#ctor(GenMathematics.Vectors.half3,System.Half)">
            <summary>
            Constructs a vector from component values
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.half4.Item(System.Int32)">
            <summary>
            Returns the vector component by index
            </summary>
            <param name="index">Index within [0,3]</param>
            <exception cref="T:System.IndexOutOfRangeException">Exception if the index is outside the vector size</exception>
        </member>
        <member name="M:GenMathematics.Vectors.half4.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Vectors.half4.Equals(GenMathematics.Vectors.half4)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Vectors.half4.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Vectors.half4.CompareTo(GenMathematics.Vectors.half4)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Vectors.half4.ToString">
            <summary>
            Returns the object's state information as a string
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.half4.Add(GenMathematics.Vectors.half4,GenMathematics.Vectors.half4)">
            <summary>
            Component-wise 'add' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.half4.Add(GenMathematics.Vectors.half4,System.Half)">
            <summary>
            Component-wise 'add' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.half4.Add(System.Half,GenMathematics.Vectors.half4)">
            <summary>
            Component-wise 'add' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.half4.Subtract(GenMathematics.Vectors.half4,GenMathematics.Vectors.half4)">
            <summary>
            Component-wise 'subtract' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.half4.Subtract(GenMathematics.Vectors.half4,System.Half)">
            <summary>
            Component-wise 'subtract' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.half4.Subtract(System.Half,GenMathematics.Vectors.half4)">
            <summary>
            Component-wise 'subtract' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.half4.Multiply(GenMathematics.Vectors.half4,GenMathematics.Vectors.half4)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.half4.Multiply(GenMathematics.Vectors.half4,System.Half)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.half4.Multiply(System.Half,GenMathematics.Vectors.half4)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.half4.Divide(GenMathematics.Vectors.half4,GenMathematics.Vectors.half4)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.half4.Divide(GenMathematics.Vectors.half4,System.Half)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.half4.Divide(System.Half,GenMathematics.Vectors.half4)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.half4.Remainder(GenMathematics.Vectors.half4,GenMathematics.Vectors.half4)">
            <summary>
            Component-wise 'remainder' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.half4.Remainder(GenMathematics.Vectors.half4,System.Half)">
            <summary>
            Component-wise 'remainder' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.half4.Remainder(System.Half,GenMathematics.Vectors.half4)">
            <summary>
            Component-wise 'remainder' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.half4.Negate(GenMathematics.Vectors.half4)">
            <summary>
            Component-wise 'negate' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.half4.op_Addition(GenMathematics.Vectors.half4,GenMathematics.Vectors.half4)">
            <summary>
            Component-wise 'add' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.half4.op_Addition(GenMathematics.Vectors.half4,System.Half)">
            <summary>
            Component-wise 'add' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.half4.op_Addition(System.Half,GenMathematics.Vectors.half4)">
            <summary>
            Component-wise 'add' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.half4.op_Subtraction(GenMathematics.Vectors.half4,GenMathematics.Vectors.half4)">
            <summary>
            Component-wise 'subtract' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.half4.op_Subtraction(GenMathematics.Vectors.half4,System.Half)">
            <summary>
            Component-wise 'subtract' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.half4.op_Subtraction(System.Half,GenMathematics.Vectors.half4)">
            <summary>
            Component-wise 'subtract' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.half4.op_Multiply(GenMathematics.Vectors.half4,GenMathematics.Vectors.half4)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.half4.op_Multiply(GenMathematics.Vectors.half4,System.Half)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.half4.op_Multiply(System.Half,GenMathematics.Vectors.half4)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.half4.op_Division(GenMathematics.Vectors.half4,GenMathematics.Vectors.half4)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.half4.op_Division(GenMathematics.Vectors.half4,System.Half)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.half4.op_Division(System.Half,GenMathematics.Vectors.half4)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.half4.op_Modulus(GenMathematics.Vectors.half4,GenMathematics.Vectors.half4)">
            <summary>
            Component-wise 'remainder' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.half4.op_Modulus(GenMathematics.Vectors.half4,System.Half)">
            <summary>
            Component-wise 'remainder' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.half4.op_Modulus(System.Half,GenMathematics.Vectors.half4)">
            <summary>
            Component-wise 'remainder' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.half4.op_UnaryNegation(GenMathematics.Vectors.half4)">
            <summary>
            Component-wise 'negate' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.half4.LessThan(GenMathematics.Vectors.half4,GenMathematics.Vectors.half4)">
            <summary>
            Component-wise 'less than' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.half4.LessThan(GenMathematics.Vectors.half4@,GenMathematics.Vectors.half4@,GenMathematics.Vectors.bool4@)">
            <summary>
            Component-wise 'less than' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.half4.GreaterThan(GenMathematics.Vectors.half4,GenMathematics.Vectors.half4)">
            <summary>
            Component-wise 'greater than' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.half4.GreaterThan(GenMathematics.Vectors.half4@,GenMathematics.Vectors.half4@,GenMathematics.Vectors.bool4@)">
            <summary>
            Component-wise 'greater than' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.half4.LessThanEqual(GenMathematics.Vectors.half4,GenMathematics.Vectors.half4)">
            <summary>
            Component-wise 'less than or equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.half4.LessThanEqual(GenMathematics.Vectors.half4@,GenMathematics.Vectors.half4@,GenMathematics.Vectors.bool4@)">
            <summary>
            Component-wise 'less than or equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.half4.GreaterThanEqual(GenMathematics.Vectors.half4,GenMathematics.Vectors.half4)">
            <summary>
            Component-wise 'greater than or equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.half4.GreaterThanEqual(GenMathematics.Vectors.half4@,GenMathematics.Vectors.half4@,GenMathematics.Vectors.bool4@)">
            <summary>
            Component-wise 'greater than or equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.half4.Equal(GenMathematics.Vectors.half4,GenMathematics.Vectors.half4)">
            <summary>
            Component-wise 'equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.half4.Equal(GenMathematics.Vectors.half4@,GenMathematics.Vectors.half4@,GenMathematics.Vectors.bool4@)">
            <summary>
            Component-wise 'equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.half4.NotEqual(GenMathematics.Vectors.half4,GenMathematics.Vectors.half4)">
            <summary>
            Component-wise 'not equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.half4.NotEqual(GenMathematics.Vectors.half4@,GenMathematics.Vectors.half4@,GenMathematics.Vectors.bool4@)">
            <summary>
            Component-wise 'not equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.half4.op_Implicit(System.Half)~GenMathematics.Vectors.half4">
            <summary>
            Creates a vector by filling all components with the value
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.half4.op_Explicit(GenMathematics.Vectors.short4)~GenMathematics.Vectors.half4">
            <summary>
            Converts short4 to half4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.half4.op_Explicit(GenMathematics.Vectors.ushort4)~GenMathematics.Vectors.half4">
            <summary>
            Converts ushort4 to half4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.half4.op_Explicit(GenMathematics.Vectors.int4)~GenMathematics.Vectors.half4">
            <summary>
            Converts int4 to half4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.half4.op_Explicit(GenMathematics.Vectors.uint4)~GenMathematics.Vectors.half4">
            <summary>
            Converts uint4 to half4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.half4.op_Explicit(GenMathematics.Vectors.long4)~GenMathematics.Vectors.half4">
            <summary>
            Converts long4 to half4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.half4.op_Explicit(GenMathematics.Vectors.ulong4)~GenMathematics.Vectors.half4">
            <summary>
            Converts ulong4 to half4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.half4.op_Explicit(GenMathematics.Vectors.float4)~GenMathematics.Vectors.half4">
            <summary>
            Converts float4 to half4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.half4.op_Explicit(GenMathematics.Vectors.double4)~GenMathematics.Vectors.half4">
            <summary>
            Converts double4 to half4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.half4.op_Implicit(GenMathematics.Vectors.byte4)~GenMathematics.Vectors.half4">
            <summary>
            Converts byte4 to half4
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.half4.op_Implicit(GenMathematics.Vectors.sbyte4)~GenMathematics.Vectors.half4">
            <summary>
            Converts sbyte4 to half4
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.half4.op_LessThan(GenMathematics.Vectors.half4,GenMathematics.Vectors.half4)">
            <summary>
            Component-wise 'less than' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.half4.op_GreaterThan(GenMathematics.Vectors.half4,GenMathematics.Vectors.half4)">
            <summary>
            Component-wise 'greater than' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.half4.op_LessThanOrEqual(GenMathematics.Vectors.half4,GenMathematics.Vectors.half4)">
            <summary>
            Component-wise 'less than or equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.half4.op_GreaterThanOrEqual(GenMathematics.Vectors.half4,GenMathematics.Vectors.half4)">
            <summary>
            Component-wise 'greater than or equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.half4.op_Equality(GenMathematics.Vectors.half4,GenMathematics.Vectors.half4)">
            <summary>
            Component-wise 'equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.half4.op_Inequality(GenMathematics.Vectors.half4,GenMathematics.Vectors.half4)">
            <summary>
            Component-wise 'not equal' operation
            </summary>
        </member>
        <member name="T:GenMathematics.Vectors.int2">
            <summary>
            Vector of size 2 of type <see cref="T:System.Int32"/>
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.int2.Zero">
            <summary>
            Vector with zero in all components
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.int2.One">
            <summary>
            Vector with unit in all components
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.int2.UnitX">
            <summary>
            A vector with unit in the component 'x' and zeroes in the remaining components
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.int2.UnitY">
            <summary>
            A vector with unit in the component 'y' and zeroes in the remaining components
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.int2.x">
            <summary>
            Component 'x' of the vector
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.int2.y">
            <summary>
            Component 'y' of the vector
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int2.xx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int2.yx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int2.yy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int2.#ctor(System.Int32)">
            <summary>
            Constructs a vector by filling all components with the value
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int2.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructs a vector from component values
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int2.Item(System.Int32)">
            <summary>
            Returns the vector component by index
            </summary>
            <param name="index">Index within [0,1]</param>
            <exception cref="T:System.IndexOutOfRangeException">Exception if the index is outside the vector size</exception>
        </member>
        <member name="M:GenMathematics.Vectors.int2.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Vectors.int2.Equals(GenMathematics.Vectors.int2)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Vectors.int2.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Vectors.int2.CompareTo(GenMathematics.Vectors.int2)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Vectors.int2.ToString">
            <summary>
            Returns the object's state information as a string
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int2.Add(GenMathematics.Vectors.int2,GenMathematics.Vectors.int2)">
            <summary>
            Component-wise 'add' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int2.Add(GenMathematics.Vectors.int2,System.Int32)">
            <summary>
            Component-wise 'add' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int2.Add(System.Int32,GenMathematics.Vectors.int2)">
            <summary>
            Component-wise 'add' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int2.Subtract(GenMathematics.Vectors.int2,GenMathematics.Vectors.int2)">
            <summary>
            Component-wise 'subtract' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int2.Subtract(GenMathematics.Vectors.int2,System.Int32)">
            <summary>
            Component-wise 'subtract' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int2.Subtract(System.Int32,GenMathematics.Vectors.int2)">
            <summary>
            Component-wise 'subtract' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int2.Multiply(GenMathematics.Vectors.int2,GenMathematics.Vectors.int2)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int2.Multiply(GenMathematics.Vectors.int2,System.Int32)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int2.Multiply(System.Int32,GenMathematics.Vectors.int2)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int2.Divide(GenMathematics.Vectors.int2,GenMathematics.Vectors.int2)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int2.Divide(GenMathematics.Vectors.int2,System.Int32)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int2.Divide(System.Int32,GenMathematics.Vectors.int2)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int2.Remainder(GenMathematics.Vectors.int2,GenMathematics.Vectors.int2)">
            <summary>
            Component-wise 'remainder' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int2.Remainder(GenMathematics.Vectors.int2,System.Int32)">
            <summary>
            Component-wise 'remainder' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int2.Remainder(System.Int32,GenMathematics.Vectors.int2)">
            <summary>
            Component-wise 'remainder' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int2.Negate(GenMathematics.Vectors.int2)">
            <summary>
            Component-wise 'negate' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int2.And(GenMathematics.Vectors.int2,GenMathematics.Vectors.int2)">
            <summary>
            Component-wise 'and' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int2.And(GenMathematics.Vectors.int2,System.Int32)">
            <summary>
            Component-wise 'and' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int2.And(System.Int32,GenMathematics.Vectors.int2)">
            <summary>
            Component-wise 'and' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int2.Or(GenMathematics.Vectors.int2,GenMathematics.Vectors.int2)">
            <summary>
            Component-wise 'or' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int2.Or(GenMathematics.Vectors.int2,System.Int32)">
            <summary>
            Component-wise 'or' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int2.Or(System.Int32,GenMathematics.Vectors.int2)">
            <summary>
            Component-wise 'or' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int2.Xor(GenMathematics.Vectors.int2,GenMathematics.Vectors.int2)">
            <summary>
            Component-wise 'xor' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int2.Xor(GenMathematics.Vectors.int2,System.Int32)">
            <summary>
            Component-wise 'xor' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int2.Xor(System.Int32,GenMathematics.Vectors.int2)">
            <summary>
            Component-wise 'xor' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int2.ShiftLeft(GenMathematics.Vectors.int2,GenMathematics.Vectors.int2)">
            <summary>
            Component-wise 'shift-left' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int2.ShiftLeft(GenMathematics.Vectors.int2@,GenMathematics.Vectors.int2@,GenMathematics.Vectors.int2@)">
            <summary>
            Component-wise 'shift-left' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int2.ShiftRight(GenMathematics.Vectors.int2,GenMathematics.Vectors.int2)">
            <summary>
            Component-wise 'shift-righ' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int2.ShiftRight(GenMathematics.Vectors.int2@,GenMathematics.Vectors.int2@,GenMathematics.Vectors.int2@)">
            <summary>
            Component-wise 'shift-righ' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int2.Not(GenMathematics.Vectors.int2)">
            <summary>
            Component-wise 'not' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int2.op_Addition(GenMathematics.Vectors.int2,GenMathematics.Vectors.int2)">
            <summary>
            Component-wise 'add' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int2.op_Addition(GenMathematics.Vectors.int2,System.Int32)">
            <summary>
            Component-wise 'add' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int2.op_Addition(System.Int32,GenMathematics.Vectors.int2)">
            <summary>
            Component-wise 'add' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int2.op_Subtraction(GenMathematics.Vectors.int2,GenMathematics.Vectors.int2)">
            <summary>
            Component-wise 'subtract' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int2.op_Subtraction(GenMathematics.Vectors.int2,System.Int32)">
            <summary>
            Component-wise 'subtract' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int2.op_Subtraction(System.Int32,GenMathematics.Vectors.int2)">
            <summary>
            Component-wise 'subtract' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int2.op_Multiply(GenMathematics.Vectors.int2,GenMathematics.Vectors.int2)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int2.op_Multiply(GenMathematics.Vectors.int2,System.Int32)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int2.op_Multiply(System.Int32,GenMathematics.Vectors.int2)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int2.op_Division(GenMathematics.Vectors.int2,GenMathematics.Vectors.int2)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int2.op_Division(GenMathematics.Vectors.int2,System.Int32)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int2.op_Division(System.Int32,GenMathematics.Vectors.int2)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int2.op_Modulus(GenMathematics.Vectors.int2,GenMathematics.Vectors.int2)">
            <summary>
            Component-wise 'remainder' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int2.op_Modulus(GenMathematics.Vectors.int2,System.Int32)">
            <summary>
            Component-wise 'remainder' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int2.op_Modulus(System.Int32,GenMathematics.Vectors.int2)">
            <summary>
            Component-wise 'remainder' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int2.op_UnaryNegation(GenMathematics.Vectors.int2)">
            <summary>
            Component-wise 'negate' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int2.op_BitwiseAnd(GenMathematics.Vectors.int2,GenMathematics.Vectors.int2)">
            <summary>
            Component-wise 'and' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int2.op_BitwiseAnd(GenMathematics.Vectors.int2,System.Int32)">
            <summary>
            Component-wise 'and' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int2.op_BitwiseAnd(System.Int32,GenMathematics.Vectors.int2)">
            <summary>
            Component-wise 'and' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int2.op_BitwiseOr(GenMathematics.Vectors.int2,GenMathematics.Vectors.int2)">
            <summary>
            Component-wise 'or' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int2.op_BitwiseOr(GenMathematics.Vectors.int2,System.Int32)">
            <summary>
            Component-wise 'or' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int2.op_BitwiseOr(System.Int32,GenMathematics.Vectors.int2)">
            <summary>
            Component-wise 'or' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int2.op_ExclusiveOr(GenMathematics.Vectors.int2,GenMathematics.Vectors.int2)">
            <summary>
            Component-wise 'xor' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int2.op_ExclusiveOr(GenMathematics.Vectors.int2,System.Int32)">
            <summary>
            Component-wise 'xor' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int2.op_ExclusiveOr(System.Int32,GenMathematics.Vectors.int2)">
            <summary>
            Component-wise 'xor' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int2.op_LeftShift(GenMathematics.Vectors.int2,GenMathematics.Vectors.int2)">
            <summary>
            Component-wise 'shift-left' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int2.op_RightShift(GenMathematics.Vectors.int2,GenMathematics.Vectors.int2)">
            <summary>
            Component-wise 'shift-righ' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int2.op_OnesComplement(GenMathematics.Vectors.int2)">
            <summary>
            Component-wise 'not' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int2.LessThan(GenMathematics.Vectors.int2,GenMathematics.Vectors.int2)">
            <summary>
            Component-wise 'less than' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int2.LessThan(GenMathematics.Vectors.int2@,GenMathematics.Vectors.int2@,GenMathematics.Vectors.bool2@)">
            <summary>
            Component-wise 'less than' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int2.GreaterThan(GenMathematics.Vectors.int2,GenMathematics.Vectors.int2)">
            <summary>
            Component-wise 'greater than' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int2.GreaterThan(GenMathematics.Vectors.int2@,GenMathematics.Vectors.int2@,GenMathematics.Vectors.bool2@)">
            <summary>
            Component-wise 'greater than' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int2.LessThanEqual(GenMathematics.Vectors.int2,GenMathematics.Vectors.int2)">
            <summary>
            Component-wise 'less than or equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int2.LessThanEqual(GenMathematics.Vectors.int2@,GenMathematics.Vectors.int2@,GenMathematics.Vectors.bool2@)">
            <summary>
            Component-wise 'less than or equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int2.GreaterThanEqual(GenMathematics.Vectors.int2,GenMathematics.Vectors.int2)">
            <summary>
            Component-wise 'greater than or equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int2.GreaterThanEqual(GenMathematics.Vectors.int2@,GenMathematics.Vectors.int2@,GenMathematics.Vectors.bool2@)">
            <summary>
            Component-wise 'greater than or equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int2.Equal(GenMathematics.Vectors.int2,GenMathematics.Vectors.int2)">
            <summary>
            Component-wise 'equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int2.Equal(GenMathematics.Vectors.int2@,GenMathematics.Vectors.int2@,GenMathematics.Vectors.bool2@)">
            <summary>
            Component-wise 'equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int2.NotEqual(GenMathematics.Vectors.int2,GenMathematics.Vectors.int2)">
            <summary>
            Component-wise 'not equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int2.NotEqual(GenMathematics.Vectors.int2@,GenMathematics.Vectors.int2@,GenMathematics.Vectors.bool2@)">
            <summary>
            Component-wise 'not equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int2.op_Implicit(System.Int32)~GenMathematics.Vectors.int2">
            <summary>
            Creates a vector by filling all components with the value
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int2.op_Explicit(GenMathematics.Vectors.uint2)~GenMathematics.Vectors.int2">
            <summary>
            Converts uint2 to int2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int2.op_Explicit(GenMathematics.Vectors.long2)~GenMathematics.Vectors.int2">
            <summary>
            Converts long2 to int2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int2.op_Explicit(GenMathematics.Vectors.ulong2)~GenMathematics.Vectors.int2">
            <summary>
            Converts ulong2 to int2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int2.op_Explicit(GenMathematics.Vectors.half2)~GenMathematics.Vectors.int2">
            <summary>
            Converts half2 to int2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int2.op_Explicit(GenMathematics.Vectors.float2)~GenMathematics.Vectors.int2">
            <summary>
            Converts float2 to int2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int2.op_Explicit(GenMathematics.Vectors.double2)~GenMathematics.Vectors.int2">
            <summary>
            Converts double2 to int2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int2.op_Implicit(GenMathematics.Vectors.byte2)~GenMathematics.Vectors.int2">
            <summary>
            Converts byte2 to int2
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int2.op_Implicit(GenMathematics.Vectors.sbyte2)~GenMathematics.Vectors.int2">
            <summary>
            Converts sbyte2 to int2
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int2.op_Implicit(GenMathematics.Vectors.short2)~GenMathematics.Vectors.int2">
            <summary>
            Converts short2 to int2
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int2.op_Implicit(GenMathematics.Vectors.ushort2)~GenMathematics.Vectors.int2">
            <summary>
            Converts ushort2 to int2
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int2.op_LessThan(GenMathematics.Vectors.int2,GenMathematics.Vectors.int2)">
            <summary>
            Component-wise 'less than' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int2.op_GreaterThan(GenMathematics.Vectors.int2,GenMathematics.Vectors.int2)">
            <summary>
            Component-wise 'greater than' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int2.op_LessThanOrEqual(GenMathematics.Vectors.int2,GenMathematics.Vectors.int2)">
            <summary>
            Component-wise 'less than or equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int2.op_GreaterThanOrEqual(GenMathematics.Vectors.int2,GenMathematics.Vectors.int2)">
            <summary>
            Component-wise 'greater than or equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int2.op_Equality(GenMathematics.Vectors.int2,GenMathematics.Vectors.int2)">
            <summary>
            Component-wise 'equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int2.op_Inequality(GenMathematics.Vectors.int2,GenMathematics.Vectors.int2)">
            <summary>
            Component-wise 'not equal' operation
            </summary>
        </member>
        <member name="T:GenMathematics.Vectors.int3">
            <summary>
            Vector of size 3 of type <see cref="T:System.Int32"/>
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.int3.Zero">
            <summary>
            Vector with zero in all components
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.int3.One">
            <summary>
            Vector with unit in all components
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.int3.UnitX">
            <summary>
            A vector with unit in the component 'x' and zeroes in the remaining components
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.int3.UnitY">
            <summary>
            A vector with unit in the component 'y' and zeroes in the remaining components
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.int3.UnitZ">
            <summary>
            A vector with unit in the component 'z' and zeroes in the remaining components
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.int3.x">
            <summary>
            Component 'x' of the vector
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.int3.y">
            <summary>
            Component 'y' of the vector
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.int3.z">
            <summary>
            Component 'z' of the vector
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int3.xx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int3.xy">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int3.xz">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int3.yx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int3.yy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int3.yz">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int3.zx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int3.zy">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int3.zz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int3.xxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int3.xxy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int3.xxz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int3.xyx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int3.xyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int3.xzx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int3.xzy">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int3.xzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int3.yxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int3.yxy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int3.yxz">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int3.yyx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int3.yyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int3.yyz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int3.yzx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int3.yzy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int3.yzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int3.zxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int3.zxy">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int3.zxz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int3.zyx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int3.zyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int3.zyz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int3.zzx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int3.zzy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int3.zzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int3.#ctor(System.Int32)">
            <summary>
            Constructs a vector by filling all components with the value
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int3.#ctor(System.Int32,GenMathematics.Vectors.int2)">
            <summary>
            Constructs a vector from component values
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int3.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructs a vector from component values
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int3.#ctor(GenMathematics.Vectors.int2,System.Int32)">
            <summary>
            Constructs a vector from component values
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int3.Item(System.Int32)">
            <summary>
            Returns the vector component by index
            </summary>
            <param name="index">Index within [0,2]</param>
            <exception cref="T:System.IndexOutOfRangeException">Exception if the index is outside the vector size</exception>
        </member>
        <member name="M:GenMathematics.Vectors.int3.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Vectors.int3.Equals(GenMathematics.Vectors.int3)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Vectors.int3.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Vectors.int3.CompareTo(GenMathematics.Vectors.int3)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Vectors.int3.ToString">
            <summary>
            Returns the object's state information as a string
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int3.Add(GenMathematics.Vectors.int3,GenMathematics.Vectors.int3)">
            <summary>
            Component-wise 'add' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int3.Add(GenMathematics.Vectors.int3,System.Int32)">
            <summary>
            Component-wise 'add' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int3.Add(System.Int32,GenMathematics.Vectors.int3)">
            <summary>
            Component-wise 'add' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int3.Add(GenMathematics.Vectors.int3@,GenMathematics.Vectors.int3@,GenMathematics.Vectors.int3@)">
            <summary>
            Component-wise 'add' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int3.Add(GenMathematics.Vectors.int3@,System.Int32,GenMathematics.Vectors.int3@)">
            <summary>
            Component-wise 'add' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int3.Add(System.Int32,GenMathematics.Vectors.int3@,GenMathematics.Vectors.int3@)">
            <summary>
            Component-wise 'add' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int3.Subtract(GenMathematics.Vectors.int3,GenMathematics.Vectors.int3)">
            <summary>
            Component-wise 'subtract' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int3.Subtract(GenMathematics.Vectors.int3,System.Int32)">
            <summary>
            Component-wise 'subtract' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int3.Subtract(System.Int32,GenMathematics.Vectors.int3)">
            <summary>
            Component-wise 'subtract' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int3.Subtract(GenMathematics.Vectors.int3@,GenMathematics.Vectors.int3@,GenMathematics.Vectors.int3@)">
            <summary>
            Component-wise 'subtract' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int3.Subtract(GenMathematics.Vectors.int3@,System.Int32,GenMathematics.Vectors.int3@)">
            <summary>
            Component-wise 'subtract' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int3.Subtract(System.Int32,GenMathematics.Vectors.int3@,GenMathematics.Vectors.int3@)">
            <summary>
            Component-wise 'subtract' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int3.Multiply(GenMathematics.Vectors.int3,GenMathematics.Vectors.int3)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int3.Multiply(GenMathematics.Vectors.int3,System.Int32)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int3.Multiply(System.Int32,GenMathematics.Vectors.int3)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int3.Multiply(GenMathematics.Vectors.int3@,GenMathematics.Vectors.int3@,GenMathematics.Vectors.int3@)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int3.Multiply(GenMathematics.Vectors.int3@,System.Int32,GenMathematics.Vectors.int3@)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int3.Multiply(System.Int32,GenMathematics.Vectors.int3@,GenMathematics.Vectors.int3@)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int3.Divide(GenMathematics.Vectors.int3,GenMathematics.Vectors.int3)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int3.Divide(GenMathematics.Vectors.int3,System.Int32)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int3.Divide(System.Int32,GenMathematics.Vectors.int3)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int3.Divide(GenMathematics.Vectors.int3@,GenMathematics.Vectors.int3@,GenMathematics.Vectors.int3@)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int3.Divide(GenMathematics.Vectors.int3@,System.Int32,GenMathematics.Vectors.int3@)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int3.Divide(System.Int32,GenMathematics.Vectors.int3@,GenMathematics.Vectors.int3@)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int3.Remainder(GenMathematics.Vectors.int3,GenMathematics.Vectors.int3)">
            <summary>
            Component-wise 'remainder' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int3.Remainder(GenMathematics.Vectors.int3,System.Int32)">
            <summary>
            Component-wise 'remainder' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int3.Remainder(System.Int32,GenMathematics.Vectors.int3)">
            <summary>
            Component-wise 'remainder' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int3.Remainder(GenMathematics.Vectors.int3@,GenMathematics.Vectors.int3@,GenMathematics.Vectors.int3@)">
            <summary>
            Component-wise 'remainder' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int3.Remainder(GenMathematics.Vectors.int3@,System.Int32,GenMathematics.Vectors.int3@)">
            <summary>
            Component-wise 'remainder' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int3.Remainder(System.Int32,GenMathematics.Vectors.int3@,GenMathematics.Vectors.int3@)">
            <summary>
            Component-wise 'remainder' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int3.Negate(GenMathematics.Vectors.int3)">
            <summary>
            Component-wise 'negate' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int3.Negate(GenMathematics.Vectors.int3@,GenMathematics.Vectors.int3@)">
            <summary>
            Component-wise 'negate' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int3.And(GenMathematics.Vectors.int3,GenMathematics.Vectors.int3)">
            <summary>
            Component-wise 'and' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int3.And(GenMathematics.Vectors.int3,System.Int32)">
            <summary>
            Component-wise 'and' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int3.And(System.Int32,GenMathematics.Vectors.int3)">
            <summary>
            Component-wise 'and' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int3.And(GenMathematics.Vectors.int3@,GenMathematics.Vectors.int3@,GenMathematics.Vectors.int3@)">
            <summary>
            Component-wise 'and' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int3.And(GenMathematics.Vectors.int3@,System.Int32,GenMathematics.Vectors.int3@)">
            <summary>
            Component-wise 'and' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int3.And(System.Int32,GenMathematics.Vectors.int3@,GenMathematics.Vectors.int3@)">
            <summary>
            Component-wise 'and' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int3.Or(GenMathematics.Vectors.int3,GenMathematics.Vectors.int3)">
            <summary>
            Component-wise 'or' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int3.Or(GenMathematics.Vectors.int3,System.Int32)">
            <summary>
            Component-wise 'or' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int3.Or(System.Int32,GenMathematics.Vectors.int3)">
            <summary>
            Component-wise 'or' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int3.Or(GenMathematics.Vectors.int3@,GenMathematics.Vectors.int3@,GenMathematics.Vectors.int3@)">
            <summary>
            Component-wise 'or' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int3.Or(GenMathematics.Vectors.int3@,System.Int32,GenMathematics.Vectors.int3@)">
            <summary>
            Component-wise 'or' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int3.Or(System.Int32,GenMathematics.Vectors.int3@,GenMathematics.Vectors.int3@)">
            <summary>
            Component-wise 'or' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int3.Xor(GenMathematics.Vectors.int3,GenMathematics.Vectors.int3)">
            <summary>
            Component-wise 'xor' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int3.Xor(GenMathematics.Vectors.int3,System.Int32)">
            <summary>
            Component-wise 'xor' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int3.Xor(System.Int32,GenMathematics.Vectors.int3)">
            <summary>
            Component-wise 'xor' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int3.Xor(GenMathematics.Vectors.int3@,GenMathematics.Vectors.int3@,GenMathematics.Vectors.int3@)">
            <summary>
            Component-wise 'xor' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int3.Xor(GenMathematics.Vectors.int3@,System.Int32,GenMathematics.Vectors.int3@)">
            <summary>
            Component-wise 'xor' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int3.Xor(System.Int32,GenMathematics.Vectors.int3@,GenMathematics.Vectors.int3@)">
            <summary>
            Component-wise 'xor' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int3.ShiftLeft(GenMathematics.Vectors.int3,GenMathematics.Vectors.int3)">
            <summary>
            Component-wise 'shift-left' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int3.ShiftLeft(GenMathematics.Vectors.int3@,GenMathematics.Vectors.int3@,GenMathematics.Vectors.int3@)">
            <summary>
            Component-wise 'shift-left' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int3.ShiftRight(GenMathematics.Vectors.int3,GenMathematics.Vectors.int3)">
            <summary>
            Component-wise 'shift-righ' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int3.ShiftRight(GenMathematics.Vectors.int3@,GenMathematics.Vectors.int3@,GenMathematics.Vectors.int3@)">
            <summary>
            Component-wise 'shift-righ' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int3.Not(GenMathematics.Vectors.int3)">
            <summary>
            Component-wise 'not' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int3.Not(GenMathematics.Vectors.int3@,GenMathematics.Vectors.int3@)">
            <summary>
            Component-wise 'not' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int3.op_Addition(GenMathematics.Vectors.int3,GenMathematics.Vectors.int3)">
            <summary>
            Component-wise 'add' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int3.op_Addition(GenMathematics.Vectors.int3,System.Int32)">
            <summary>
            Component-wise 'add' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int3.op_Addition(System.Int32,GenMathematics.Vectors.int3)">
            <summary>
            Component-wise 'add' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int3.op_Subtraction(GenMathematics.Vectors.int3,GenMathematics.Vectors.int3)">
            <summary>
            Component-wise 'subtract' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int3.op_Subtraction(GenMathematics.Vectors.int3,System.Int32)">
            <summary>
            Component-wise 'subtract' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int3.op_Subtraction(System.Int32,GenMathematics.Vectors.int3)">
            <summary>
            Component-wise 'subtract' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int3.op_Multiply(GenMathematics.Vectors.int3,GenMathematics.Vectors.int3)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int3.op_Multiply(GenMathematics.Vectors.int3,System.Int32)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int3.op_Multiply(System.Int32,GenMathematics.Vectors.int3)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int3.op_Division(GenMathematics.Vectors.int3,GenMathematics.Vectors.int3)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int3.op_Division(GenMathematics.Vectors.int3,System.Int32)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int3.op_Division(System.Int32,GenMathematics.Vectors.int3)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int3.op_Modulus(GenMathematics.Vectors.int3,GenMathematics.Vectors.int3)">
            <summary>
            Component-wise 'remainder' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int3.op_Modulus(GenMathematics.Vectors.int3,System.Int32)">
            <summary>
            Component-wise 'remainder' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int3.op_Modulus(System.Int32,GenMathematics.Vectors.int3)">
            <summary>
            Component-wise 'remainder' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int3.op_UnaryNegation(GenMathematics.Vectors.int3)">
            <summary>
            Component-wise 'negate' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int3.op_BitwiseAnd(GenMathematics.Vectors.int3,GenMathematics.Vectors.int3)">
            <summary>
            Component-wise 'and' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int3.op_BitwiseAnd(GenMathematics.Vectors.int3,System.Int32)">
            <summary>
            Component-wise 'and' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int3.op_BitwiseAnd(System.Int32,GenMathematics.Vectors.int3)">
            <summary>
            Component-wise 'and' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int3.op_BitwiseOr(GenMathematics.Vectors.int3,GenMathematics.Vectors.int3)">
            <summary>
            Component-wise 'or' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int3.op_BitwiseOr(GenMathematics.Vectors.int3,System.Int32)">
            <summary>
            Component-wise 'or' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int3.op_BitwiseOr(System.Int32,GenMathematics.Vectors.int3)">
            <summary>
            Component-wise 'or' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int3.op_ExclusiveOr(GenMathematics.Vectors.int3,GenMathematics.Vectors.int3)">
            <summary>
            Component-wise 'xor' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int3.op_ExclusiveOr(GenMathematics.Vectors.int3,System.Int32)">
            <summary>
            Component-wise 'xor' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int3.op_ExclusiveOr(System.Int32,GenMathematics.Vectors.int3)">
            <summary>
            Component-wise 'xor' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int3.op_LeftShift(GenMathematics.Vectors.int3,GenMathematics.Vectors.int3)">
            <summary>
            Component-wise 'shift-left' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int3.op_RightShift(GenMathematics.Vectors.int3,GenMathematics.Vectors.int3)">
            <summary>
            Component-wise 'shift-righ' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int3.op_OnesComplement(GenMathematics.Vectors.int3)">
            <summary>
            Component-wise 'not' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int3.LessThan(GenMathematics.Vectors.int3,GenMathematics.Vectors.int3)">
            <summary>
            Component-wise 'less than' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int3.LessThan(GenMathematics.Vectors.int3@,GenMathematics.Vectors.int3@,GenMathematics.Vectors.bool3@)">
            <summary>
            Component-wise 'less than' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int3.GreaterThan(GenMathematics.Vectors.int3,GenMathematics.Vectors.int3)">
            <summary>
            Component-wise 'greater than' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int3.GreaterThan(GenMathematics.Vectors.int3@,GenMathematics.Vectors.int3@,GenMathematics.Vectors.bool3@)">
            <summary>
            Component-wise 'greater than' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int3.LessThanEqual(GenMathematics.Vectors.int3,GenMathematics.Vectors.int3)">
            <summary>
            Component-wise 'less than or equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int3.LessThanEqual(GenMathematics.Vectors.int3@,GenMathematics.Vectors.int3@,GenMathematics.Vectors.bool3@)">
            <summary>
            Component-wise 'less than or equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int3.GreaterThanEqual(GenMathematics.Vectors.int3,GenMathematics.Vectors.int3)">
            <summary>
            Component-wise 'greater than or equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int3.GreaterThanEqual(GenMathematics.Vectors.int3@,GenMathematics.Vectors.int3@,GenMathematics.Vectors.bool3@)">
            <summary>
            Component-wise 'greater than or equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int3.Equal(GenMathematics.Vectors.int3,GenMathematics.Vectors.int3)">
            <summary>
            Component-wise 'equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int3.Equal(GenMathematics.Vectors.int3@,GenMathematics.Vectors.int3@,GenMathematics.Vectors.bool3@)">
            <summary>
            Component-wise 'equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int3.NotEqual(GenMathematics.Vectors.int3,GenMathematics.Vectors.int3)">
            <summary>
            Component-wise 'not equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int3.NotEqual(GenMathematics.Vectors.int3@,GenMathematics.Vectors.int3@,GenMathematics.Vectors.bool3@)">
            <summary>
            Component-wise 'not equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int3.op_Implicit(System.Int32)~GenMathematics.Vectors.int3">
            <summary>
            Creates a vector by filling all components with the value
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int3.op_Explicit(GenMathematics.Vectors.uint3)~GenMathematics.Vectors.int3">
            <summary>
            Converts uint3 to int3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int3.op_Explicit(GenMathematics.Vectors.long3)~GenMathematics.Vectors.int3">
            <summary>
            Converts long3 to int3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int3.op_Explicit(GenMathematics.Vectors.ulong3)~GenMathematics.Vectors.int3">
            <summary>
            Converts ulong3 to int3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int3.op_Explicit(GenMathematics.Vectors.half3)~GenMathematics.Vectors.int3">
            <summary>
            Converts half3 to int3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int3.op_Explicit(GenMathematics.Vectors.float3)~GenMathematics.Vectors.int3">
            <summary>
            Converts float3 to int3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int3.op_Explicit(GenMathematics.Vectors.double3)~GenMathematics.Vectors.int3">
            <summary>
            Converts double3 to int3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int3.op_Implicit(GenMathematics.Vectors.byte3)~GenMathematics.Vectors.int3">
            <summary>
            Converts byte3 to int3
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int3.op_Implicit(GenMathematics.Vectors.sbyte3)~GenMathematics.Vectors.int3">
            <summary>
            Converts sbyte3 to int3
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int3.op_Implicit(GenMathematics.Vectors.short3)~GenMathematics.Vectors.int3">
            <summary>
            Converts short3 to int3
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int3.op_Implicit(GenMathematics.Vectors.ushort3)~GenMathematics.Vectors.int3">
            <summary>
            Converts ushort3 to int3
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int3.op_LessThan(GenMathematics.Vectors.int3,GenMathematics.Vectors.int3)">
            <summary>
            Component-wise 'less than' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int3.op_GreaterThan(GenMathematics.Vectors.int3,GenMathematics.Vectors.int3)">
            <summary>
            Component-wise 'greater than' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int3.op_LessThanOrEqual(GenMathematics.Vectors.int3,GenMathematics.Vectors.int3)">
            <summary>
            Component-wise 'less than or equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int3.op_GreaterThanOrEqual(GenMathematics.Vectors.int3,GenMathematics.Vectors.int3)">
            <summary>
            Component-wise 'greater than or equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int3.op_Equality(GenMathematics.Vectors.int3,GenMathematics.Vectors.int3)">
            <summary>
            Component-wise 'equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int3.op_Inequality(GenMathematics.Vectors.int3,GenMathematics.Vectors.int3)">
            <summary>
            Component-wise 'not equal' operation
            </summary>
        </member>
        <member name="T:GenMathematics.Vectors.int4">
            <summary>
            Vector of size 4 of type <see cref="T:System.Int32"/>
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.int4.Zero">
            <summary>
            Vector with zero in all components
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.int4.One">
            <summary>
            Vector with unit in all components
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.int4.UnitX">
            <summary>
            A vector with unit in the component 'x' and zeroes in the remaining components
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.int4.UnitY">
            <summary>
            A vector with unit in the component 'y' and zeroes in the remaining components
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.int4.UnitZ">
            <summary>
            A vector with unit in the component 'z' and zeroes in the remaining components
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.int4.UnitW">
            <summary>
            A vector with unit in the component 'w' and zeroes in the remaining components
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.int4.x">
            <summary>
            Component 'x' of the vector
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.int4.y">
            <summary>
            Component 'y' of the vector
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.int4.z">
            <summary>
            Component 'z' of the vector
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.int4.w">
            <summary>
            Component 'w' of the vector
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.xx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.xy">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.xz">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.xw">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.yx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.yy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.yz">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.yw">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.zx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.zy">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.zz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.zw">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.wx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.wy">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.wz">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.ww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.xxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.xxy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.xxz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.xxw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.xyx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.xyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.xyz">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.xyw">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.xzx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.xzy">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.xzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.xzw">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.xwx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.xwy">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.xwz">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.xww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.yxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.yxy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.yxz">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.yxw">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.yyx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.yyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.yyz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.yyw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.yzx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.yzy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.yzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.yzw">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.ywx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.ywy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.ywz">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.yww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.zxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.zxy">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.zxz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.zxw">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.zyx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.zyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.zyz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.zyw">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.zzx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.zzy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.zzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.zzw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.zwx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.zwy">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.zwz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.zww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.wxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.wxy">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.wxz">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.wxw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.wyx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.wyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.wyz">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.wyw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.wzx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.wzy">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.wzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.wzw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.wwx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.wwy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.wwz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.www">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.xxxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.xxxy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.xxxz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.xxxw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.xxyx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.xxyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.xxyz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.xxyw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.xxzx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.xxzy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.xxzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.xxzw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.xxwx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.xxwy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.xxwz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.xxww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.xyxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.xyxy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.xyxz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.xyxw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.xyyx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.xyyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.xyyz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.xyyw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.xyzx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.xyzy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.xyzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.xywx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.xywy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.xywz">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.xyww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.xzxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.xzxy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.xzxz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.xzxw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.xzyx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.xzyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.xzyz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.xzyw">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.xzzx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.xzzy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.xzzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.xzzw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.xzwx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.xzwy">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.xzwz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.xzww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.xwxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.xwxy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.xwxz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.xwxw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.xwyx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.xwyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.xwyz">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.xwyw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.xwzx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.xwzy">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.xwzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.xwzw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.xwwx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.xwwy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.xwwz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.xwww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.yxxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.yxxy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.yxxz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.yxxw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.yxyx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.yxyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.yxyz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.yxyw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.yxzx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.yxzy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.yxzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.yxzw">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.yxwx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.yxwy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.yxwz">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.yxww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.yyxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.yyxy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.yyxz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.yyxw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.yyyx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.yyyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.yyyz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.yyyw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.yyzx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.yyzy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.yyzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.yyzw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.yywx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.yywy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.yywz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.yyww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.yzxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.yzxy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.yzxz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.yzxw">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.yzyx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.yzyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.yzyz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.yzyw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.yzzx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.yzzy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.yzzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.yzzw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.yzwx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.yzwy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.yzwz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.yzww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.ywxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.ywxy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.ywxz">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.ywxw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.ywyx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.ywyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.ywyz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.ywyw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.ywzx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.ywzy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.ywzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.ywzw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.ywwx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.ywwy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.ywwz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.ywww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.zxxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.zxxy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.zxxz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.zxxw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.zxyx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.zxyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.zxyz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.zxyw">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.zxzx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.zxzy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.zxzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.zxzw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.zxwx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.zxwy">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.zxwz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.zxww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.zyxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.zyxy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.zyxz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.zyxw">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.zyyx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.zyyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.zyyz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.zyyw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.zyzx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.zyzy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.zyzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.zyzw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.zywx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.zywy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.zywz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.zyww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.zzxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.zzxy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.zzxz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.zzxw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.zzyx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.zzyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.zzyz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.zzyw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.zzzx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.zzzy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.zzzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.zzzw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.zzwx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.zzwy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.zzwz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.zzww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.zwxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.zwxy">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.zwxz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.zwxw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.zwyx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.zwyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.zwyz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.zwyw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.zwzx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.zwzy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.zwzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.zwzw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.zwwx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.zwwy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.zwwz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.zwww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.wxxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.wxxy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.wxxz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.wxxw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.wxyx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.wxyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.wxyz">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.wxyw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.wxzx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.wxzy">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.wxzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.wxzw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.wxwx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.wxwy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.wxwz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.wxww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.wyxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.wyxy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.wyxz">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.wyxw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.wyyx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.wyyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.wyyz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.wyyw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.wyzx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.wyzy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.wyzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.wyzw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.wywx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.wywy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.wywz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.wyww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.wzxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.wzxy">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.wzxz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.wzxw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.wzyx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.wzyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.wzyz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.wzyw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.wzzx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.wzzy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.wzzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.wzzw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.wzwx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.wzwy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.wzwz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.wzww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.wwxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.wwxy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.wwxz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.wwxw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.wwyx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.wwyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.wwyz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.wwyw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.wwzx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.wwzy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.wwzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.wwzw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.wwwx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.wwwy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.wwwz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.wwww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int4.#ctor(System.Int32)">
            <summary>
            Constructs a vector by filling all components with the value
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int4.#ctor(System.Int32,GenMathematics.Vectors.int3)">
            <summary>
            Constructs a vector from component values
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int4.#ctor(System.Int32,GenMathematics.Vectors.int2,System.Int32)">
            <summary>
            Constructs a vector from component values
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int4.#ctor(System.Int32,System.Int32,GenMathematics.Vectors.int2)">
            <summary>
            Constructs a vector from component values
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int4.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructs a vector from component values
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int4.#ctor(GenMathematics.Vectors.int2,GenMathematics.Vectors.int2)">
            <summary>
            Constructs a vector from component values
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int4.#ctor(GenMathematics.Vectors.int2,System.Int32,System.Int32)">
            <summary>
            Constructs a vector from component values
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int4.#ctor(GenMathematics.Vectors.int3,System.Int32)">
            <summary>
            Constructs a vector from component values
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.int4.Item(System.Int32)">
            <summary>
            Returns the vector component by index
            </summary>
            <param name="index">Index within [0,3]</param>
            <exception cref="T:System.IndexOutOfRangeException">Exception if the index is outside the vector size</exception>
        </member>
        <member name="M:GenMathematics.Vectors.int4.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Vectors.int4.Equals(GenMathematics.Vectors.int4)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Vectors.int4.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Vectors.int4.CompareTo(GenMathematics.Vectors.int4)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Vectors.int4.ToString">
            <summary>
            Returns the object's state information as a string
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int4.Add(GenMathematics.Vectors.int4,GenMathematics.Vectors.int4)">
            <summary>
            Component-wise 'add' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int4.Add(GenMathematics.Vectors.int4,System.Int32)">
            <summary>
            Component-wise 'add' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int4.Add(System.Int32,GenMathematics.Vectors.int4)">
            <summary>
            Component-wise 'add' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int4.Add(GenMathematics.Vectors.int4@,GenMathematics.Vectors.int4@,GenMathematics.Vectors.int4@)">
            <summary>
            Component-wise 'add' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int4.Add(GenMathematics.Vectors.int4@,System.Int32,GenMathematics.Vectors.int4@)">
            <summary>
            Component-wise 'add' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int4.Add(System.Int32,GenMathematics.Vectors.int4@,GenMathematics.Vectors.int4@)">
            <summary>
            Component-wise 'add' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int4.Subtract(GenMathematics.Vectors.int4,GenMathematics.Vectors.int4)">
            <summary>
            Component-wise 'subtract' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int4.Subtract(GenMathematics.Vectors.int4,System.Int32)">
            <summary>
            Component-wise 'subtract' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int4.Subtract(System.Int32,GenMathematics.Vectors.int4)">
            <summary>
            Component-wise 'subtract' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int4.Subtract(GenMathematics.Vectors.int4@,GenMathematics.Vectors.int4@,GenMathematics.Vectors.int4@)">
            <summary>
            Component-wise 'subtract' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int4.Subtract(GenMathematics.Vectors.int4@,System.Int32,GenMathematics.Vectors.int4@)">
            <summary>
            Component-wise 'subtract' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int4.Subtract(System.Int32,GenMathematics.Vectors.int4@,GenMathematics.Vectors.int4@)">
            <summary>
            Component-wise 'subtract' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int4.Multiply(GenMathematics.Vectors.int4,GenMathematics.Vectors.int4)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int4.Multiply(GenMathematics.Vectors.int4,System.Int32)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int4.Multiply(System.Int32,GenMathematics.Vectors.int4)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int4.Multiply(GenMathematics.Vectors.int4@,GenMathematics.Vectors.int4@,GenMathematics.Vectors.int4@)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int4.Multiply(GenMathematics.Vectors.int4@,System.Int32,GenMathematics.Vectors.int4@)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int4.Multiply(System.Int32,GenMathematics.Vectors.int4@,GenMathematics.Vectors.int4@)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int4.Divide(GenMathematics.Vectors.int4,GenMathematics.Vectors.int4)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int4.Divide(GenMathematics.Vectors.int4,System.Int32)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int4.Divide(System.Int32,GenMathematics.Vectors.int4)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int4.Divide(GenMathematics.Vectors.int4@,GenMathematics.Vectors.int4@,GenMathematics.Vectors.int4@)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int4.Divide(GenMathematics.Vectors.int4@,System.Int32,GenMathematics.Vectors.int4@)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int4.Divide(System.Int32,GenMathematics.Vectors.int4@,GenMathematics.Vectors.int4@)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int4.Remainder(GenMathematics.Vectors.int4,GenMathematics.Vectors.int4)">
            <summary>
            Component-wise 'remainder' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int4.Remainder(GenMathematics.Vectors.int4,System.Int32)">
            <summary>
            Component-wise 'remainder' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int4.Remainder(System.Int32,GenMathematics.Vectors.int4)">
            <summary>
            Component-wise 'remainder' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int4.Remainder(GenMathematics.Vectors.int4@,GenMathematics.Vectors.int4@,GenMathematics.Vectors.int4@)">
            <summary>
            Component-wise 'remainder' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int4.Remainder(GenMathematics.Vectors.int4@,System.Int32,GenMathematics.Vectors.int4@)">
            <summary>
            Component-wise 'remainder' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int4.Remainder(System.Int32,GenMathematics.Vectors.int4@,GenMathematics.Vectors.int4@)">
            <summary>
            Component-wise 'remainder' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int4.Negate(GenMathematics.Vectors.int4)">
            <summary>
            Component-wise 'negate' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int4.Negate(GenMathematics.Vectors.int4@,GenMathematics.Vectors.int4@)">
            <summary>
            Component-wise 'negate' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int4.And(GenMathematics.Vectors.int4,GenMathematics.Vectors.int4)">
            <summary>
            Component-wise 'and' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int4.And(GenMathematics.Vectors.int4,System.Int32)">
            <summary>
            Component-wise 'and' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int4.And(System.Int32,GenMathematics.Vectors.int4)">
            <summary>
            Component-wise 'and' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int4.And(GenMathematics.Vectors.int4@,GenMathematics.Vectors.int4@,GenMathematics.Vectors.int4@)">
            <summary>
            Component-wise 'and' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int4.And(GenMathematics.Vectors.int4@,System.Int32,GenMathematics.Vectors.int4@)">
            <summary>
            Component-wise 'and' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int4.And(System.Int32,GenMathematics.Vectors.int4@,GenMathematics.Vectors.int4@)">
            <summary>
            Component-wise 'and' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int4.Or(GenMathematics.Vectors.int4,GenMathematics.Vectors.int4)">
            <summary>
            Component-wise 'or' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int4.Or(GenMathematics.Vectors.int4,System.Int32)">
            <summary>
            Component-wise 'or' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int4.Or(System.Int32,GenMathematics.Vectors.int4)">
            <summary>
            Component-wise 'or' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int4.Or(GenMathematics.Vectors.int4@,GenMathematics.Vectors.int4@,GenMathematics.Vectors.int4@)">
            <summary>
            Component-wise 'or' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int4.Or(GenMathematics.Vectors.int4@,System.Int32,GenMathematics.Vectors.int4@)">
            <summary>
            Component-wise 'or' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int4.Or(System.Int32,GenMathematics.Vectors.int4@,GenMathematics.Vectors.int4@)">
            <summary>
            Component-wise 'or' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int4.Xor(GenMathematics.Vectors.int4,GenMathematics.Vectors.int4)">
            <summary>
            Component-wise 'xor' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int4.Xor(GenMathematics.Vectors.int4,System.Int32)">
            <summary>
            Component-wise 'xor' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int4.Xor(System.Int32,GenMathematics.Vectors.int4)">
            <summary>
            Component-wise 'xor' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int4.Xor(GenMathematics.Vectors.int4@,GenMathematics.Vectors.int4@,GenMathematics.Vectors.int4@)">
            <summary>
            Component-wise 'xor' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int4.Xor(GenMathematics.Vectors.int4@,System.Int32,GenMathematics.Vectors.int4@)">
            <summary>
            Component-wise 'xor' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int4.Xor(System.Int32,GenMathematics.Vectors.int4@,GenMathematics.Vectors.int4@)">
            <summary>
            Component-wise 'xor' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int4.ShiftLeft(GenMathematics.Vectors.int4,GenMathematics.Vectors.int4)">
            <summary>
            Component-wise 'shift-left' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int4.ShiftLeft(GenMathematics.Vectors.int4@,GenMathematics.Vectors.int4@,GenMathematics.Vectors.int4@)">
            <summary>
            Component-wise 'shift-left' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int4.ShiftRight(GenMathematics.Vectors.int4,GenMathematics.Vectors.int4)">
            <summary>
            Component-wise 'shift-righ' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int4.ShiftRight(GenMathematics.Vectors.int4@,GenMathematics.Vectors.int4@,GenMathematics.Vectors.int4@)">
            <summary>
            Component-wise 'shift-righ' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int4.Not(GenMathematics.Vectors.int4)">
            <summary>
            Component-wise 'not' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int4.Not(GenMathematics.Vectors.int4@,GenMathematics.Vectors.int4@)">
            <summary>
            Component-wise 'not' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int4.op_Addition(GenMathematics.Vectors.int4,GenMathematics.Vectors.int4)">
            <summary>
            Component-wise 'add' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int4.op_Addition(GenMathematics.Vectors.int4,System.Int32)">
            <summary>
            Component-wise 'add' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int4.op_Addition(System.Int32,GenMathematics.Vectors.int4)">
            <summary>
            Component-wise 'add' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int4.op_Subtraction(GenMathematics.Vectors.int4,GenMathematics.Vectors.int4)">
            <summary>
            Component-wise 'subtract' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int4.op_Subtraction(GenMathematics.Vectors.int4,System.Int32)">
            <summary>
            Component-wise 'subtract' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int4.op_Subtraction(System.Int32,GenMathematics.Vectors.int4)">
            <summary>
            Component-wise 'subtract' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int4.op_Multiply(GenMathematics.Vectors.int4,GenMathematics.Vectors.int4)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int4.op_Multiply(GenMathematics.Vectors.int4,System.Int32)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int4.op_Multiply(System.Int32,GenMathematics.Vectors.int4)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int4.op_Division(GenMathematics.Vectors.int4,GenMathematics.Vectors.int4)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int4.op_Division(GenMathematics.Vectors.int4,System.Int32)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int4.op_Division(System.Int32,GenMathematics.Vectors.int4)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int4.op_Modulus(GenMathematics.Vectors.int4,GenMathematics.Vectors.int4)">
            <summary>
            Component-wise 'remainder' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int4.op_Modulus(GenMathematics.Vectors.int4,System.Int32)">
            <summary>
            Component-wise 'remainder' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int4.op_Modulus(System.Int32,GenMathematics.Vectors.int4)">
            <summary>
            Component-wise 'remainder' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int4.op_UnaryNegation(GenMathematics.Vectors.int4)">
            <summary>
            Component-wise 'negate' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int4.op_BitwiseAnd(GenMathematics.Vectors.int4,GenMathematics.Vectors.int4)">
            <summary>
            Component-wise 'and' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int4.op_BitwiseAnd(GenMathematics.Vectors.int4,System.Int32)">
            <summary>
            Component-wise 'and' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int4.op_BitwiseAnd(System.Int32,GenMathematics.Vectors.int4)">
            <summary>
            Component-wise 'and' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int4.op_BitwiseOr(GenMathematics.Vectors.int4,GenMathematics.Vectors.int4)">
            <summary>
            Component-wise 'or' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int4.op_BitwiseOr(GenMathematics.Vectors.int4,System.Int32)">
            <summary>
            Component-wise 'or' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int4.op_BitwiseOr(System.Int32,GenMathematics.Vectors.int4)">
            <summary>
            Component-wise 'or' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int4.op_ExclusiveOr(GenMathematics.Vectors.int4,GenMathematics.Vectors.int4)">
            <summary>
            Component-wise 'xor' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int4.op_ExclusiveOr(GenMathematics.Vectors.int4,System.Int32)">
            <summary>
            Component-wise 'xor' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int4.op_ExclusiveOr(System.Int32,GenMathematics.Vectors.int4)">
            <summary>
            Component-wise 'xor' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int4.op_LeftShift(GenMathematics.Vectors.int4,GenMathematics.Vectors.int4)">
            <summary>
            Component-wise 'shift-left' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int4.op_RightShift(GenMathematics.Vectors.int4,GenMathematics.Vectors.int4)">
            <summary>
            Component-wise 'shift-righ' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int4.op_OnesComplement(GenMathematics.Vectors.int4)">
            <summary>
            Component-wise 'not' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int4.LessThan(GenMathematics.Vectors.int4,GenMathematics.Vectors.int4)">
            <summary>
            Component-wise 'less than' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int4.LessThan(GenMathematics.Vectors.int4@,GenMathematics.Vectors.int4@,GenMathematics.Vectors.bool4@)">
            <summary>
            Component-wise 'less than' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int4.GreaterThan(GenMathematics.Vectors.int4,GenMathematics.Vectors.int4)">
            <summary>
            Component-wise 'greater than' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int4.GreaterThan(GenMathematics.Vectors.int4@,GenMathematics.Vectors.int4@,GenMathematics.Vectors.bool4@)">
            <summary>
            Component-wise 'greater than' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int4.LessThanEqual(GenMathematics.Vectors.int4,GenMathematics.Vectors.int4)">
            <summary>
            Component-wise 'less than or equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int4.LessThanEqual(GenMathematics.Vectors.int4@,GenMathematics.Vectors.int4@,GenMathematics.Vectors.bool4@)">
            <summary>
            Component-wise 'less than or equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int4.GreaterThanEqual(GenMathematics.Vectors.int4,GenMathematics.Vectors.int4)">
            <summary>
            Component-wise 'greater than or equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int4.GreaterThanEqual(GenMathematics.Vectors.int4@,GenMathematics.Vectors.int4@,GenMathematics.Vectors.bool4@)">
            <summary>
            Component-wise 'greater than or equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int4.Equal(GenMathematics.Vectors.int4,GenMathematics.Vectors.int4)">
            <summary>
            Component-wise 'equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int4.Equal(GenMathematics.Vectors.int4@,GenMathematics.Vectors.int4@,GenMathematics.Vectors.bool4@)">
            <summary>
            Component-wise 'equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int4.NotEqual(GenMathematics.Vectors.int4,GenMathematics.Vectors.int4)">
            <summary>
            Component-wise 'not equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int4.NotEqual(GenMathematics.Vectors.int4@,GenMathematics.Vectors.int4@,GenMathematics.Vectors.bool4@)">
            <summary>
            Component-wise 'not equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int4.op_Implicit(System.Int32)~GenMathematics.Vectors.int4">
            <summary>
            Creates a vector by filling all components with the value
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int4.op_Explicit(GenMathematics.Vectors.uint4)~GenMathematics.Vectors.int4">
            <summary>
            Converts uint4 to int4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int4.op_Explicit(GenMathematics.Vectors.long4)~GenMathematics.Vectors.int4">
            <summary>
            Converts long4 to int4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int4.op_Explicit(GenMathematics.Vectors.ulong4)~GenMathematics.Vectors.int4">
            <summary>
            Converts ulong4 to int4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int4.op_Explicit(GenMathematics.Vectors.half4)~GenMathematics.Vectors.int4">
            <summary>
            Converts half4 to int4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int4.op_Explicit(GenMathematics.Vectors.float4)~GenMathematics.Vectors.int4">
            <summary>
            Converts float4 to int4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int4.op_Explicit(GenMathematics.Vectors.double4)~GenMathematics.Vectors.int4">
            <summary>
            Converts double4 to int4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int4.op_Implicit(GenMathematics.Vectors.byte4)~GenMathematics.Vectors.int4">
            <summary>
            Converts byte4 to int4
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int4.op_Implicit(GenMathematics.Vectors.sbyte4)~GenMathematics.Vectors.int4">
            <summary>
            Converts sbyte4 to int4
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int4.op_Implicit(GenMathematics.Vectors.short4)~GenMathematics.Vectors.int4">
            <summary>
            Converts short4 to int4
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int4.op_Implicit(GenMathematics.Vectors.ushort4)~GenMathematics.Vectors.int4">
            <summary>
            Converts ushort4 to int4
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int4.op_LessThan(GenMathematics.Vectors.int4,GenMathematics.Vectors.int4)">
            <summary>
            Component-wise 'less than' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int4.op_GreaterThan(GenMathematics.Vectors.int4,GenMathematics.Vectors.int4)">
            <summary>
            Component-wise 'greater than' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int4.op_LessThanOrEqual(GenMathematics.Vectors.int4,GenMathematics.Vectors.int4)">
            <summary>
            Component-wise 'less than or equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int4.op_GreaterThanOrEqual(GenMathematics.Vectors.int4,GenMathematics.Vectors.int4)">
            <summary>
            Component-wise 'greater than or equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int4.op_Equality(GenMathematics.Vectors.int4,GenMathematics.Vectors.int4)">
            <summary>
            Component-wise 'equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.int4.op_Inequality(GenMathematics.Vectors.int4,GenMathematics.Vectors.int4)">
            <summary>
            Component-wise 'not equal' operation
            </summary>
        </member>
        <member name="T:GenMathematics.Vectors.long2">
            <summary>
            Vector of size 2 of type <see cref="T:System.Int64"/>
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.long2.Zero">
            <summary>
            Vector with zero in all components
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.long2.One">
            <summary>
            Vector with unit in all components
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.long2.UnitX">
            <summary>
            A vector with unit in the component 'x' and zeroes in the remaining components
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.long2.UnitY">
            <summary>
            A vector with unit in the component 'y' and zeroes in the remaining components
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.long2.x">
            <summary>
            Component 'x' of the vector
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.long2.y">
            <summary>
            Component 'y' of the vector
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long2.xx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long2.yx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long2.yy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long2.#ctor(System.Int64)">
            <summary>
            Constructs a vector by filling all components with the value
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long2.#ctor(System.Int64,System.Int64)">
            <summary>
            Constructs a vector from component values
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long2.Item(System.Int32)">
            <summary>
            Returns the vector component by index
            </summary>
            <param name="index">Index within [0,1]</param>
            <exception cref="T:System.IndexOutOfRangeException">Exception if the index is outside the vector size</exception>
        </member>
        <member name="M:GenMathematics.Vectors.long2.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Vectors.long2.Equals(GenMathematics.Vectors.long2)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Vectors.long2.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Vectors.long2.CompareTo(GenMathematics.Vectors.long2)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Vectors.long2.ToString">
            <summary>
            Returns the object's state information as a string
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long2.Add(GenMathematics.Vectors.long2,GenMathematics.Vectors.long2)">
            <summary>
            Component-wise 'add' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long2.Add(GenMathematics.Vectors.long2,System.Int64)">
            <summary>
            Component-wise 'add' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long2.Add(System.Int64,GenMathematics.Vectors.long2)">
            <summary>
            Component-wise 'add' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long2.Add(GenMathematics.Vectors.long2@,GenMathematics.Vectors.long2@,GenMathematics.Vectors.long2@)">
            <summary>
            Component-wise 'add' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long2.Add(GenMathematics.Vectors.long2@,System.Int64,GenMathematics.Vectors.long2@)">
            <summary>
            Component-wise 'add' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long2.Add(System.Int64,GenMathematics.Vectors.long2@,GenMathematics.Vectors.long2@)">
            <summary>
            Component-wise 'add' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long2.Subtract(GenMathematics.Vectors.long2,GenMathematics.Vectors.long2)">
            <summary>
            Component-wise 'subtract' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long2.Subtract(GenMathematics.Vectors.long2,System.Int64)">
            <summary>
            Component-wise 'subtract' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long2.Subtract(System.Int64,GenMathematics.Vectors.long2)">
            <summary>
            Component-wise 'subtract' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long2.Subtract(GenMathematics.Vectors.long2@,GenMathematics.Vectors.long2@,GenMathematics.Vectors.long2@)">
            <summary>
            Component-wise 'subtract' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long2.Subtract(GenMathematics.Vectors.long2@,System.Int64,GenMathematics.Vectors.long2@)">
            <summary>
            Component-wise 'subtract' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long2.Subtract(System.Int64,GenMathematics.Vectors.long2@,GenMathematics.Vectors.long2@)">
            <summary>
            Component-wise 'subtract' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long2.Multiply(GenMathematics.Vectors.long2,GenMathematics.Vectors.long2)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long2.Multiply(GenMathematics.Vectors.long2,System.Int64)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long2.Multiply(System.Int64,GenMathematics.Vectors.long2)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long2.Multiply(GenMathematics.Vectors.long2@,GenMathematics.Vectors.long2@,GenMathematics.Vectors.long2@)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long2.Multiply(GenMathematics.Vectors.long2@,System.Int64,GenMathematics.Vectors.long2@)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long2.Multiply(System.Int64,GenMathematics.Vectors.long2@,GenMathematics.Vectors.long2@)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long2.Divide(GenMathematics.Vectors.long2,GenMathematics.Vectors.long2)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long2.Divide(GenMathematics.Vectors.long2,System.Int64)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long2.Divide(System.Int64,GenMathematics.Vectors.long2)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long2.Divide(GenMathematics.Vectors.long2@,GenMathematics.Vectors.long2@,GenMathematics.Vectors.long2@)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long2.Divide(GenMathematics.Vectors.long2@,System.Int64,GenMathematics.Vectors.long2@)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long2.Divide(System.Int64,GenMathematics.Vectors.long2@,GenMathematics.Vectors.long2@)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long2.Remainder(GenMathematics.Vectors.long2,GenMathematics.Vectors.long2)">
            <summary>
            Component-wise 'remainder' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long2.Remainder(GenMathematics.Vectors.long2,System.Int64)">
            <summary>
            Component-wise 'remainder' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long2.Remainder(System.Int64,GenMathematics.Vectors.long2)">
            <summary>
            Component-wise 'remainder' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long2.Remainder(GenMathematics.Vectors.long2@,GenMathematics.Vectors.long2@,GenMathematics.Vectors.long2@)">
            <summary>
            Component-wise 'remainder' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long2.Remainder(GenMathematics.Vectors.long2@,System.Int64,GenMathematics.Vectors.long2@)">
            <summary>
            Component-wise 'remainder' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long2.Remainder(System.Int64,GenMathematics.Vectors.long2@,GenMathematics.Vectors.long2@)">
            <summary>
            Component-wise 'remainder' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long2.Negate(GenMathematics.Vectors.long2)">
            <summary>
            Component-wise 'negate' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long2.Negate(GenMathematics.Vectors.long2@,GenMathematics.Vectors.long2@)">
            <summary>
            Component-wise 'negate' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long2.And(GenMathematics.Vectors.long2,GenMathematics.Vectors.long2)">
            <summary>
            Component-wise 'and' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long2.And(GenMathematics.Vectors.long2,System.Int64)">
            <summary>
            Component-wise 'and' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long2.And(System.Int64,GenMathematics.Vectors.long2)">
            <summary>
            Component-wise 'and' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long2.And(GenMathematics.Vectors.long2@,GenMathematics.Vectors.long2@,GenMathematics.Vectors.long2@)">
            <summary>
            Component-wise 'and' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long2.And(GenMathematics.Vectors.long2@,System.Int64,GenMathematics.Vectors.long2@)">
            <summary>
            Component-wise 'and' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long2.And(System.Int64,GenMathematics.Vectors.long2@,GenMathematics.Vectors.long2@)">
            <summary>
            Component-wise 'and' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long2.Or(GenMathematics.Vectors.long2,GenMathematics.Vectors.long2)">
            <summary>
            Component-wise 'or' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long2.Or(GenMathematics.Vectors.long2,System.Int64)">
            <summary>
            Component-wise 'or' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long2.Or(System.Int64,GenMathematics.Vectors.long2)">
            <summary>
            Component-wise 'or' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long2.Or(GenMathematics.Vectors.long2@,GenMathematics.Vectors.long2@,GenMathematics.Vectors.long2@)">
            <summary>
            Component-wise 'or' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long2.Or(GenMathematics.Vectors.long2@,System.Int64,GenMathematics.Vectors.long2@)">
            <summary>
            Component-wise 'or' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long2.Or(System.Int64,GenMathematics.Vectors.long2@,GenMathematics.Vectors.long2@)">
            <summary>
            Component-wise 'or' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long2.Xor(GenMathematics.Vectors.long2,GenMathematics.Vectors.long2)">
            <summary>
            Component-wise 'xor' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long2.Xor(GenMathematics.Vectors.long2,System.Int64)">
            <summary>
            Component-wise 'xor' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long2.Xor(System.Int64,GenMathematics.Vectors.long2)">
            <summary>
            Component-wise 'xor' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long2.Xor(GenMathematics.Vectors.long2@,GenMathematics.Vectors.long2@,GenMathematics.Vectors.long2@)">
            <summary>
            Component-wise 'xor' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long2.Xor(GenMathematics.Vectors.long2@,System.Int64,GenMathematics.Vectors.long2@)">
            <summary>
            Component-wise 'xor' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long2.Xor(System.Int64,GenMathematics.Vectors.long2@,GenMathematics.Vectors.long2@)">
            <summary>
            Component-wise 'xor' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long2.ShiftLeft(GenMathematics.Vectors.long2,GenMathematics.Vectors.int2)">
            <summary>
            Component-wise 'shift-left' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long2.ShiftLeft(GenMathematics.Vectors.long2@,GenMathematics.Vectors.int2@,GenMathematics.Vectors.long2@)">
            <summary>
            Component-wise 'shift-left' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long2.ShiftRight(GenMathematics.Vectors.long2,GenMathematics.Vectors.int2)">
            <summary>
            Component-wise 'shift-righ' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long2.ShiftRight(GenMathematics.Vectors.long2@,GenMathematics.Vectors.int2@,GenMathematics.Vectors.long2@)">
            <summary>
            Component-wise 'shift-righ' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long2.Not(GenMathematics.Vectors.long2)">
            <summary>
            Component-wise 'not' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long2.Not(GenMathematics.Vectors.long2@,GenMathematics.Vectors.long2@)">
            <summary>
            Component-wise 'not' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long2.op_Addition(GenMathematics.Vectors.long2,GenMathematics.Vectors.long2)">
            <summary>
            Component-wise 'add' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long2.op_Addition(GenMathematics.Vectors.long2,System.Int64)">
            <summary>
            Component-wise 'add' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long2.op_Addition(System.Int64,GenMathematics.Vectors.long2)">
            <summary>
            Component-wise 'add' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long2.op_Subtraction(GenMathematics.Vectors.long2,GenMathematics.Vectors.long2)">
            <summary>
            Component-wise 'subtract' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long2.op_Subtraction(GenMathematics.Vectors.long2,System.Int64)">
            <summary>
            Component-wise 'subtract' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long2.op_Subtraction(System.Int64,GenMathematics.Vectors.long2)">
            <summary>
            Component-wise 'subtract' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long2.op_Multiply(GenMathematics.Vectors.long2,GenMathematics.Vectors.long2)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long2.op_Multiply(GenMathematics.Vectors.long2,System.Int64)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long2.op_Multiply(System.Int64,GenMathematics.Vectors.long2)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long2.op_Division(GenMathematics.Vectors.long2,GenMathematics.Vectors.long2)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long2.op_Division(GenMathematics.Vectors.long2,System.Int64)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long2.op_Division(System.Int64,GenMathematics.Vectors.long2)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long2.op_Modulus(GenMathematics.Vectors.long2,GenMathematics.Vectors.long2)">
            <summary>
            Component-wise 'remainder' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long2.op_Modulus(GenMathematics.Vectors.long2,System.Int64)">
            <summary>
            Component-wise 'remainder' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long2.op_Modulus(System.Int64,GenMathematics.Vectors.long2)">
            <summary>
            Component-wise 'remainder' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long2.op_UnaryNegation(GenMathematics.Vectors.long2)">
            <summary>
            Component-wise 'negate' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long2.op_BitwiseAnd(GenMathematics.Vectors.long2,GenMathematics.Vectors.long2)">
            <summary>
            Component-wise 'and' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long2.op_BitwiseAnd(GenMathematics.Vectors.long2,System.Int64)">
            <summary>
            Component-wise 'and' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long2.op_BitwiseAnd(System.Int64,GenMathematics.Vectors.long2)">
            <summary>
            Component-wise 'and' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long2.op_BitwiseOr(GenMathematics.Vectors.long2,GenMathematics.Vectors.long2)">
            <summary>
            Component-wise 'or' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long2.op_BitwiseOr(GenMathematics.Vectors.long2,System.Int64)">
            <summary>
            Component-wise 'or' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long2.op_BitwiseOr(System.Int64,GenMathematics.Vectors.long2)">
            <summary>
            Component-wise 'or' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long2.op_ExclusiveOr(GenMathematics.Vectors.long2,GenMathematics.Vectors.long2)">
            <summary>
            Component-wise 'xor' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long2.op_ExclusiveOr(GenMathematics.Vectors.long2,System.Int64)">
            <summary>
            Component-wise 'xor' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long2.op_ExclusiveOr(System.Int64,GenMathematics.Vectors.long2)">
            <summary>
            Component-wise 'xor' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long2.op_LeftShift(GenMathematics.Vectors.long2,GenMathematics.Vectors.int2)">
            <summary>
            Component-wise 'shift-left' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long2.op_RightShift(GenMathematics.Vectors.long2,GenMathematics.Vectors.int2)">
            <summary>
            Component-wise 'shift-righ' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long2.op_OnesComplement(GenMathematics.Vectors.long2)">
            <summary>
            Component-wise 'not' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long2.LessThan(GenMathematics.Vectors.long2,GenMathematics.Vectors.long2)">
            <summary>
            Component-wise 'less than' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long2.LessThan(GenMathematics.Vectors.long2@,GenMathematics.Vectors.long2@,GenMathematics.Vectors.bool2@)">
            <summary>
            Component-wise 'less than' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long2.GreaterThan(GenMathematics.Vectors.long2,GenMathematics.Vectors.long2)">
            <summary>
            Component-wise 'greater than' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long2.GreaterThan(GenMathematics.Vectors.long2@,GenMathematics.Vectors.long2@,GenMathematics.Vectors.bool2@)">
            <summary>
            Component-wise 'greater than' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long2.LessThanEqual(GenMathematics.Vectors.long2,GenMathematics.Vectors.long2)">
            <summary>
            Component-wise 'less than or equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long2.LessThanEqual(GenMathematics.Vectors.long2@,GenMathematics.Vectors.long2@,GenMathematics.Vectors.bool2@)">
            <summary>
            Component-wise 'less than or equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long2.GreaterThanEqual(GenMathematics.Vectors.long2,GenMathematics.Vectors.long2)">
            <summary>
            Component-wise 'greater than or equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long2.GreaterThanEqual(GenMathematics.Vectors.long2@,GenMathematics.Vectors.long2@,GenMathematics.Vectors.bool2@)">
            <summary>
            Component-wise 'greater than or equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long2.Equal(GenMathematics.Vectors.long2,GenMathematics.Vectors.long2)">
            <summary>
            Component-wise 'equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long2.Equal(GenMathematics.Vectors.long2@,GenMathematics.Vectors.long2@,GenMathematics.Vectors.bool2@)">
            <summary>
            Component-wise 'equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long2.NotEqual(GenMathematics.Vectors.long2,GenMathematics.Vectors.long2)">
            <summary>
            Component-wise 'not equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long2.NotEqual(GenMathematics.Vectors.long2@,GenMathematics.Vectors.long2@,GenMathematics.Vectors.bool2@)">
            <summary>
            Component-wise 'not equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long2.op_Implicit(System.Int64)~GenMathematics.Vectors.long2">
            <summary>
            Creates a vector by filling all components with the value
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long2.op_Explicit(GenMathematics.Vectors.ulong2)~GenMathematics.Vectors.long2">
            <summary>
            Converts ulong2 to long2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long2.op_Explicit(GenMathematics.Vectors.half2)~GenMathematics.Vectors.long2">
            <summary>
            Converts half2 to long2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long2.op_Explicit(GenMathematics.Vectors.float2)~GenMathematics.Vectors.long2">
            <summary>
            Converts float2 to long2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long2.op_Explicit(GenMathematics.Vectors.double2)~GenMathematics.Vectors.long2">
            <summary>
            Converts double2 to long2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long2.op_Implicit(GenMathematics.Vectors.byte2)~GenMathematics.Vectors.long2">
            <summary>
            Converts byte2 to long2
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long2.op_Implicit(GenMathematics.Vectors.sbyte2)~GenMathematics.Vectors.long2">
            <summary>
            Converts sbyte2 to long2
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long2.op_Implicit(GenMathematics.Vectors.short2)~GenMathematics.Vectors.long2">
            <summary>
            Converts short2 to long2
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long2.op_Implicit(GenMathematics.Vectors.ushort2)~GenMathematics.Vectors.long2">
            <summary>
            Converts ushort2 to long2
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long2.op_Implicit(GenMathematics.Vectors.int2)~GenMathematics.Vectors.long2">
            <summary>
            Converts int2 to long2
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long2.op_Implicit(GenMathematics.Vectors.uint2)~GenMathematics.Vectors.long2">
            <summary>
            Converts uint2 to long2
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long2.op_LessThan(GenMathematics.Vectors.long2,GenMathematics.Vectors.long2)">
            <summary>
            Component-wise 'less than' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long2.op_GreaterThan(GenMathematics.Vectors.long2,GenMathematics.Vectors.long2)">
            <summary>
            Component-wise 'greater than' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long2.op_LessThanOrEqual(GenMathematics.Vectors.long2,GenMathematics.Vectors.long2)">
            <summary>
            Component-wise 'less than or equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long2.op_GreaterThanOrEqual(GenMathematics.Vectors.long2,GenMathematics.Vectors.long2)">
            <summary>
            Component-wise 'greater than or equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long2.op_Equality(GenMathematics.Vectors.long2,GenMathematics.Vectors.long2)">
            <summary>
            Component-wise 'equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long2.op_Inequality(GenMathematics.Vectors.long2,GenMathematics.Vectors.long2)">
            <summary>
            Component-wise 'not equal' operation
            </summary>
        </member>
        <member name="T:GenMathematics.Vectors.long3">
            <summary>
            Vector of size 3 of type <see cref="T:System.Int64"/>
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.long3.Zero">
            <summary>
            Vector with zero in all components
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.long3.One">
            <summary>
            Vector with unit in all components
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.long3.UnitX">
            <summary>
            A vector with unit in the component 'x' and zeroes in the remaining components
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.long3.UnitY">
            <summary>
            A vector with unit in the component 'y' and zeroes in the remaining components
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.long3.UnitZ">
            <summary>
            A vector with unit in the component 'z' and zeroes in the remaining components
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.long3.x">
            <summary>
            Component 'x' of the vector
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.long3.y">
            <summary>
            Component 'y' of the vector
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.long3.z">
            <summary>
            Component 'z' of the vector
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long3.xx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long3.xy">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long3.xz">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long3.yx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long3.yy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long3.yz">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long3.zx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long3.zy">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long3.zz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long3.xxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long3.xxy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long3.xxz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long3.xyx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long3.xyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long3.xzx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long3.xzy">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long3.xzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long3.yxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long3.yxy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long3.yxz">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long3.yyx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long3.yyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long3.yyz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long3.yzx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long3.yzy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long3.yzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long3.zxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long3.zxy">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long3.zxz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long3.zyx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long3.zyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long3.zyz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long3.zzx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long3.zzy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long3.zzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long3.#ctor(System.Int64)">
            <summary>
            Constructs a vector by filling all components with the value
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long3.#ctor(System.Int64,GenMathematics.Vectors.long2)">
            <summary>
            Constructs a vector from component values
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long3.#ctor(System.Int64,System.Int64,System.Int64)">
            <summary>
            Constructs a vector from component values
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long3.#ctor(GenMathematics.Vectors.long2,System.Int64)">
            <summary>
            Constructs a vector from component values
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long3.Item(System.Int32)">
            <summary>
            Returns the vector component by index
            </summary>
            <param name="index">Index within [0,2]</param>
            <exception cref="T:System.IndexOutOfRangeException">Exception if the index is outside the vector size</exception>
        </member>
        <member name="M:GenMathematics.Vectors.long3.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Vectors.long3.Equals(GenMathematics.Vectors.long3)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Vectors.long3.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Vectors.long3.CompareTo(GenMathematics.Vectors.long3)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Vectors.long3.ToString">
            <summary>
            Returns the object's state information as a string
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long3.Add(GenMathematics.Vectors.long3,GenMathematics.Vectors.long3)">
            <summary>
            Component-wise 'add' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long3.Add(GenMathematics.Vectors.long3,System.Int64)">
            <summary>
            Component-wise 'add' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long3.Add(System.Int64,GenMathematics.Vectors.long3)">
            <summary>
            Component-wise 'add' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long3.Add(GenMathematics.Vectors.long3@,GenMathematics.Vectors.long3@,GenMathematics.Vectors.long3@)">
            <summary>
            Component-wise 'add' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long3.Add(GenMathematics.Vectors.long3@,System.Int64,GenMathematics.Vectors.long3@)">
            <summary>
            Component-wise 'add' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long3.Add(System.Int64,GenMathematics.Vectors.long3@,GenMathematics.Vectors.long3@)">
            <summary>
            Component-wise 'add' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long3.Subtract(GenMathematics.Vectors.long3,GenMathematics.Vectors.long3)">
            <summary>
            Component-wise 'subtract' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long3.Subtract(GenMathematics.Vectors.long3,System.Int64)">
            <summary>
            Component-wise 'subtract' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long3.Subtract(System.Int64,GenMathematics.Vectors.long3)">
            <summary>
            Component-wise 'subtract' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long3.Subtract(GenMathematics.Vectors.long3@,GenMathematics.Vectors.long3@,GenMathematics.Vectors.long3@)">
            <summary>
            Component-wise 'subtract' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long3.Subtract(GenMathematics.Vectors.long3@,System.Int64,GenMathematics.Vectors.long3@)">
            <summary>
            Component-wise 'subtract' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long3.Subtract(System.Int64,GenMathematics.Vectors.long3@,GenMathematics.Vectors.long3@)">
            <summary>
            Component-wise 'subtract' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long3.Multiply(GenMathematics.Vectors.long3,GenMathematics.Vectors.long3)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long3.Multiply(GenMathematics.Vectors.long3,System.Int64)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long3.Multiply(System.Int64,GenMathematics.Vectors.long3)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long3.Multiply(GenMathematics.Vectors.long3@,GenMathematics.Vectors.long3@,GenMathematics.Vectors.long3@)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long3.Multiply(GenMathematics.Vectors.long3@,System.Int64,GenMathematics.Vectors.long3@)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long3.Multiply(System.Int64,GenMathematics.Vectors.long3@,GenMathematics.Vectors.long3@)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long3.Divide(GenMathematics.Vectors.long3,GenMathematics.Vectors.long3)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long3.Divide(GenMathematics.Vectors.long3,System.Int64)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long3.Divide(System.Int64,GenMathematics.Vectors.long3)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long3.Divide(GenMathematics.Vectors.long3@,GenMathematics.Vectors.long3@,GenMathematics.Vectors.long3@)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long3.Divide(GenMathematics.Vectors.long3@,System.Int64,GenMathematics.Vectors.long3@)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long3.Divide(System.Int64,GenMathematics.Vectors.long3@,GenMathematics.Vectors.long3@)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long3.Remainder(GenMathematics.Vectors.long3,GenMathematics.Vectors.long3)">
            <summary>
            Component-wise 'remainder' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long3.Remainder(GenMathematics.Vectors.long3,System.Int64)">
            <summary>
            Component-wise 'remainder' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long3.Remainder(System.Int64,GenMathematics.Vectors.long3)">
            <summary>
            Component-wise 'remainder' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long3.Remainder(GenMathematics.Vectors.long3@,GenMathematics.Vectors.long3@,GenMathematics.Vectors.long3@)">
            <summary>
            Component-wise 'remainder' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long3.Remainder(GenMathematics.Vectors.long3@,System.Int64,GenMathematics.Vectors.long3@)">
            <summary>
            Component-wise 'remainder' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long3.Remainder(System.Int64,GenMathematics.Vectors.long3@,GenMathematics.Vectors.long3@)">
            <summary>
            Component-wise 'remainder' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long3.Negate(GenMathematics.Vectors.long3)">
            <summary>
            Component-wise 'negate' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long3.Negate(GenMathematics.Vectors.long3@,GenMathematics.Vectors.long3@)">
            <summary>
            Component-wise 'negate' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long3.And(GenMathematics.Vectors.long3,GenMathematics.Vectors.long3)">
            <summary>
            Component-wise 'and' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long3.And(GenMathematics.Vectors.long3,System.Int64)">
            <summary>
            Component-wise 'and' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long3.And(System.Int64,GenMathematics.Vectors.long3)">
            <summary>
            Component-wise 'and' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long3.And(GenMathematics.Vectors.long3@,GenMathematics.Vectors.long3@,GenMathematics.Vectors.long3@)">
            <summary>
            Component-wise 'and' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long3.And(GenMathematics.Vectors.long3@,System.Int64,GenMathematics.Vectors.long3@)">
            <summary>
            Component-wise 'and' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long3.And(System.Int64,GenMathematics.Vectors.long3@,GenMathematics.Vectors.long3@)">
            <summary>
            Component-wise 'and' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long3.Or(GenMathematics.Vectors.long3,GenMathematics.Vectors.long3)">
            <summary>
            Component-wise 'or' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long3.Or(GenMathematics.Vectors.long3,System.Int64)">
            <summary>
            Component-wise 'or' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long3.Or(System.Int64,GenMathematics.Vectors.long3)">
            <summary>
            Component-wise 'or' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long3.Or(GenMathematics.Vectors.long3@,GenMathematics.Vectors.long3@,GenMathematics.Vectors.long3@)">
            <summary>
            Component-wise 'or' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long3.Or(GenMathematics.Vectors.long3@,System.Int64,GenMathematics.Vectors.long3@)">
            <summary>
            Component-wise 'or' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long3.Or(System.Int64,GenMathematics.Vectors.long3@,GenMathematics.Vectors.long3@)">
            <summary>
            Component-wise 'or' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long3.Xor(GenMathematics.Vectors.long3,GenMathematics.Vectors.long3)">
            <summary>
            Component-wise 'xor' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long3.Xor(GenMathematics.Vectors.long3,System.Int64)">
            <summary>
            Component-wise 'xor' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long3.Xor(System.Int64,GenMathematics.Vectors.long3)">
            <summary>
            Component-wise 'xor' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long3.Xor(GenMathematics.Vectors.long3@,GenMathematics.Vectors.long3@,GenMathematics.Vectors.long3@)">
            <summary>
            Component-wise 'xor' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long3.Xor(GenMathematics.Vectors.long3@,System.Int64,GenMathematics.Vectors.long3@)">
            <summary>
            Component-wise 'xor' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long3.Xor(System.Int64,GenMathematics.Vectors.long3@,GenMathematics.Vectors.long3@)">
            <summary>
            Component-wise 'xor' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long3.ShiftLeft(GenMathematics.Vectors.long3,GenMathematics.Vectors.int3)">
            <summary>
            Component-wise 'shift-left' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long3.ShiftLeft(GenMathematics.Vectors.long3@,GenMathematics.Vectors.int3@,GenMathematics.Vectors.long3@)">
            <summary>
            Component-wise 'shift-left' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long3.ShiftRight(GenMathematics.Vectors.long3,GenMathematics.Vectors.int3)">
            <summary>
            Component-wise 'shift-righ' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long3.ShiftRight(GenMathematics.Vectors.long3@,GenMathematics.Vectors.int3@,GenMathematics.Vectors.long3@)">
            <summary>
            Component-wise 'shift-righ' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long3.Not(GenMathematics.Vectors.long3)">
            <summary>
            Component-wise 'not' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long3.Not(GenMathematics.Vectors.long3@,GenMathematics.Vectors.long3@)">
            <summary>
            Component-wise 'not' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long3.op_Addition(GenMathematics.Vectors.long3,GenMathematics.Vectors.long3)">
            <summary>
            Component-wise 'add' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long3.op_Addition(GenMathematics.Vectors.long3,System.Int64)">
            <summary>
            Component-wise 'add' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long3.op_Addition(System.Int64,GenMathematics.Vectors.long3)">
            <summary>
            Component-wise 'add' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long3.op_Subtraction(GenMathematics.Vectors.long3,GenMathematics.Vectors.long3)">
            <summary>
            Component-wise 'subtract' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long3.op_Subtraction(GenMathematics.Vectors.long3,System.Int64)">
            <summary>
            Component-wise 'subtract' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long3.op_Subtraction(System.Int64,GenMathematics.Vectors.long3)">
            <summary>
            Component-wise 'subtract' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long3.op_Multiply(GenMathematics.Vectors.long3,GenMathematics.Vectors.long3)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long3.op_Multiply(GenMathematics.Vectors.long3,System.Int64)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long3.op_Multiply(System.Int64,GenMathematics.Vectors.long3)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long3.op_Division(GenMathematics.Vectors.long3,GenMathematics.Vectors.long3)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long3.op_Division(GenMathematics.Vectors.long3,System.Int64)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long3.op_Division(System.Int64,GenMathematics.Vectors.long3)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long3.op_Modulus(GenMathematics.Vectors.long3,GenMathematics.Vectors.long3)">
            <summary>
            Component-wise 'remainder' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long3.op_Modulus(GenMathematics.Vectors.long3,System.Int64)">
            <summary>
            Component-wise 'remainder' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long3.op_Modulus(System.Int64,GenMathematics.Vectors.long3)">
            <summary>
            Component-wise 'remainder' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long3.op_UnaryNegation(GenMathematics.Vectors.long3)">
            <summary>
            Component-wise 'negate' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long3.op_BitwiseAnd(GenMathematics.Vectors.long3,GenMathematics.Vectors.long3)">
            <summary>
            Component-wise 'and' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long3.op_BitwiseAnd(GenMathematics.Vectors.long3,System.Int64)">
            <summary>
            Component-wise 'and' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long3.op_BitwiseAnd(System.Int64,GenMathematics.Vectors.long3)">
            <summary>
            Component-wise 'and' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long3.op_BitwiseOr(GenMathematics.Vectors.long3,GenMathematics.Vectors.long3)">
            <summary>
            Component-wise 'or' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long3.op_BitwiseOr(GenMathematics.Vectors.long3,System.Int64)">
            <summary>
            Component-wise 'or' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long3.op_BitwiseOr(System.Int64,GenMathematics.Vectors.long3)">
            <summary>
            Component-wise 'or' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long3.op_ExclusiveOr(GenMathematics.Vectors.long3,GenMathematics.Vectors.long3)">
            <summary>
            Component-wise 'xor' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long3.op_ExclusiveOr(GenMathematics.Vectors.long3,System.Int64)">
            <summary>
            Component-wise 'xor' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long3.op_ExclusiveOr(System.Int64,GenMathematics.Vectors.long3)">
            <summary>
            Component-wise 'xor' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long3.op_LeftShift(GenMathematics.Vectors.long3,GenMathematics.Vectors.int3)">
            <summary>
            Component-wise 'shift-left' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long3.op_RightShift(GenMathematics.Vectors.long3,GenMathematics.Vectors.int3)">
            <summary>
            Component-wise 'shift-righ' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long3.op_OnesComplement(GenMathematics.Vectors.long3)">
            <summary>
            Component-wise 'not' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long3.LessThan(GenMathematics.Vectors.long3,GenMathematics.Vectors.long3)">
            <summary>
            Component-wise 'less than' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long3.LessThan(GenMathematics.Vectors.long3@,GenMathematics.Vectors.long3@,GenMathematics.Vectors.bool3@)">
            <summary>
            Component-wise 'less than' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long3.GreaterThan(GenMathematics.Vectors.long3,GenMathematics.Vectors.long3)">
            <summary>
            Component-wise 'greater than' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long3.GreaterThan(GenMathematics.Vectors.long3@,GenMathematics.Vectors.long3@,GenMathematics.Vectors.bool3@)">
            <summary>
            Component-wise 'greater than' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long3.LessThanEqual(GenMathematics.Vectors.long3,GenMathematics.Vectors.long3)">
            <summary>
            Component-wise 'less than or equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long3.LessThanEqual(GenMathematics.Vectors.long3@,GenMathematics.Vectors.long3@,GenMathematics.Vectors.bool3@)">
            <summary>
            Component-wise 'less than or equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long3.GreaterThanEqual(GenMathematics.Vectors.long3,GenMathematics.Vectors.long3)">
            <summary>
            Component-wise 'greater than or equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long3.GreaterThanEqual(GenMathematics.Vectors.long3@,GenMathematics.Vectors.long3@,GenMathematics.Vectors.bool3@)">
            <summary>
            Component-wise 'greater than or equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long3.Equal(GenMathematics.Vectors.long3,GenMathematics.Vectors.long3)">
            <summary>
            Component-wise 'equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long3.Equal(GenMathematics.Vectors.long3@,GenMathematics.Vectors.long3@,GenMathematics.Vectors.bool3@)">
            <summary>
            Component-wise 'equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long3.NotEqual(GenMathematics.Vectors.long3,GenMathematics.Vectors.long3)">
            <summary>
            Component-wise 'not equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long3.NotEqual(GenMathematics.Vectors.long3@,GenMathematics.Vectors.long3@,GenMathematics.Vectors.bool3@)">
            <summary>
            Component-wise 'not equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long3.op_Implicit(System.Int64)~GenMathematics.Vectors.long3">
            <summary>
            Creates a vector by filling all components with the value
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long3.op_Explicit(GenMathematics.Vectors.ulong3)~GenMathematics.Vectors.long3">
            <summary>
            Converts ulong3 to long3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long3.op_Explicit(GenMathematics.Vectors.half3)~GenMathematics.Vectors.long3">
            <summary>
            Converts half3 to long3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long3.op_Explicit(GenMathematics.Vectors.float3)~GenMathematics.Vectors.long3">
            <summary>
            Converts float3 to long3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long3.op_Explicit(GenMathematics.Vectors.double3)~GenMathematics.Vectors.long3">
            <summary>
            Converts double3 to long3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long3.op_Implicit(GenMathematics.Vectors.byte3)~GenMathematics.Vectors.long3">
            <summary>
            Converts byte3 to long3
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long3.op_Implicit(GenMathematics.Vectors.sbyte3)~GenMathematics.Vectors.long3">
            <summary>
            Converts sbyte3 to long3
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long3.op_Implicit(GenMathematics.Vectors.short3)~GenMathematics.Vectors.long3">
            <summary>
            Converts short3 to long3
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long3.op_Implicit(GenMathematics.Vectors.ushort3)~GenMathematics.Vectors.long3">
            <summary>
            Converts ushort3 to long3
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long3.op_Implicit(GenMathematics.Vectors.int3)~GenMathematics.Vectors.long3">
            <summary>
            Converts int3 to long3
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long3.op_Implicit(GenMathematics.Vectors.uint3)~GenMathematics.Vectors.long3">
            <summary>
            Converts uint3 to long3
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long3.op_LessThan(GenMathematics.Vectors.long3,GenMathematics.Vectors.long3)">
            <summary>
            Component-wise 'less than' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long3.op_GreaterThan(GenMathematics.Vectors.long3,GenMathematics.Vectors.long3)">
            <summary>
            Component-wise 'greater than' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long3.op_LessThanOrEqual(GenMathematics.Vectors.long3,GenMathematics.Vectors.long3)">
            <summary>
            Component-wise 'less than or equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long3.op_GreaterThanOrEqual(GenMathematics.Vectors.long3,GenMathematics.Vectors.long3)">
            <summary>
            Component-wise 'greater than or equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long3.op_Equality(GenMathematics.Vectors.long3,GenMathematics.Vectors.long3)">
            <summary>
            Component-wise 'equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long3.op_Inequality(GenMathematics.Vectors.long3,GenMathematics.Vectors.long3)">
            <summary>
            Component-wise 'not equal' operation
            </summary>
        </member>
        <member name="T:GenMathematics.Vectors.long4">
            <summary>
            Vector of size 4 of type <see cref="T:System.Int64"/>
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.long4.Zero">
            <summary>
            Vector with zero in all components
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.long4.One">
            <summary>
            Vector with unit in all components
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.long4.UnitX">
            <summary>
            A vector with unit in the component 'x' and zeroes in the remaining components
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.long4.UnitY">
            <summary>
            A vector with unit in the component 'y' and zeroes in the remaining components
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.long4.UnitZ">
            <summary>
            A vector with unit in the component 'z' and zeroes in the remaining components
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.long4.UnitW">
            <summary>
            A vector with unit in the component 'w' and zeroes in the remaining components
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.long4.x">
            <summary>
            Component 'x' of the vector
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.long4.y">
            <summary>
            Component 'y' of the vector
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.long4.z">
            <summary>
            Component 'z' of the vector
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.long4.w">
            <summary>
            Component 'w' of the vector
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.xx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.xy">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.xz">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.xw">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.yx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.yy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.yz">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.yw">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.zx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.zy">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.zz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.zw">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.wx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.wy">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.wz">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.ww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.xxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.xxy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.xxz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.xxw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.xyx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.xyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.xyz">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.xyw">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.xzx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.xzy">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.xzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.xzw">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.xwx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.xwy">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.xwz">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.xww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.yxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.yxy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.yxz">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.yxw">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.yyx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.yyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.yyz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.yyw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.yzx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.yzy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.yzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.yzw">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.ywx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.ywy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.ywz">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.yww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.zxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.zxy">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.zxz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.zxw">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.zyx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.zyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.zyz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.zyw">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.zzx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.zzy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.zzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.zzw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.zwx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.zwy">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.zwz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.zww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.wxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.wxy">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.wxz">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.wxw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.wyx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.wyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.wyz">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.wyw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.wzx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.wzy">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.wzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.wzw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.wwx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.wwy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.wwz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.www">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.xxxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.xxxy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.xxxz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.xxxw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.xxyx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.xxyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.xxyz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.xxyw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.xxzx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.xxzy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.xxzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.xxzw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.xxwx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.xxwy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.xxwz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.xxww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.xyxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.xyxy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.xyxz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.xyxw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.xyyx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.xyyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.xyyz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.xyyw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.xyzx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.xyzy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.xyzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.xywx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.xywy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.xywz">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.xyww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.xzxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.xzxy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.xzxz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.xzxw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.xzyx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.xzyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.xzyz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.xzyw">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.xzzx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.xzzy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.xzzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.xzzw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.xzwx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.xzwy">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.xzwz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.xzww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.xwxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.xwxy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.xwxz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.xwxw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.xwyx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.xwyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.xwyz">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.xwyw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.xwzx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.xwzy">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.xwzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.xwzw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.xwwx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.xwwy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.xwwz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.xwww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.yxxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.yxxy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.yxxz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.yxxw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.yxyx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.yxyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.yxyz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.yxyw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.yxzx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.yxzy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.yxzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.yxzw">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.yxwx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.yxwy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.yxwz">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.yxww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.yyxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.yyxy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.yyxz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.yyxw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.yyyx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.yyyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.yyyz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.yyyw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.yyzx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.yyzy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.yyzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.yyzw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.yywx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.yywy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.yywz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.yyww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.yzxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.yzxy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.yzxz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.yzxw">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.yzyx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.yzyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.yzyz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.yzyw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.yzzx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.yzzy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.yzzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.yzzw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.yzwx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.yzwy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.yzwz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.yzww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.ywxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.ywxy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.ywxz">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.ywxw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.ywyx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.ywyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.ywyz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.ywyw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.ywzx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.ywzy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.ywzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.ywzw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.ywwx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.ywwy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.ywwz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.ywww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.zxxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.zxxy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.zxxz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.zxxw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.zxyx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.zxyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.zxyz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.zxyw">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.zxzx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.zxzy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.zxzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.zxzw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.zxwx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.zxwy">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.zxwz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.zxww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.zyxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.zyxy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.zyxz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.zyxw">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.zyyx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.zyyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.zyyz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.zyyw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.zyzx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.zyzy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.zyzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.zyzw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.zywx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.zywy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.zywz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.zyww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.zzxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.zzxy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.zzxz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.zzxw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.zzyx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.zzyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.zzyz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.zzyw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.zzzx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.zzzy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.zzzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.zzzw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.zzwx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.zzwy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.zzwz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.zzww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.zwxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.zwxy">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.zwxz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.zwxw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.zwyx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.zwyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.zwyz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.zwyw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.zwzx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.zwzy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.zwzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.zwzw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.zwwx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.zwwy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.zwwz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.zwww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.wxxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.wxxy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.wxxz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.wxxw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.wxyx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.wxyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.wxyz">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.wxyw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.wxzx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.wxzy">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.wxzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.wxzw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.wxwx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.wxwy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.wxwz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.wxww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.wyxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.wyxy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.wyxz">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.wyxw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.wyyx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.wyyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.wyyz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.wyyw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.wyzx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.wyzy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.wyzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.wyzw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.wywx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.wywy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.wywz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.wyww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.wzxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.wzxy">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.wzxz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.wzxw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.wzyx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.wzyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.wzyz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.wzyw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.wzzx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.wzzy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.wzzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.wzzw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.wzwx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.wzwy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.wzwz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.wzww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.wwxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.wwxy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.wwxz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.wwxw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.wwyx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.wwyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.wwyz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.wwyw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.wwzx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.wwzy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.wwzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.wwzw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.wwwx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.wwwy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.wwwz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.wwww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long4.#ctor(System.Int64)">
            <summary>
            Constructs a vector by filling all components with the value
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long4.#ctor(System.Int64,GenMathematics.Vectors.long3)">
            <summary>
            Constructs a vector from component values
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long4.#ctor(System.Int64,GenMathematics.Vectors.long2,System.Int64)">
            <summary>
            Constructs a vector from component values
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long4.#ctor(System.Int64,System.Int64,GenMathematics.Vectors.long2)">
            <summary>
            Constructs a vector from component values
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long4.#ctor(System.Int64,System.Int64,System.Int64,System.Int64)">
            <summary>
            Constructs a vector from component values
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long4.#ctor(GenMathematics.Vectors.long2,GenMathematics.Vectors.long2)">
            <summary>
            Constructs a vector from component values
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long4.#ctor(GenMathematics.Vectors.long2,System.Int64,System.Int64)">
            <summary>
            Constructs a vector from component values
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long4.#ctor(GenMathematics.Vectors.long3,System.Int64)">
            <summary>
            Constructs a vector from component values
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.long4.Item(System.Int32)">
            <summary>
            Returns the vector component by index
            </summary>
            <param name="index">Index within [0,3]</param>
            <exception cref="T:System.IndexOutOfRangeException">Exception if the index is outside the vector size</exception>
        </member>
        <member name="M:GenMathematics.Vectors.long4.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Vectors.long4.Equals(GenMathematics.Vectors.long4)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Vectors.long4.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Vectors.long4.CompareTo(GenMathematics.Vectors.long4)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Vectors.long4.ToString">
            <summary>
            Returns the object's state information as a string
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long4.Add(GenMathematics.Vectors.long4,GenMathematics.Vectors.long4)">
            <summary>
            Component-wise 'add' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long4.Add(GenMathematics.Vectors.long4,System.Int64)">
            <summary>
            Component-wise 'add' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long4.Add(System.Int64,GenMathematics.Vectors.long4)">
            <summary>
            Component-wise 'add' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long4.Add(GenMathematics.Vectors.long4@,GenMathematics.Vectors.long4@,GenMathematics.Vectors.long4@)">
            <summary>
            Component-wise 'add' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long4.Add(GenMathematics.Vectors.long4@,System.Int64,GenMathematics.Vectors.long4@)">
            <summary>
            Component-wise 'add' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long4.Add(System.Int64,GenMathematics.Vectors.long4@,GenMathematics.Vectors.long4@)">
            <summary>
            Component-wise 'add' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long4.Subtract(GenMathematics.Vectors.long4,GenMathematics.Vectors.long4)">
            <summary>
            Component-wise 'subtract' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long4.Subtract(GenMathematics.Vectors.long4,System.Int64)">
            <summary>
            Component-wise 'subtract' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long4.Subtract(System.Int64,GenMathematics.Vectors.long4)">
            <summary>
            Component-wise 'subtract' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long4.Subtract(GenMathematics.Vectors.long4@,GenMathematics.Vectors.long4@,GenMathematics.Vectors.long4@)">
            <summary>
            Component-wise 'subtract' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long4.Subtract(GenMathematics.Vectors.long4@,System.Int64,GenMathematics.Vectors.long4@)">
            <summary>
            Component-wise 'subtract' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long4.Subtract(System.Int64,GenMathematics.Vectors.long4@,GenMathematics.Vectors.long4@)">
            <summary>
            Component-wise 'subtract' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long4.Multiply(GenMathematics.Vectors.long4,GenMathematics.Vectors.long4)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long4.Multiply(GenMathematics.Vectors.long4,System.Int64)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long4.Multiply(System.Int64,GenMathematics.Vectors.long4)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long4.Multiply(GenMathematics.Vectors.long4@,GenMathematics.Vectors.long4@,GenMathematics.Vectors.long4@)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long4.Multiply(GenMathematics.Vectors.long4@,System.Int64,GenMathematics.Vectors.long4@)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long4.Multiply(System.Int64,GenMathematics.Vectors.long4@,GenMathematics.Vectors.long4@)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long4.Divide(GenMathematics.Vectors.long4,GenMathematics.Vectors.long4)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long4.Divide(GenMathematics.Vectors.long4,System.Int64)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long4.Divide(System.Int64,GenMathematics.Vectors.long4)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long4.Divide(GenMathematics.Vectors.long4@,GenMathematics.Vectors.long4@,GenMathematics.Vectors.long4@)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long4.Divide(GenMathematics.Vectors.long4@,System.Int64,GenMathematics.Vectors.long4@)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long4.Divide(System.Int64,GenMathematics.Vectors.long4@,GenMathematics.Vectors.long4@)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long4.Remainder(GenMathematics.Vectors.long4,GenMathematics.Vectors.long4)">
            <summary>
            Component-wise 'remainder' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long4.Remainder(GenMathematics.Vectors.long4,System.Int64)">
            <summary>
            Component-wise 'remainder' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long4.Remainder(System.Int64,GenMathematics.Vectors.long4)">
            <summary>
            Component-wise 'remainder' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long4.Remainder(GenMathematics.Vectors.long4@,GenMathematics.Vectors.long4@,GenMathematics.Vectors.long4@)">
            <summary>
            Component-wise 'remainder' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long4.Remainder(GenMathematics.Vectors.long4@,System.Int64,GenMathematics.Vectors.long4@)">
            <summary>
            Component-wise 'remainder' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long4.Remainder(System.Int64,GenMathematics.Vectors.long4@,GenMathematics.Vectors.long4@)">
            <summary>
            Component-wise 'remainder' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long4.Negate(GenMathematics.Vectors.long4)">
            <summary>
            Component-wise 'negate' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long4.Negate(GenMathematics.Vectors.long4@,GenMathematics.Vectors.long4@)">
            <summary>
            Component-wise 'negate' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long4.And(GenMathematics.Vectors.long4,GenMathematics.Vectors.long4)">
            <summary>
            Component-wise 'and' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long4.And(GenMathematics.Vectors.long4,System.Int64)">
            <summary>
            Component-wise 'and' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long4.And(System.Int64,GenMathematics.Vectors.long4)">
            <summary>
            Component-wise 'and' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long4.And(GenMathematics.Vectors.long4@,GenMathematics.Vectors.long4@,GenMathematics.Vectors.long4@)">
            <summary>
            Component-wise 'and' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long4.And(GenMathematics.Vectors.long4@,System.Int64,GenMathematics.Vectors.long4@)">
            <summary>
            Component-wise 'and' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long4.And(System.Int64,GenMathematics.Vectors.long4@,GenMathematics.Vectors.long4@)">
            <summary>
            Component-wise 'and' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long4.Or(GenMathematics.Vectors.long4,GenMathematics.Vectors.long4)">
            <summary>
            Component-wise 'or' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long4.Or(GenMathematics.Vectors.long4,System.Int64)">
            <summary>
            Component-wise 'or' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long4.Or(System.Int64,GenMathematics.Vectors.long4)">
            <summary>
            Component-wise 'or' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long4.Or(GenMathematics.Vectors.long4@,GenMathematics.Vectors.long4@,GenMathematics.Vectors.long4@)">
            <summary>
            Component-wise 'or' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long4.Or(GenMathematics.Vectors.long4@,System.Int64,GenMathematics.Vectors.long4@)">
            <summary>
            Component-wise 'or' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long4.Or(System.Int64,GenMathematics.Vectors.long4@,GenMathematics.Vectors.long4@)">
            <summary>
            Component-wise 'or' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long4.Xor(GenMathematics.Vectors.long4,GenMathematics.Vectors.long4)">
            <summary>
            Component-wise 'xor' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long4.Xor(GenMathematics.Vectors.long4,System.Int64)">
            <summary>
            Component-wise 'xor' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long4.Xor(System.Int64,GenMathematics.Vectors.long4)">
            <summary>
            Component-wise 'xor' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long4.Xor(GenMathematics.Vectors.long4@,GenMathematics.Vectors.long4@,GenMathematics.Vectors.long4@)">
            <summary>
            Component-wise 'xor' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long4.Xor(GenMathematics.Vectors.long4@,System.Int64,GenMathematics.Vectors.long4@)">
            <summary>
            Component-wise 'xor' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long4.Xor(System.Int64,GenMathematics.Vectors.long4@,GenMathematics.Vectors.long4@)">
            <summary>
            Component-wise 'xor' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long4.ShiftLeft(GenMathematics.Vectors.long4,GenMathematics.Vectors.int4)">
            <summary>
            Component-wise 'shift-left' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long4.ShiftLeft(GenMathematics.Vectors.long4@,GenMathematics.Vectors.int4@,GenMathematics.Vectors.long4@)">
            <summary>
            Component-wise 'shift-left' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long4.ShiftRight(GenMathematics.Vectors.long4,GenMathematics.Vectors.int4)">
            <summary>
            Component-wise 'shift-righ' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long4.ShiftRight(GenMathematics.Vectors.long4@,GenMathematics.Vectors.int4@,GenMathematics.Vectors.long4@)">
            <summary>
            Component-wise 'shift-righ' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long4.Not(GenMathematics.Vectors.long4)">
            <summary>
            Component-wise 'not' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long4.Not(GenMathematics.Vectors.long4@,GenMathematics.Vectors.long4@)">
            <summary>
            Component-wise 'not' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long4.op_Addition(GenMathematics.Vectors.long4,GenMathematics.Vectors.long4)">
            <summary>
            Component-wise 'add' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long4.op_Addition(GenMathematics.Vectors.long4,System.Int64)">
            <summary>
            Component-wise 'add' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long4.op_Addition(System.Int64,GenMathematics.Vectors.long4)">
            <summary>
            Component-wise 'add' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long4.op_Subtraction(GenMathematics.Vectors.long4,GenMathematics.Vectors.long4)">
            <summary>
            Component-wise 'subtract' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long4.op_Subtraction(GenMathematics.Vectors.long4,System.Int64)">
            <summary>
            Component-wise 'subtract' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long4.op_Subtraction(System.Int64,GenMathematics.Vectors.long4)">
            <summary>
            Component-wise 'subtract' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long4.op_Multiply(GenMathematics.Vectors.long4,GenMathematics.Vectors.long4)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long4.op_Multiply(GenMathematics.Vectors.long4,System.Int64)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long4.op_Multiply(System.Int64,GenMathematics.Vectors.long4)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long4.op_Division(GenMathematics.Vectors.long4,GenMathematics.Vectors.long4)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long4.op_Division(GenMathematics.Vectors.long4,System.Int64)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long4.op_Division(System.Int64,GenMathematics.Vectors.long4)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long4.op_Modulus(GenMathematics.Vectors.long4,GenMathematics.Vectors.long4)">
            <summary>
            Component-wise 'remainder' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long4.op_Modulus(GenMathematics.Vectors.long4,System.Int64)">
            <summary>
            Component-wise 'remainder' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long4.op_Modulus(System.Int64,GenMathematics.Vectors.long4)">
            <summary>
            Component-wise 'remainder' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long4.op_UnaryNegation(GenMathematics.Vectors.long4)">
            <summary>
            Component-wise 'negate' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long4.op_BitwiseAnd(GenMathematics.Vectors.long4,GenMathematics.Vectors.long4)">
            <summary>
            Component-wise 'and' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long4.op_BitwiseAnd(GenMathematics.Vectors.long4,System.Int64)">
            <summary>
            Component-wise 'and' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long4.op_BitwiseAnd(System.Int64,GenMathematics.Vectors.long4)">
            <summary>
            Component-wise 'and' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long4.op_BitwiseOr(GenMathematics.Vectors.long4,GenMathematics.Vectors.long4)">
            <summary>
            Component-wise 'or' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long4.op_BitwiseOr(GenMathematics.Vectors.long4,System.Int64)">
            <summary>
            Component-wise 'or' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long4.op_BitwiseOr(System.Int64,GenMathematics.Vectors.long4)">
            <summary>
            Component-wise 'or' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long4.op_ExclusiveOr(GenMathematics.Vectors.long4,GenMathematics.Vectors.long4)">
            <summary>
            Component-wise 'xor' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long4.op_ExclusiveOr(GenMathematics.Vectors.long4,System.Int64)">
            <summary>
            Component-wise 'xor' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long4.op_ExclusiveOr(System.Int64,GenMathematics.Vectors.long4)">
            <summary>
            Component-wise 'xor' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long4.op_LeftShift(GenMathematics.Vectors.long4,GenMathematics.Vectors.int4)">
            <summary>
            Component-wise 'shift-left' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long4.op_RightShift(GenMathematics.Vectors.long4,GenMathematics.Vectors.int4)">
            <summary>
            Component-wise 'shift-righ' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long4.op_OnesComplement(GenMathematics.Vectors.long4)">
            <summary>
            Component-wise 'not' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long4.LessThan(GenMathematics.Vectors.long4,GenMathematics.Vectors.long4)">
            <summary>
            Component-wise 'less than' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long4.LessThan(GenMathematics.Vectors.long4@,GenMathematics.Vectors.long4@,GenMathematics.Vectors.bool4@)">
            <summary>
            Component-wise 'less than' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long4.GreaterThan(GenMathematics.Vectors.long4,GenMathematics.Vectors.long4)">
            <summary>
            Component-wise 'greater than' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long4.GreaterThan(GenMathematics.Vectors.long4@,GenMathematics.Vectors.long4@,GenMathematics.Vectors.bool4@)">
            <summary>
            Component-wise 'greater than' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long4.LessThanEqual(GenMathematics.Vectors.long4,GenMathematics.Vectors.long4)">
            <summary>
            Component-wise 'less than or equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long4.LessThanEqual(GenMathematics.Vectors.long4@,GenMathematics.Vectors.long4@,GenMathematics.Vectors.bool4@)">
            <summary>
            Component-wise 'less than or equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long4.GreaterThanEqual(GenMathematics.Vectors.long4,GenMathematics.Vectors.long4)">
            <summary>
            Component-wise 'greater than or equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long4.GreaterThanEqual(GenMathematics.Vectors.long4@,GenMathematics.Vectors.long4@,GenMathematics.Vectors.bool4@)">
            <summary>
            Component-wise 'greater than or equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long4.Equal(GenMathematics.Vectors.long4,GenMathematics.Vectors.long4)">
            <summary>
            Component-wise 'equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long4.Equal(GenMathematics.Vectors.long4@,GenMathematics.Vectors.long4@,GenMathematics.Vectors.bool4@)">
            <summary>
            Component-wise 'equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long4.NotEqual(GenMathematics.Vectors.long4,GenMathematics.Vectors.long4)">
            <summary>
            Component-wise 'not equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long4.NotEqual(GenMathematics.Vectors.long4@,GenMathematics.Vectors.long4@,GenMathematics.Vectors.bool4@)">
            <summary>
            Component-wise 'not equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long4.op_Implicit(System.Int64)~GenMathematics.Vectors.long4">
            <summary>
            Creates a vector by filling all components with the value
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long4.op_Explicit(GenMathematics.Vectors.ulong4)~GenMathematics.Vectors.long4">
            <summary>
            Converts ulong4 to long4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long4.op_Explicit(GenMathematics.Vectors.half4)~GenMathematics.Vectors.long4">
            <summary>
            Converts half4 to long4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long4.op_Explicit(GenMathematics.Vectors.float4)~GenMathematics.Vectors.long4">
            <summary>
            Converts float4 to long4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long4.op_Explicit(GenMathematics.Vectors.double4)~GenMathematics.Vectors.long4">
            <summary>
            Converts double4 to long4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long4.op_Implicit(GenMathematics.Vectors.byte4)~GenMathematics.Vectors.long4">
            <summary>
            Converts byte4 to long4
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long4.op_Implicit(GenMathematics.Vectors.sbyte4)~GenMathematics.Vectors.long4">
            <summary>
            Converts sbyte4 to long4
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long4.op_Implicit(GenMathematics.Vectors.short4)~GenMathematics.Vectors.long4">
            <summary>
            Converts short4 to long4
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long4.op_Implicit(GenMathematics.Vectors.ushort4)~GenMathematics.Vectors.long4">
            <summary>
            Converts ushort4 to long4
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long4.op_Implicit(GenMathematics.Vectors.int4)~GenMathematics.Vectors.long4">
            <summary>
            Converts int4 to long4
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long4.op_Implicit(GenMathematics.Vectors.uint4)~GenMathematics.Vectors.long4">
            <summary>
            Converts uint4 to long4
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long4.op_LessThan(GenMathematics.Vectors.long4,GenMathematics.Vectors.long4)">
            <summary>
            Component-wise 'less than' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long4.op_GreaterThan(GenMathematics.Vectors.long4,GenMathematics.Vectors.long4)">
            <summary>
            Component-wise 'greater than' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long4.op_LessThanOrEqual(GenMathematics.Vectors.long4,GenMathematics.Vectors.long4)">
            <summary>
            Component-wise 'less than or equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long4.op_GreaterThanOrEqual(GenMathematics.Vectors.long4,GenMathematics.Vectors.long4)">
            <summary>
            Component-wise 'greater than or equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long4.op_Equality(GenMathematics.Vectors.long4,GenMathematics.Vectors.long4)">
            <summary>
            Component-wise 'equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.long4.op_Inequality(GenMathematics.Vectors.long4,GenMathematics.Vectors.long4)">
            <summary>
            Component-wise 'not equal' operation
            </summary>
        </member>
        <member name="T:GenMathematics.Vectors.sbyte2">
            <summary>
            Vector of size 2 of type <see cref="T:System.SByte"/>
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.sbyte2.Zero">
            <summary>
            Vector with zero in all components
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.sbyte2.One">
            <summary>
            Vector with unit in all components
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.sbyte2.UnitX">
            <summary>
            A vector with unit in the component 'x' and zeroes in the remaining components
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.sbyte2.UnitY">
            <summary>
            A vector with unit in the component 'y' and zeroes in the remaining components
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.sbyte2.x">
            <summary>
            Component 'x' of the vector
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.sbyte2.y">
            <summary>
            Component 'y' of the vector
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte2.xx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte2.yx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte2.yy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.sbyte2.#ctor(System.SByte)">
            <summary>
            Constructs a vector by filling all components with the value
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.sbyte2.#ctor(System.SByte,System.SByte)">
            <summary>
            Constructs a vector from component values
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte2.Item(System.Int32)">
            <summary>
            Returns the vector component by index
            </summary>
            <param name="index">Index within [0,1]</param>
            <exception cref="T:System.IndexOutOfRangeException">Exception if the index is outside the vector size</exception>
        </member>
        <member name="M:GenMathematics.Vectors.sbyte2.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Vectors.sbyte2.Equals(GenMathematics.Vectors.sbyte2)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Vectors.sbyte2.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Vectors.sbyte2.CompareTo(GenMathematics.Vectors.sbyte2)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Vectors.sbyte2.ToString">
            <summary>
            Returns the object's state information as a string
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.sbyte2.LessThan(GenMathematics.Vectors.sbyte2,GenMathematics.Vectors.sbyte2)">
            <summary>
            Component-wise 'less than' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.sbyte2.LessThan(GenMathematics.Vectors.sbyte2@,GenMathematics.Vectors.sbyte2@,GenMathematics.Vectors.bool2@)">
            <summary>
            Component-wise 'less than' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.sbyte2.GreaterThan(GenMathematics.Vectors.sbyte2,GenMathematics.Vectors.sbyte2)">
            <summary>
            Component-wise 'greater than' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.sbyte2.GreaterThan(GenMathematics.Vectors.sbyte2@,GenMathematics.Vectors.sbyte2@,GenMathematics.Vectors.bool2@)">
            <summary>
            Component-wise 'greater than' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.sbyte2.LessThanEqual(GenMathematics.Vectors.sbyte2,GenMathematics.Vectors.sbyte2)">
            <summary>
            Component-wise 'less than or equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.sbyte2.LessThanEqual(GenMathematics.Vectors.sbyte2@,GenMathematics.Vectors.sbyte2@,GenMathematics.Vectors.bool2@)">
            <summary>
            Component-wise 'less than or equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.sbyte2.GreaterThanEqual(GenMathematics.Vectors.sbyte2,GenMathematics.Vectors.sbyte2)">
            <summary>
            Component-wise 'greater than or equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.sbyte2.GreaterThanEqual(GenMathematics.Vectors.sbyte2@,GenMathematics.Vectors.sbyte2@,GenMathematics.Vectors.bool2@)">
            <summary>
            Component-wise 'greater than or equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.sbyte2.Equal(GenMathematics.Vectors.sbyte2,GenMathematics.Vectors.sbyte2)">
            <summary>
            Component-wise 'equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.sbyte2.Equal(GenMathematics.Vectors.sbyte2@,GenMathematics.Vectors.sbyte2@,GenMathematics.Vectors.bool2@)">
            <summary>
            Component-wise 'equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.sbyte2.NotEqual(GenMathematics.Vectors.sbyte2,GenMathematics.Vectors.sbyte2)">
            <summary>
            Component-wise 'not equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.sbyte2.NotEqual(GenMathematics.Vectors.sbyte2@,GenMathematics.Vectors.sbyte2@,GenMathematics.Vectors.bool2@)">
            <summary>
            Component-wise 'not equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.sbyte2.op_Implicit(System.SByte)~GenMathematics.Vectors.sbyte2">
            <summary>
            Creates a vector by filling all components with the value
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.sbyte2.op_Explicit(GenMathematics.Vectors.byte2)~GenMathematics.Vectors.sbyte2">
            <summary>
            Converts byte2 to sbyte2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.sbyte2.op_Explicit(GenMathematics.Vectors.short2)~GenMathematics.Vectors.sbyte2">
            <summary>
            Converts short2 to sbyte2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.sbyte2.op_Explicit(GenMathematics.Vectors.ushort2)~GenMathematics.Vectors.sbyte2">
            <summary>
            Converts ushort2 to sbyte2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.sbyte2.op_Explicit(GenMathematics.Vectors.int2)~GenMathematics.Vectors.sbyte2">
            <summary>
            Converts int2 to sbyte2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.sbyte2.op_Explicit(GenMathematics.Vectors.uint2)~GenMathematics.Vectors.sbyte2">
            <summary>
            Converts uint2 to sbyte2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.sbyte2.op_Explicit(GenMathematics.Vectors.long2)~GenMathematics.Vectors.sbyte2">
            <summary>
            Converts long2 to sbyte2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.sbyte2.op_Explicit(GenMathematics.Vectors.ulong2)~GenMathematics.Vectors.sbyte2">
            <summary>
            Converts ulong2 to sbyte2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.sbyte2.op_Explicit(GenMathematics.Vectors.half2)~GenMathematics.Vectors.sbyte2">
            <summary>
            Converts half2 to sbyte2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.sbyte2.op_Explicit(GenMathematics.Vectors.float2)~GenMathematics.Vectors.sbyte2">
            <summary>
            Converts float2 to sbyte2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.sbyte2.op_Explicit(GenMathematics.Vectors.double2)~GenMathematics.Vectors.sbyte2">
            <summary>
            Converts double2 to sbyte2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.sbyte2.op_LessThan(GenMathematics.Vectors.sbyte2,GenMathematics.Vectors.sbyte2)">
            <summary>
            Component-wise 'less than' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.sbyte2.op_GreaterThan(GenMathematics.Vectors.sbyte2,GenMathematics.Vectors.sbyte2)">
            <summary>
            Component-wise 'greater than' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.sbyte2.op_LessThanOrEqual(GenMathematics.Vectors.sbyte2,GenMathematics.Vectors.sbyte2)">
            <summary>
            Component-wise 'less than or equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.sbyte2.op_GreaterThanOrEqual(GenMathematics.Vectors.sbyte2,GenMathematics.Vectors.sbyte2)">
            <summary>
            Component-wise 'greater than or equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.sbyte2.op_Equality(GenMathematics.Vectors.sbyte2,GenMathematics.Vectors.sbyte2)">
            <summary>
            Component-wise 'equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.sbyte2.op_Inequality(GenMathematics.Vectors.sbyte2,GenMathematics.Vectors.sbyte2)">
            <summary>
            Component-wise 'not equal' operation
            </summary>
        </member>
        <member name="T:GenMathematics.Vectors.sbyte3">
            <summary>
            Vector of size 3 of type <see cref="T:System.SByte"/>
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.sbyte3.Zero">
            <summary>
            Vector with zero in all components
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.sbyte3.One">
            <summary>
            Vector with unit in all components
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.sbyte3.UnitX">
            <summary>
            A vector with unit in the component 'x' and zeroes in the remaining components
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.sbyte3.UnitY">
            <summary>
            A vector with unit in the component 'y' and zeroes in the remaining components
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.sbyte3.UnitZ">
            <summary>
            A vector with unit in the component 'z' and zeroes in the remaining components
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.sbyte3.x">
            <summary>
            Component 'x' of the vector
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.sbyte3.y">
            <summary>
            Component 'y' of the vector
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.sbyte3.z">
            <summary>
            Component 'z' of the vector
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte3.xx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte3.xy">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte3.xz">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte3.yx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte3.yy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte3.yz">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte3.zx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte3.zy">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte3.zz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte3.xxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte3.xxy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte3.xxz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte3.xyx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte3.xyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte3.xzx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte3.xzy">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte3.xzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte3.yxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte3.yxy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte3.yxz">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte3.yyx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte3.yyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte3.yyz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte3.yzx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte3.yzy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte3.yzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte3.zxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte3.zxy">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte3.zxz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte3.zyx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte3.zyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte3.zyz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte3.zzx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte3.zzy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte3.zzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.sbyte3.#ctor(System.SByte)">
            <summary>
            Constructs a vector by filling all components with the value
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.sbyte3.#ctor(System.SByte,GenMathematics.Vectors.sbyte2)">
            <summary>
            Constructs a vector from component values
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.sbyte3.#ctor(System.SByte,System.SByte,System.SByte)">
            <summary>
            Constructs a vector from component values
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.sbyte3.#ctor(GenMathematics.Vectors.sbyte2,System.SByte)">
            <summary>
            Constructs a vector from component values
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte3.Item(System.Int32)">
            <summary>
            Returns the vector component by index
            </summary>
            <param name="index">Index within [0,2]</param>
            <exception cref="T:System.IndexOutOfRangeException">Exception if the index is outside the vector size</exception>
        </member>
        <member name="M:GenMathematics.Vectors.sbyte3.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Vectors.sbyte3.Equals(GenMathematics.Vectors.sbyte3)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Vectors.sbyte3.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Vectors.sbyte3.CompareTo(GenMathematics.Vectors.sbyte3)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Vectors.sbyte3.ToString">
            <summary>
            Returns the object's state information as a string
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.sbyte3.LessThan(GenMathematics.Vectors.sbyte3,GenMathematics.Vectors.sbyte3)">
            <summary>
            Component-wise 'less than' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.sbyte3.LessThan(GenMathematics.Vectors.sbyte3@,GenMathematics.Vectors.sbyte3@,GenMathematics.Vectors.bool3@)">
            <summary>
            Component-wise 'less than' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.sbyte3.GreaterThan(GenMathematics.Vectors.sbyte3,GenMathematics.Vectors.sbyte3)">
            <summary>
            Component-wise 'greater than' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.sbyte3.GreaterThan(GenMathematics.Vectors.sbyte3@,GenMathematics.Vectors.sbyte3@,GenMathematics.Vectors.bool3@)">
            <summary>
            Component-wise 'greater than' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.sbyte3.LessThanEqual(GenMathematics.Vectors.sbyte3,GenMathematics.Vectors.sbyte3)">
            <summary>
            Component-wise 'less than or equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.sbyte3.LessThanEqual(GenMathematics.Vectors.sbyte3@,GenMathematics.Vectors.sbyte3@,GenMathematics.Vectors.bool3@)">
            <summary>
            Component-wise 'less than or equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.sbyte3.GreaterThanEqual(GenMathematics.Vectors.sbyte3,GenMathematics.Vectors.sbyte3)">
            <summary>
            Component-wise 'greater than or equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.sbyte3.GreaterThanEqual(GenMathematics.Vectors.sbyte3@,GenMathematics.Vectors.sbyte3@,GenMathematics.Vectors.bool3@)">
            <summary>
            Component-wise 'greater than or equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.sbyte3.Equal(GenMathematics.Vectors.sbyte3,GenMathematics.Vectors.sbyte3)">
            <summary>
            Component-wise 'equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.sbyte3.Equal(GenMathematics.Vectors.sbyte3@,GenMathematics.Vectors.sbyte3@,GenMathematics.Vectors.bool3@)">
            <summary>
            Component-wise 'equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.sbyte3.NotEqual(GenMathematics.Vectors.sbyte3,GenMathematics.Vectors.sbyte3)">
            <summary>
            Component-wise 'not equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.sbyte3.NotEqual(GenMathematics.Vectors.sbyte3@,GenMathematics.Vectors.sbyte3@,GenMathematics.Vectors.bool3@)">
            <summary>
            Component-wise 'not equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.sbyte3.op_Implicit(System.SByte)~GenMathematics.Vectors.sbyte3">
            <summary>
            Creates a vector by filling all components with the value
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.sbyte3.op_Explicit(GenMathematics.Vectors.byte3)~GenMathematics.Vectors.sbyte3">
            <summary>
            Converts byte3 to sbyte3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.sbyte3.op_Explicit(GenMathematics.Vectors.short3)~GenMathematics.Vectors.sbyte3">
            <summary>
            Converts short3 to sbyte3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.sbyte3.op_Explicit(GenMathematics.Vectors.ushort3)~GenMathematics.Vectors.sbyte3">
            <summary>
            Converts ushort3 to sbyte3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.sbyte3.op_Explicit(GenMathematics.Vectors.int3)~GenMathematics.Vectors.sbyte3">
            <summary>
            Converts int3 to sbyte3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.sbyte3.op_Explicit(GenMathematics.Vectors.uint3)~GenMathematics.Vectors.sbyte3">
            <summary>
            Converts uint3 to sbyte3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.sbyte3.op_Explicit(GenMathematics.Vectors.long3)~GenMathematics.Vectors.sbyte3">
            <summary>
            Converts long3 to sbyte3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.sbyte3.op_Explicit(GenMathematics.Vectors.ulong3)~GenMathematics.Vectors.sbyte3">
            <summary>
            Converts ulong3 to sbyte3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.sbyte3.op_Explicit(GenMathematics.Vectors.half3)~GenMathematics.Vectors.sbyte3">
            <summary>
            Converts half3 to sbyte3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.sbyte3.op_Explicit(GenMathematics.Vectors.float3)~GenMathematics.Vectors.sbyte3">
            <summary>
            Converts float3 to sbyte3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.sbyte3.op_Explicit(GenMathematics.Vectors.double3)~GenMathematics.Vectors.sbyte3">
            <summary>
            Converts double3 to sbyte3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.sbyte3.op_LessThan(GenMathematics.Vectors.sbyte3,GenMathematics.Vectors.sbyte3)">
            <summary>
            Component-wise 'less than' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.sbyte3.op_GreaterThan(GenMathematics.Vectors.sbyte3,GenMathematics.Vectors.sbyte3)">
            <summary>
            Component-wise 'greater than' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.sbyte3.op_LessThanOrEqual(GenMathematics.Vectors.sbyte3,GenMathematics.Vectors.sbyte3)">
            <summary>
            Component-wise 'less than or equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.sbyte3.op_GreaterThanOrEqual(GenMathematics.Vectors.sbyte3,GenMathematics.Vectors.sbyte3)">
            <summary>
            Component-wise 'greater than or equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.sbyte3.op_Equality(GenMathematics.Vectors.sbyte3,GenMathematics.Vectors.sbyte3)">
            <summary>
            Component-wise 'equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.sbyte3.op_Inequality(GenMathematics.Vectors.sbyte3,GenMathematics.Vectors.sbyte3)">
            <summary>
            Component-wise 'not equal' operation
            </summary>
        </member>
        <member name="T:GenMathematics.Vectors.sbyte4">
            <summary>
            Vector of size 4 of type <see cref="T:System.SByte"/>
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.sbyte4.Zero">
            <summary>
            Vector with zero in all components
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.sbyte4.One">
            <summary>
            Vector with unit in all components
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.sbyte4.UnitX">
            <summary>
            A vector with unit in the component 'x' and zeroes in the remaining components
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.sbyte4.UnitY">
            <summary>
            A vector with unit in the component 'y' and zeroes in the remaining components
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.sbyte4.UnitZ">
            <summary>
            A vector with unit in the component 'z' and zeroes in the remaining components
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.sbyte4.UnitW">
            <summary>
            A vector with unit in the component 'w' and zeroes in the remaining components
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.sbyte4.x">
            <summary>
            Component 'x' of the vector
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.sbyte4.y">
            <summary>
            Component 'y' of the vector
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.sbyte4.z">
            <summary>
            Component 'z' of the vector
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.sbyte4.w">
            <summary>
            Component 'w' of the vector
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.xx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.xy">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.xz">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.xw">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.yx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.yy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.yz">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.yw">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.zx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.zy">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.zz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.zw">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.wx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.wy">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.wz">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.ww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.xxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.xxy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.xxz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.xxw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.xyx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.xyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.xyz">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.xyw">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.xzx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.xzy">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.xzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.xzw">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.xwx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.xwy">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.xwz">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.xww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.yxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.yxy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.yxz">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.yxw">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.yyx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.yyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.yyz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.yyw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.yzx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.yzy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.yzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.yzw">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.ywx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.ywy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.ywz">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.yww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.zxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.zxy">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.zxz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.zxw">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.zyx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.zyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.zyz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.zyw">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.zzx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.zzy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.zzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.zzw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.zwx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.zwy">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.zwz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.zww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.wxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.wxy">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.wxz">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.wxw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.wyx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.wyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.wyz">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.wyw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.wzx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.wzy">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.wzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.wzw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.wwx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.wwy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.wwz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.www">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.xxxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.xxxy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.xxxz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.xxxw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.xxyx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.xxyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.xxyz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.xxyw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.xxzx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.xxzy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.xxzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.xxzw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.xxwx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.xxwy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.xxwz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.xxww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.xyxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.xyxy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.xyxz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.xyxw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.xyyx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.xyyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.xyyz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.xyyw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.xyzx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.xyzy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.xyzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.xywx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.xywy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.xywz">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.xyww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.xzxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.xzxy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.xzxz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.xzxw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.xzyx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.xzyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.xzyz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.xzyw">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.xzzx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.xzzy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.xzzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.xzzw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.xzwx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.xzwy">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.xzwz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.xzww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.xwxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.xwxy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.xwxz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.xwxw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.xwyx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.xwyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.xwyz">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.xwyw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.xwzx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.xwzy">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.xwzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.xwzw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.xwwx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.xwwy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.xwwz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.xwww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.yxxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.yxxy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.yxxz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.yxxw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.yxyx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.yxyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.yxyz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.yxyw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.yxzx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.yxzy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.yxzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.yxzw">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.yxwx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.yxwy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.yxwz">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.yxww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.yyxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.yyxy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.yyxz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.yyxw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.yyyx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.yyyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.yyyz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.yyyw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.yyzx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.yyzy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.yyzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.yyzw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.yywx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.yywy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.yywz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.yyww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.yzxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.yzxy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.yzxz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.yzxw">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.yzyx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.yzyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.yzyz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.yzyw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.yzzx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.yzzy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.yzzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.yzzw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.yzwx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.yzwy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.yzwz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.yzww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.ywxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.ywxy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.ywxz">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.ywxw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.ywyx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.ywyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.ywyz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.ywyw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.ywzx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.ywzy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.ywzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.ywzw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.ywwx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.ywwy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.ywwz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.ywww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.zxxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.zxxy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.zxxz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.zxxw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.zxyx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.zxyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.zxyz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.zxyw">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.zxzx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.zxzy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.zxzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.zxzw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.zxwx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.zxwy">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.zxwz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.zxww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.zyxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.zyxy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.zyxz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.zyxw">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.zyyx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.zyyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.zyyz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.zyyw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.zyzx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.zyzy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.zyzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.zyzw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.zywx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.zywy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.zywz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.zyww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.zzxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.zzxy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.zzxz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.zzxw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.zzyx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.zzyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.zzyz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.zzyw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.zzzx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.zzzy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.zzzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.zzzw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.zzwx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.zzwy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.zzwz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.zzww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.zwxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.zwxy">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.zwxz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.zwxw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.zwyx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.zwyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.zwyz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.zwyw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.zwzx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.zwzy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.zwzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.zwzw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.zwwx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.zwwy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.zwwz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.zwww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.wxxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.wxxy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.wxxz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.wxxw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.wxyx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.wxyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.wxyz">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.wxyw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.wxzx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.wxzy">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.wxzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.wxzw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.wxwx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.wxwy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.wxwz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.wxww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.wyxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.wyxy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.wyxz">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.wyxw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.wyyx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.wyyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.wyyz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.wyyw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.wyzx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.wyzy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.wyzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.wyzw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.wywx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.wywy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.wywz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.wyww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.wzxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.wzxy">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.wzxz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.wzxw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.wzyx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.wzyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.wzyz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.wzyw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.wzzx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.wzzy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.wzzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.wzzw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.wzwx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.wzwy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.wzwz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.wzww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.wwxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.wwxy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.wwxz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.wwxw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.wwyx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.wwyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.wwyz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.wwyw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.wwzx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.wwzy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.wwzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.wwzw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.wwwx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.wwwy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.wwwz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.wwww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.sbyte4.#ctor(System.SByte)">
            <summary>
            Constructs a vector by filling all components with the value
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.sbyte4.#ctor(System.SByte,GenMathematics.Vectors.sbyte3)">
            <summary>
            Constructs a vector from component values
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.sbyte4.#ctor(System.SByte,GenMathematics.Vectors.sbyte2,System.SByte)">
            <summary>
            Constructs a vector from component values
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.sbyte4.#ctor(System.SByte,System.SByte,GenMathematics.Vectors.sbyte2)">
            <summary>
            Constructs a vector from component values
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.sbyte4.#ctor(System.SByte,System.SByte,System.SByte,System.SByte)">
            <summary>
            Constructs a vector from component values
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.sbyte4.#ctor(GenMathematics.Vectors.sbyte2,GenMathematics.Vectors.sbyte2)">
            <summary>
            Constructs a vector from component values
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.sbyte4.#ctor(GenMathematics.Vectors.sbyte2,System.SByte,System.SByte)">
            <summary>
            Constructs a vector from component values
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.sbyte4.#ctor(GenMathematics.Vectors.sbyte3,System.SByte)">
            <summary>
            Constructs a vector from component values
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.sbyte4.Item(System.Int32)">
            <summary>
            Returns the vector component by index
            </summary>
            <param name="index">Index within [0,3]</param>
            <exception cref="T:System.IndexOutOfRangeException">Exception if the index is outside the vector size</exception>
        </member>
        <member name="M:GenMathematics.Vectors.sbyte4.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Vectors.sbyte4.Equals(GenMathematics.Vectors.sbyte4)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Vectors.sbyte4.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Vectors.sbyte4.CompareTo(GenMathematics.Vectors.sbyte4)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Vectors.sbyte4.ToString">
            <summary>
            Returns the object's state information as a string
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.sbyte4.LessThan(GenMathematics.Vectors.sbyte4,GenMathematics.Vectors.sbyte4)">
            <summary>
            Component-wise 'less than' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.sbyte4.LessThan(GenMathematics.Vectors.sbyte4@,GenMathematics.Vectors.sbyte4@,GenMathematics.Vectors.bool4@)">
            <summary>
            Component-wise 'less than' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.sbyte4.GreaterThan(GenMathematics.Vectors.sbyte4,GenMathematics.Vectors.sbyte4)">
            <summary>
            Component-wise 'greater than' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.sbyte4.GreaterThan(GenMathematics.Vectors.sbyte4@,GenMathematics.Vectors.sbyte4@,GenMathematics.Vectors.bool4@)">
            <summary>
            Component-wise 'greater than' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.sbyte4.LessThanEqual(GenMathematics.Vectors.sbyte4,GenMathematics.Vectors.sbyte4)">
            <summary>
            Component-wise 'less than or equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.sbyte4.LessThanEqual(GenMathematics.Vectors.sbyte4@,GenMathematics.Vectors.sbyte4@,GenMathematics.Vectors.bool4@)">
            <summary>
            Component-wise 'less than or equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.sbyte4.GreaterThanEqual(GenMathematics.Vectors.sbyte4,GenMathematics.Vectors.sbyte4)">
            <summary>
            Component-wise 'greater than or equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.sbyte4.GreaterThanEqual(GenMathematics.Vectors.sbyte4@,GenMathematics.Vectors.sbyte4@,GenMathematics.Vectors.bool4@)">
            <summary>
            Component-wise 'greater than or equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.sbyte4.Equal(GenMathematics.Vectors.sbyte4,GenMathematics.Vectors.sbyte4)">
            <summary>
            Component-wise 'equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.sbyte4.Equal(GenMathematics.Vectors.sbyte4@,GenMathematics.Vectors.sbyte4@,GenMathematics.Vectors.bool4@)">
            <summary>
            Component-wise 'equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.sbyte4.NotEqual(GenMathematics.Vectors.sbyte4,GenMathematics.Vectors.sbyte4)">
            <summary>
            Component-wise 'not equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.sbyte4.NotEqual(GenMathematics.Vectors.sbyte4@,GenMathematics.Vectors.sbyte4@,GenMathematics.Vectors.bool4@)">
            <summary>
            Component-wise 'not equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.sbyte4.op_Implicit(System.SByte)~GenMathematics.Vectors.sbyte4">
            <summary>
            Creates a vector by filling all components with the value
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.sbyte4.op_Explicit(GenMathematics.Vectors.byte4)~GenMathematics.Vectors.sbyte4">
            <summary>
            Converts byte4 to sbyte4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.sbyte4.op_Explicit(GenMathematics.Vectors.short4)~GenMathematics.Vectors.sbyte4">
            <summary>
            Converts short4 to sbyte4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.sbyte4.op_Explicit(GenMathematics.Vectors.ushort4)~GenMathematics.Vectors.sbyte4">
            <summary>
            Converts ushort4 to sbyte4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.sbyte4.op_Explicit(GenMathematics.Vectors.int4)~GenMathematics.Vectors.sbyte4">
            <summary>
            Converts int4 to sbyte4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.sbyte4.op_Explicit(GenMathematics.Vectors.uint4)~GenMathematics.Vectors.sbyte4">
            <summary>
            Converts uint4 to sbyte4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.sbyte4.op_Explicit(GenMathematics.Vectors.long4)~GenMathematics.Vectors.sbyte4">
            <summary>
            Converts long4 to sbyte4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.sbyte4.op_Explicit(GenMathematics.Vectors.ulong4)~GenMathematics.Vectors.sbyte4">
            <summary>
            Converts ulong4 to sbyte4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.sbyte4.op_Explicit(GenMathematics.Vectors.half4)~GenMathematics.Vectors.sbyte4">
            <summary>
            Converts half4 to sbyte4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.sbyte4.op_Explicit(GenMathematics.Vectors.float4)~GenMathematics.Vectors.sbyte4">
            <summary>
            Converts float4 to sbyte4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.sbyte4.op_Explicit(GenMathematics.Vectors.double4)~GenMathematics.Vectors.sbyte4">
            <summary>
            Converts double4 to sbyte4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.sbyte4.op_LessThan(GenMathematics.Vectors.sbyte4,GenMathematics.Vectors.sbyte4)">
            <summary>
            Component-wise 'less than' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.sbyte4.op_GreaterThan(GenMathematics.Vectors.sbyte4,GenMathematics.Vectors.sbyte4)">
            <summary>
            Component-wise 'greater than' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.sbyte4.op_LessThanOrEqual(GenMathematics.Vectors.sbyte4,GenMathematics.Vectors.sbyte4)">
            <summary>
            Component-wise 'less than or equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.sbyte4.op_GreaterThanOrEqual(GenMathematics.Vectors.sbyte4,GenMathematics.Vectors.sbyte4)">
            <summary>
            Component-wise 'greater than or equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.sbyte4.op_Equality(GenMathematics.Vectors.sbyte4,GenMathematics.Vectors.sbyte4)">
            <summary>
            Component-wise 'equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.sbyte4.op_Inequality(GenMathematics.Vectors.sbyte4,GenMathematics.Vectors.sbyte4)">
            <summary>
            Component-wise 'not equal' operation
            </summary>
        </member>
        <member name="T:GenMathematics.Vectors.short2">
            <summary>
            Vector of size 2 of type <see cref="T:System.Int16"/>
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.short2.Zero">
            <summary>
            Vector with zero in all components
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.short2.One">
            <summary>
            Vector with unit in all components
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.short2.UnitX">
            <summary>
            A vector with unit in the component 'x' and zeroes in the remaining components
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.short2.UnitY">
            <summary>
            A vector with unit in the component 'y' and zeroes in the remaining components
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.short2.x">
            <summary>
            Component 'x' of the vector
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.short2.y">
            <summary>
            Component 'y' of the vector
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short2.xx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short2.yx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short2.yy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.short2.#ctor(System.Int16)">
            <summary>
            Constructs a vector by filling all components with the value
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.short2.#ctor(System.Int16,System.Int16)">
            <summary>
            Constructs a vector from component values
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short2.Item(System.Int32)">
            <summary>
            Returns the vector component by index
            </summary>
            <param name="index">Index within [0,1]</param>
            <exception cref="T:System.IndexOutOfRangeException">Exception if the index is outside the vector size</exception>
        </member>
        <member name="M:GenMathematics.Vectors.short2.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Vectors.short2.Equals(GenMathematics.Vectors.short2)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Vectors.short2.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Vectors.short2.CompareTo(GenMathematics.Vectors.short2)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Vectors.short2.ToString">
            <summary>
            Returns the object's state information as a string
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.short2.LessThan(GenMathematics.Vectors.short2,GenMathematics.Vectors.short2)">
            <summary>
            Component-wise 'less than' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.short2.LessThan(GenMathematics.Vectors.short2@,GenMathematics.Vectors.short2@,GenMathematics.Vectors.bool2@)">
            <summary>
            Component-wise 'less than' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.short2.GreaterThan(GenMathematics.Vectors.short2,GenMathematics.Vectors.short2)">
            <summary>
            Component-wise 'greater than' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.short2.GreaterThan(GenMathematics.Vectors.short2@,GenMathematics.Vectors.short2@,GenMathematics.Vectors.bool2@)">
            <summary>
            Component-wise 'greater than' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.short2.LessThanEqual(GenMathematics.Vectors.short2,GenMathematics.Vectors.short2)">
            <summary>
            Component-wise 'less than or equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.short2.LessThanEqual(GenMathematics.Vectors.short2@,GenMathematics.Vectors.short2@,GenMathematics.Vectors.bool2@)">
            <summary>
            Component-wise 'less than or equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.short2.GreaterThanEqual(GenMathematics.Vectors.short2,GenMathematics.Vectors.short2)">
            <summary>
            Component-wise 'greater than or equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.short2.GreaterThanEqual(GenMathematics.Vectors.short2@,GenMathematics.Vectors.short2@,GenMathematics.Vectors.bool2@)">
            <summary>
            Component-wise 'greater than or equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.short2.Equal(GenMathematics.Vectors.short2,GenMathematics.Vectors.short2)">
            <summary>
            Component-wise 'equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.short2.Equal(GenMathematics.Vectors.short2@,GenMathematics.Vectors.short2@,GenMathematics.Vectors.bool2@)">
            <summary>
            Component-wise 'equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.short2.NotEqual(GenMathematics.Vectors.short2,GenMathematics.Vectors.short2)">
            <summary>
            Component-wise 'not equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.short2.NotEqual(GenMathematics.Vectors.short2@,GenMathematics.Vectors.short2@,GenMathematics.Vectors.bool2@)">
            <summary>
            Component-wise 'not equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.short2.op_Implicit(System.Int16)~GenMathematics.Vectors.short2">
            <summary>
            Creates a vector by filling all components with the value
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.short2.op_Explicit(GenMathematics.Vectors.ushort2)~GenMathematics.Vectors.short2">
            <summary>
            Converts ushort2 to short2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.short2.op_Explicit(GenMathematics.Vectors.int2)~GenMathematics.Vectors.short2">
            <summary>
            Converts int2 to short2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.short2.op_Explicit(GenMathematics.Vectors.uint2)~GenMathematics.Vectors.short2">
            <summary>
            Converts uint2 to short2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.short2.op_Explicit(GenMathematics.Vectors.long2)~GenMathematics.Vectors.short2">
            <summary>
            Converts long2 to short2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.short2.op_Explicit(GenMathematics.Vectors.ulong2)~GenMathematics.Vectors.short2">
            <summary>
            Converts ulong2 to short2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.short2.op_Explicit(GenMathematics.Vectors.half2)~GenMathematics.Vectors.short2">
            <summary>
            Converts half2 to short2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.short2.op_Explicit(GenMathematics.Vectors.float2)~GenMathematics.Vectors.short2">
            <summary>
            Converts float2 to short2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.short2.op_Explicit(GenMathematics.Vectors.double2)~GenMathematics.Vectors.short2">
            <summary>
            Converts double2 to short2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.short2.op_Implicit(GenMathematics.Vectors.byte2)~GenMathematics.Vectors.short2">
            <summary>
            Converts byte2 to short2
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.short2.op_Implicit(GenMathematics.Vectors.sbyte2)~GenMathematics.Vectors.short2">
            <summary>
            Converts sbyte2 to short2
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.short2.op_LessThan(GenMathematics.Vectors.short2,GenMathematics.Vectors.short2)">
            <summary>
            Component-wise 'less than' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.short2.op_GreaterThan(GenMathematics.Vectors.short2,GenMathematics.Vectors.short2)">
            <summary>
            Component-wise 'greater than' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.short2.op_LessThanOrEqual(GenMathematics.Vectors.short2,GenMathematics.Vectors.short2)">
            <summary>
            Component-wise 'less than or equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.short2.op_GreaterThanOrEqual(GenMathematics.Vectors.short2,GenMathematics.Vectors.short2)">
            <summary>
            Component-wise 'greater than or equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.short2.op_Equality(GenMathematics.Vectors.short2,GenMathematics.Vectors.short2)">
            <summary>
            Component-wise 'equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.short2.op_Inequality(GenMathematics.Vectors.short2,GenMathematics.Vectors.short2)">
            <summary>
            Component-wise 'not equal' operation
            </summary>
        </member>
        <member name="T:GenMathematics.Vectors.short3">
            <summary>
            Vector of size 3 of type <see cref="T:System.Int16"/>
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.short3.Zero">
            <summary>
            Vector with zero in all components
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.short3.One">
            <summary>
            Vector with unit in all components
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.short3.UnitX">
            <summary>
            A vector with unit in the component 'x' and zeroes in the remaining components
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.short3.UnitY">
            <summary>
            A vector with unit in the component 'y' and zeroes in the remaining components
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.short3.UnitZ">
            <summary>
            A vector with unit in the component 'z' and zeroes in the remaining components
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.short3.x">
            <summary>
            Component 'x' of the vector
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.short3.y">
            <summary>
            Component 'y' of the vector
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.short3.z">
            <summary>
            Component 'z' of the vector
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short3.xx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short3.xy">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short3.xz">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short3.yx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short3.yy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short3.yz">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short3.zx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short3.zy">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short3.zz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short3.xxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short3.xxy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short3.xxz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short3.xyx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short3.xyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short3.xzx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short3.xzy">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short3.xzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short3.yxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short3.yxy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short3.yxz">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short3.yyx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short3.yyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short3.yyz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short3.yzx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short3.yzy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short3.yzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short3.zxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short3.zxy">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short3.zxz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short3.zyx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short3.zyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short3.zyz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short3.zzx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short3.zzy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short3.zzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.short3.#ctor(System.Int16)">
            <summary>
            Constructs a vector by filling all components with the value
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.short3.#ctor(System.Int16,GenMathematics.Vectors.short2)">
            <summary>
            Constructs a vector from component values
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.short3.#ctor(System.Int16,System.Int16,System.Int16)">
            <summary>
            Constructs a vector from component values
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.short3.#ctor(GenMathematics.Vectors.short2,System.Int16)">
            <summary>
            Constructs a vector from component values
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short3.Item(System.Int32)">
            <summary>
            Returns the vector component by index
            </summary>
            <param name="index">Index within [0,2]</param>
            <exception cref="T:System.IndexOutOfRangeException">Exception if the index is outside the vector size</exception>
        </member>
        <member name="M:GenMathematics.Vectors.short3.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Vectors.short3.Equals(GenMathematics.Vectors.short3)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Vectors.short3.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Vectors.short3.CompareTo(GenMathematics.Vectors.short3)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Vectors.short3.ToString">
            <summary>
            Returns the object's state information as a string
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.short3.LessThan(GenMathematics.Vectors.short3,GenMathematics.Vectors.short3)">
            <summary>
            Component-wise 'less than' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.short3.LessThan(GenMathematics.Vectors.short3@,GenMathematics.Vectors.short3@,GenMathematics.Vectors.bool3@)">
            <summary>
            Component-wise 'less than' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.short3.GreaterThan(GenMathematics.Vectors.short3,GenMathematics.Vectors.short3)">
            <summary>
            Component-wise 'greater than' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.short3.GreaterThan(GenMathematics.Vectors.short3@,GenMathematics.Vectors.short3@,GenMathematics.Vectors.bool3@)">
            <summary>
            Component-wise 'greater than' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.short3.LessThanEqual(GenMathematics.Vectors.short3,GenMathematics.Vectors.short3)">
            <summary>
            Component-wise 'less than or equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.short3.LessThanEqual(GenMathematics.Vectors.short3@,GenMathematics.Vectors.short3@,GenMathematics.Vectors.bool3@)">
            <summary>
            Component-wise 'less than or equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.short3.GreaterThanEqual(GenMathematics.Vectors.short3,GenMathematics.Vectors.short3)">
            <summary>
            Component-wise 'greater than or equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.short3.GreaterThanEqual(GenMathematics.Vectors.short3@,GenMathematics.Vectors.short3@,GenMathematics.Vectors.bool3@)">
            <summary>
            Component-wise 'greater than or equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.short3.Equal(GenMathematics.Vectors.short3,GenMathematics.Vectors.short3)">
            <summary>
            Component-wise 'equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.short3.Equal(GenMathematics.Vectors.short3@,GenMathematics.Vectors.short3@,GenMathematics.Vectors.bool3@)">
            <summary>
            Component-wise 'equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.short3.NotEqual(GenMathematics.Vectors.short3,GenMathematics.Vectors.short3)">
            <summary>
            Component-wise 'not equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.short3.NotEqual(GenMathematics.Vectors.short3@,GenMathematics.Vectors.short3@,GenMathematics.Vectors.bool3@)">
            <summary>
            Component-wise 'not equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.short3.op_Implicit(System.Int16)~GenMathematics.Vectors.short3">
            <summary>
            Creates a vector by filling all components with the value
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.short3.op_Explicit(GenMathematics.Vectors.ushort3)~GenMathematics.Vectors.short3">
            <summary>
            Converts ushort3 to short3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.short3.op_Explicit(GenMathematics.Vectors.int3)~GenMathematics.Vectors.short3">
            <summary>
            Converts int3 to short3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.short3.op_Explicit(GenMathematics.Vectors.uint3)~GenMathematics.Vectors.short3">
            <summary>
            Converts uint3 to short3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.short3.op_Explicit(GenMathematics.Vectors.long3)~GenMathematics.Vectors.short3">
            <summary>
            Converts long3 to short3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.short3.op_Explicit(GenMathematics.Vectors.ulong3)~GenMathematics.Vectors.short3">
            <summary>
            Converts ulong3 to short3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.short3.op_Explicit(GenMathematics.Vectors.half3)~GenMathematics.Vectors.short3">
            <summary>
            Converts half3 to short3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.short3.op_Explicit(GenMathematics.Vectors.float3)~GenMathematics.Vectors.short3">
            <summary>
            Converts float3 to short3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.short3.op_Explicit(GenMathematics.Vectors.double3)~GenMathematics.Vectors.short3">
            <summary>
            Converts double3 to short3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.short3.op_Implicit(GenMathematics.Vectors.byte3)~GenMathematics.Vectors.short3">
            <summary>
            Converts byte3 to short3
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.short3.op_Implicit(GenMathematics.Vectors.sbyte3)~GenMathematics.Vectors.short3">
            <summary>
            Converts sbyte3 to short3
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.short3.op_LessThan(GenMathematics.Vectors.short3,GenMathematics.Vectors.short3)">
            <summary>
            Component-wise 'less than' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.short3.op_GreaterThan(GenMathematics.Vectors.short3,GenMathematics.Vectors.short3)">
            <summary>
            Component-wise 'greater than' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.short3.op_LessThanOrEqual(GenMathematics.Vectors.short3,GenMathematics.Vectors.short3)">
            <summary>
            Component-wise 'less than or equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.short3.op_GreaterThanOrEqual(GenMathematics.Vectors.short3,GenMathematics.Vectors.short3)">
            <summary>
            Component-wise 'greater than or equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.short3.op_Equality(GenMathematics.Vectors.short3,GenMathematics.Vectors.short3)">
            <summary>
            Component-wise 'equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.short3.op_Inequality(GenMathematics.Vectors.short3,GenMathematics.Vectors.short3)">
            <summary>
            Component-wise 'not equal' operation
            </summary>
        </member>
        <member name="T:GenMathematics.Vectors.short4">
            <summary>
            Vector of size 4 of type <see cref="T:System.Int16"/>
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.short4.Zero">
            <summary>
            Vector with zero in all components
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.short4.One">
            <summary>
            Vector with unit in all components
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.short4.UnitX">
            <summary>
            A vector with unit in the component 'x' and zeroes in the remaining components
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.short4.UnitY">
            <summary>
            A vector with unit in the component 'y' and zeroes in the remaining components
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.short4.UnitZ">
            <summary>
            A vector with unit in the component 'z' and zeroes in the remaining components
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.short4.UnitW">
            <summary>
            A vector with unit in the component 'w' and zeroes in the remaining components
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.short4.x">
            <summary>
            Component 'x' of the vector
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.short4.y">
            <summary>
            Component 'y' of the vector
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.short4.z">
            <summary>
            Component 'z' of the vector
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.short4.w">
            <summary>
            Component 'w' of the vector
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.xx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.xy">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.xz">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.xw">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.yx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.yy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.yz">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.yw">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.zx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.zy">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.zz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.zw">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.wx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.wy">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.wz">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.ww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.xxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.xxy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.xxz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.xxw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.xyx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.xyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.xyz">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.xyw">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.xzx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.xzy">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.xzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.xzw">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.xwx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.xwy">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.xwz">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.xww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.yxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.yxy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.yxz">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.yxw">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.yyx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.yyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.yyz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.yyw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.yzx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.yzy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.yzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.yzw">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.ywx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.ywy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.ywz">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.yww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.zxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.zxy">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.zxz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.zxw">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.zyx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.zyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.zyz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.zyw">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.zzx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.zzy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.zzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.zzw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.zwx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.zwy">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.zwz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.zww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.wxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.wxy">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.wxz">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.wxw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.wyx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.wyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.wyz">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.wyw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.wzx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.wzy">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.wzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.wzw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.wwx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.wwy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.wwz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.www">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.xxxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.xxxy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.xxxz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.xxxw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.xxyx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.xxyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.xxyz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.xxyw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.xxzx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.xxzy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.xxzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.xxzw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.xxwx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.xxwy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.xxwz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.xxww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.xyxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.xyxy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.xyxz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.xyxw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.xyyx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.xyyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.xyyz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.xyyw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.xyzx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.xyzy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.xyzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.xywx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.xywy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.xywz">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.xyww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.xzxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.xzxy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.xzxz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.xzxw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.xzyx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.xzyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.xzyz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.xzyw">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.xzzx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.xzzy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.xzzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.xzzw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.xzwx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.xzwy">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.xzwz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.xzww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.xwxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.xwxy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.xwxz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.xwxw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.xwyx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.xwyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.xwyz">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.xwyw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.xwzx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.xwzy">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.xwzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.xwzw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.xwwx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.xwwy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.xwwz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.xwww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.yxxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.yxxy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.yxxz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.yxxw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.yxyx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.yxyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.yxyz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.yxyw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.yxzx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.yxzy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.yxzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.yxzw">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.yxwx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.yxwy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.yxwz">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.yxww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.yyxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.yyxy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.yyxz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.yyxw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.yyyx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.yyyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.yyyz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.yyyw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.yyzx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.yyzy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.yyzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.yyzw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.yywx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.yywy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.yywz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.yyww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.yzxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.yzxy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.yzxz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.yzxw">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.yzyx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.yzyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.yzyz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.yzyw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.yzzx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.yzzy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.yzzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.yzzw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.yzwx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.yzwy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.yzwz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.yzww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.ywxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.ywxy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.ywxz">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.ywxw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.ywyx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.ywyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.ywyz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.ywyw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.ywzx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.ywzy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.ywzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.ywzw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.ywwx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.ywwy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.ywwz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.ywww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.zxxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.zxxy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.zxxz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.zxxw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.zxyx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.zxyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.zxyz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.zxyw">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.zxzx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.zxzy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.zxzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.zxzw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.zxwx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.zxwy">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.zxwz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.zxww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.zyxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.zyxy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.zyxz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.zyxw">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.zyyx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.zyyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.zyyz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.zyyw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.zyzx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.zyzy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.zyzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.zyzw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.zywx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.zywy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.zywz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.zyww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.zzxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.zzxy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.zzxz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.zzxw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.zzyx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.zzyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.zzyz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.zzyw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.zzzx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.zzzy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.zzzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.zzzw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.zzwx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.zzwy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.zzwz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.zzww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.zwxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.zwxy">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.zwxz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.zwxw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.zwyx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.zwyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.zwyz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.zwyw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.zwzx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.zwzy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.zwzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.zwzw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.zwwx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.zwwy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.zwwz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.zwww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.wxxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.wxxy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.wxxz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.wxxw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.wxyx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.wxyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.wxyz">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.wxyw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.wxzx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.wxzy">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.wxzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.wxzw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.wxwx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.wxwy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.wxwz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.wxww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.wyxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.wyxy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.wyxz">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.wyxw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.wyyx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.wyyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.wyyz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.wyyw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.wyzx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.wyzy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.wyzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.wyzw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.wywx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.wywy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.wywz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.wyww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.wzxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.wzxy">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.wzxz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.wzxw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.wzyx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.wzyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.wzyz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.wzyw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.wzzx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.wzzy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.wzzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.wzzw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.wzwx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.wzwy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.wzwz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.wzww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.wwxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.wwxy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.wwxz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.wwxw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.wwyx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.wwyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.wwyz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.wwyw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.wwzx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.wwzy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.wwzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.wwzw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.wwwx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.wwwy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.wwwz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.wwww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.short4.#ctor(System.Int16)">
            <summary>
            Constructs a vector by filling all components with the value
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.short4.#ctor(System.Int16,GenMathematics.Vectors.short3)">
            <summary>
            Constructs a vector from component values
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.short4.#ctor(System.Int16,GenMathematics.Vectors.short2,System.Int16)">
            <summary>
            Constructs a vector from component values
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.short4.#ctor(System.Int16,System.Int16,GenMathematics.Vectors.short2)">
            <summary>
            Constructs a vector from component values
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.short4.#ctor(System.Int16,System.Int16,System.Int16,System.Int16)">
            <summary>
            Constructs a vector from component values
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.short4.#ctor(GenMathematics.Vectors.short2,GenMathematics.Vectors.short2)">
            <summary>
            Constructs a vector from component values
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.short4.#ctor(GenMathematics.Vectors.short2,System.Int16,System.Int16)">
            <summary>
            Constructs a vector from component values
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.short4.#ctor(GenMathematics.Vectors.short3,System.Int16)">
            <summary>
            Constructs a vector from component values
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.short4.Item(System.Int32)">
            <summary>
            Returns the vector component by index
            </summary>
            <param name="index">Index within [0,3]</param>
            <exception cref="T:System.IndexOutOfRangeException">Exception if the index is outside the vector size</exception>
        </member>
        <member name="M:GenMathematics.Vectors.short4.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Vectors.short4.Equals(GenMathematics.Vectors.short4)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Vectors.short4.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Vectors.short4.CompareTo(GenMathematics.Vectors.short4)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Vectors.short4.ToString">
            <summary>
            Returns the object's state information as a string
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.short4.LessThan(GenMathematics.Vectors.short4,GenMathematics.Vectors.short4)">
            <summary>
            Component-wise 'less than' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.short4.LessThan(GenMathematics.Vectors.short4@,GenMathematics.Vectors.short4@,GenMathematics.Vectors.bool4@)">
            <summary>
            Component-wise 'less than' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.short4.GreaterThan(GenMathematics.Vectors.short4,GenMathematics.Vectors.short4)">
            <summary>
            Component-wise 'greater than' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.short4.GreaterThan(GenMathematics.Vectors.short4@,GenMathematics.Vectors.short4@,GenMathematics.Vectors.bool4@)">
            <summary>
            Component-wise 'greater than' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.short4.LessThanEqual(GenMathematics.Vectors.short4,GenMathematics.Vectors.short4)">
            <summary>
            Component-wise 'less than or equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.short4.LessThanEqual(GenMathematics.Vectors.short4@,GenMathematics.Vectors.short4@,GenMathematics.Vectors.bool4@)">
            <summary>
            Component-wise 'less than or equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.short4.GreaterThanEqual(GenMathematics.Vectors.short4,GenMathematics.Vectors.short4)">
            <summary>
            Component-wise 'greater than or equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.short4.GreaterThanEqual(GenMathematics.Vectors.short4@,GenMathematics.Vectors.short4@,GenMathematics.Vectors.bool4@)">
            <summary>
            Component-wise 'greater than or equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.short4.Equal(GenMathematics.Vectors.short4,GenMathematics.Vectors.short4)">
            <summary>
            Component-wise 'equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.short4.Equal(GenMathematics.Vectors.short4@,GenMathematics.Vectors.short4@,GenMathematics.Vectors.bool4@)">
            <summary>
            Component-wise 'equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.short4.NotEqual(GenMathematics.Vectors.short4,GenMathematics.Vectors.short4)">
            <summary>
            Component-wise 'not equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.short4.NotEqual(GenMathematics.Vectors.short4@,GenMathematics.Vectors.short4@,GenMathematics.Vectors.bool4@)">
            <summary>
            Component-wise 'not equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.short4.op_Implicit(System.Int16)~GenMathematics.Vectors.short4">
            <summary>
            Creates a vector by filling all components with the value
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.short4.op_Explicit(GenMathematics.Vectors.ushort4)~GenMathematics.Vectors.short4">
            <summary>
            Converts ushort4 to short4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.short4.op_Explicit(GenMathematics.Vectors.int4)~GenMathematics.Vectors.short4">
            <summary>
            Converts int4 to short4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.short4.op_Explicit(GenMathematics.Vectors.uint4)~GenMathematics.Vectors.short4">
            <summary>
            Converts uint4 to short4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.short4.op_Explicit(GenMathematics.Vectors.long4)~GenMathematics.Vectors.short4">
            <summary>
            Converts long4 to short4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.short4.op_Explicit(GenMathematics.Vectors.ulong4)~GenMathematics.Vectors.short4">
            <summary>
            Converts ulong4 to short4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.short4.op_Explicit(GenMathematics.Vectors.half4)~GenMathematics.Vectors.short4">
            <summary>
            Converts half4 to short4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.short4.op_Explicit(GenMathematics.Vectors.float4)~GenMathematics.Vectors.short4">
            <summary>
            Converts float4 to short4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.short4.op_Explicit(GenMathematics.Vectors.double4)~GenMathematics.Vectors.short4">
            <summary>
            Converts double4 to short4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.short4.op_Implicit(GenMathematics.Vectors.byte4)~GenMathematics.Vectors.short4">
            <summary>
            Converts byte4 to short4
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.short4.op_Implicit(GenMathematics.Vectors.sbyte4)~GenMathematics.Vectors.short4">
            <summary>
            Converts sbyte4 to short4
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.short4.op_LessThan(GenMathematics.Vectors.short4,GenMathematics.Vectors.short4)">
            <summary>
            Component-wise 'less than' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.short4.op_GreaterThan(GenMathematics.Vectors.short4,GenMathematics.Vectors.short4)">
            <summary>
            Component-wise 'greater than' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.short4.op_LessThanOrEqual(GenMathematics.Vectors.short4,GenMathematics.Vectors.short4)">
            <summary>
            Component-wise 'less than or equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.short4.op_GreaterThanOrEqual(GenMathematics.Vectors.short4,GenMathematics.Vectors.short4)">
            <summary>
            Component-wise 'greater than or equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.short4.op_Equality(GenMathematics.Vectors.short4,GenMathematics.Vectors.short4)">
            <summary>
            Component-wise 'equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.short4.op_Inequality(GenMathematics.Vectors.short4,GenMathematics.Vectors.short4)">
            <summary>
            Component-wise 'not equal' operation
            </summary>
        </member>
        <member name="T:GenMathematics.Vectors.uint2">
            <summary>
            Vector of size 2 of type <see cref="T:System.UInt32"/>
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.uint2.Zero">
            <summary>
            Vector with zero in all components
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.uint2.One">
            <summary>
            Vector with unit in all components
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.uint2.UnitX">
            <summary>
            A vector with unit in the component 'x' and zeroes in the remaining components
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.uint2.UnitY">
            <summary>
            A vector with unit in the component 'y' and zeroes in the remaining components
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.uint2.x">
            <summary>
            Component 'x' of the vector
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.uint2.y">
            <summary>
            Component 'y' of the vector
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint2.xx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint2.yx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint2.yy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint2.#ctor(System.UInt32)">
            <summary>
            Constructs a vector by filling all components with the value
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint2.#ctor(System.UInt32,System.UInt32)">
            <summary>
            Constructs a vector from component values
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint2.Item(System.Int32)">
            <summary>
            Returns the vector component by index
            </summary>
            <param name="index">Index within [0,1]</param>
            <exception cref="T:System.IndexOutOfRangeException">Exception if the index is outside the vector size</exception>
        </member>
        <member name="M:GenMathematics.Vectors.uint2.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Vectors.uint2.Equals(GenMathematics.Vectors.uint2)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Vectors.uint2.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Vectors.uint2.CompareTo(GenMathematics.Vectors.uint2)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Vectors.uint2.ToString">
            <summary>
            Returns the object's state information as a string
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint2.Add(GenMathematics.Vectors.uint2,GenMathematics.Vectors.uint2)">
            <summary>
            Component-wise 'add' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint2.Add(GenMathematics.Vectors.uint2,System.UInt32)">
            <summary>
            Component-wise 'add' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint2.Add(System.UInt32,GenMathematics.Vectors.uint2)">
            <summary>
            Component-wise 'add' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint2.Subtract(GenMathematics.Vectors.uint2,GenMathematics.Vectors.uint2)">
            <summary>
            Component-wise 'subtract' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint2.Subtract(GenMathematics.Vectors.uint2,System.UInt32)">
            <summary>
            Component-wise 'subtract' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint2.Subtract(System.UInt32,GenMathematics.Vectors.uint2)">
            <summary>
            Component-wise 'subtract' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint2.Multiply(GenMathematics.Vectors.uint2,GenMathematics.Vectors.uint2)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint2.Multiply(GenMathematics.Vectors.uint2,System.UInt32)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint2.Multiply(System.UInt32,GenMathematics.Vectors.uint2)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint2.Divide(GenMathematics.Vectors.uint2,GenMathematics.Vectors.uint2)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint2.Divide(GenMathematics.Vectors.uint2,System.UInt32)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint2.Divide(System.UInt32,GenMathematics.Vectors.uint2)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint2.Remainder(GenMathematics.Vectors.uint2,GenMathematics.Vectors.uint2)">
            <summary>
            Component-wise 'remainder' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint2.Remainder(GenMathematics.Vectors.uint2,System.UInt32)">
            <summary>
            Component-wise 'remainder' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint2.Remainder(System.UInt32,GenMathematics.Vectors.uint2)">
            <summary>
            Component-wise 'remainder' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint2.And(GenMathematics.Vectors.uint2,GenMathematics.Vectors.uint2)">
            <summary>
            Component-wise 'and' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint2.And(GenMathematics.Vectors.uint2,System.UInt32)">
            <summary>
            Component-wise 'and' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint2.And(System.UInt32,GenMathematics.Vectors.uint2)">
            <summary>
            Component-wise 'and' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint2.Or(GenMathematics.Vectors.uint2,GenMathematics.Vectors.uint2)">
            <summary>
            Component-wise 'or' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint2.Or(GenMathematics.Vectors.uint2,System.UInt32)">
            <summary>
            Component-wise 'or' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint2.Or(System.UInt32,GenMathematics.Vectors.uint2)">
            <summary>
            Component-wise 'or' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint2.Xor(GenMathematics.Vectors.uint2,GenMathematics.Vectors.uint2)">
            <summary>
            Component-wise 'xor' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint2.Xor(GenMathematics.Vectors.uint2,System.UInt32)">
            <summary>
            Component-wise 'xor' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint2.Xor(System.UInt32,GenMathematics.Vectors.uint2)">
            <summary>
            Component-wise 'xor' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint2.ShiftLeft(GenMathematics.Vectors.uint2,GenMathematics.Vectors.int2)">
            <summary>
            Component-wise 'shift-left' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint2.ShiftLeft(GenMathematics.Vectors.uint2@,GenMathematics.Vectors.int2@,GenMathematics.Vectors.uint2@)">
            <summary>
            Component-wise 'shift-left' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint2.ShiftRight(GenMathematics.Vectors.uint2,GenMathematics.Vectors.int2)">
            <summary>
            Component-wise 'shift-righ' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint2.ShiftRight(GenMathematics.Vectors.uint2@,GenMathematics.Vectors.int2@,GenMathematics.Vectors.uint2@)">
            <summary>
            Component-wise 'shift-righ' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint2.Not(GenMathematics.Vectors.uint2)">
            <summary>
            Component-wise 'not' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint2.op_Addition(GenMathematics.Vectors.uint2,GenMathematics.Vectors.uint2)">
            <summary>
            Component-wise 'add' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint2.op_Addition(GenMathematics.Vectors.uint2,System.UInt32)">
            <summary>
            Component-wise 'add' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint2.op_Addition(System.UInt32,GenMathematics.Vectors.uint2)">
            <summary>
            Component-wise 'add' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint2.op_Subtraction(GenMathematics.Vectors.uint2,GenMathematics.Vectors.uint2)">
            <summary>
            Component-wise 'subtract' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint2.op_Subtraction(GenMathematics.Vectors.uint2,System.UInt32)">
            <summary>
            Component-wise 'subtract' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint2.op_Subtraction(System.UInt32,GenMathematics.Vectors.uint2)">
            <summary>
            Component-wise 'subtract' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint2.op_Multiply(GenMathematics.Vectors.uint2,GenMathematics.Vectors.uint2)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint2.op_Multiply(GenMathematics.Vectors.uint2,System.UInt32)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint2.op_Multiply(System.UInt32,GenMathematics.Vectors.uint2)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint2.op_Division(GenMathematics.Vectors.uint2,GenMathematics.Vectors.uint2)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint2.op_Division(GenMathematics.Vectors.uint2,System.UInt32)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint2.op_Division(System.UInt32,GenMathematics.Vectors.uint2)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint2.op_Modulus(GenMathematics.Vectors.uint2,GenMathematics.Vectors.uint2)">
            <summary>
            Component-wise 'remainder' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint2.op_Modulus(GenMathematics.Vectors.uint2,System.UInt32)">
            <summary>
            Component-wise 'remainder' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint2.op_Modulus(System.UInt32,GenMathematics.Vectors.uint2)">
            <summary>
            Component-wise 'remainder' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint2.op_BitwiseAnd(GenMathematics.Vectors.uint2,GenMathematics.Vectors.uint2)">
            <summary>
            Component-wise 'and' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint2.op_BitwiseAnd(GenMathematics.Vectors.uint2,System.UInt32)">
            <summary>
            Component-wise 'and' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint2.op_BitwiseAnd(System.UInt32,GenMathematics.Vectors.uint2)">
            <summary>
            Component-wise 'and' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint2.op_BitwiseOr(GenMathematics.Vectors.uint2,GenMathematics.Vectors.uint2)">
            <summary>
            Component-wise 'or' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint2.op_BitwiseOr(GenMathematics.Vectors.uint2,System.UInt32)">
            <summary>
            Component-wise 'or' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint2.op_BitwiseOr(System.UInt32,GenMathematics.Vectors.uint2)">
            <summary>
            Component-wise 'or' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint2.op_ExclusiveOr(GenMathematics.Vectors.uint2,GenMathematics.Vectors.uint2)">
            <summary>
            Component-wise 'xor' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint2.op_ExclusiveOr(GenMathematics.Vectors.uint2,System.UInt32)">
            <summary>
            Component-wise 'xor' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint2.op_ExclusiveOr(System.UInt32,GenMathematics.Vectors.uint2)">
            <summary>
            Component-wise 'xor' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint2.op_LeftShift(GenMathematics.Vectors.uint2,GenMathematics.Vectors.int2)">
            <summary>
            Component-wise 'shift-left' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint2.op_RightShift(GenMathematics.Vectors.uint2,GenMathematics.Vectors.int2)">
            <summary>
            Component-wise 'shift-righ' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint2.op_OnesComplement(GenMathematics.Vectors.uint2)">
            <summary>
            Component-wise 'not' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint2.LessThan(GenMathematics.Vectors.uint2,GenMathematics.Vectors.uint2)">
            <summary>
            Component-wise 'less than' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint2.LessThan(GenMathematics.Vectors.uint2@,GenMathematics.Vectors.uint2@,GenMathematics.Vectors.bool2@)">
            <summary>
            Component-wise 'less than' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint2.GreaterThan(GenMathematics.Vectors.uint2,GenMathematics.Vectors.uint2)">
            <summary>
            Component-wise 'greater than' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint2.GreaterThan(GenMathematics.Vectors.uint2@,GenMathematics.Vectors.uint2@,GenMathematics.Vectors.bool2@)">
            <summary>
            Component-wise 'greater than' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint2.LessThanEqual(GenMathematics.Vectors.uint2,GenMathematics.Vectors.uint2)">
            <summary>
            Component-wise 'less than or equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint2.LessThanEqual(GenMathematics.Vectors.uint2@,GenMathematics.Vectors.uint2@,GenMathematics.Vectors.bool2@)">
            <summary>
            Component-wise 'less than or equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint2.GreaterThanEqual(GenMathematics.Vectors.uint2,GenMathematics.Vectors.uint2)">
            <summary>
            Component-wise 'greater than or equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint2.GreaterThanEqual(GenMathematics.Vectors.uint2@,GenMathematics.Vectors.uint2@,GenMathematics.Vectors.bool2@)">
            <summary>
            Component-wise 'greater than or equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint2.Equal(GenMathematics.Vectors.uint2,GenMathematics.Vectors.uint2)">
            <summary>
            Component-wise 'equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint2.Equal(GenMathematics.Vectors.uint2@,GenMathematics.Vectors.uint2@,GenMathematics.Vectors.bool2@)">
            <summary>
            Component-wise 'equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint2.NotEqual(GenMathematics.Vectors.uint2,GenMathematics.Vectors.uint2)">
            <summary>
            Component-wise 'not equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint2.NotEqual(GenMathematics.Vectors.uint2@,GenMathematics.Vectors.uint2@,GenMathematics.Vectors.bool2@)">
            <summary>
            Component-wise 'not equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint2.op_Implicit(System.UInt32)~GenMathematics.Vectors.uint2">
            <summary>
            Creates a vector by filling all components with the value
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint2.op_Explicit(GenMathematics.Vectors.sbyte2)~GenMathematics.Vectors.uint2">
            <summary>
            Converts sbyte2 to uint2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint2.op_Explicit(GenMathematics.Vectors.short2)~GenMathematics.Vectors.uint2">
            <summary>
            Converts short2 to uint2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint2.op_Explicit(GenMathematics.Vectors.int2)~GenMathematics.Vectors.uint2">
            <summary>
            Converts int2 to uint2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint2.op_Explicit(GenMathematics.Vectors.long2)~GenMathematics.Vectors.uint2">
            <summary>
            Converts long2 to uint2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint2.op_Explicit(GenMathematics.Vectors.ulong2)~GenMathematics.Vectors.uint2">
            <summary>
            Converts ulong2 to uint2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint2.op_Explicit(GenMathematics.Vectors.half2)~GenMathematics.Vectors.uint2">
            <summary>
            Converts half2 to uint2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint2.op_Explicit(GenMathematics.Vectors.float2)~GenMathematics.Vectors.uint2">
            <summary>
            Converts float2 to uint2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint2.op_Explicit(GenMathematics.Vectors.double2)~GenMathematics.Vectors.uint2">
            <summary>
            Converts double2 to uint2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint2.op_Implicit(GenMathematics.Vectors.byte2)~GenMathematics.Vectors.uint2">
            <summary>
            Converts byte2 to uint2
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint2.op_Implicit(GenMathematics.Vectors.ushort2)~GenMathematics.Vectors.uint2">
            <summary>
            Converts ushort2 to uint2
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint2.op_LessThan(GenMathematics.Vectors.uint2,GenMathematics.Vectors.uint2)">
            <summary>
            Component-wise 'less than' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint2.op_GreaterThan(GenMathematics.Vectors.uint2,GenMathematics.Vectors.uint2)">
            <summary>
            Component-wise 'greater than' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint2.op_LessThanOrEqual(GenMathematics.Vectors.uint2,GenMathematics.Vectors.uint2)">
            <summary>
            Component-wise 'less than or equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint2.op_GreaterThanOrEqual(GenMathematics.Vectors.uint2,GenMathematics.Vectors.uint2)">
            <summary>
            Component-wise 'greater than or equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint2.op_Equality(GenMathematics.Vectors.uint2,GenMathematics.Vectors.uint2)">
            <summary>
            Component-wise 'equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint2.op_Inequality(GenMathematics.Vectors.uint2,GenMathematics.Vectors.uint2)">
            <summary>
            Component-wise 'not equal' operation
            </summary>
        </member>
        <member name="T:GenMathematics.Vectors.uint3">
            <summary>
            Vector of size 3 of type <see cref="T:System.UInt32"/>
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.uint3.Zero">
            <summary>
            Vector with zero in all components
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.uint3.One">
            <summary>
            Vector with unit in all components
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.uint3.UnitX">
            <summary>
            A vector with unit in the component 'x' and zeroes in the remaining components
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.uint3.UnitY">
            <summary>
            A vector with unit in the component 'y' and zeroes in the remaining components
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.uint3.UnitZ">
            <summary>
            A vector with unit in the component 'z' and zeroes in the remaining components
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.uint3.x">
            <summary>
            Component 'x' of the vector
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.uint3.y">
            <summary>
            Component 'y' of the vector
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.uint3.z">
            <summary>
            Component 'z' of the vector
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint3.xx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint3.xy">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint3.xz">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint3.yx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint3.yy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint3.yz">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint3.zx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint3.zy">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint3.zz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint3.xxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint3.xxy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint3.xxz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint3.xyx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint3.xyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint3.xzx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint3.xzy">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint3.xzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint3.yxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint3.yxy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint3.yxz">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint3.yyx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint3.yyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint3.yyz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint3.yzx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint3.yzy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint3.yzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint3.zxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint3.zxy">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint3.zxz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint3.zyx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint3.zyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint3.zyz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint3.zzx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint3.zzy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint3.zzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint3.#ctor(System.UInt32)">
            <summary>
            Constructs a vector by filling all components with the value
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint3.#ctor(System.UInt32,GenMathematics.Vectors.uint2)">
            <summary>
            Constructs a vector from component values
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint3.#ctor(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Constructs a vector from component values
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint3.#ctor(GenMathematics.Vectors.uint2,System.UInt32)">
            <summary>
            Constructs a vector from component values
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint3.Item(System.Int32)">
            <summary>
            Returns the vector component by index
            </summary>
            <param name="index">Index within [0,2]</param>
            <exception cref="T:System.IndexOutOfRangeException">Exception if the index is outside the vector size</exception>
        </member>
        <member name="M:GenMathematics.Vectors.uint3.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Vectors.uint3.Equals(GenMathematics.Vectors.uint3)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Vectors.uint3.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Vectors.uint3.CompareTo(GenMathematics.Vectors.uint3)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Vectors.uint3.ToString">
            <summary>
            Returns the object's state information as a string
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint3.Add(GenMathematics.Vectors.uint3,GenMathematics.Vectors.uint3)">
            <summary>
            Component-wise 'add' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint3.Add(GenMathematics.Vectors.uint3,System.UInt32)">
            <summary>
            Component-wise 'add' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint3.Add(System.UInt32,GenMathematics.Vectors.uint3)">
            <summary>
            Component-wise 'add' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint3.Add(GenMathematics.Vectors.uint3@,GenMathematics.Vectors.uint3@,GenMathematics.Vectors.uint3@)">
            <summary>
            Component-wise 'add' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint3.Add(GenMathematics.Vectors.uint3@,System.UInt32,GenMathematics.Vectors.uint3@)">
            <summary>
            Component-wise 'add' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint3.Add(System.UInt32,GenMathematics.Vectors.uint3@,GenMathematics.Vectors.uint3@)">
            <summary>
            Component-wise 'add' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint3.Subtract(GenMathematics.Vectors.uint3,GenMathematics.Vectors.uint3)">
            <summary>
            Component-wise 'subtract' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint3.Subtract(GenMathematics.Vectors.uint3,System.UInt32)">
            <summary>
            Component-wise 'subtract' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint3.Subtract(System.UInt32,GenMathematics.Vectors.uint3)">
            <summary>
            Component-wise 'subtract' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint3.Subtract(GenMathematics.Vectors.uint3@,GenMathematics.Vectors.uint3@,GenMathematics.Vectors.uint3@)">
            <summary>
            Component-wise 'subtract' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint3.Subtract(GenMathematics.Vectors.uint3@,System.UInt32,GenMathematics.Vectors.uint3@)">
            <summary>
            Component-wise 'subtract' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint3.Subtract(System.UInt32,GenMathematics.Vectors.uint3@,GenMathematics.Vectors.uint3@)">
            <summary>
            Component-wise 'subtract' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint3.Multiply(GenMathematics.Vectors.uint3,GenMathematics.Vectors.uint3)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint3.Multiply(GenMathematics.Vectors.uint3,System.UInt32)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint3.Multiply(System.UInt32,GenMathematics.Vectors.uint3)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint3.Multiply(GenMathematics.Vectors.uint3@,GenMathematics.Vectors.uint3@,GenMathematics.Vectors.uint3@)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint3.Multiply(GenMathematics.Vectors.uint3@,System.UInt32,GenMathematics.Vectors.uint3@)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint3.Multiply(System.UInt32,GenMathematics.Vectors.uint3@,GenMathematics.Vectors.uint3@)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint3.Divide(GenMathematics.Vectors.uint3,GenMathematics.Vectors.uint3)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint3.Divide(GenMathematics.Vectors.uint3,System.UInt32)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint3.Divide(System.UInt32,GenMathematics.Vectors.uint3)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint3.Divide(GenMathematics.Vectors.uint3@,GenMathematics.Vectors.uint3@,GenMathematics.Vectors.uint3@)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint3.Divide(GenMathematics.Vectors.uint3@,System.UInt32,GenMathematics.Vectors.uint3@)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint3.Divide(System.UInt32,GenMathematics.Vectors.uint3@,GenMathematics.Vectors.uint3@)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint3.Remainder(GenMathematics.Vectors.uint3,GenMathematics.Vectors.uint3)">
            <summary>
            Component-wise 'remainder' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint3.Remainder(GenMathematics.Vectors.uint3,System.UInt32)">
            <summary>
            Component-wise 'remainder' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint3.Remainder(System.UInt32,GenMathematics.Vectors.uint3)">
            <summary>
            Component-wise 'remainder' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint3.Remainder(GenMathematics.Vectors.uint3@,GenMathematics.Vectors.uint3@,GenMathematics.Vectors.uint3@)">
            <summary>
            Component-wise 'remainder' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint3.Remainder(GenMathematics.Vectors.uint3@,System.UInt32,GenMathematics.Vectors.uint3@)">
            <summary>
            Component-wise 'remainder' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint3.Remainder(System.UInt32,GenMathematics.Vectors.uint3@,GenMathematics.Vectors.uint3@)">
            <summary>
            Component-wise 'remainder' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint3.And(GenMathematics.Vectors.uint3,GenMathematics.Vectors.uint3)">
            <summary>
            Component-wise 'and' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint3.And(GenMathematics.Vectors.uint3,System.UInt32)">
            <summary>
            Component-wise 'and' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint3.And(System.UInt32,GenMathematics.Vectors.uint3)">
            <summary>
            Component-wise 'and' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint3.And(GenMathematics.Vectors.uint3@,GenMathematics.Vectors.uint3@,GenMathematics.Vectors.uint3@)">
            <summary>
            Component-wise 'and' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint3.And(GenMathematics.Vectors.uint3@,System.UInt32,GenMathematics.Vectors.uint3@)">
            <summary>
            Component-wise 'and' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint3.And(System.UInt32,GenMathematics.Vectors.uint3@,GenMathematics.Vectors.uint3@)">
            <summary>
            Component-wise 'and' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint3.Or(GenMathematics.Vectors.uint3,GenMathematics.Vectors.uint3)">
            <summary>
            Component-wise 'or' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint3.Or(GenMathematics.Vectors.uint3,System.UInt32)">
            <summary>
            Component-wise 'or' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint3.Or(System.UInt32,GenMathematics.Vectors.uint3)">
            <summary>
            Component-wise 'or' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint3.Or(GenMathematics.Vectors.uint3@,GenMathematics.Vectors.uint3@,GenMathematics.Vectors.uint3@)">
            <summary>
            Component-wise 'or' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint3.Or(GenMathematics.Vectors.uint3@,System.UInt32,GenMathematics.Vectors.uint3@)">
            <summary>
            Component-wise 'or' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint3.Or(System.UInt32,GenMathematics.Vectors.uint3@,GenMathematics.Vectors.uint3@)">
            <summary>
            Component-wise 'or' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint3.Xor(GenMathematics.Vectors.uint3,GenMathematics.Vectors.uint3)">
            <summary>
            Component-wise 'xor' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint3.Xor(GenMathematics.Vectors.uint3,System.UInt32)">
            <summary>
            Component-wise 'xor' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint3.Xor(System.UInt32,GenMathematics.Vectors.uint3)">
            <summary>
            Component-wise 'xor' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint3.Xor(GenMathematics.Vectors.uint3@,GenMathematics.Vectors.uint3@,GenMathematics.Vectors.uint3@)">
            <summary>
            Component-wise 'xor' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint3.Xor(GenMathematics.Vectors.uint3@,System.UInt32,GenMathematics.Vectors.uint3@)">
            <summary>
            Component-wise 'xor' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint3.Xor(System.UInt32,GenMathematics.Vectors.uint3@,GenMathematics.Vectors.uint3@)">
            <summary>
            Component-wise 'xor' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint3.ShiftLeft(GenMathematics.Vectors.uint3,GenMathematics.Vectors.int3)">
            <summary>
            Component-wise 'shift-left' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint3.ShiftLeft(GenMathematics.Vectors.uint3@,GenMathematics.Vectors.int3@,GenMathematics.Vectors.uint3@)">
            <summary>
            Component-wise 'shift-left' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint3.ShiftRight(GenMathematics.Vectors.uint3,GenMathematics.Vectors.int3)">
            <summary>
            Component-wise 'shift-righ' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint3.ShiftRight(GenMathematics.Vectors.uint3@,GenMathematics.Vectors.int3@,GenMathematics.Vectors.uint3@)">
            <summary>
            Component-wise 'shift-righ' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint3.Not(GenMathematics.Vectors.uint3)">
            <summary>
            Component-wise 'not' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint3.Not(GenMathematics.Vectors.uint3@,GenMathematics.Vectors.uint3@)">
            <summary>
            Component-wise 'not' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint3.op_Addition(GenMathematics.Vectors.uint3,GenMathematics.Vectors.uint3)">
            <summary>
            Component-wise 'add' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint3.op_Addition(GenMathematics.Vectors.uint3,System.UInt32)">
            <summary>
            Component-wise 'add' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint3.op_Addition(System.UInt32,GenMathematics.Vectors.uint3)">
            <summary>
            Component-wise 'add' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint3.op_Subtraction(GenMathematics.Vectors.uint3,GenMathematics.Vectors.uint3)">
            <summary>
            Component-wise 'subtract' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint3.op_Subtraction(GenMathematics.Vectors.uint3,System.UInt32)">
            <summary>
            Component-wise 'subtract' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint3.op_Subtraction(System.UInt32,GenMathematics.Vectors.uint3)">
            <summary>
            Component-wise 'subtract' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint3.op_Multiply(GenMathematics.Vectors.uint3,GenMathematics.Vectors.uint3)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint3.op_Multiply(GenMathematics.Vectors.uint3,System.UInt32)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint3.op_Multiply(System.UInt32,GenMathematics.Vectors.uint3)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint3.op_Division(GenMathematics.Vectors.uint3,GenMathematics.Vectors.uint3)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint3.op_Division(GenMathematics.Vectors.uint3,System.UInt32)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint3.op_Division(System.UInt32,GenMathematics.Vectors.uint3)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint3.op_Modulus(GenMathematics.Vectors.uint3,GenMathematics.Vectors.uint3)">
            <summary>
            Component-wise 'remainder' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint3.op_Modulus(GenMathematics.Vectors.uint3,System.UInt32)">
            <summary>
            Component-wise 'remainder' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint3.op_Modulus(System.UInt32,GenMathematics.Vectors.uint3)">
            <summary>
            Component-wise 'remainder' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint3.op_BitwiseAnd(GenMathematics.Vectors.uint3,GenMathematics.Vectors.uint3)">
            <summary>
            Component-wise 'and' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint3.op_BitwiseAnd(GenMathematics.Vectors.uint3,System.UInt32)">
            <summary>
            Component-wise 'and' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint3.op_BitwiseAnd(System.UInt32,GenMathematics.Vectors.uint3)">
            <summary>
            Component-wise 'and' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint3.op_BitwiseOr(GenMathematics.Vectors.uint3,GenMathematics.Vectors.uint3)">
            <summary>
            Component-wise 'or' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint3.op_BitwiseOr(GenMathematics.Vectors.uint3,System.UInt32)">
            <summary>
            Component-wise 'or' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint3.op_BitwiseOr(System.UInt32,GenMathematics.Vectors.uint3)">
            <summary>
            Component-wise 'or' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint3.op_ExclusiveOr(GenMathematics.Vectors.uint3,GenMathematics.Vectors.uint3)">
            <summary>
            Component-wise 'xor' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint3.op_ExclusiveOr(GenMathematics.Vectors.uint3,System.UInt32)">
            <summary>
            Component-wise 'xor' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint3.op_ExclusiveOr(System.UInt32,GenMathematics.Vectors.uint3)">
            <summary>
            Component-wise 'xor' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint3.op_LeftShift(GenMathematics.Vectors.uint3,GenMathematics.Vectors.int3)">
            <summary>
            Component-wise 'shift-left' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint3.op_RightShift(GenMathematics.Vectors.uint3,GenMathematics.Vectors.int3)">
            <summary>
            Component-wise 'shift-righ' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint3.op_OnesComplement(GenMathematics.Vectors.uint3)">
            <summary>
            Component-wise 'not' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint3.LessThan(GenMathematics.Vectors.uint3,GenMathematics.Vectors.uint3)">
            <summary>
            Component-wise 'less than' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint3.LessThan(GenMathematics.Vectors.uint3@,GenMathematics.Vectors.uint3@,GenMathematics.Vectors.bool3@)">
            <summary>
            Component-wise 'less than' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint3.GreaterThan(GenMathematics.Vectors.uint3,GenMathematics.Vectors.uint3)">
            <summary>
            Component-wise 'greater than' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint3.GreaterThan(GenMathematics.Vectors.uint3@,GenMathematics.Vectors.uint3@,GenMathematics.Vectors.bool3@)">
            <summary>
            Component-wise 'greater than' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint3.LessThanEqual(GenMathematics.Vectors.uint3,GenMathematics.Vectors.uint3)">
            <summary>
            Component-wise 'less than or equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint3.LessThanEqual(GenMathematics.Vectors.uint3@,GenMathematics.Vectors.uint3@,GenMathematics.Vectors.bool3@)">
            <summary>
            Component-wise 'less than or equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint3.GreaterThanEqual(GenMathematics.Vectors.uint3,GenMathematics.Vectors.uint3)">
            <summary>
            Component-wise 'greater than or equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint3.GreaterThanEqual(GenMathematics.Vectors.uint3@,GenMathematics.Vectors.uint3@,GenMathematics.Vectors.bool3@)">
            <summary>
            Component-wise 'greater than or equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint3.Equal(GenMathematics.Vectors.uint3,GenMathematics.Vectors.uint3)">
            <summary>
            Component-wise 'equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint3.Equal(GenMathematics.Vectors.uint3@,GenMathematics.Vectors.uint3@,GenMathematics.Vectors.bool3@)">
            <summary>
            Component-wise 'equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint3.NotEqual(GenMathematics.Vectors.uint3,GenMathematics.Vectors.uint3)">
            <summary>
            Component-wise 'not equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint3.NotEqual(GenMathematics.Vectors.uint3@,GenMathematics.Vectors.uint3@,GenMathematics.Vectors.bool3@)">
            <summary>
            Component-wise 'not equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint3.op_Implicit(System.UInt32)~GenMathematics.Vectors.uint3">
            <summary>
            Creates a vector by filling all components with the value
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint3.op_Explicit(GenMathematics.Vectors.sbyte3)~GenMathematics.Vectors.uint3">
            <summary>
            Converts sbyte3 to uint3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint3.op_Explicit(GenMathematics.Vectors.short3)~GenMathematics.Vectors.uint3">
            <summary>
            Converts short3 to uint3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint3.op_Explicit(GenMathematics.Vectors.int3)~GenMathematics.Vectors.uint3">
            <summary>
            Converts int3 to uint3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint3.op_Explicit(GenMathematics.Vectors.long3)~GenMathematics.Vectors.uint3">
            <summary>
            Converts long3 to uint3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint3.op_Explicit(GenMathematics.Vectors.ulong3)~GenMathematics.Vectors.uint3">
            <summary>
            Converts ulong3 to uint3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint3.op_Explicit(GenMathematics.Vectors.half3)~GenMathematics.Vectors.uint3">
            <summary>
            Converts half3 to uint3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint3.op_Explicit(GenMathematics.Vectors.float3)~GenMathematics.Vectors.uint3">
            <summary>
            Converts float3 to uint3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint3.op_Explicit(GenMathematics.Vectors.double3)~GenMathematics.Vectors.uint3">
            <summary>
            Converts double3 to uint3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint3.op_Implicit(GenMathematics.Vectors.byte3)~GenMathematics.Vectors.uint3">
            <summary>
            Converts byte3 to uint3
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint3.op_Implicit(GenMathematics.Vectors.ushort3)~GenMathematics.Vectors.uint3">
            <summary>
            Converts ushort3 to uint3
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint3.op_LessThan(GenMathematics.Vectors.uint3,GenMathematics.Vectors.uint3)">
            <summary>
            Component-wise 'less than' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint3.op_GreaterThan(GenMathematics.Vectors.uint3,GenMathematics.Vectors.uint3)">
            <summary>
            Component-wise 'greater than' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint3.op_LessThanOrEqual(GenMathematics.Vectors.uint3,GenMathematics.Vectors.uint3)">
            <summary>
            Component-wise 'less than or equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint3.op_GreaterThanOrEqual(GenMathematics.Vectors.uint3,GenMathematics.Vectors.uint3)">
            <summary>
            Component-wise 'greater than or equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint3.op_Equality(GenMathematics.Vectors.uint3,GenMathematics.Vectors.uint3)">
            <summary>
            Component-wise 'equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint3.op_Inequality(GenMathematics.Vectors.uint3,GenMathematics.Vectors.uint3)">
            <summary>
            Component-wise 'not equal' operation
            </summary>
        </member>
        <member name="T:GenMathematics.Vectors.uint4">
            <summary>
            Vector of size 4 of type <see cref="T:System.UInt32"/>
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.uint4.Zero">
            <summary>
            Vector with zero in all components
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.uint4.One">
            <summary>
            Vector with unit in all components
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.uint4.UnitX">
            <summary>
            A vector with unit in the component 'x' and zeroes in the remaining components
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.uint4.UnitY">
            <summary>
            A vector with unit in the component 'y' and zeroes in the remaining components
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.uint4.UnitZ">
            <summary>
            A vector with unit in the component 'z' and zeroes in the remaining components
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.uint4.UnitW">
            <summary>
            A vector with unit in the component 'w' and zeroes in the remaining components
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.uint4.x">
            <summary>
            Component 'x' of the vector
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.uint4.y">
            <summary>
            Component 'y' of the vector
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.uint4.z">
            <summary>
            Component 'z' of the vector
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.uint4.w">
            <summary>
            Component 'w' of the vector
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.xx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.xy">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.xz">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.xw">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.yx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.yy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.yz">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.yw">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.zx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.zy">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.zz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.zw">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.wx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.wy">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.wz">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.ww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.xxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.xxy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.xxz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.xxw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.xyx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.xyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.xyz">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.xyw">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.xzx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.xzy">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.xzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.xzw">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.xwx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.xwy">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.xwz">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.xww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.yxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.yxy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.yxz">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.yxw">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.yyx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.yyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.yyz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.yyw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.yzx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.yzy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.yzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.yzw">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.ywx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.ywy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.ywz">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.yww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.zxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.zxy">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.zxz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.zxw">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.zyx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.zyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.zyz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.zyw">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.zzx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.zzy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.zzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.zzw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.zwx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.zwy">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.zwz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.zww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.wxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.wxy">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.wxz">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.wxw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.wyx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.wyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.wyz">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.wyw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.wzx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.wzy">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.wzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.wzw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.wwx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.wwy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.wwz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.www">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.xxxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.xxxy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.xxxz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.xxxw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.xxyx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.xxyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.xxyz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.xxyw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.xxzx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.xxzy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.xxzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.xxzw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.xxwx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.xxwy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.xxwz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.xxww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.xyxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.xyxy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.xyxz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.xyxw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.xyyx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.xyyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.xyyz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.xyyw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.xyzx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.xyzy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.xyzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.xywx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.xywy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.xywz">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.xyww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.xzxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.xzxy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.xzxz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.xzxw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.xzyx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.xzyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.xzyz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.xzyw">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.xzzx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.xzzy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.xzzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.xzzw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.xzwx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.xzwy">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.xzwz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.xzww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.xwxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.xwxy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.xwxz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.xwxw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.xwyx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.xwyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.xwyz">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.xwyw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.xwzx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.xwzy">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.xwzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.xwzw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.xwwx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.xwwy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.xwwz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.xwww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.yxxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.yxxy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.yxxz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.yxxw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.yxyx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.yxyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.yxyz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.yxyw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.yxzx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.yxzy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.yxzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.yxzw">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.yxwx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.yxwy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.yxwz">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.yxww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.yyxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.yyxy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.yyxz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.yyxw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.yyyx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.yyyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.yyyz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.yyyw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.yyzx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.yyzy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.yyzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.yyzw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.yywx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.yywy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.yywz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.yyww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.yzxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.yzxy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.yzxz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.yzxw">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.yzyx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.yzyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.yzyz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.yzyw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.yzzx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.yzzy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.yzzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.yzzw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.yzwx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.yzwy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.yzwz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.yzww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.ywxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.ywxy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.ywxz">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.ywxw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.ywyx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.ywyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.ywyz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.ywyw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.ywzx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.ywzy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.ywzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.ywzw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.ywwx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.ywwy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.ywwz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.ywww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.zxxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.zxxy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.zxxz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.zxxw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.zxyx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.zxyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.zxyz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.zxyw">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.zxzx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.zxzy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.zxzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.zxzw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.zxwx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.zxwy">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.zxwz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.zxww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.zyxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.zyxy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.zyxz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.zyxw">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.zyyx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.zyyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.zyyz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.zyyw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.zyzx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.zyzy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.zyzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.zyzw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.zywx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.zywy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.zywz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.zyww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.zzxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.zzxy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.zzxz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.zzxw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.zzyx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.zzyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.zzyz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.zzyw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.zzzx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.zzzy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.zzzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.zzzw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.zzwx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.zzwy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.zzwz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.zzww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.zwxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.zwxy">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.zwxz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.zwxw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.zwyx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.zwyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.zwyz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.zwyw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.zwzx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.zwzy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.zwzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.zwzw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.zwwx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.zwwy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.zwwz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.zwww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.wxxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.wxxy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.wxxz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.wxxw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.wxyx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.wxyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.wxyz">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.wxyw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.wxzx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.wxzy">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.wxzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.wxzw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.wxwx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.wxwy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.wxwz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.wxww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.wyxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.wyxy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.wyxz">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.wyxw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.wyyx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.wyyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.wyyz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.wyyw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.wyzx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.wyzy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.wyzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.wyzw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.wywx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.wywy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.wywz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.wyww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.wzxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.wzxy">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.wzxz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.wzxw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.wzyx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.wzyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.wzyz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.wzyw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.wzzx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.wzzy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.wzzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.wzzw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.wzwx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.wzwy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.wzwz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.wzww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.wwxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.wwxy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.wwxz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.wwxw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.wwyx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.wwyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.wwyz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.wwyw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.wwzx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.wwzy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.wwzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.wwzw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.wwwx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.wwwy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.wwwz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.wwww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint4.#ctor(System.UInt32)">
            <summary>
            Constructs a vector by filling all components with the value
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint4.#ctor(System.UInt32,GenMathematics.Vectors.uint3)">
            <summary>
            Constructs a vector from component values
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint4.#ctor(System.UInt32,GenMathematics.Vectors.uint2,System.UInt32)">
            <summary>
            Constructs a vector from component values
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint4.#ctor(System.UInt32,System.UInt32,GenMathematics.Vectors.uint2)">
            <summary>
            Constructs a vector from component values
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint4.#ctor(System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Constructs a vector from component values
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint4.#ctor(GenMathematics.Vectors.uint2,GenMathematics.Vectors.uint2)">
            <summary>
            Constructs a vector from component values
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint4.#ctor(GenMathematics.Vectors.uint2,System.UInt32,System.UInt32)">
            <summary>
            Constructs a vector from component values
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint4.#ctor(GenMathematics.Vectors.uint3,System.UInt32)">
            <summary>
            Constructs a vector from component values
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.uint4.Item(System.Int32)">
            <summary>
            Returns the vector component by index
            </summary>
            <param name="index">Index within [0,3]</param>
            <exception cref="T:System.IndexOutOfRangeException">Exception if the index is outside the vector size</exception>
        </member>
        <member name="M:GenMathematics.Vectors.uint4.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Vectors.uint4.Equals(GenMathematics.Vectors.uint4)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Vectors.uint4.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Vectors.uint4.CompareTo(GenMathematics.Vectors.uint4)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Vectors.uint4.ToString">
            <summary>
            Returns the object's state information as a string
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint4.Add(GenMathematics.Vectors.uint4,GenMathematics.Vectors.uint4)">
            <summary>
            Component-wise 'add' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint4.Add(GenMathematics.Vectors.uint4,System.UInt32)">
            <summary>
            Component-wise 'add' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint4.Add(System.UInt32,GenMathematics.Vectors.uint4)">
            <summary>
            Component-wise 'add' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint4.Add(GenMathematics.Vectors.uint4@,GenMathematics.Vectors.uint4@,GenMathematics.Vectors.uint4@)">
            <summary>
            Component-wise 'add' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint4.Add(GenMathematics.Vectors.uint4@,System.UInt32,GenMathematics.Vectors.uint4@)">
            <summary>
            Component-wise 'add' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint4.Add(System.UInt32,GenMathematics.Vectors.uint4@,GenMathematics.Vectors.uint4@)">
            <summary>
            Component-wise 'add' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint4.Subtract(GenMathematics.Vectors.uint4,GenMathematics.Vectors.uint4)">
            <summary>
            Component-wise 'subtract' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint4.Subtract(GenMathematics.Vectors.uint4,System.UInt32)">
            <summary>
            Component-wise 'subtract' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint4.Subtract(System.UInt32,GenMathematics.Vectors.uint4)">
            <summary>
            Component-wise 'subtract' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint4.Subtract(GenMathematics.Vectors.uint4@,GenMathematics.Vectors.uint4@,GenMathematics.Vectors.uint4@)">
            <summary>
            Component-wise 'subtract' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint4.Subtract(GenMathematics.Vectors.uint4@,System.UInt32,GenMathematics.Vectors.uint4@)">
            <summary>
            Component-wise 'subtract' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint4.Subtract(System.UInt32,GenMathematics.Vectors.uint4@,GenMathematics.Vectors.uint4@)">
            <summary>
            Component-wise 'subtract' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint4.Multiply(GenMathematics.Vectors.uint4,GenMathematics.Vectors.uint4)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint4.Multiply(GenMathematics.Vectors.uint4,System.UInt32)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint4.Multiply(System.UInt32,GenMathematics.Vectors.uint4)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint4.Multiply(GenMathematics.Vectors.uint4@,GenMathematics.Vectors.uint4@,GenMathematics.Vectors.uint4@)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint4.Multiply(GenMathematics.Vectors.uint4@,System.UInt32,GenMathematics.Vectors.uint4@)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint4.Multiply(System.UInt32,GenMathematics.Vectors.uint4@,GenMathematics.Vectors.uint4@)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint4.Divide(GenMathematics.Vectors.uint4,GenMathematics.Vectors.uint4)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint4.Divide(GenMathematics.Vectors.uint4,System.UInt32)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint4.Divide(System.UInt32,GenMathematics.Vectors.uint4)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint4.Divide(GenMathematics.Vectors.uint4@,GenMathematics.Vectors.uint4@,GenMathematics.Vectors.uint4@)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint4.Divide(GenMathematics.Vectors.uint4@,System.UInt32,GenMathematics.Vectors.uint4@)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint4.Divide(System.UInt32,GenMathematics.Vectors.uint4@,GenMathematics.Vectors.uint4@)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint4.Remainder(GenMathematics.Vectors.uint4,GenMathematics.Vectors.uint4)">
            <summary>
            Component-wise 'remainder' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint4.Remainder(GenMathematics.Vectors.uint4,System.UInt32)">
            <summary>
            Component-wise 'remainder' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint4.Remainder(System.UInt32,GenMathematics.Vectors.uint4)">
            <summary>
            Component-wise 'remainder' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint4.Remainder(GenMathematics.Vectors.uint4@,GenMathematics.Vectors.uint4@,GenMathematics.Vectors.uint4@)">
            <summary>
            Component-wise 'remainder' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint4.Remainder(GenMathematics.Vectors.uint4@,System.UInt32,GenMathematics.Vectors.uint4@)">
            <summary>
            Component-wise 'remainder' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint4.Remainder(System.UInt32,GenMathematics.Vectors.uint4@,GenMathematics.Vectors.uint4@)">
            <summary>
            Component-wise 'remainder' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint4.And(GenMathematics.Vectors.uint4,GenMathematics.Vectors.uint4)">
            <summary>
            Component-wise 'and' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint4.And(GenMathematics.Vectors.uint4,System.UInt32)">
            <summary>
            Component-wise 'and' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint4.And(System.UInt32,GenMathematics.Vectors.uint4)">
            <summary>
            Component-wise 'and' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint4.And(GenMathematics.Vectors.uint4@,GenMathematics.Vectors.uint4@,GenMathematics.Vectors.uint4@)">
            <summary>
            Component-wise 'and' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint4.And(GenMathematics.Vectors.uint4@,System.UInt32,GenMathematics.Vectors.uint4@)">
            <summary>
            Component-wise 'and' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint4.And(System.UInt32,GenMathematics.Vectors.uint4@,GenMathematics.Vectors.uint4@)">
            <summary>
            Component-wise 'and' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint4.Or(GenMathematics.Vectors.uint4,GenMathematics.Vectors.uint4)">
            <summary>
            Component-wise 'or' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint4.Or(GenMathematics.Vectors.uint4,System.UInt32)">
            <summary>
            Component-wise 'or' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint4.Or(System.UInt32,GenMathematics.Vectors.uint4)">
            <summary>
            Component-wise 'or' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint4.Or(GenMathematics.Vectors.uint4@,GenMathematics.Vectors.uint4@,GenMathematics.Vectors.uint4@)">
            <summary>
            Component-wise 'or' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint4.Or(GenMathematics.Vectors.uint4@,System.UInt32,GenMathematics.Vectors.uint4@)">
            <summary>
            Component-wise 'or' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint4.Or(System.UInt32,GenMathematics.Vectors.uint4@,GenMathematics.Vectors.uint4@)">
            <summary>
            Component-wise 'or' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint4.Xor(GenMathematics.Vectors.uint4,GenMathematics.Vectors.uint4)">
            <summary>
            Component-wise 'xor' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint4.Xor(GenMathematics.Vectors.uint4,System.UInt32)">
            <summary>
            Component-wise 'xor' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint4.Xor(System.UInt32,GenMathematics.Vectors.uint4)">
            <summary>
            Component-wise 'xor' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint4.Xor(GenMathematics.Vectors.uint4@,GenMathematics.Vectors.uint4@,GenMathematics.Vectors.uint4@)">
            <summary>
            Component-wise 'xor' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint4.Xor(GenMathematics.Vectors.uint4@,System.UInt32,GenMathematics.Vectors.uint4@)">
            <summary>
            Component-wise 'xor' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint4.Xor(System.UInt32,GenMathematics.Vectors.uint4@,GenMathematics.Vectors.uint4@)">
            <summary>
            Component-wise 'xor' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint4.ShiftLeft(GenMathematics.Vectors.uint4,GenMathematics.Vectors.int4)">
            <summary>
            Component-wise 'shift-left' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint4.ShiftLeft(GenMathematics.Vectors.uint4@,GenMathematics.Vectors.int4@,GenMathematics.Vectors.uint4@)">
            <summary>
            Component-wise 'shift-left' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint4.ShiftRight(GenMathematics.Vectors.uint4,GenMathematics.Vectors.int4)">
            <summary>
            Component-wise 'shift-righ' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint4.ShiftRight(GenMathematics.Vectors.uint4@,GenMathematics.Vectors.int4@,GenMathematics.Vectors.uint4@)">
            <summary>
            Component-wise 'shift-righ' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint4.Not(GenMathematics.Vectors.uint4)">
            <summary>
            Component-wise 'not' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint4.Not(GenMathematics.Vectors.uint4@,GenMathematics.Vectors.uint4@)">
            <summary>
            Component-wise 'not' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint4.op_Addition(GenMathematics.Vectors.uint4,GenMathematics.Vectors.uint4)">
            <summary>
            Component-wise 'add' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint4.op_Addition(GenMathematics.Vectors.uint4,System.UInt32)">
            <summary>
            Component-wise 'add' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint4.op_Addition(System.UInt32,GenMathematics.Vectors.uint4)">
            <summary>
            Component-wise 'add' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint4.op_Subtraction(GenMathematics.Vectors.uint4,GenMathematics.Vectors.uint4)">
            <summary>
            Component-wise 'subtract' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint4.op_Subtraction(GenMathematics.Vectors.uint4,System.UInt32)">
            <summary>
            Component-wise 'subtract' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint4.op_Subtraction(System.UInt32,GenMathematics.Vectors.uint4)">
            <summary>
            Component-wise 'subtract' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint4.op_Multiply(GenMathematics.Vectors.uint4,GenMathematics.Vectors.uint4)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint4.op_Multiply(GenMathematics.Vectors.uint4,System.UInt32)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint4.op_Multiply(System.UInt32,GenMathematics.Vectors.uint4)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint4.op_Division(GenMathematics.Vectors.uint4,GenMathematics.Vectors.uint4)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint4.op_Division(GenMathematics.Vectors.uint4,System.UInt32)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint4.op_Division(System.UInt32,GenMathematics.Vectors.uint4)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint4.op_Modulus(GenMathematics.Vectors.uint4,GenMathematics.Vectors.uint4)">
            <summary>
            Component-wise 'remainder' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint4.op_Modulus(GenMathematics.Vectors.uint4,System.UInt32)">
            <summary>
            Component-wise 'remainder' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint4.op_Modulus(System.UInt32,GenMathematics.Vectors.uint4)">
            <summary>
            Component-wise 'remainder' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint4.op_BitwiseAnd(GenMathematics.Vectors.uint4,GenMathematics.Vectors.uint4)">
            <summary>
            Component-wise 'and' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint4.op_BitwiseAnd(GenMathematics.Vectors.uint4,System.UInt32)">
            <summary>
            Component-wise 'and' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint4.op_BitwiseAnd(System.UInt32,GenMathematics.Vectors.uint4)">
            <summary>
            Component-wise 'and' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint4.op_BitwiseOr(GenMathematics.Vectors.uint4,GenMathematics.Vectors.uint4)">
            <summary>
            Component-wise 'or' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint4.op_BitwiseOr(GenMathematics.Vectors.uint4,System.UInt32)">
            <summary>
            Component-wise 'or' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint4.op_BitwiseOr(System.UInt32,GenMathematics.Vectors.uint4)">
            <summary>
            Component-wise 'or' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint4.op_ExclusiveOr(GenMathematics.Vectors.uint4,GenMathematics.Vectors.uint4)">
            <summary>
            Component-wise 'xor' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint4.op_ExclusiveOr(GenMathematics.Vectors.uint4,System.UInt32)">
            <summary>
            Component-wise 'xor' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint4.op_ExclusiveOr(System.UInt32,GenMathematics.Vectors.uint4)">
            <summary>
            Component-wise 'xor' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint4.op_LeftShift(GenMathematics.Vectors.uint4,GenMathematics.Vectors.int4)">
            <summary>
            Component-wise 'shift-left' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint4.op_RightShift(GenMathematics.Vectors.uint4,GenMathematics.Vectors.int4)">
            <summary>
            Component-wise 'shift-righ' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint4.op_OnesComplement(GenMathematics.Vectors.uint4)">
            <summary>
            Component-wise 'not' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint4.LessThan(GenMathematics.Vectors.uint4,GenMathematics.Vectors.uint4)">
            <summary>
            Component-wise 'less than' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint4.LessThan(GenMathematics.Vectors.uint4@,GenMathematics.Vectors.uint4@,GenMathematics.Vectors.bool4@)">
            <summary>
            Component-wise 'less than' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint4.GreaterThan(GenMathematics.Vectors.uint4,GenMathematics.Vectors.uint4)">
            <summary>
            Component-wise 'greater than' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint4.GreaterThan(GenMathematics.Vectors.uint4@,GenMathematics.Vectors.uint4@,GenMathematics.Vectors.bool4@)">
            <summary>
            Component-wise 'greater than' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint4.LessThanEqual(GenMathematics.Vectors.uint4,GenMathematics.Vectors.uint4)">
            <summary>
            Component-wise 'less than or equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint4.LessThanEqual(GenMathematics.Vectors.uint4@,GenMathematics.Vectors.uint4@,GenMathematics.Vectors.bool4@)">
            <summary>
            Component-wise 'less than or equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint4.GreaterThanEqual(GenMathematics.Vectors.uint4,GenMathematics.Vectors.uint4)">
            <summary>
            Component-wise 'greater than or equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint4.GreaterThanEqual(GenMathematics.Vectors.uint4@,GenMathematics.Vectors.uint4@,GenMathematics.Vectors.bool4@)">
            <summary>
            Component-wise 'greater than or equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint4.Equal(GenMathematics.Vectors.uint4,GenMathematics.Vectors.uint4)">
            <summary>
            Component-wise 'equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint4.Equal(GenMathematics.Vectors.uint4@,GenMathematics.Vectors.uint4@,GenMathematics.Vectors.bool4@)">
            <summary>
            Component-wise 'equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint4.NotEqual(GenMathematics.Vectors.uint4,GenMathematics.Vectors.uint4)">
            <summary>
            Component-wise 'not equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint4.NotEqual(GenMathematics.Vectors.uint4@,GenMathematics.Vectors.uint4@,GenMathematics.Vectors.bool4@)">
            <summary>
            Component-wise 'not equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint4.op_Implicit(System.UInt32)~GenMathematics.Vectors.uint4">
            <summary>
            Creates a vector by filling all components with the value
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint4.op_Explicit(GenMathematics.Vectors.sbyte4)~GenMathematics.Vectors.uint4">
            <summary>
            Converts sbyte4 to uint4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint4.op_Explicit(GenMathematics.Vectors.short4)~GenMathematics.Vectors.uint4">
            <summary>
            Converts short4 to uint4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint4.op_Explicit(GenMathematics.Vectors.int4)~GenMathematics.Vectors.uint4">
            <summary>
            Converts int4 to uint4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint4.op_Explicit(GenMathematics.Vectors.long4)~GenMathematics.Vectors.uint4">
            <summary>
            Converts long4 to uint4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint4.op_Explicit(GenMathematics.Vectors.ulong4)~GenMathematics.Vectors.uint4">
            <summary>
            Converts ulong4 to uint4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint4.op_Explicit(GenMathematics.Vectors.half4)~GenMathematics.Vectors.uint4">
            <summary>
            Converts half4 to uint4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint4.op_Explicit(GenMathematics.Vectors.float4)~GenMathematics.Vectors.uint4">
            <summary>
            Converts float4 to uint4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint4.op_Explicit(GenMathematics.Vectors.double4)~GenMathematics.Vectors.uint4">
            <summary>
            Converts double4 to uint4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint4.op_Implicit(GenMathematics.Vectors.byte4)~GenMathematics.Vectors.uint4">
            <summary>
            Converts byte4 to uint4
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint4.op_Implicit(GenMathematics.Vectors.ushort4)~GenMathematics.Vectors.uint4">
            <summary>
            Converts ushort4 to uint4
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint4.op_LessThan(GenMathematics.Vectors.uint4,GenMathematics.Vectors.uint4)">
            <summary>
            Component-wise 'less than' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint4.op_GreaterThan(GenMathematics.Vectors.uint4,GenMathematics.Vectors.uint4)">
            <summary>
            Component-wise 'greater than' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint4.op_LessThanOrEqual(GenMathematics.Vectors.uint4,GenMathematics.Vectors.uint4)">
            <summary>
            Component-wise 'less than or equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint4.op_GreaterThanOrEqual(GenMathematics.Vectors.uint4,GenMathematics.Vectors.uint4)">
            <summary>
            Component-wise 'greater than or equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint4.op_Equality(GenMathematics.Vectors.uint4,GenMathematics.Vectors.uint4)">
            <summary>
            Component-wise 'equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.uint4.op_Inequality(GenMathematics.Vectors.uint4,GenMathematics.Vectors.uint4)">
            <summary>
            Component-wise 'not equal' operation
            </summary>
        </member>
        <member name="T:GenMathematics.Vectors.ulong2">
            <summary>
            Vector of size 2 of type <see cref="T:System.UInt64"/>
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.ulong2.Zero">
            <summary>
            Vector with zero in all components
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.ulong2.One">
            <summary>
            Vector with unit in all components
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.ulong2.UnitX">
            <summary>
            A vector with unit in the component 'x' and zeroes in the remaining components
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.ulong2.UnitY">
            <summary>
            A vector with unit in the component 'y' and zeroes in the remaining components
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.ulong2.x">
            <summary>
            Component 'x' of the vector
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.ulong2.y">
            <summary>
            Component 'y' of the vector
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong2.xx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong2.yx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong2.yy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong2.#ctor(System.UInt64)">
            <summary>
            Constructs a vector by filling all components with the value
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong2.#ctor(System.UInt64,System.UInt64)">
            <summary>
            Constructs a vector from component values
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong2.Item(System.Int32)">
            <summary>
            Returns the vector component by index
            </summary>
            <param name="index">Index within [0,1]</param>
            <exception cref="T:System.IndexOutOfRangeException">Exception if the index is outside the vector size</exception>
        </member>
        <member name="M:GenMathematics.Vectors.ulong2.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Vectors.ulong2.Equals(GenMathematics.Vectors.ulong2)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Vectors.ulong2.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Vectors.ulong2.CompareTo(GenMathematics.Vectors.ulong2)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Vectors.ulong2.ToString">
            <summary>
            Returns the object's state information as a string
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong2.Add(GenMathematics.Vectors.ulong2,GenMathematics.Vectors.ulong2)">
            <summary>
            Component-wise 'add' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong2.Add(GenMathematics.Vectors.ulong2,System.UInt64)">
            <summary>
            Component-wise 'add' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong2.Add(System.UInt64,GenMathematics.Vectors.ulong2)">
            <summary>
            Component-wise 'add' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong2.Add(GenMathematics.Vectors.ulong2@,GenMathematics.Vectors.ulong2@,GenMathematics.Vectors.ulong2@)">
            <summary>
            Component-wise 'add' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong2.Add(GenMathematics.Vectors.ulong2@,System.UInt64,GenMathematics.Vectors.ulong2@)">
            <summary>
            Component-wise 'add' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong2.Add(System.UInt64,GenMathematics.Vectors.ulong2@,GenMathematics.Vectors.ulong2@)">
            <summary>
            Component-wise 'add' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong2.Subtract(GenMathematics.Vectors.ulong2,GenMathematics.Vectors.ulong2)">
            <summary>
            Component-wise 'subtract' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong2.Subtract(GenMathematics.Vectors.ulong2,System.UInt64)">
            <summary>
            Component-wise 'subtract' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong2.Subtract(System.UInt64,GenMathematics.Vectors.ulong2)">
            <summary>
            Component-wise 'subtract' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong2.Subtract(GenMathematics.Vectors.ulong2@,GenMathematics.Vectors.ulong2@,GenMathematics.Vectors.ulong2@)">
            <summary>
            Component-wise 'subtract' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong2.Subtract(GenMathematics.Vectors.ulong2@,System.UInt64,GenMathematics.Vectors.ulong2@)">
            <summary>
            Component-wise 'subtract' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong2.Subtract(System.UInt64,GenMathematics.Vectors.ulong2@,GenMathematics.Vectors.ulong2@)">
            <summary>
            Component-wise 'subtract' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong2.Multiply(GenMathematics.Vectors.ulong2,GenMathematics.Vectors.ulong2)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong2.Multiply(GenMathematics.Vectors.ulong2,System.UInt64)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong2.Multiply(System.UInt64,GenMathematics.Vectors.ulong2)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong2.Multiply(GenMathematics.Vectors.ulong2@,GenMathematics.Vectors.ulong2@,GenMathematics.Vectors.ulong2@)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong2.Multiply(GenMathematics.Vectors.ulong2@,System.UInt64,GenMathematics.Vectors.ulong2@)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong2.Multiply(System.UInt64,GenMathematics.Vectors.ulong2@,GenMathematics.Vectors.ulong2@)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong2.Divide(GenMathematics.Vectors.ulong2,GenMathematics.Vectors.ulong2)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong2.Divide(GenMathematics.Vectors.ulong2,System.UInt64)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong2.Divide(System.UInt64,GenMathematics.Vectors.ulong2)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong2.Divide(GenMathematics.Vectors.ulong2@,GenMathematics.Vectors.ulong2@,GenMathematics.Vectors.ulong2@)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong2.Divide(GenMathematics.Vectors.ulong2@,System.UInt64,GenMathematics.Vectors.ulong2@)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong2.Divide(System.UInt64,GenMathematics.Vectors.ulong2@,GenMathematics.Vectors.ulong2@)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong2.Remainder(GenMathematics.Vectors.ulong2,GenMathematics.Vectors.ulong2)">
            <summary>
            Component-wise 'remainder' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong2.Remainder(GenMathematics.Vectors.ulong2,System.UInt64)">
            <summary>
            Component-wise 'remainder' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong2.Remainder(System.UInt64,GenMathematics.Vectors.ulong2)">
            <summary>
            Component-wise 'remainder' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong2.Remainder(GenMathematics.Vectors.ulong2@,GenMathematics.Vectors.ulong2@,GenMathematics.Vectors.ulong2@)">
            <summary>
            Component-wise 'remainder' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong2.Remainder(GenMathematics.Vectors.ulong2@,System.UInt64,GenMathematics.Vectors.ulong2@)">
            <summary>
            Component-wise 'remainder' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong2.Remainder(System.UInt64,GenMathematics.Vectors.ulong2@,GenMathematics.Vectors.ulong2@)">
            <summary>
            Component-wise 'remainder' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong2.And(GenMathematics.Vectors.ulong2,GenMathematics.Vectors.ulong2)">
            <summary>
            Component-wise 'and' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong2.And(GenMathematics.Vectors.ulong2,System.UInt64)">
            <summary>
            Component-wise 'and' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong2.And(System.UInt64,GenMathematics.Vectors.ulong2)">
            <summary>
            Component-wise 'and' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong2.And(GenMathematics.Vectors.ulong2@,GenMathematics.Vectors.ulong2@,GenMathematics.Vectors.ulong2@)">
            <summary>
            Component-wise 'and' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong2.And(GenMathematics.Vectors.ulong2@,System.UInt64,GenMathematics.Vectors.ulong2@)">
            <summary>
            Component-wise 'and' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong2.And(System.UInt64,GenMathematics.Vectors.ulong2@,GenMathematics.Vectors.ulong2@)">
            <summary>
            Component-wise 'and' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong2.Or(GenMathematics.Vectors.ulong2,GenMathematics.Vectors.ulong2)">
            <summary>
            Component-wise 'or' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong2.Or(GenMathematics.Vectors.ulong2,System.UInt64)">
            <summary>
            Component-wise 'or' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong2.Or(System.UInt64,GenMathematics.Vectors.ulong2)">
            <summary>
            Component-wise 'or' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong2.Or(GenMathematics.Vectors.ulong2@,GenMathematics.Vectors.ulong2@,GenMathematics.Vectors.ulong2@)">
            <summary>
            Component-wise 'or' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong2.Or(GenMathematics.Vectors.ulong2@,System.UInt64,GenMathematics.Vectors.ulong2@)">
            <summary>
            Component-wise 'or' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong2.Or(System.UInt64,GenMathematics.Vectors.ulong2@,GenMathematics.Vectors.ulong2@)">
            <summary>
            Component-wise 'or' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong2.Xor(GenMathematics.Vectors.ulong2,GenMathematics.Vectors.ulong2)">
            <summary>
            Component-wise 'xor' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong2.Xor(GenMathematics.Vectors.ulong2,System.UInt64)">
            <summary>
            Component-wise 'xor' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong2.Xor(System.UInt64,GenMathematics.Vectors.ulong2)">
            <summary>
            Component-wise 'xor' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong2.Xor(GenMathematics.Vectors.ulong2@,GenMathematics.Vectors.ulong2@,GenMathematics.Vectors.ulong2@)">
            <summary>
            Component-wise 'xor' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong2.Xor(GenMathematics.Vectors.ulong2@,System.UInt64,GenMathematics.Vectors.ulong2@)">
            <summary>
            Component-wise 'xor' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong2.Xor(System.UInt64,GenMathematics.Vectors.ulong2@,GenMathematics.Vectors.ulong2@)">
            <summary>
            Component-wise 'xor' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong2.ShiftLeft(GenMathematics.Vectors.ulong2,GenMathematics.Vectors.int2)">
            <summary>
            Component-wise 'shift-left' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong2.ShiftLeft(GenMathematics.Vectors.ulong2@,GenMathematics.Vectors.int2@,GenMathematics.Vectors.ulong2@)">
            <summary>
            Component-wise 'shift-left' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong2.ShiftRight(GenMathematics.Vectors.ulong2,GenMathematics.Vectors.int2)">
            <summary>
            Component-wise 'shift-righ' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong2.ShiftRight(GenMathematics.Vectors.ulong2@,GenMathematics.Vectors.int2@,GenMathematics.Vectors.ulong2@)">
            <summary>
            Component-wise 'shift-righ' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong2.Not(GenMathematics.Vectors.ulong2)">
            <summary>
            Component-wise 'not' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong2.Not(GenMathematics.Vectors.ulong2@,GenMathematics.Vectors.ulong2@)">
            <summary>
            Component-wise 'not' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong2.op_Addition(GenMathematics.Vectors.ulong2,GenMathematics.Vectors.ulong2)">
            <summary>
            Component-wise 'add' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong2.op_Addition(GenMathematics.Vectors.ulong2,System.UInt64)">
            <summary>
            Component-wise 'add' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong2.op_Addition(System.UInt64,GenMathematics.Vectors.ulong2)">
            <summary>
            Component-wise 'add' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong2.op_Subtraction(GenMathematics.Vectors.ulong2,GenMathematics.Vectors.ulong2)">
            <summary>
            Component-wise 'subtract' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong2.op_Subtraction(GenMathematics.Vectors.ulong2,System.UInt64)">
            <summary>
            Component-wise 'subtract' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong2.op_Subtraction(System.UInt64,GenMathematics.Vectors.ulong2)">
            <summary>
            Component-wise 'subtract' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong2.op_Multiply(GenMathematics.Vectors.ulong2,GenMathematics.Vectors.ulong2)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong2.op_Multiply(GenMathematics.Vectors.ulong2,System.UInt64)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong2.op_Multiply(System.UInt64,GenMathematics.Vectors.ulong2)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong2.op_Division(GenMathematics.Vectors.ulong2,GenMathematics.Vectors.ulong2)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong2.op_Division(GenMathematics.Vectors.ulong2,System.UInt64)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong2.op_Division(System.UInt64,GenMathematics.Vectors.ulong2)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong2.op_Modulus(GenMathematics.Vectors.ulong2,GenMathematics.Vectors.ulong2)">
            <summary>
            Component-wise 'remainder' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong2.op_Modulus(GenMathematics.Vectors.ulong2,System.UInt64)">
            <summary>
            Component-wise 'remainder' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong2.op_Modulus(System.UInt64,GenMathematics.Vectors.ulong2)">
            <summary>
            Component-wise 'remainder' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong2.op_BitwiseAnd(GenMathematics.Vectors.ulong2,GenMathematics.Vectors.ulong2)">
            <summary>
            Component-wise 'and' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong2.op_BitwiseAnd(GenMathematics.Vectors.ulong2,System.UInt64)">
            <summary>
            Component-wise 'and' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong2.op_BitwiseAnd(System.UInt64,GenMathematics.Vectors.ulong2)">
            <summary>
            Component-wise 'and' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong2.op_BitwiseOr(GenMathematics.Vectors.ulong2,GenMathematics.Vectors.ulong2)">
            <summary>
            Component-wise 'or' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong2.op_BitwiseOr(GenMathematics.Vectors.ulong2,System.UInt64)">
            <summary>
            Component-wise 'or' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong2.op_BitwiseOr(System.UInt64,GenMathematics.Vectors.ulong2)">
            <summary>
            Component-wise 'or' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong2.op_ExclusiveOr(GenMathematics.Vectors.ulong2,GenMathematics.Vectors.ulong2)">
            <summary>
            Component-wise 'xor' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong2.op_ExclusiveOr(GenMathematics.Vectors.ulong2,System.UInt64)">
            <summary>
            Component-wise 'xor' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong2.op_ExclusiveOr(System.UInt64,GenMathematics.Vectors.ulong2)">
            <summary>
            Component-wise 'xor' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong2.op_LeftShift(GenMathematics.Vectors.ulong2,GenMathematics.Vectors.int2)">
            <summary>
            Component-wise 'shift-left' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong2.op_RightShift(GenMathematics.Vectors.ulong2,GenMathematics.Vectors.int2)">
            <summary>
            Component-wise 'shift-righ' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong2.op_OnesComplement(GenMathematics.Vectors.ulong2)">
            <summary>
            Component-wise 'not' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong2.LessThan(GenMathematics.Vectors.ulong2,GenMathematics.Vectors.ulong2)">
            <summary>
            Component-wise 'less than' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong2.LessThan(GenMathematics.Vectors.ulong2@,GenMathematics.Vectors.ulong2@,GenMathematics.Vectors.bool2@)">
            <summary>
            Component-wise 'less than' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong2.GreaterThan(GenMathematics.Vectors.ulong2,GenMathematics.Vectors.ulong2)">
            <summary>
            Component-wise 'greater than' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong2.GreaterThan(GenMathematics.Vectors.ulong2@,GenMathematics.Vectors.ulong2@,GenMathematics.Vectors.bool2@)">
            <summary>
            Component-wise 'greater than' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong2.LessThanEqual(GenMathematics.Vectors.ulong2,GenMathematics.Vectors.ulong2)">
            <summary>
            Component-wise 'less than or equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong2.LessThanEqual(GenMathematics.Vectors.ulong2@,GenMathematics.Vectors.ulong2@,GenMathematics.Vectors.bool2@)">
            <summary>
            Component-wise 'less than or equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong2.GreaterThanEqual(GenMathematics.Vectors.ulong2,GenMathematics.Vectors.ulong2)">
            <summary>
            Component-wise 'greater than or equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong2.GreaterThanEqual(GenMathematics.Vectors.ulong2@,GenMathematics.Vectors.ulong2@,GenMathematics.Vectors.bool2@)">
            <summary>
            Component-wise 'greater than or equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong2.Equal(GenMathematics.Vectors.ulong2,GenMathematics.Vectors.ulong2)">
            <summary>
            Component-wise 'equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong2.Equal(GenMathematics.Vectors.ulong2@,GenMathematics.Vectors.ulong2@,GenMathematics.Vectors.bool2@)">
            <summary>
            Component-wise 'equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong2.NotEqual(GenMathematics.Vectors.ulong2,GenMathematics.Vectors.ulong2)">
            <summary>
            Component-wise 'not equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong2.NotEqual(GenMathematics.Vectors.ulong2@,GenMathematics.Vectors.ulong2@,GenMathematics.Vectors.bool2@)">
            <summary>
            Component-wise 'not equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong2.op_Implicit(System.UInt64)~GenMathematics.Vectors.ulong2">
            <summary>
            Creates a vector by filling all components with the value
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong2.op_Explicit(GenMathematics.Vectors.sbyte2)~GenMathematics.Vectors.ulong2">
            <summary>
            Converts sbyte2 to ulong2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong2.op_Explicit(GenMathematics.Vectors.short2)~GenMathematics.Vectors.ulong2">
            <summary>
            Converts short2 to ulong2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong2.op_Explicit(GenMathematics.Vectors.int2)~GenMathematics.Vectors.ulong2">
            <summary>
            Converts int2 to ulong2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong2.op_Explicit(GenMathematics.Vectors.long2)~GenMathematics.Vectors.ulong2">
            <summary>
            Converts long2 to ulong2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong2.op_Explicit(GenMathematics.Vectors.half2)~GenMathematics.Vectors.ulong2">
            <summary>
            Converts half2 to ulong2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong2.op_Explicit(GenMathematics.Vectors.float2)~GenMathematics.Vectors.ulong2">
            <summary>
            Converts float2 to ulong2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong2.op_Explicit(GenMathematics.Vectors.double2)~GenMathematics.Vectors.ulong2">
            <summary>
            Converts double2 to ulong2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong2.op_Implicit(GenMathematics.Vectors.byte2)~GenMathematics.Vectors.ulong2">
            <summary>
            Converts byte2 to ulong2
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong2.op_Implicit(GenMathematics.Vectors.ushort2)~GenMathematics.Vectors.ulong2">
            <summary>
            Converts ushort2 to ulong2
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong2.op_Implicit(GenMathematics.Vectors.uint2)~GenMathematics.Vectors.ulong2">
            <summary>
            Converts uint2 to ulong2
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong2.op_LessThan(GenMathematics.Vectors.ulong2,GenMathematics.Vectors.ulong2)">
            <summary>
            Component-wise 'less than' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong2.op_GreaterThan(GenMathematics.Vectors.ulong2,GenMathematics.Vectors.ulong2)">
            <summary>
            Component-wise 'greater than' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong2.op_LessThanOrEqual(GenMathematics.Vectors.ulong2,GenMathematics.Vectors.ulong2)">
            <summary>
            Component-wise 'less than or equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong2.op_GreaterThanOrEqual(GenMathematics.Vectors.ulong2,GenMathematics.Vectors.ulong2)">
            <summary>
            Component-wise 'greater than or equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong2.op_Equality(GenMathematics.Vectors.ulong2,GenMathematics.Vectors.ulong2)">
            <summary>
            Component-wise 'equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong2.op_Inequality(GenMathematics.Vectors.ulong2,GenMathematics.Vectors.ulong2)">
            <summary>
            Component-wise 'not equal' operation
            </summary>
        </member>
        <member name="T:GenMathematics.Vectors.ulong3">
            <summary>
            Vector of size 3 of type <see cref="T:System.UInt64"/>
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.ulong3.Zero">
            <summary>
            Vector with zero in all components
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.ulong3.One">
            <summary>
            Vector with unit in all components
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.ulong3.UnitX">
            <summary>
            A vector with unit in the component 'x' and zeroes in the remaining components
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.ulong3.UnitY">
            <summary>
            A vector with unit in the component 'y' and zeroes in the remaining components
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.ulong3.UnitZ">
            <summary>
            A vector with unit in the component 'z' and zeroes in the remaining components
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.ulong3.x">
            <summary>
            Component 'x' of the vector
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.ulong3.y">
            <summary>
            Component 'y' of the vector
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.ulong3.z">
            <summary>
            Component 'z' of the vector
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong3.xx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong3.xy">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong3.xz">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong3.yx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong3.yy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong3.yz">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong3.zx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong3.zy">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong3.zz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong3.xxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong3.xxy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong3.xxz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong3.xyx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong3.xyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong3.xzx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong3.xzy">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong3.xzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong3.yxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong3.yxy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong3.yxz">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong3.yyx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong3.yyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong3.yyz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong3.yzx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong3.yzy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong3.yzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong3.zxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong3.zxy">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong3.zxz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong3.zyx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong3.zyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong3.zyz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong3.zzx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong3.zzy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong3.zzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong3.#ctor(System.UInt64)">
            <summary>
            Constructs a vector by filling all components with the value
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong3.#ctor(System.UInt64,GenMathematics.Vectors.ulong2)">
            <summary>
            Constructs a vector from component values
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong3.#ctor(System.UInt64,System.UInt64,System.UInt64)">
            <summary>
            Constructs a vector from component values
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong3.#ctor(GenMathematics.Vectors.ulong2,System.UInt64)">
            <summary>
            Constructs a vector from component values
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong3.Item(System.Int32)">
            <summary>
            Returns the vector component by index
            </summary>
            <param name="index">Index within [0,2]</param>
            <exception cref="T:System.IndexOutOfRangeException">Exception if the index is outside the vector size</exception>
        </member>
        <member name="M:GenMathematics.Vectors.ulong3.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Vectors.ulong3.Equals(GenMathematics.Vectors.ulong3)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Vectors.ulong3.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Vectors.ulong3.CompareTo(GenMathematics.Vectors.ulong3)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Vectors.ulong3.ToString">
            <summary>
            Returns the object's state information as a string
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong3.Add(GenMathematics.Vectors.ulong3,GenMathematics.Vectors.ulong3)">
            <summary>
            Component-wise 'add' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong3.Add(GenMathematics.Vectors.ulong3,System.UInt64)">
            <summary>
            Component-wise 'add' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong3.Add(System.UInt64,GenMathematics.Vectors.ulong3)">
            <summary>
            Component-wise 'add' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong3.Add(GenMathematics.Vectors.ulong3@,GenMathematics.Vectors.ulong3@,GenMathematics.Vectors.ulong3@)">
            <summary>
            Component-wise 'add' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong3.Add(GenMathematics.Vectors.ulong3@,System.UInt64,GenMathematics.Vectors.ulong3@)">
            <summary>
            Component-wise 'add' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong3.Add(System.UInt64,GenMathematics.Vectors.ulong3@,GenMathematics.Vectors.ulong3@)">
            <summary>
            Component-wise 'add' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong3.Subtract(GenMathematics.Vectors.ulong3,GenMathematics.Vectors.ulong3)">
            <summary>
            Component-wise 'subtract' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong3.Subtract(GenMathematics.Vectors.ulong3,System.UInt64)">
            <summary>
            Component-wise 'subtract' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong3.Subtract(System.UInt64,GenMathematics.Vectors.ulong3)">
            <summary>
            Component-wise 'subtract' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong3.Subtract(GenMathematics.Vectors.ulong3@,GenMathematics.Vectors.ulong3@,GenMathematics.Vectors.ulong3@)">
            <summary>
            Component-wise 'subtract' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong3.Subtract(GenMathematics.Vectors.ulong3@,System.UInt64,GenMathematics.Vectors.ulong3@)">
            <summary>
            Component-wise 'subtract' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong3.Subtract(System.UInt64,GenMathematics.Vectors.ulong3@,GenMathematics.Vectors.ulong3@)">
            <summary>
            Component-wise 'subtract' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong3.Multiply(GenMathematics.Vectors.ulong3,GenMathematics.Vectors.ulong3)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong3.Multiply(GenMathematics.Vectors.ulong3,System.UInt64)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong3.Multiply(System.UInt64,GenMathematics.Vectors.ulong3)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong3.Multiply(GenMathematics.Vectors.ulong3@,GenMathematics.Vectors.ulong3@,GenMathematics.Vectors.ulong3@)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong3.Multiply(GenMathematics.Vectors.ulong3@,System.UInt64,GenMathematics.Vectors.ulong3@)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong3.Multiply(System.UInt64,GenMathematics.Vectors.ulong3@,GenMathematics.Vectors.ulong3@)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong3.Divide(GenMathematics.Vectors.ulong3,GenMathematics.Vectors.ulong3)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong3.Divide(GenMathematics.Vectors.ulong3,System.UInt64)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong3.Divide(System.UInt64,GenMathematics.Vectors.ulong3)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong3.Divide(GenMathematics.Vectors.ulong3@,GenMathematics.Vectors.ulong3@,GenMathematics.Vectors.ulong3@)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong3.Divide(GenMathematics.Vectors.ulong3@,System.UInt64,GenMathematics.Vectors.ulong3@)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong3.Divide(System.UInt64,GenMathematics.Vectors.ulong3@,GenMathematics.Vectors.ulong3@)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong3.Remainder(GenMathematics.Vectors.ulong3,GenMathematics.Vectors.ulong3)">
            <summary>
            Component-wise 'remainder' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong3.Remainder(GenMathematics.Vectors.ulong3,System.UInt64)">
            <summary>
            Component-wise 'remainder' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong3.Remainder(System.UInt64,GenMathematics.Vectors.ulong3)">
            <summary>
            Component-wise 'remainder' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong3.Remainder(GenMathematics.Vectors.ulong3@,GenMathematics.Vectors.ulong3@,GenMathematics.Vectors.ulong3@)">
            <summary>
            Component-wise 'remainder' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong3.Remainder(GenMathematics.Vectors.ulong3@,System.UInt64,GenMathematics.Vectors.ulong3@)">
            <summary>
            Component-wise 'remainder' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong3.Remainder(System.UInt64,GenMathematics.Vectors.ulong3@,GenMathematics.Vectors.ulong3@)">
            <summary>
            Component-wise 'remainder' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong3.And(GenMathematics.Vectors.ulong3,GenMathematics.Vectors.ulong3)">
            <summary>
            Component-wise 'and' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong3.And(GenMathematics.Vectors.ulong3,System.UInt64)">
            <summary>
            Component-wise 'and' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong3.And(System.UInt64,GenMathematics.Vectors.ulong3)">
            <summary>
            Component-wise 'and' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong3.And(GenMathematics.Vectors.ulong3@,GenMathematics.Vectors.ulong3@,GenMathematics.Vectors.ulong3@)">
            <summary>
            Component-wise 'and' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong3.And(GenMathematics.Vectors.ulong3@,System.UInt64,GenMathematics.Vectors.ulong3@)">
            <summary>
            Component-wise 'and' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong3.And(System.UInt64,GenMathematics.Vectors.ulong3@,GenMathematics.Vectors.ulong3@)">
            <summary>
            Component-wise 'and' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong3.Or(GenMathematics.Vectors.ulong3,GenMathematics.Vectors.ulong3)">
            <summary>
            Component-wise 'or' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong3.Or(GenMathematics.Vectors.ulong3,System.UInt64)">
            <summary>
            Component-wise 'or' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong3.Or(System.UInt64,GenMathematics.Vectors.ulong3)">
            <summary>
            Component-wise 'or' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong3.Or(GenMathematics.Vectors.ulong3@,GenMathematics.Vectors.ulong3@,GenMathematics.Vectors.ulong3@)">
            <summary>
            Component-wise 'or' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong3.Or(GenMathematics.Vectors.ulong3@,System.UInt64,GenMathematics.Vectors.ulong3@)">
            <summary>
            Component-wise 'or' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong3.Or(System.UInt64,GenMathematics.Vectors.ulong3@,GenMathematics.Vectors.ulong3@)">
            <summary>
            Component-wise 'or' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong3.Xor(GenMathematics.Vectors.ulong3,GenMathematics.Vectors.ulong3)">
            <summary>
            Component-wise 'xor' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong3.Xor(GenMathematics.Vectors.ulong3,System.UInt64)">
            <summary>
            Component-wise 'xor' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong3.Xor(System.UInt64,GenMathematics.Vectors.ulong3)">
            <summary>
            Component-wise 'xor' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong3.Xor(GenMathematics.Vectors.ulong3@,GenMathematics.Vectors.ulong3@,GenMathematics.Vectors.ulong3@)">
            <summary>
            Component-wise 'xor' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong3.Xor(GenMathematics.Vectors.ulong3@,System.UInt64,GenMathematics.Vectors.ulong3@)">
            <summary>
            Component-wise 'xor' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong3.Xor(System.UInt64,GenMathematics.Vectors.ulong3@,GenMathematics.Vectors.ulong3@)">
            <summary>
            Component-wise 'xor' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong3.ShiftLeft(GenMathematics.Vectors.ulong3,GenMathematics.Vectors.int3)">
            <summary>
            Component-wise 'shift-left' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong3.ShiftLeft(GenMathematics.Vectors.ulong3@,GenMathematics.Vectors.int3@,GenMathematics.Vectors.ulong3@)">
            <summary>
            Component-wise 'shift-left' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong3.ShiftRight(GenMathematics.Vectors.ulong3,GenMathematics.Vectors.int3)">
            <summary>
            Component-wise 'shift-righ' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong3.ShiftRight(GenMathematics.Vectors.ulong3@,GenMathematics.Vectors.int3@,GenMathematics.Vectors.ulong3@)">
            <summary>
            Component-wise 'shift-righ' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong3.Not(GenMathematics.Vectors.ulong3)">
            <summary>
            Component-wise 'not' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong3.Not(GenMathematics.Vectors.ulong3@,GenMathematics.Vectors.ulong3@)">
            <summary>
            Component-wise 'not' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong3.op_Addition(GenMathematics.Vectors.ulong3,GenMathematics.Vectors.ulong3)">
            <summary>
            Component-wise 'add' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong3.op_Addition(GenMathematics.Vectors.ulong3,System.UInt64)">
            <summary>
            Component-wise 'add' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong3.op_Addition(System.UInt64,GenMathematics.Vectors.ulong3)">
            <summary>
            Component-wise 'add' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong3.op_Subtraction(GenMathematics.Vectors.ulong3,GenMathematics.Vectors.ulong3)">
            <summary>
            Component-wise 'subtract' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong3.op_Subtraction(GenMathematics.Vectors.ulong3,System.UInt64)">
            <summary>
            Component-wise 'subtract' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong3.op_Subtraction(System.UInt64,GenMathematics.Vectors.ulong3)">
            <summary>
            Component-wise 'subtract' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong3.op_Multiply(GenMathematics.Vectors.ulong3,GenMathematics.Vectors.ulong3)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong3.op_Multiply(GenMathematics.Vectors.ulong3,System.UInt64)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong3.op_Multiply(System.UInt64,GenMathematics.Vectors.ulong3)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong3.op_Division(GenMathematics.Vectors.ulong3,GenMathematics.Vectors.ulong3)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong3.op_Division(GenMathematics.Vectors.ulong3,System.UInt64)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong3.op_Division(System.UInt64,GenMathematics.Vectors.ulong3)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong3.op_Modulus(GenMathematics.Vectors.ulong3,GenMathematics.Vectors.ulong3)">
            <summary>
            Component-wise 'remainder' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong3.op_Modulus(GenMathematics.Vectors.ulong3,System.UInt64)">
            <summary>
            Component-wise 'remainder' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong3.op_Modulus(System.UInt64,GenMathematics.Vectors.ulong3)">
            <summary>
            Component-wise 'remainder' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong3.op_BitwiseAnd(GenMathematics.Vectors.ulong3,GenMathematics.Vectors.ulong3)">
            <summary>
            Component-wise 'and' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong3.op_BitwiseAnd(GenMathematics.Vectors.ulong3,System.UInt64)">
            <summary>
            Component-wise 'and' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong3.op_BitwiseAnd(System.UInt64,GenMathematics.Vectors.ulong3)">
            <summary>
            Component-wise 'and' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong3.op_BitwiseOr(GenMathematics.Vectors.ulong3,GenMathematics.Vectors.ulong3)">
            <summary>
            Component-wise 'or' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong3.op_BitwiseOr(GenMathematics.Vectors.ulong3,System.UInt64)">
            <summary>
            Component-wise 'or' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong3.op_BitwiseOr(System.UInt64,GenMathematics.Vectors.ulong3)">
            <summary>
            Component-wise 'or' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong3.op_ExclusiveOr(GenMathematics.Vectors.ulong3,GenMathematics.Vectors.ulong3)">
            <summary>
            Component-wise 'xor' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong3.op_ExclusiveOr(GenMathematics.Vectors.ulong3,System.UInt64)">
            <summary>
            Component-wise 'xor' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong3.op_ExclusiveOr(System.UInt64,GenMathematics.Vectors.ulong3)">
            <summary>
            Component-wise 'xor' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong3.op_LeftShift(GenMathematics.Vectors.ulong3,GenMathematics.Vectors.int3)">
            <summary>
            Component-wise 'shift-left' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong3.op_RightShift(GenMathematics.Vectors.ulong3,GenMathematics.Vectors.int3)">
            <summary>
            Component-wise 'shift-righ' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong3.op_OnesComplement(GenMathematics.Vectors.ulong3)">
            <summary>
            Component-wise 'not' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong3.LessThan(GenMathematics.Vectors.ulong3,GenMathematics.Vectors.ulong3)">
            <summary>
            Component-wise 'less than' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong3.LessThan(GenMathematics.Vectors.ulong3@,GenMathematics.Vectors.ulong3@,GenMathematics.Vectors.bool3@)">
            <summary>
            Component-wise 'less than' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong3.GreaterThan(GenMathematics.Vectors.ulong3,GenMathematics.Vectors.ulong3)">
            <summary>
            Component-wise 'greater than' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong3.GreaterThan(GenMathematics.Vectors.ulong3@,GenMathematics.Vectors.ulong3@,GenMathematics.Vectors.bool3@)">
            <summary>
            Component-wise 'greater than' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong3.LessThanEqual(GenMathematics.Vectors.ulong3,GenMathematics.Vectors.ulong3)">
            <summary>
            Component-wise 'less than or equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong3.LessThanEqual(GenMathematics.Vectors.ulong3@,GenMathematics.Vectors.ulong3@,GenMathematics.Vectors.bool3@)">
            <summary>
            Component-wise 'less than or equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong3.GreaterThanEqual(GenMathematics.Vectors.ulong3,GenMathematics.Vectors.ulong3)">
            <summary>
            Component-wise 'greater than or equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong3.GreaterThanEqual(GenMathematics.Vectors.ulong3@,GenMathematics.Vectors.ulong3@,GenMathematics.Vectors.bool3@)">
            <summary>
            Component-wise 'greater than or equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong3.Equal(GenMathematics.Vectors.ulong3,GenMathematics.Vectors.ulong3)">
            <summary>
            Component-wise 'equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong3.Equal(GenMathematics.Vectors.ulong3@,GenMathematics.Vectors.ulong3@,GenMathematics.Vectors.bool3@)">
            <summary>
            Component-wise 'equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong3.NotEqual(GenMathematics.Vectors.ulong3,GenMathematics.Vectors.ulong3)">
            <summary>
            Component-wise 'not equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong3.NotEqual(GenMathematics.Vectors.ulong3@,GenMathematics.Vectors.ulong3@,GenMathematics.Vectors.bool3@)">
            <summary>
            Component-wise 'not equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong3.op_Implicit(System.UInt64)~GenMathematics.Vectors.ulong3">
            <summary>
            Creates a vector by filling all components with the value
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong3.op_Explicit(GenMathematics.Vectors.sbyte3)~GenMathematics.Vectors.ulong3">
            <summary>
            Converts sbyte3 to ulong3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong3.op_Explicit(GenMathematics.Vectors.short3)~GenMathematics.Vectors.ulong3">
            <summary>
            Converts short3 to ulong3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong3.op_Explicit(GenMathematics.Vectors.int3)~GenMathematics.Vectors.ulong3">
            <summary>
            Converts int3 to ulong3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong3.op_Explicit(GenMathematics.Vectors.long3)~GenMathematics.Vectors.ulong3">
            <summary>
            Converts long3 to ulong3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong3.op_Explicit(GenMathematics.Vectors.half3)~GenMathematics.Vectors.ulong3">
            <summary>
            Converts half3 to ulong3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong3.op_Explicit(GenMathematics.Vectors.float3)~GenMathematics.Vectors.ulong3">
            <summary>
            Converts float3 to ulong3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong3.op_Explicit(GenMathematics.Vectors.double3)~GenMathematics.Vectors.ulong3">
            <summary>
            Converts double3 to ulong3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong3.op_Implicit(GenMathematics.Vectors.byte3)~GenMathematics.Vectors.ulong3">
            <summary>
            Converts byte3 to ulong3
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong3.op_Implicit(GenMathematics.Vectors.ushort3)~GenMathematics.Vectors.ulong3">
            <summary>
            Converts ushort3 to ulong3
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong3.op_Implicit(GenMathematics.Vectors.uint3)~GenMathematics.Vectors.ulong3">
            <summary>
            Converts uint3 to ulong3
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong3.op_LessThan(GenMathematics.Vectors.ulong3,GenMathematics.Vectors.ulong3)">
            <summary>
            Component-wise 'less than' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong3.op_GreaterThan(GenMathematics.Vectors.ulong3,GenMathematics.Vectors.ulong3)">
            <summary>
            Component-wise 'greater than' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong3.op_LessThanOrEqual(GenMathematics.Vectors.ulong3,GenMathematics.Vectors.ulong3)">
            <summary>
            Component-wise 'less than or equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong3.op_GreaterThanOrEqual(GenMathematics.Vectors.ulong3,GenMathematics.Vectors.ulong3)">
            <summary>
            Component-wise 'greater than or equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong3.op_Equality(GenMathematics.Vectors.ulong3,GenMathematics.Vectors.ulong3)">
            <summary>
            Component-wise 'equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong3.op_Inequality(GenMathematics.Vectors.ulong3,GenMathematics.Vectors.ulong3)">
            <summary>
            Component-wise 'not equal' operation
            </summary>
        </member>
        <member name="T:GenMathematics.Vectors.ulong4">
            <summary>
            Vector of size 4 of type <see cref="T:System.UInt64"/>
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.ulong4.Zero">
            <summary>
            Vector with zero in all components
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.ulong4.One">
            <summary>
            Vector with unit in all components
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.ulong4.UnitX">
            <summary>
            A vector with unit in the component 'x' and zeroes in the remaining components
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.ulong4.UnitY">
            <summary>
            A vector with unit in the component 'y' and zeroes in the remaining components
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.ulong4.UnitZ">
            <summary>
            A vector with unit in the component 'z' and zeroes in the remaining components
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.ulong4.UnitW">
            <summary>
            A vector with unit in the component 'w' and zeroes in the remaining components
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.ulong4.x">
            <summary>
            Component 'x' of the vector
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.ulong4.y">
            <summary>
            Component 'y' of the vector
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.ulong4.z">
            <summary>
            Component 'z' of the vector
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.ulong4.w">
            <summary>
            Component 'w' of the vector
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.xx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.xy">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.xz">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.xw">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.yx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.yy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.yz">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.yw">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.zx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.zy">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.zz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.zw">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.wx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.wy">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.wz">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.ww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.xxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.xxy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.xxz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.xxw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.xyx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.xyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.xyz">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.xyw">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.xzx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.xzy">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.xzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.xzw">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.xwx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.xwy">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.xwz">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.xww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.yxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.yxy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.yxz">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.yxw">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.yyx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.yyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.yyz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.yyw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.yzx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.yzy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.yzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.yzw">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.ywx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.ywy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.ywz">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.yww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.zxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.zxy">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.zxz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.zxw">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.zyx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.zyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.zyz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.zyw">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.zzx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.zzy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.zzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.zzw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.zwx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.zwy">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.zwz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.zww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.wxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.wxy">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.wxz">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.wxw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.wyx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.wyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.wyz">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.wyw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.wzx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.wzy">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.wzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.wzw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.wwx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.wwy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.wwz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.www">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.xxxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.xxxy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.xxxz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.xxxw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.xxyx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.xxyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.xxyz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.xxyw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.xxzx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.xxzy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.xxzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.xxzw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.xxwx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.xxwy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.xxwz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.xxww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.xyxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.xyxy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.xyxz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.xyxw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.xyyx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.xyyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.xyyz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.xyyw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.xyzx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.xyzy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.xyzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.xywx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.xywy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.xywz">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.xyww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.xzxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.xzxy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.xzxz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.xzxw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.xzyx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.xzyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.xzyz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.xzyw">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.xzzx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.xzzy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.xzzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.xzzw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.xzwx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.xzwy">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.xzwz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.xzww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.xwxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.xwxy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.xwxz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.xwxw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.xwyx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.xwyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.xwyz">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.xwyw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.xwzx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.xwzy">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.xwzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.xwzw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.xwwx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.xwwy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.xwwz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.xwww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.yxxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.yxxy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.yxxz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.yxxw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.yxyx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.yxyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.yxyz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.yxyw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.yxzx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.yxzy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.yxzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.yxzw">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.yxwx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.yxwy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.yxwz">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.yxww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.yyxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.yyxy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.yyxz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.yyxw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.yyyx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.yyyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.yyyz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.yyyw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.yyzx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.yyzy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.yyzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.yyzw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.yywx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.yywy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.yywz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.yyww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.yzxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.yzxy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.yzxz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.yzxw">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.yzyx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.yzyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.yzyz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.yzyw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.yzzx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.yzzy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.yzzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.yzzw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.yzwx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.yzwy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.yzwz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.yzww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.ywxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.ywxy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.ywxz">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.ywxw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.ywyx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.ywyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.ywyz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.ywyw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.ywzx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.ywzy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.ywzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.ywzw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.ywwx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.ywwy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.ywwz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.ywww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.zxxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.zxxy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.zxxz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.zxxw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.zxyx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.zxyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.zxyz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.zxyw">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.zxzx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.zxzy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.zxzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.zxzw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.zxwx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.zxwy">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.zxwz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.zxww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.zyxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.zyxy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.zyxz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.zyxw">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.zyyx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.zyyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.zyyz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.zyyw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.zyzx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.zyzy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.zyzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.zyzw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.zywx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.zywy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.zywz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.zyww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.zzxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.zzxy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.zzxz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.zzxw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.zzyx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.zzyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.zzyz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.zzyw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.zzzx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.zzzy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.zzzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.zzzw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.zzwx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.zzwy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.zzwz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.zzww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.zwxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.zwxy">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.zwxz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.zwxw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.zwyx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.zwyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.zwyz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.zwyw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.zwzx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.zwzy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.zwzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.zwzw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.zwwx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.zwwy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.zwwz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.zwww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.wxxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.wxxy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.wxxz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.wxxw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.wxyx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.wxyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.wxyz">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.wxyw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.wxzx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.wxzy">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.wxzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.wxzw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.wxwx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.wxwy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.wxwz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.wxww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.wyxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.wyxy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.wyxz">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.wyxw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.wyyx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.wyyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.wyyz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.wyyw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.wyzx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.wyzy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.wyzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.wyzw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.wywx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.wywy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.wywz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.wyww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.wzxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.wzxy">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.wzxz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.wzxw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.wzyx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.wzyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.wzyz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.wzyw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.wzzx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.wzzy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.wzzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.wzzw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.wzwx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.wzwy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.wzwz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.wzww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.wwxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.wwxy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.wwxz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.wwxw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.wwyx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.wwyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.wwyz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.wwyw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.wwzx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.wwzy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.wwzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.wwzw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.wwwx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.wwwy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.wwwz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.wwww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong4.#ctor(System.UInt64)">
            <summary>
            Constructs a vector by filling all components with the value
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong4.#ctor(System.UInt64,GenMathematics.Vectors.ulong3)">
            <summary>
            Constructs a vector from component values
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong4.#ctor(System.UInt64,GenMathematics.Vectors.ulong2,System.UInt64)">
            <summary>
            Constructs a vector from component values
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong4.#ctor(System.UInt64,System.UInt64,GenMathematics.Vectors.ulong2)">
            <summary>
            Constructs a vector from component values
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong4.#ctor(System.UInt64,System.UInt64,System.UInt64,System.UInt64)">
            <summary>
            Constructs a vector from component values
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong4.#ctor(GenMathematics.Vectors.ulong2,GenMathematics.Vectors.ulong2)">
            <summary>
            Constructs a vector from component values
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong4.#ctor(GenMathematics.Vectors.ulong2,System.UInt64,System.UInt64)">
            <summary>
            Constructs a vector from component values
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong4.#ctor(GenMathematics.Vectors.ulong3,System.UInt64)">
            <summary>
            Constructs a vector from component values
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ulong4.Item(System.Int32)">
            <summary>
            Returns the vector component by index
            </summary>
            <param name="index">Index within [0,3]</param>
            <exception cref="T:System.IndexOutOfRangeException">Exception if the index is outside the vector size</exception>
        </member>
        <member name="M:GenMathematics.Vectors.ulong4.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Vectors.ulong4.Equals(GenMathematics.Vectors.ulong4)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Vectors.ulong4.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Vectors.ulong4.CompareTo(GenMathematics.Vectors.ulong4)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Vectors.ulong4.ToString">
            <summary>
            Returns the object's state information as a string
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong4.Add(GenMathematics.Vectors.ulong4,GenMathematics.Vectors.ulong4)">
            <summary>
            Component-wise 'add' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong4.Add(GenMathematics.Vectors.ulong4,System.UInt64)">
            <summary>
            Component-wise 'add' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong4.Add(System.UInt64,GenMathematics.Vectors.ulong4)">
            <summary>
            Component-wise 'add' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong4.Add(GenMathematics.Vectors.ulong4@,GenMathematics.Vectors.ulong4@,GenMathematics.Vectors.ulong4@)">
            <summary>
            Component-wise 'add' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong4.Add(GenMathematics.Vectors.ulong4@,System.UInt64,GenMathematics.Vectors.ulong4@)">
            <summary>
            Component-wise 'add' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong4.Add(System.UInt64,GenMathematics.Vectors.ulong4@,GenMathematics.Vectors.ulong4@)">
            <summary>
            Component-wise 'add' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong4.Subtract(GenMathematics.Vectors.ulong4,GenMathematics.Vectors.ulong4)">
            <summary>
            Component-wise 'subtract' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong4.Subtract(GenMathematics.Vectors.ulong4,System.UInt64)">
            <summary>
            Component-wise 'subtract' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong4.Subtract(System.UInt64,GenMathematics.Vectors.ulong4)">
            <summary>
            Component-wise 'subtract' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong4.Subtract(GenMathematics.Vectors.ulong4@,GenMathematics.Vectors.ulong4@,GenMathematics.Vectors.ulong4@)">
            <summary>
            Component-wise 'subtract' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong4.Subtract(GenMathematics.Vectors.ulong4@,System.UInt64,GenMathematics.Vectors.ulong4@)">
            <summary>
            Component-wise 'subtract' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong4.Subtract(System.UInt64,GenMathematics.Vectors.ulong4@,GenMathematics.Vectors.ulong4@)">
            <summary>
            Component-wise 'subtract' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong4.Multiply(GenMathematics.Vectors.ulong4,GenMathematics.Vectors.ulong4)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong4.Multiply(GenMathematics.Vectors.ulong4,System.UInt64)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong4.Multiply(System.UInt64,GenMathematics.Vectors.ulong4)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong4.Multiply(GenMathematics.Vectors.ulong4@,GenMathematics.Vectors.ulong4@,GenMathematics.Vectors.ulong4@)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong4.Multiply(GenMathematics.Vectors.ulong4@,System.UInt64,GenMathematics.Vectors.ulong4@)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong4.Multiply(System.UInt64,GenMathematics.Vectors.ulong4@,GenMathematics.Vectors.ulong4@)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong4.Divide(GenMathematics.Vectors.ulong4,GenMathematics.Vectors.ulong4)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong4.Divide(GenMathematics.Vectors.ulong4,System.UInt64)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong4.Divide(System.UInt64,GenMathematics.Vectors.ulong4)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong4.Divide(GenMathematics.Vectors.ulong4@,GenMathematics.Vectors.ulong4@,GenMathematics.Vectors.ulong4@)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong4.Divide(GenMathematics.Vectors.ulong4@,System.UInt64,GenMathematics.Vectors.ulong4@)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong4.Divide(System.UInt64,GenMathematics.Vectors.ulong4@,GenMathematics.Vectors.ulong4@)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong4.Remainder(GenMathematics.Vectors.ulong4,GenMathematics.Vectors.ulong4)">
            <summary>
            Component-wise 'remainder' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong4.Remainder(GenMathematics.Vectors.ulong4,System.UInt64)">
            <summary>
            Component-wise 'remainder' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong4.Remainder(System.UInt64,GenMathematics.Vectors.ulong4)">
            <summary>
            Component-wise 'remainder' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong4.Remainder(GenMathematics.Vectors.ulong4@,GenMathematics.Vectors.ulong4@,GenMathematics.Vectors.ulong4@)">
            <summary>
            Component-wise 'remainder' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong4.Remainder(GenMathematics.Vectors.ulong4@,System.UInt64,GenMathematics.Vectors.ulong4@)">
            <summary>
            Component-wise 'remainder' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong4.Remainder(System.UInt64,GenMathematics.Vectors.ulong4@,GenMathematics.Vectors.ulong4@)">
            <summary>
            Component-wise 'remainder' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong4.And(GenMathematics.Vectors.ulong4,GenMathematics.Vectors.ulong4)">
            <summary>
            Component-wise 'and' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong4.And(GenMathematics.Vectors.ulong4,System.UInt64)">
            <summary>
            Component-wise 'and' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong4.And(System.UInt64,GenMathematics.Vectors.ulong4)">
            <summary>
            Component-wise 'and' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong4.And(GenMathematics.Vectors.ulong4@,GenMathematics.Vectors.ulong4@,GenMathematics.Vectors.ulong4@)">
            <summary>
            Component-wise 'and' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong4.And(GenMathematics.Vectors.ulong4@,System.UInt64,GenMathematics.Vectors.ulong4@)">
            <summary>
            Component-wise 'and' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong4.And(System.UInt64,GenMathematics.Vectors.ulong4@,GenMathematics.Vectors.ulong4@)">
            <summary>
            Component-wise 'and' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong4.Or(GenMathematics.Vectors.ulong4,GenMathematics.Vectors.ulong4)">
            <summary>
            Component-wise 'or' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong4.Or(GenMathematics.Vectors.ulong4,System.UInt64)">
            <summary>
            Component-wise 'or' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong4.Or(System.UInt64,GenMathematics.Vectors.ulong4)">
            <summary>
            Component-wise 'or' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong4.Or(GenMathematics.Vectors.ulong4@,GenMathematics.Vectors.ulong4@,GenMathematics.Vectors.ulong4@)">
            <summary>
            Component-wise 'or' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong4.Or(GenMathematics.Vectors.ulong4@,System.UInt64,GenMathematics.Vectors.ulong4@)">
            <summary>
            Component-wise 'or' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong4.Or(System.UInt64,GenMathematics.Vectors.ulong4@,GenMathematics.Vectors.ulong4@)">
            <summary>
            Component-wise 'or' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong4.Xor(GenMathematics.Vectors.ulong4,GenMathematics.Vectors.ulong4)">
            <summary>
            Component-wise 'xor' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong4.Xor(GenMathematics.Vectors.ulong4,System.UInt64)">
            <summary>
            Component-wise 'xor' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong4.Xor(System.UInt64,GenMathematics.Vectors.ulong4)">
            <summary>
            Component-wise 'xor' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong4.Xor(GenMathematics.Vectors.ulong4@,GenMathematics.Vectors.ulong4@,GenMathematics.Vectors.ulong4@)">
            <summary>
            Component-wise 'xor' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong4.Xor(GenMathematics.Vectors.ulong4@,System.UInt64,GenMathematics.Vectors.ulong4@)">
            <summary>
            Component-wise 'xor' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong4.Xor(System.UInt64,GenMathematics.Vectors.ulong4@,GenMathematics.Vectors.ulong4@)">
            <summary>
            Component-wise 'xor' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong4.ShiftLeft(GenMathematics.Vectors.ulong4,GenMathematics.Vectors.int4)">
            <summary>
            Component-wise 'shift-left' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong4.ShiftLeft(GenMathematics.Vectors.ulong4@,GenMathematics.Vectors.int4@,GenMathematics.Vectors.ulong4@)">
            <summary>
            Component-wise 'shift-left' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong4.ShiftRight(GenMathematics.Vectors.ulong4,GenMathematics.Vectors.int4)">
            <summary>
            Component-wise 'shift-righ' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong4.ShiftRight(GenMathematics.Vectors.ulong4@,GenMathematics.Vectors.int4@,GenMathematics.Vectors.ulong4@)">
            <summary>
            Component-wise 'shift-righ' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong4.Not(GenMathematics.Vectors.ulong4)">
            <summary>
            Component-wise 'not' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong4.Not(GenMathematics.Vectors.ulong4@,GenMathematics.Vectors.ulong4@)">
            <summary>
            Component-wise 'not' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong4.op_Addition(GenMathematics.Vectors.ulong4,GenMathematics.Vectors.ulong4)">
            <summary>
            Component-wise 'add' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong4.op_Addition(GenMathematics.Vectors.ulong4,System.UInt64)">
            <summary>
            Component-wise 'add' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong4.op_Addition(System.UInt64,GenMathematics.Vectors.ulong4)">
            <summary>
            Component-wise 'add' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong4.op_Subtraction(GenMathematics.Vectors.ulong4,GenMathematics.Vectors.ulong4)">
            <summary>
            Component-wise 'subtract' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong4.op_Subtraction(GenMathematics.Vectors.ulong4,System.UInt64)">
            <summary>
            Component-wise 'subtract' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong4.op_Subtraction(System.UInt64,GenMathematics.Vectors.ulong4)">
            <summary>
            Component-wise 'subtract' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong4.op_Multiply(GenMathematics.Vectors.ulong4,GenMathematics.Vectors.ulong4)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong4.op_Multiply(GenMathematics.Vectors.ulong4,System.UInt64)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong4.op_Multiply(System.UInt64,GenMathematics.Vectors.ulong4)">
            <summary>
            Component-wise 'multiply' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong4.op_Division(GenMathematics.Vectors.ulong4,GenMathematics.Vectors.ulong4)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong4.op_Division(GenMathematics.Vectors.ulong4,System.UInt64)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong4.op_Division(System.UInt64,GenMathematics.Vectors.ulong4)">
            <summary>
            Component-wise 'divide' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong4.op_Modulus(GenMathematics.Vectors.ulong4,GenMathematics.Vectors.ulong4)">
            <summary>
            Component-wise 'remainder' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong4.op_Modulus(GenMathematics.Vectors.ulong4,System.UInt64)">
            <summary>
            Component-wise 'remainder' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong4.op_Modulus(System.UInt64,GenMathematics.Vectors.ulong4)">
            <summary>
            Component-wise 'remainder' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong4.op_BitwiseAnd(GenMathematics.Vectors.ulong4,GenMathematics.Vectors.ulong4)">
            <summary>
            Component-wise 'and' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong4.op_BitwiseAnd(GenMathematics.Vectors.ulong4,System.UInt64)">
            <summary>
            Component-wise 'and' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong4.op_BitwiseAnd(System.UInt64,GenMathematics.Vectors.ulong4)">
            <summary>
            Component-wise 'and' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong4.op_BitwiseOr(GenMathematics.Vectors.ulong4,GenMathematics.Vectors.ulong4)">
            <summary>
            Component-wise 'or' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong4.op_BitwiseOr(GenMathematics.Vectors.ulong4,System.UInt64)">
            <summary>
            Component-wise 'or' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong4.op_BitwiseOr(System.UInt64,GenMathematics.Vectors.ulong4)">
            <summary>
            Component-wise 'or' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong4.op_ExclusiveOr(GenMathematics.Vectors.ulong4,GenMathematics.Vectors.ulong4)">
            <summary>
            Component-wise 'xor' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong4.op_ExclusiveOr(GenMathematics.Vectors.ulong4,System.UInt64)">
            <summary>
            Component-wise 'xor' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong4.op_ExclusiveOr(System.UInt64,GenMathematics.Vectors.ulong4)">
            <summary>
            Component-wise 'xor' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong4.op_LeftShift(GenMathematics.Vectors.ulong4,GenMathematics.Vectors.int4)">
            <summary>
            Component-wise 'shift-left' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong4.op_RightShift(GenMathematics.Vectors.ulong4,GenMathematics.Vectors.int4)">
            <summary>
            Component-wise 'shift-righ' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong4.op_OnesComplement(GenMathematics.Vectors.ulong4)">
            <summary>
            Component-wise 'not' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong4.LessThan(GenMathematics.Vectors.ulong4,GenMathematics.Vectors.ulong4)">
            <summary>
            Component-wise 'less than' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong4.LessThan(GenMathematics.Vectors.ulong4@,GenMathematics.Vectors.ulong4@,GenMathematics.Vectors.bool4@)">
            <summary>
            Component-wise 'less than' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong4.GreaterThan(GenMathematics.Vectors.ulong4,GenMathematics.Vectors.ulong4)">
            <summary>
            Component-wise 'greater than' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong4.GreaterThan(GenMathematics.Vectors.ulong4@,GenMathematics.Vectors.ulong4@,GenMathematics.Vectors.bool4@)">
            <summary>
            Component-wise 'greater than' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong4.LessThanEqual(GenMathematics.Vectors.ulong4,GenMathematics.Vectors.ulong4)">
            <summary>
            Component-wise 'less than or equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong4.LessThanEqual(GenMathematics.Vectors.ulong4@,GenMathematics.Vectors.ulong4@,GenMathematics.Vectors.bool4@)">
            <summary>
            Component-wise 'less than or equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong4.GreaterThanEqual(GenMathematics.Vectors.ulong4,GenMathematics.Vectors.ulong4)">
            <summary>
            Component-wise 'greater than or equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong4.GreaterThanEqual(GenMathematics.Vectors.ulong4@,GenMathematics.Vectors.ulong4@,GenMathematics.Vectors.bool4@)">
            <summary>
            Component-wise 'greater than or equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong4.Equal(GenMathematics.Vectors.ulong4,GenMathematics.Vectors.ulong4)">
            <summary>
            Component-wise 'equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong4.Equal(GenMathematics.Vectors.ulong4@,GenMathematics.Vectors.ulong4@,GenMathematics.Vectors.bool4@)">
            <summary>
            Component-wise 'equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong4.NotEqual(GenMathematics.Vectors.ulong4,GenMathematics.Vectors.ulong4)">
            <summary>
            Component-wise 'not equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong4.NotEqual(GenMathematics.Vectors.ulong4@,GenMathematics.Vectors.ulong4@,GenMathematics.Vectors.bool4@)">
            <summary>
            Component-wise 'not equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong4.op_Implicit(System.UInt64)~GenMathematics.Vectors.ulong4">
            <summary>
            Creates a vector by filling all components with the value
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong4.op_Explicit(GenMathematics.Vectors.sbyte4)~GenMathematics.Vectors.ulong4">
            <summary>
            Converts sbyte4 to ulong4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong4.op_Explicit(GenMathematics.Vectors.short4)~GenMathematics.Vectors.ulong4">
            <summary>
            Converts short4 to ulong4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong4.op_Explicit(GenMathematics.Vectors.int4)~GenMathematics.Vectors.ulong4">
            <summary>
            Converts int4 to ulong4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong4.op_Explicit(GenMathematics.Vectors.long4)~GenMathematics.Vectors.ulong4">
            <summary>
            Converts long4 to ulong4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong4.op_Explicit(GenMathematics.Vectors.half4)~GenMathematics.Vectors.ulong4">
            <summary>
            Converts half4 to ulong4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong4.op_Explicit(GenMathematics.Vectors.float4)~GenMathematics.Vectors.ulong4">
            <summary>
            Converts float4 to ulong4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong4.op_Explicit(GenMathematics.Vectors.double4)~GenMathematics.Vectors.ulong4">
            <summary>
            Converts double4 to ulong4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong4.op_Implicit(GenMathematics.Vectors.byte4)~GenMathematics.Vectors.ulong4">
            <summary>
            Converts byte4 to ulong4
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong4.op_Implicit(GenMathematics.Vectors.ushort4)~GenMathematics.Vectors.ulong4">
            <summary>
            Converts ushort4 to ulong4
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong4.op_Implicit(GenMathematics.Vectors.uint4)~GenMathematics.Vectors.ulong4">
            <summary>
            Converts uint4 to ulong4
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong4.op_LessThan(GenMathematics.Vectors.ulong4,GenMathematics.Vectors.ulong4)">
            <summary>
            Component-wise 'less than' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong4.op_GreaterThan(GenMathematics.Vectors.ulong4,GenMathematics.Vectors.ulong4)">
            <summary>
            Component-wise 'greater than' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong4.op_LessThanOrEqual(GenMathematics.Vectors.ulong4,GenMathematics.Vectors.ulong4)">
            <summary>
            Component-wise 'less than or equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong4.op_GreaterThanOrEqual(GenMathematics.Vectors.ulong4,GenMathematics.Vectors.ulong4)">
            <summary>
            Component-wise 'greater than or equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong4.op_Equality(GenMathematics.Vectors.ulong4,GenMathematics.Vectors.ulong4)">
            <summary>
            Component-wise 'equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ulong4.op_Inequality(GenMathematics.Vectors.ulong4,GenMathematics.Vectors.ulong4)">
            <summary>
            Component-wise 'not equal' operation
            </summary>
        </member>
        <member name="T:GenMathematics.Vectors.ushort2">
            <summary>
            Vector of size 2 of type <see cref="T:System.UInt16"/>
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.ushort2.Zero">
            <summary>
            Vector with zero in all components
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.ushort2.One">
            <summary>
            Vector with unit in all components
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.ushort2.UnitX">
            <summary>
            A vector with unit in the component 'x' and zeroes in the remaining components
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.ushort2.UnitY">
            <summary>
            A vector with unit in the component 'y' and zeroes in the remaining components
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.ushort2.x">
            <summary>
            Component 'x' of the vector
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.ushort2.y">
            <summary>
            Component 'y' of the vector
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort2.xx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort2.yx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort2.yy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ushort2.#ctor(System.UInt16)">
            <summary>
            Constructs a vector by filling all components with the value
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ushort2.#ctor(System.UInt16,System.UInt16)">
            <summary>
            Constructs a vector from component values
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort2.Item(System.Int32)">
            <summary>
            Returns the vector component by index
            </summary>
            <param name="index">Index within [0,1]</param>
            <exception cref="T:System.IndexOutOfRangeException">Exception if the index is outside the vector size</exception>
        </member>
        <member name="M:GenMathematics.Vectors.ushort2.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Vectors.ushort2.Equals(GenMathematics.Vectors.ushort2)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Vectors.ushort2.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Vectors.ushort2.CompareTo(GenMathematics.Vectors.ushort2)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Vectors.ushort2.ToString">
            <summary>
            Returns the object's state information as a string
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ushort2.LessThan(GenMathematics.Vectors.ushort2,GenMathematics.Vectors.ushort2)">
            <summary>
            Component-wise 'less than' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ushort2.LessThan(GenMathematics.Vectors.ushort2@,GenMathematics.Vectors.ushort2@,GenMathematics.Vectors.bool2@)">
            <summary>
            Component-wise 'less than' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ushort2.GreaterThan(GenMathematics.Vectors.ushort2,GenMathematics.Vectors.ushort2)">
            <summary>
            Component-wise 'greater than' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ushort2.GreaterThan(GenMathematics.Vectors.ushort2@,GenMathematics.Vectors.ushort2@,GenMathematics.Vectors.bool2@)">
            <summary>
            Component-wise 'greater than' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ushort2.LessThanEqual(GenMathematics.Vectors.ushort2,GenMathematics.Vectors.ushort2)">
            <summary>
            Component-wise 'less than or equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ushort2.LessThanEqual(GenMathematics.Vectors.ushort2@,GenMathematics.Vectors.ushort2@,GenMathematics.Vectors.bool2@)">
            <summary>
            Component-wise 'less than or equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ushort2.GreaterThanEqual(GenMathematics.Vectors.ushort2,GenMathematics.Vectors.ushort2)">
            <summary>
            Component-wise 'greater than or equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ushort2.GreaterThanEqual(GenMathematics.Vectors.ushort2@,GenMathematics.Vectors.ushort2@,GenMathematics.Vectors.bool2@)">
            <summary>
            Component-wise 'greater than or equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ushort2.Equal(GenMathematics.Vectors.ushort2,GenMathematics.Vectors.ushort2)">
            <summary>
            Component-wise 'equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ushort2.Equal(GenMathematics.Vectors.ushort2@,GenMathematics.Vectors.ushort2@,GenMathematics.Vectors.bool2@)">
            <summary>
            Component-wise 'equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ushort2.NotEqual(GenMathematics.Vectors.ushort2,GenMathematics.Vectors.ushort2)">
            <summary>
            Component-wise 'not equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ushort2.NotEqual(GenMathematics.Vectors.ushort2@,GenMathematics.Vectors.ushort2@,GenMathematics.Vectors.bool2@)">
            <summary>
            Component-wise 'not equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ushort2.op_Implicit(System.UInt16)~GenMathematics.Vectors.ushort2">
            <summary>
            Creates a vector by filling all components with the value
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ushort2.op_Explicit(GenMathematics.Vectors.sbyte2)~GenMathematics.Vectors.ushort2">
            <summary>
            Converts sbyte2 to ushort2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ushort2.op_Explicit(GenMathematics.Vectors.short2)~GenMathematics.Vectors.ushort2">
            <summary>
            Converts short2 to ushort2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ushort2.op_Explicit(GenMathematics.Vectors.int2)~GenMathematics.Vectors.ushort2">
            <summary>
            Converts int2 to ushort2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ushort2.op_Explicit(GenMathematics.Vectors.uint2)~GenMathematics.Vectors.ushort2">
            <summary>
            Converts uint2 to ushort2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ushort2.op_Explicit(GenMathematics.Vectors.long2)~GenMathematics.Vectors.ushort2">
            <summary>
            Converts long2 to ushort2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ushort2.op_Explicit(GenMathematics.Vectors.ulong2)~GenMathematics.Vectors.ushort2">
            <summary>
            Converts ulong2 to ushort2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ushort2.op_Explicit(GenMathematics.Vectors.half2)~GenMathematics.Vectors.ushort2">
            <summary>
            Converts half2 to ushort2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ushort2.op_Explicit(GenMathematics.Vectors.float2)~GenMathematics.Vectors.ushort2">
            <summary>
            Converts float2 to ushort2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ushort2.op_Explicit(GenMathematics.Vectors.double2)~GenMathematics.Vectors.ushort2">
            <summary>
            Converts double2 to ushort2 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ushort2.op_Implicit(GenMathematics.Vectors.byte2)~GenMathematics.Vectors.ushort2">
            <summary>
            Converts byte2 to ushort2
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ushort2.op_LessThan(GenMathematics.Vectors.ushort2,GenMathematics.Vectors.ushort2)">
            <summary>
            Component-wise 'less than' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ushort2.op_GreaterThan(GenMathematics.Vectors.ushort2,GenMathematics.Vectors.ushort2)">
            <summary>
            Component-wise 'greater than' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ushort2.op_LessThanOrEqual(GenMathematics.Vectors.ushort2,GenMathematics.Vectors.ushort2)">
            <summary>
            Component-wise 'less than or equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ushort2.op_GreaterThanOrEqual(GenMathematics.Vectors.ushort2,GenMathematics.Vectors.ushort2)">
            <summary>
            Component-wise 'greater than or equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ushort2.op_Equality(GenMathematics.Vectors.ushort2,GenMathematics.Vectors.ushort2)">
            <summary>
            Component-wise 'equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ushort2.op_Inequality(GenMathematics.Vectors.ushort2,GenMathematics.Vectors.ushort2)">
            <summary>
            Component-wise 'not equal' operation
            </summary>
        </member>
        <member name="T:GenMathematics.Vectors.ushort3">
            <summary>
            Vector of size 3 of type <see cref="T:System.UInt16"/>
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.ushort3.Zero">
            <summary>
            Vector with zero in all components
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.ushort3.One">
            <summary>
            Vector with unit in all components
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.ushort3.UnitX">
            <summary>
            A vector with unit in the component 'x' and zeroes in the remaining components
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.ushort3.UnitY">
            <summary>
            A vector with unit in the component 'y' and zeroes in the remaining components
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.ushort3.UnitZ">
            <summary>
            A vector with unit in the component 'z' and zeroes in the remaining components
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.ushort3.x">
            <summary>
            Component 'x' of the vector
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.ushort3.y">
            <summary>
            Component 'y' of the vector
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.ushort3.z">
            <summary>
            Component 'z' of the vector
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort3.xx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort3.xy">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort3.xz">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort3.yx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort3.yy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort3.yz">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort3.zx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort3.zy">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort3.zz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort3.xxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort3.xxy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort3.xxz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort3.xyx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort3.xyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort3.xzx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort3.xzy">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort3.xzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort3.yxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort3.yxy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort3.yxz">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort3.yyx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort3.yyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort3.yyz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort3.yzx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort3.yzy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort3.yzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort3.zxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort3.zxy">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort3.zxz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort3.zyx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort3.zyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort3.zyz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort3.zzx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort3.zzy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort3.zzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ushort3.#ctor(System.UInt16)">
            <summary>
            Constructs a vector by filling all components with the value
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ushort3.#ctor(System.UInt16,GenMathematics.Vectors.ushort2)">
            <summary>
            Constructs a vector from component values
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ushort3.#ctor(System.UInt16,System.UInt16,System.UInt16)">
            <summary>
            Constructs a vector from component values
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ushort3.#ctor(GenMathematics.Vectors.ushort2,System.UInt16)">
            <summary>
            Constructs a vector from component values
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort3.Item(System.Int32)">
            <summary>
            Returns the vector component by index
            </summary>
            <param name="index">Index within [0,2]</param>
            <exception cref="T:System.IndexOutOfRangeException">Exception if the index is outside the vector size</exception>
        </member>
        <member name="M:GenMathematics.Vectors.ushort3.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Vectors.ushort3.Equals(GenMathematics.Vectors.ushort3)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Vectors.ushort3.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Vectors.ushort3.CompareTo(GenMathematics.Vectors.ushort3)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Vectors.ushort3.ToString">
            <summary>
            Returns the object's state information as a string
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ushort3.LessThan(GenMathematics.Vectors.ushort3,GenMathematics.Vectors.ushort3)">
            <summary>
            Component-wise 'less than' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ushort3.LessThan(GenMathematics.Vectors.ushort3@,GenMathematics.Vectors.ushort3@,GenMathematics.Vectors.bool3@)">
            <summary>
            Component-wise 'less than' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ushort3.GreaterThan(GenMathematics.Vectors.ushort3,GenMathematics.Vectors.ushort3)">
            <summary>
            Component-wise 'greater than' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ushort3.GreaterThan(GenMathematics.Vectors.ushort3@,GenMathematics.Vectors.ushort3@,GenMathematics.Vectors.bool3@)">
            <summary>
            Component-wise 'greater than' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ushort3.LessThanEqual(GenMathematics.Vectors.ushort3,GenMathematics.Vectors.ushort3)">
            <summary>
            Component-wise 'less than or equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ushort3.LessThanEqual(GenMathematics.Vectors.ushort3@,GenMathematics.Vectors.ushort3@,GenMathematics.Vectors.bool3@)">
            <summary>
            Component-wise 'less than or equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ushort3.GreaterThanEqual(GenMathematics.Vectors.ushort3,GenMathematics.Vectors.ushort3)">
            <summary>
            Component-wise 'greater than or equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ushort3.GreaterThanEqual(GenMathematics.Vectors.ushort3@,GenMathematics.Vectors.ushort3@,GenMathematics.Vectors.bool3@)">
            <summary>
            Component-wise 'greater than or equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ushort3.Equal(GenMathematics.Vectors.ushort3,GenMathematics.Vectors.ushort3)">
            <summary>
            Component-wise 'equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ushort3.Equal(GenMathematics.Vectors.ushort3@,GenMathematics.Vectors.ushort3@,GenMathematics.Vectors.bool3@)">
            <summary>
            Component-wise 'equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ushort3.NotEqual(GenMathematics.Vectors.ushort3,GenMathematics.Vectors.ushort3)">
            <summary>
            Component-wise 'not equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ushort3.NotEqual(GenMathematics.Vectors.ushort3@,GenMathematics.Vectors.ushort3@,GenMathematics.Vectors.bool3@)">
            <summary>
            Component-wise 'not equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ushort3.op_Implicit(System.UInt16)~GenMathematics.Vectors.ushort3">
            <summary>
            Creates a vector by filling all components with the value
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ushort3.op_Explicit(GenMathematics.Vectors.sbyte3)~GenMathematics.Vectors.ushort3">
            <summary>
            Converts sbyte3 to ushort3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ushort3.op_Explicit(GenMathematics.Vectors.short3)~GenMathematics.Vectors.ushort3">
            <summary>
            Converts short3 to ushort3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ushort3.op_Explicit(GenMathematics.Vectors.int3)~GenMathematics.Vectors.ushort3">
            <summary>
            Converts int3 to ushort3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ushort3.op_Explicit(GenMathematics.Vectors.uint3)~GenMathematics.Vectors.ushort3">
            <summary>
            Converts uint3 to ushort3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ushort3.op_Explicit(GenMathematics.Vectors.long3)~GenMathematics.Vectors.ushort3">
            <summary>
            Converts long3 to ushort3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ushort3.op_Explicit(GenMathematics.Vectors.ulong3)~GenMathematics.Vectors.ushort3">
            <summary>
            Converts ulong3 to ushort3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ushort3.op_Explicit(GenMathematics.Vectors.half3)~GenMathematics.Vectors.ushort3">
            <summary>
            Converts half3 to ushort3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ushort3.op_Explicit(GenMathematics.Vectors.float3)~GenMathematics.Vectors.ushort3">
            <summary>
            Converts float3 to ushort3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ushort3.op_Explicit(GenMathematics.Vectors.double3)~GenMathematics.Vectors.ushort3">
            <summary>
            Converts double3 to ushort3 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ushort3.op_Implicit(GenMathematics.Vectors.byte3)~GenMathematics.Vectors.ushort3">
            <summary>
            Converts byte3 to ushort3
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ushort3.op_LessThan(GenMathematics.Vectors.ushort3,GenMathematics.Vectors.ushort3)">
            <summary>
            Component-wise 'less than' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ushort3.op_GreaterThan(GenMathematics.Vectors.ushort3,GenMathematics.Vectors.ushort3)">
            <summary>
            Component-wise 'greater than' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ushort3.op_LessThanOrEqual(GenMathematics.Vectors.ushort3,GenMathematics.Vectors.ushort3)">
            <summary>
            Component-wise 'less than or equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ushort3.op_GreaterThanOrEqual(GenMathematics.Vectors.ushort3,GenMathematics.Vectors.ushort3)">
            <summary>
            Component-wise 'greater than or equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ushort3.op_Equality(GenMathematics.Vectors.ushort3,GenMathematics.Vectors.ushort3)">
            <summary>
            Component-wise 'equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ushort3.op_Inequality(GenMathematics.Vectors.ushort3,GenMathematics.Vectors.ushort3)">
            <summary>
            Component-wise 'not equal' operation
            </summary>
        </member>
        <member name="T:GenMathematics.Vectors.ushort4">
            <summary>
            Vector of size 4 of type <see cref="T:System.UInt16"/>
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.ushort4.Zero">
            <summary>
            Vector with zero in all components
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.ushort4.One">
            <summary>
            Vector with unit in all components
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.ushort4.UnitX">
            <summary>
            A vector with unit in the component 'x' and zeroes in the remaining components
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.ushort4.UnitY">
            <summary>
            A vector with unit in the component 'y' and zeroes in the remaining components
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.ushort4.UnitZ">
            <summary>
            A vector with unit in the component 'z' and zeroes in the remaining components
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.ushort4.UnitW">
            <summary>
            A vector with unit in the component 'w' and zeroes in the remaining components
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.ushort4.x">
            <summary>
            Component 'x' of the vector
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.ushort4.y">
            <summary>
            Component 'y' of the vector
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.ushort4.z">
            <summary>
            Component 'z' of the vector
            </summary>
        </member>
        <member name="F:GenMathematics.Vectors.ushort4.w">
            <summary>
            Component 'w' of the vector
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.xx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.xy">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.xz">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.xw">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.yx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.yy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.yz">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.yw">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.zx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.zy">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.zz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.zw">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.wx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.wy">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.wz">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.ww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.xxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.xxy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.xxz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.xxw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.xyx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.xyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.xyz">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.xyw">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.xzx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.xzy">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.xzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.xzw">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.xwx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.xwy">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.xwz">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.xww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.yxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.yxy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.yxz">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.yxw">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.yyx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.yyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.yyz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.yyw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.yzx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.yzy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.yzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.yzw">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.ywx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.ywy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.ywz">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.yww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.zxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.zxy">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.zxz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.zxw">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.zyx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.zyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.zyz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.zyw">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.zzx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.zzy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.zzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.zzw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.zwx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.zwy">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.zwz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.zww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.wxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.wxy">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.wxz">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.wxw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.wyx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.wyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.wyz">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.wyw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.wzx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.wzy">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.wzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.wzw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.wwx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.wwy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.wwz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.www">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.xxxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.xxxy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.xxxz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.xxxw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.xxyx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.xxyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.xxyz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.xxyw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.xxzx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.xxzy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.xxzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.xxzw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.xxwx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.xxwy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.xxwz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.xxww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.xyxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.xyxy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.xyxz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.xyxw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.xyyx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.xyyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.xyyz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.xyyw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.xyzx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.xyzy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.xyzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.xywx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.xywy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.xywz">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.xyww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.xzxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.xzxy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.xzxz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.xzxw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.xzyx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.xzyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.xzyz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.xzyw">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.xzzx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.xzzy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.xzzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.xzzw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.xzwx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.xzwy">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.xzwz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.xzww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.xwxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.xwxy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.xwxz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.xwxw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.xwyx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.xwyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.xwyz">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.xwyw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.xwzx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.xwzy">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.xwzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.xwzw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.xwwx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.xwwy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.xwwz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.xwww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.yxxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.yxxy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.yxxz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.yxxw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.yxyx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.yxyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.yxyz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.yxyw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.yxzx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.yxzy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.yxzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.yxzw">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.yxwx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.yxwy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.yxwz">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.yxww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.yyxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.yyxy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.yyxz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.yyxw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.yyyx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.yyyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.yyyz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.yyyw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.yyzx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.yyzy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.yyzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.yyzw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.yywx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.yywy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.yywz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.yyww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.yzxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.yzxy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.yzxz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.yzxw">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.yzyx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.yzyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.yzyz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.yzyw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.yzzx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.yzzy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.yzzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.yzzw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.yzwx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.yzwy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.yzwz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.yzww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.ywxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.ywxy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.ywxz">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.ywxw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.ywyx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.ywyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.ywyz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.ywyw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.ywzx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.ywzy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.ywzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.ywzw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.ywwx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.ywwy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.ywwz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.ywww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.zxxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.zxxy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.zxxz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.zxxw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.zxyx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.zxyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.zxyz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.zxyw">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.zxzx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.zxzy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.zxzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.zxzw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.zxwx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.zxwy">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.zxwz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.zxww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.zyxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.zyxy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.zyxz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.zyxw">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.zyyx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.zyyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.zyyz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.zyyw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.zyzx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.zyzy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.zyzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.zyzw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.zywx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.zywy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.zywz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.zyww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.zzxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.zzxy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.zzxz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.zzxw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.zzyx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.zzyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.zzyz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.zzyw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.zzzx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.zzzy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.zzzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.zzzw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.zzwx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.zzwy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.zzwz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.zzww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.zwxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.zwxy">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.zwxz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.zwxw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.zwyx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.zwyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.zwyz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.zwyw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.zwzx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.zwzy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.zwzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.zwzw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.zwwx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.zwwy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.zwwz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.zwww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.wxxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.wxxy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.wxxz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.wxxw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.wxyx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.wxyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.wxyz">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.wxyw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.wxzx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.wxzy">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.wxzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.wxzw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.wxwx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.wxwy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.wxwz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.wxww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.wyxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.wyxy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.wyxz">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.wyxw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.wyyx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.wyyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.wyyz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.wyyw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.wyzx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.wyzy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.wyzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.wyzw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.wywx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.wywy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.wywz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.wyww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.wzxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.wzxy">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.wzxz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.wzxw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.wzyx">
            <summary>
            Swizzled access to components
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.wzyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.wzyz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.wzyw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.wzzx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.wzzy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.wzzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.wzzw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.wzwx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.wzwy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.wzwz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.wzww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.wwxx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.wwxy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.wwxz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.wwxw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.wwyx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.wwyy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.wwyz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.wwyw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.wwzx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.wwzy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.wwzz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.wwzw">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.wwwx">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.wwwy">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.wwwz">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.wwww">
            <summary>
            Swizzled access to components. When assigning a value to the same component, only the most recent value will be applied. For example, the operation "value.xx = vector;" will assign vector.y to value.x
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ushort4.#ctor(System.UInt16)">
            <summary>
            Constructs a vector by filling all components with the value
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ushort4.#ctor(System.UInt16,GenMathematics.Vectors.ushort3)">
            <summary>
            Constructs a vector from component values
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ushort4.#ctor(System.UInt16,GenMathematics.Vectors.ushort2,System.UInt16)">
            <summary>
            Constructs a vector from component values
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ushort4.#ctor(System.UInt16,System.UInt16,GenMathematics.Vectors.ushort2)">
            <summary>
            Constructs a vector from component values
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ushort4.#ctor(System.UInt16,System.UInt16,System.UInt16,System.UInt16)">
            <summary>
            Constructs a vector from component values
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ushort4.#ctor(GenMathematics.Vectors.ushort2,GenMathematics.Vectors.ushort2)">
            <summary>
            Constructs a vector from component values
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ushort4.#ctor(GenMathematics.Vectors.ushort2,System.UInt16,System.UInt16)">
            <summary>
            Constructs a vector from component values
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ushort4.#ctor(GenMathematics.Vectors.ushort3,System.UInt16)">
            <summary>
            Constructs a vector from component values
            </summary>
        </member>
        <member name="P:GenMathematics.Vectors.ushort4.Item(System.Int32)">
            <summary>
            Returns the vector component by index
            </summary>
            <param name="index">Index within [0,3]</param>
            <exception cref="T:System.IndexOutOfRangeException">Exception if the index is outside the vector size</exception>
        </member>
        <member name="M:GenMathematics.Vectors.ushort4.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Vectors.ushort4.Equals(GenMathematics.Vectors.ushort4)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Vectors.ushort4.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Vectors.ushort4.CompareTo(GenMathematics.Vectors.ushort4)">
            <inheritdoc/>
        </member>
        <member name="M:GenMathematics.Vectors.ushort4.ToString">
            <summary>
            Returns the object's state information as a string
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ushort4.LessThan(GenMathematics.Vectors.ushort4,GenMathematics.Vectors.ushort4)">
            <summary>
            Component-wise 'less than' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ushort4.LessThan(GenMathematics.Vectors.ushort4@,GenMathematics.Vectors.ushort4@,GenMathematics.Vectors.bool4@)">
            <summary>
            Component-wise 'less than' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ushort4.GreaterThan(GenMathematics.Vectors.ushort4,GenMathematics.Vectors.ushort4)">
            <summary>
            Component-wise 'greater than' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ushort4.GreaterThan(GenMathematics.Vectors.ushort4@,GenMathematics.Vectors.ushort4@,GenMathematics.Vectors.bool4@)">
            <summary>
            Component-wise 'greater than' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ushort4.LessThanEqual(GenMathematics.Vectors.ushort4,GenMathematics.Vectors.ushort4)">
            <summary>
            Component-wise 'less than or equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ushort4.LessThanEqual(GenMathematics.Vectors.ushort4@,GenMathematics.Vectors.ushort4@,GenMathematics.Vectors.bool4@)">
            <summary>
            Component-wise 'less than or equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ushort4.GreaterThanEqual(GenMathematics.Vectors.ushort4,GenMathematics.Vectors.ushort4)">
            <summary>
            Component-wise 'greater than or equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ushort4.GreaterThanEqual(GenMathematics.Vectors.ushort4@,GenMathematics.Vectors.ushort4@,GenMathematics.Vectors.bool4@)">
            <summary>
            Component-wise 'greater than or equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ushort4.Equal(GenMathematics.Vectors.ushort4,GenMathematics.Vectors.ushort4)">
            <summary>
            Component-wise 'equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ushort4.Equal(GenMathematics.Vectors.ushort4@,GenMathematics.Vectors.ushort4@,GenMathematics.Vectors.bool4@)">
            <summary>
            Component-wise 'equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ushort4.NotEqual(GenMathematics.Vectors.ushort4,GenMathematics.Vectors.ushort4)">
            <summary>
            Component-wise 'not equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ushort4.NotEqual(GenMathematics.Vectors.ushort4@,GenMathematics.Vectors.ushort4@,GenMathematics.Vectors.bool4@)">
            <summary>
            Component-wise 'not equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ushort4.op_Implicit(System.UInt16)~GenMathematics.Vectors.ushort4">
            <summary>
            Creates a vector by filling all components with the value
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ushort4.op_Explicit(GenMathematics.Vectors.sbyte4)~GenMathematics.Vectors.ushort4">
            <summary>
            Converts sbyte4 to ushort4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ushort4.op_Explicit(GenMathematics.Vectors.short4)~GenMathematics.Vectors.ushort4">
            <summary>
            Converts short4 to ushort4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ushort4.op_Explicit(GenMathematics.Vectors.int4)~GenMathematics.Vectors.ushort4">
            <summary>
            Converts int4 to ushort4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ushort4.op_Explicit(GenMathematics.Vectors.uint4)~GenMathematics.Vectors.ushort4">
            <summary>
            Converts uint4 to ushort4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ushort4.op_Explicit(GenMathematics.Vectors.long4)~GenMathematics.Vectors.ushort4">
            <summary>
            Converts long4 to ushort4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ushort4.op_Explicit(GenMathematics.Vectors.ulong4)~GenMathematics.Vectors.ushort4">
            <summary>
            Converts ulong4 to ushort4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ushort4.op_Explicit(GenMathematics.Vectors.half4)~GenMathematics.Vectors.ushort4">
            <summary>
            Converts half4 to ushort4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ushort4.op_Explicit(GenMathematics.Vectors.float4)~GenMathematics.Vectors.ushort4">
            <summary>
            Converts float4 to ushort4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ushort4.op_Explicit(GenMathematics.Vectors.double4)~GenMathematics.Vectors.ushort4">
            <summary>
            Converts double4 to ushort4 with possible loss of information
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ushort4.op_Implicit(GenMathematics.Vectors.byte4)~GenMathematics.Vectors.ushort4">
            <summary>
            Converts byte4 to ushort4
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ushort4.op_LessThan(GenMathematics.Vectors.ushort4,GenMathematics.Vectors.ushort4)">
            <summary>
            Component-wise 'less than' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ushort4.op_GreaterThan(GenMathematics.Vectors.ushort4,GenMathematics.Vectors.ushort4)">
            <summary>
            Component-wise 'greater than' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ushort4.op_LessThanOrEqual(GenMathematics.Vectors.ushort4,GenMathematics.Vectors.ushort4)">
            <summary>
            Component-wise 'less than or equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ushort4.op_GreaterThanOrEqual(GenMathematics.Vectors.ushort4,GenMathematics.Vectors.ushort4)">
            <summary>
            Component-wise 'greater than or equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ushort4.op_Equality(GenMathematics.Vectors.ushort4,GenMathematics.Vectors.ushort4)">
            <summary>
            Component-wise 'equal' operation
            </summary>
        </member>
        <member name="M:GenMathematics.Vectors.ushort4.op_Inequality(GenMathematics.Vectors.ushort4,GenMathematics.Vectors.ushort4)">
            <summary>
            Component-wise 'not equal' operation
            </summary>
        </member>
    </members>
</doc>
