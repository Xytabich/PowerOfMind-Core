{
  "version": 330,
  "versionPos": 9,
  "code": "#version  core\r\n#extension GL_ARB_explicit_attrib_location: enable\r\n\r\n \r\nlayout(location = 0) in vec3 vertexPositionIn;\r\nlayout(location = 1) in vec2 uvIn;\r\nlayout(location = 2) in vec4 colorIn;\r\nlayout(location = 3) in int flags;\r\n\r\nuniform vec4 rgbaTint;\r\nuniform vec3 rgbaAmbientIn;\r\nuniform vec4 rgbaLightIn;\r\nuniform vec4 rgbaGlowIn;\r\nuniform vec4 rgbaFogIn;\r\nuniform int extraGlow;\r\nuniform float fogMinIn;\r\nuniform float fogDensityIn;\r\n\r\nuniform mat4 projectionMatrix;\r\nuniform mat4 viewMatrix;\r\nuniform mat4 modelMatrix;\r\n\r\nuniform int dontWarpVertices;\r\nuniform int addRenderFlags;\r\nuniform float extraZOffset;\r\n\r\nout vec2 uv;\r\nout vec4 color;\r\nout vec4 rgbaFog;\r\nout vec4 rgbaGlow;\r\nout float fogAmount;\r\nout vec4 camPos;\r\nout vec4 worldPos;\r\nflat out int renderFlags;\r\n\r\nout vec3 normal;\r\n#if SSAOLEVEL \u003E 0\r\nout vec4 gnormal;\r\n#endif\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nvoid main(void)\r\n{\r\n\tworldPos = modelMatrix * vec4(vertexPositionIn, 1.0);\r\n\t\r\n\tif (dontWarpVertices == 0) {\r\n\t\tworldPos = applyVertexWarping(flags | addRenderFlags, worldPos);\r\n\t\tworldPos = applyGlobalWarping(worldPos);\r\n\t}\r\n\t\r\n\tcamPos = viewMatrix * worldPos;\r\n\t\r\n\tuv = uvIn;\r\n\tint glow = min(255, extraGlow \u002B (flags \u0026 GlowLevelBitMask));\r\n\trenderFlags = glow | (flags \u0026 ~GlowLevelBitMask);\r\n\trgbaGlow = rgbaGlowIn;\r\n\t\r\n\tcolor = rgbaTint * applyLight(rgbaAmbientIn, rgbaLightIn, renderFlags, camPos) * colorIn;\r\n\tcolor.rgb = mix(color.rgb, rgbaGlowIn.rgb, glow / 255.0 * rgbaGlowIn.a);\r\n\r\n\t \tcolor.a *= clamp(20 * (1.10 - length(worldPos.xz) / viewDistance) - 5, -1, 1);\r\n\r\n\trgbaFog = rgbaFogIn;\r\n\tgl_Position = projectionMatrix * camPos;\r\n\tcalcShadowMapCoords(viewMatrix, worldPos);\r\n\t\r\n\tfogAmount = getFogLevel(worldPos, fogMinIn, fogDensityIn);\r\n\t\r\n\tgl_Position.w \u002B= extraZOffset;\r\n\t\r\n\tnormal = unpackNormal(flags);\r\n\tnormal = normalize((modelMatrix * vec4(normal.x, normal.y, normal.z, 0)).xyz);\r\n\t\r\n\t#if SSAOLEVEL \u003E 0\r\n\t\tgnormal = viewMatrix * vec4(normal, 0);\r\n\t#endif\r\n}",
  "inputs": [
    {
      "location": 0,
      "name": "vertexPositionIn",
      "alias": "POSITION",
      "type": "float",
      "size": 3
    },
    {
      "location": 1,
      "name": "uvIn",
      "type": "float",
      "size": 2
    },
    {
      "location": 2,
      "name": "colorIn",
      "type": "float",
      "size": 4
    },
    {
      "location": 3,
      "name": "flags",
      "type": "int",
      "size": 1
    }
  ],
  "uniforms": [
    {
      "name": "rgbaTint",
      "type": "float",
      "size": 4
    },
    {
      "name": "rgbaAmbientIn",
      "type": "float",
      "size": 3
    },
    {
      "name": "rgbaLightIn",
      "type": "float",
      "size": 4
    },
    {
      "name": "rgbaGlowIn",
      "type": "float",
      "size": 4
    },
    {
      "name": "rgbaFogIn",
      "type": "float",
      "size": 4
    },
    {
      "name": "extraGlow",
      "type": "int",
      "size": 1
    },
    {
      "name": "fogMinIn",
      "type": "float",
      "size": 1
    },
    {
      "name": "fogDensityIn",
      "type": "float",
      "size": 1
    },
    {
      "name": "projectionMatrix",
      "type": "float",
      "size": 16
    },
    {
      "name": "viewMatrix",
      "type": "float",
      "size": 16
    },
    {
      "name": "modelMatrix",
      "type": "float",
      "size": 16
    },
    {
      "name": "dontWarpVertices",
      "type": "int",
      "size": 1
    },
    {
      "name": "addRenderFlags",
      "type": "int",
      "size": 1
    },
    {
      "name": "extraZOffset",
      "type": "float",
      "size": 1
    }
  ],
  "includes": [
    {
      "item1": "shadowcoords.vsh",
      "item2": 852
    },
    {
      "item1": "fogandlight.vsh",
      "item2": 854
    },
    {
      "item1": "vertexwarp.vsh",
      "item2": 856
    }
  ]
}